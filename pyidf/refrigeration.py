from collections import OrderedDict

class RefrigerationCase(object):
    """ Corresponds to IDD object `Refrigeration:Case`
        The Refrigeration Case object works in conjunction with a compressor rack, a
        refrigeration system, or a secondary loop to simulate the performance of a
        refrigerated case system. The object calculates the energy use for lights, fans and
        anti-sweat heaters and accounts for the sensible and latent heat exchange with the
        surrounding environment (termed "case credits") which impacts the temperature
        and humidity in the zone where the case is located.
    
    """
    internal_name = "Refrigeration:Case"
    field_count = 35
    required_fields = ["Name", "Zone Name", "Latent Case Credit Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:Case`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Rated Ambient Temperature"] = None
        self._data["Rated Ambient Relative Humidity"] = None
        self._data["Rated Total Cooling Capacity per Unit Length"] = None
        self._data["Rated Latent Heat Ratio"] = None
        self._data["Rated Runtime Fraction"] = None
        self._data["Case Length"] = None
        self._data["Case Operating Temperature"] = None
        self._data["Latent Case Credit Curve Type"] = None
        self._data["Latent Case Credit Curve Name"] = None
        self._data["Standard Case Fan Power per Unit Length"] = None
        self._data["Operating Case Fan Power per Unit Length"] = None
        self._data["Standard Case Lighting Power per Unit Length"] = None
        self._data["Installed Case Lighting Power per Unit Length"] = None
        self._data["Case Lighting Schedule Name"] = None
        self._data["Fraction of Lighting Energy to Case"] = None
        self._data["Case Anti-Sweat Heater Power per Unit Length"] = None
        self._data["Minimum Anti-Sweat Heater Power per Unit Length"] = None
        self._data["Anti-Sweat Heater Control Type"] = None
        self._data["Humidity at Zero Anti-Sweat Heater Energy"] = None
        self._data["Case Height"] = None
        self._data["Fraction of Anti-Sweat Heater Energy to Case"] = None
        self._data["Case Defrost Power per Unit Length"] = None
        self._data["Case Defrost Type"] = None
        self._data["Case Defrost Schedule Name"] = None
        self._data["Case Defrost Drip-Down Schedule Name"] = None
        self._data["Defrost Energy Correction Curve Type"] = None
        self._data["Defrost Energy Correction Curve Name"] = None
        self._data["Under Case HVAC Return Air Fraction"] = None
        self._data["Refrigerated Case Restocking Schedule Name"] = None
        self._data["Case Credit Fraction Schedule Name"] = None
        self._data["Design Evaporator Temperature or Brine Inlet Temperature"] = None
        self._data["Average Refrigerant Charge Inventory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_ambient_temperature = None
        else:
            self.rated_ambient_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_ambient_relative_humidity = None
        else:
            self.rated_ambient_relative_humidity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_total_cooling_capacity_per_unit_length = None
        else:
            self.rated_total_cooling_capacity_per_unit_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_latent_heat_ratio = None
        else:
            self.rated_latent_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_runtime_fraction = None
        else:
            self.rated_runtime_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_length = None
        else:
            self.case_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_operating_temperature = None
        else:
            self.case_operating_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_case_credit_curve_type = None
        else:
            self.latent_case_credit_curve_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_case_credit_curve_name = None
        else:
            self.latent_case_credit_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.standard_case_fan_power_per_unit_length = None
        else:
            self.standard_case_fan_power_per_unit_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operating_case_fan_power_per_unit_length = None
        else:
            self.operating_case_fan_power_per_unit_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.standard_case_lighting_power_per_unit_length = None
        else:
            self.standard_case_lighting_power_per_unit_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.installed_case_lighting_power_per_unit_length = None
        else:
            self.installed_case_lighting_power_per_unit_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_lighting_schedule_name = None
        else:
            self.case_lighting_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_lighting_energy_to_case = None
        else:
            self.fraction_of_lighting_energy_to_case = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_antisweat_heater_power_per_unit_length = None
        else:
            self.case_antisweat_heater_power_per_unit_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_antisweat_heater_power_per_unit_length = None
        else:
            self.minimum_antisweat_heater_power_per_unit_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.antisweat_heater_control_type = None
        else:
            self.antisweat_heater_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidity_at_zero_antisweat_heater_energy = None
        else:
            self.humidity_at_zero_antisweat_heater_energy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_height = None
        else:
            self.case_height = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_antisweat_heater_energy_to_case = None
        else:
            self.fraction_of_antisweat_heater_energy_to_case = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_defrost_power_per_unit_length = None
        else:
            self.case_defrost_power_per_unit_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_defrost_type = None
        else:
            self.case_defrost_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_defrost_schedule_name = None
        else:
            self.case_defrost_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_defrost_dripdown_schedule_name = None
        else:
            self.case_defrost_dripdown_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_energy_correction_curve_type = None
        else:
            self.defrost_energy_correction_curve_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_energy_correction_curve_name = None
        else:
            self.defrost_energy_correction_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.under_case_hvac_return_air_fraction = None
        else:
            self.under_case_hvac_return_air_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigerated_case_restocking_schedule_name = None
        else:
            self.refrigerated_case_restocking_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_credit_fraction_schedule_name = None
        else:
            self.case_credit_fraction_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_evaporator_temperature_or_brine_inlet_temperature = None
        else:
            self.design_evaporator_temperature_or_brine_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.average_refrigerant_charge_inventory = None
        else:
            self.average_refrigerant_charge_inventory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def rated_ambient_temperature(self):
        """Get rated_ambient_temperature

        Returns:
            float: the value of `rated_ambient_temperature` or None if not set
        """
        return self._data["Rated Ambient Temperature"]

    @rated_ambient_temperature.setter
    def rated_ambient_temperature(self, value=23.9 ):
        """  Corresponds to IDD Field `rated_ambient_temperature`

        Args:
            value (float): value for IDD Field `rated_ambient_temperature`
                Units: C
                Default value: 23.9
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_ambient_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_ambient_temperature`')

        self._data["Rated Ambient Temperature"] = value

    @property
    def rated_ambient_relative_humidity(self):
        """Get rated_ambient_relative_humidity

        Returns:
            float: the value of `rated_ambient_relative_humidity` or None if not set
        """
        return self._data["Rated Ambient Relative Humidity"]

    @rated_ambient_relative_humidity.setter
    def rated_ambient_relative_humidity(self, value=55.0 ):
        """  Corresponds to IDD Field `rated_ambient_relative_humidity`

        Args:
            value (float): value for IDD Field `rated_ambient_relative_humidity`
                Units: percent
                Default value: 55.0
                value > 0.0
                value < 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_ambient_relative_humidity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_ambient_relative_humidity`')
            if value >= 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `rated_ambient_relative_humidity`')

        self._data["Rated Ambient Relative Humidity"] = value

    @property
    def rated_total_cooling_capacity_per_unit_length(self):
        """Get rated_total_cooling_capacity_per_unit_length

        Returns:
            float: the value of `rated_total_cooling_capacity_per_unit_length` or None if not set
        """
        return self._data["Rated Total Cooling Capacity per Unit Length"]

    @rated_total_cooling_capacity_per_unit_length.setter
    def rated_total_cooling_capacity_per_unit_length(self, value=1900.0 ):
        """  Corresponds to IDD Field `rated_total_cooling_capacity_per_unit_length`

        Args:
            value (float): value for IDD Field `rated_total_cooling_capacity_per_unit_length`
                Units: W/m
                Default value: 1900.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_total_cooling_capacity_per_unit_length`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_total_cooling_capacity_per_unit_length`')

        self._data["Rated Total Cooling Capacity per Unit Length"] = value

    @property
    def rated_latent_heat_ratio(self):
        """Get rated_latent_heat_ratio

        Returns:
            float: the value of `rated_latent_heat_ratio` or None if not set
        """
        return self._data["Rated Latent Heat Ratio"]

    @rated_latent_heat_ratio.setter
    def rated_latent_heat_ratio(self, value=0.3 ):
        """  Corresponds to IDD Field `rated_latent_heat_ratio`

        Args:
            value (float): value for IDD Field `rated_latent_heat_ratio`
                Default value: 0.3
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_latent_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_latent_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `rated_latent_heat_ratio`')

        self._data["Rated Latent Heat Ratio"] = value

    @property
    def rated_runtime_fraction(self):
        """Get rated_runtime_fraction

        Returns:
            float: the value of `rated_runtime_fraction` or None if not set
        """
        return self._data["Rated Runtime Fraction"]

    @rated_runtime_fraction.setter
    def rated_runtime_fraction(self, value=0.85 ):
        """  Corresponds to IDD Field `rated_runtime_fraction`

        Args:
            value (float): value for IDD Field `rated_runtime_fraction`
                Default value: 0.85
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_runtime_fraction`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_runtime_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `rated_runtime_fraction`')

        self._data["Rated Runtime Fraction"] = value

    @property
    def case_length(self):
        """Get case_length

        Returns:
            float: the value of `case_length` or None if not set
        """
        return self._data["Case Length"]

    @case_length.setter
    def case_length(self, value=3.0 ):
        """  Corresponds to IDD Field `case_length`

        Args:
            value (float): value for IDD Field `case_length`
                Units: m
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `case_length`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `case_length`')

        self._data["Case Length"] = value

    @property
    def case_operating_temperature(self):
        """Get case_operating_temperature

        Returns:
            float: the value of `case_operating_temperature` or None if not set
        """
        return self._data["Case Operating Temperature"]

    @case_operating_temperature.setter
    def case_operating_temperature(self, value=1.1 ):
        """  Corresponds to IDD Field `case_operating_temperature`

        Args:
            value (float): value for IDD Field `case_operating_temperature`
                Units: C
                Default value: 1.1
                value < 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `case_operating_temperature`'.format(value))
            if value >= 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `case_operating_temperature`')

        self._data["Case Operating Temperature"] = value

    @property
    def latent_case_credit_curve_type(self):
        """Get latent_case_credit_curve_type

        Returns:
            str: the value of `latent_case_credit_curve_type` or None if not set
        """
        return self._data["Latent Case Credit Curve Type"]

    @latent_case_credit_curve_type.setter
    def latent_case_credit_curve_type(self, value="CaseTemperatureMethod"):
        """  Corresponds to IDD Field `latent_case_credit_curve_type`

        Args:
            value (str): value for IDD Field `latent_case_credit_curve_type`
                Accepted values are:
                      - CaseTemperatureMethod
                      - RelativeHumidityMethod
                      - DewpointMethod
                Default value: CaseTemperatureMethod
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `latent_case_credit_curve_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `latent_case_credit_curve_type`')
            vals = set()
            vals.add("CaseTemperatureMethod")
            vals.add("RelativeHumidityMethod")
            vals.add("DewpointMethod")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `latent_case_credit_curve_type`'.format(value))

        self._data["Latent Case Credit Curve Type"] = value

    @property
    def latent_case_credit_curve_name(self):
        """Get latent_case_credit_curve_name

        Returns:
            str: the value of `latent_case_credit_curve_name` or None if not set
        """
        return self._data["Latent Case Credit Curve Name"]

    @latent_case_credit_curve_name.setter
    def latent_case_credit_curve_name(self, value=None):
        """  Corresponds to IDD Field `latent_case_credit_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `latent_case_credit_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `latent_case_credit_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `latent_case_credit_curve_name`')

        self._data["Latent Case Credit Curve Name"] = value

    @property
    def standard_case_fan_power_per_unit_length(self):
        """Get standard_case_fan_power_per_unit_length

        Returns:
            float: the value of `standard_case_fan_power_per_unit_length` or None if not set
        """
        return self._data["Standard Case Fan Power per Unit Length"]

    @standard_case_fan_power_per_unit_length.setter
    def standard_case_fan_power_per_unit_length(self, value=75.0 ):
        """  Corresponds to IDD Field `standard_case_fan_power_per_unit_length`

        Args:
            value (float): value for IDD Field `standard_case_fan_power_per_unit_length`
                Units: W/m
                Default value: 75.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `standard_case_fan_power_per_unit_length`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `standard_case_fan_power_per_unit_length`')

        self._data["Standard Case Fan Power per Unit Length"] = value

    @property
    def operating_case_fan_power_per_unit_length(self):
        """Get operating_case_fan_power_per_unit_length

        Returns:
            float: the value of `operating_case_fan_power_per_unit_length` or None if not set
        """
        return self._data["Operating Case Fan Power per Unit Length"]

    @operating_case_fan_power_per_unit_length.setter
    def operating_case_fan_power_per_unit_length(self, value=75.0 ):
        """  Corresponds to IDD Field `operating_case_fan_power_per_unit_length`

        Args:
            value (float): value for IDD Field `operating_case_fan_power_per_unit_length`
                Units: W/m
                Default value: 75.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `operating_case_fan_power_per_unit_length`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `operating_case_fan_power_per_unit_length`')

        self._data["Operating Case Fan Power per Unit Length"] = value

    @property
    def standard_case_lighting_power_per_unit_length(self):
        """Get standard_case_lighting_power_per_unit_length

        Returns:
            float: the value of `standard_case_lighting_power_per_unit_length` or None if not set
        """
        return self._data["Standard Case Lighting Power per Unit Length"]

    @standard_case_lighting_power_per_unit_length.setter
    def standard_case_lighting_power_per_unit_length(self, value=90.0 ):
        """  Corresponds to IDD Field `standard_case_lighting_power_per_unit_length`

        Args:
            value (float): value for IDD Field `standard_case_lighting_power_per_unit_length`
                Units: W/m
                Default value: 90.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `standard_case_lighting_power_per_unit_length`'.format(value))

        self._data["Standard Case Lighting Power per Unit Length"] = value

    @property
    def installed_case_lighting_power_per_unit_length(self):
        """Get installed_case_lighting_power_per_unit_length

        Returns:
            float: the value of `installed_case_lighting_power_per_unit_length` or None if not set
        """
        return self._data["Installed Case Lighting Power per Unit Length"]

    @installed_case_lighting_power_per_unit_length.setter
    def installed_case_lighting_power_per_unit_length(self, value=None):
        """  Corresponds to IDD Field `installed_case_lighting_power_per_unit_length`
        default set equal to Standard Case Lighting Power per Unit Length

        Args:
            value (float): value for IDD Field `installed_case_lighting_power_per_unit_length`
                Units: W/m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `installed_case_lighting_power_per_unit_length`'.format(value))

        self._data["Installed Case Lighting Power per Unit Length"] = value

    @property
    def case_lighting_schedule_name(self):
        """Get case_lighting_schedule_name

        Returns:
            str: the value of `case_lighting_schedule_name` or None if not set
        """
        return self._data["Case Lighting Schedule Name"]

    @case_lighting_schedule_name.setter
    def case_lighting_schedule_name(self, value=None):
        """  Corresponds to IDD Field `case_lighting_schedule_name`

        Args:
            value (str): value for IDD Field `case_lighting_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_lighting_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_lighting_schedule_name`')

        self._data["Case Lighting Schedule Name"] = value

    @property
    def fraction_of_lighting_energy_to_case(self):
        """Get fraction_of_lighting_energy_to_case

        Returns:
            float: the value of `fraction_of_lighting_energy_to_case` or None if not set
        """
        return self._data["Fraction of Lighting Energy to Case"]

    @fraction_of_lighting_energy_to_case.setter
    def fraction_of_lighting_energy_to_case(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_lighting_energy_to_case`

        Args:
            value (float): value for IDD Field `fraction_of_lighting_energy_to_case`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_lighting_energy_to_case`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_lighting_energy_to_case`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_lighting_energy_to_case`')

        self._data["Fraction of Lighting Energy to Case"] = value

    @property
    def case_antisweat_heater_power_per_unit_length(self):
        """Get case_antisweat_heater_power_per_unit_length

        Returns:
            float: the value of `case_antisweat_heater_power_per_unit_length` or None if not set
        """
        return self._data["Case Anti-Sweat Heater Power per Unit Length"]

    @case_antisweat_heater_power_per_unit_length.setter
    def case_antisweat_heater_power_per_unit_length(self, value=0.0 ):
        """  Corresponds to IDD Field `case_antisweat_heater_power_per_unit_length`

        Args:
            value (float): value for IDD Field `case_antisweat_heater_power_per_unit_length`
                Units: W/m
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `case_antisweat_heater_power_per_unit_length`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `case_antisweat_heater_power_per_unit_length`')

        self._data["Case Anti-Sweat Heater Power per Unit Length"] = value

    @property
    def minimum_antisweat_heater_power_per_unit_length(self):
        """Get minimum_antisweat_heater_power_per_unit_length

        Returns:
            float: the value of `minimum_antisweat_heater_power_per_unit_length` or None if not set
        """
        return self._data["Minimum Anti-Sweat Heater Power per Unit Length"]

    @minimum_antisweat_heater_power_per_unit_length.setter
    def minimum_antisweat_heater_power_per_unit_length(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_antisweat_heater_power_per_unit_length`
        This field is only applicable to the Linear, Dewpoint Method, and
        Heat Balance Method anti-sweat heater control types

        Args:
            value (float): value for IDD Field `minimum_antisweat_heater_power_per_unit_length`
                Units: W/m
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_antisweat_heater_power_per_unit_length`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_antisweat_heater_power_per_unit_length`')

        self._data["Minimum Anti-Sweat Heater Power per Unit Length"] = value

    @property
    def antisweat_heater_control_type(self):
        """Get antisweat_heater_control_type

        Returns:
            str: the value of `antisweat_heater_control_type` or None if not set
        """
        return self._data["Anti-Sweat Heater Control Type"]

    @antisweat_heater_control_type.setter
    def antisweat_heater_control_type(self, value="None"):
        """  Corresponds to IDD Field `antisweat_heater_control_type`

        Args:
            value (str): value for IDD Field `antisweat_heater_control_type`
                Accepted values are:
                      - None
                      - Constant
                      - Linear
                      - DewpointMethod
                      - HeatBalanceMethod
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `antisweat_heater_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `antisweat_heater_control_type`')
            vals = set()
            vals.add("None")
            vals.add("Constant")
            vals.add("Linear")
            vals.add("DewpointMethod")
            vals.add("HeatBalanceMethod")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `antisweat_heater_control_type`'.format(value))

        self._data["Anti-Sweat Heater Control Type"] = value

    @property
    def humidity_at_zero_antisweat_heater_energy(self):
        """Get humidity_at_zero_antisweat_heater_energy

        Returns:
            float: the value of `humidity_at_zero_antisweat_heater_energy` or None if not set
        """
        return self._data["Humidity at Zero Anti-Sweat Heater Energy"]

    @humidity_at_zero_antisweat_heater_energy.setter
    def humidity_at_zero_antisweat_heater_energy(self, value=-10.0 ):
        """  Corresponds to IDD Field `humidity_at_zero_antisweat_heater_energy`
        This field is only applicable to Linear AS heater control type
        Zone relative humidity (%) where anti-sweat heater energy is zero

        Args:
            value (float): value for IDD Field `humidity_at_zero_antisweat_heater_energy`
                Units: percent
                Default value: -10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_at_zero_antisweat_heater_energy`'.format(value))

        self._data["Humidity at Zero Anti-Sweat Heater Energy"] = value

    @property
    def case_height(self):
        """Get case_height

        Returns:
            float: the value of `case_height` or None if not set
        """
        return self._data["Case Height"]

    @case_height.setter
    def case_height(self, value=1.5 ):
        """  Corresponds to IDD Field `case_height`
        This field only applicable to Heat Balance Method AS heater control type
        Height must be greater than zero if Heat Balance Method AS heater control is selected

        Args:
            value (float): value for IDD Field `case_height`
                Units: m
                Default value: 1.5
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `case_height`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `case_height`')

        self._data["Case Height"] = value

    @property
    def fraction_of_antisweat_heater_energy_to_case(self):
        """Get fraction_of_antisweat_heater_energy_to_case

        Returns:
            float: the value of `fraction_of_antisweat_heater_energy_to_case` or None if not set
        """
        return self._data["Fraction of Anti-Sweat Heater Energy to Case"]

    @fraction_of_antisweat_heater_energy_to_case.setter
    def fraction_of_antisweat_heater_energy_to_case(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_antisweat_heater_energy_to_case`

        Args:
            value (float): value for IDD Field `fraction_of_antisweat_heater_energy_to_case`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_antisweat_heater_energy_to_case`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_antisweat_heater_energy_to_case`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_antisweat_heater_energy_to_case`')

        self._data["Fraction of Anti-Sweat Heater Energy to Case"] = value

    @property
    def case_defrost_power_per_unit_length(self):
        """Get case_defrost_power_per_unit_length

        Returns:
            float: the value of `case_defrost_power_per_unit_length` or None if not set
        """
        return self._data["Case Defrost Power per Unit Length"]

    @case_defrost_power_per_unit_length.setter
    def case_defrost_power_per_unit_length(self, value=0.0 ):
        """  Corresponds to IDD Field `case_defrost_power_per_unit_length`
        Used to evaluate load on case as well as power or heat consumption

        Args:
            value (float): value for IDD Field `case_defrost_power_per_unit_length`
                Units: W/m
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `case_defrost_power_per_unit_length`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `case_defrost_power_per_unit_length`')

        self._data["Case Defrost Power per Unit Length"] = value

    @property
    def case_defrost_type(self):
        """Get case_defrost_type

        Returns:
            str: the value of `case_defrost_type` or None if not set
        """
        return self._data["Case Defrost Type"]

    @case_defrost_type.setter
    def case_defrost_type(self, value="OffCycle"):
        """  Corresponds to IDD Field `case_defrost_type`

        Args:
            value (str): value for IDD Field `case_defrost_type`
                Accepted values are:
                      - None
                      - OffCycle
                      - HotGas
                      - Electric
                      - HotFluid
                      - HotGasWithTemperatureTermination
                      - ElectricWithTemperatureTermination
                      - HotFluidWithTemperatureTermination
                Default value: OffCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_defrost_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_defrost_type`')
            vals = set()
            vals.add("None")
            vals.add("OffCycle")
            vals.add("HotGas")
            vals.add("Electric")
            vals.add("HotFluid")
            vals.add("HotGasWithTemperatureTermination")
            vals.add("ElectricWithTemperatureTermination")
            vals.add("HotFluidWithTemperatureTermination")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `case_defrost_type`'.format(value))

        self._data["Case Defrost Type"] = value

    @property
    def case_defrost_schedule_name(self):
        """Get case_defrost_schedule_name

        Returns:
            str: the value of `case_defrost_schedule_name` or None if not set
        """
        return self._data["Case Defrost Schedule Name"]

    @case_defrost_schedule_name.setter
    def case_defrost_schedule_name(self, value=None):
        """  Corresponds to IDD Field `case_defrost_schedule_name`
        A case defrost schedule name is required unless case defrost type = None

        Args:
            value (str): value for IDD Field `case_defrost_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_defrost_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_defrost_schedule_name`')

        self._data["Case Defrost Schedule Name"] = value

    @property
    def case_defrost_dripdown_schedule_name(self):
        """Get case_defrost_dripdown_schedule_name

        Returns:
            str: the value of `case_defrost_dripdown_schedule_name` or None if not set
        """
        return self._data["Case Defrost Drip-Down Schedule Name"]

    @case_defrost_dripdown_schedule_name.setter
    def case_defrost_dripdown_schedule_name(self, value=None):
        """  Corresponds to IDD Field `case_defrost_dripdown_schedule_name`
        If left blank, the defrost schedule will be used
        The start time for each defrost period in this drip-down schedule should coincide with
        the start time for each defrost period in the case defrost schedule (previous input
        field).The length of each defrost drip-down period must be greater than or equal to the
        corresponding defrost period specified in the case defrost schedule. This extra time
        allows the melted frost to drip from the coil before refrigeration is restarted.

        Args:
            value (str): value for IDD Field `case_defrost_dripdown_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_defrost_dripdown_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_defrost_dripdown_schedule_name`')

        self._data["Case Defrost Drip-Down Schedule Name"] = value

    @property
    def defrost_energy_correction_curve_type(self):
        """Get defrost_energy_correction_curve_type

        Returns:
            str: the value of `defrost_energy_correction_curve_type` or None if not set
        """
        return self._data["Defrost Energy Correction Curve Type"]

    @defrost_energy_correction_curve_type.setter
    def defrost_energy_correction_curve_type(self, value="None"):
        """  Corresponds to IDD Field `defrost_energy_correction_curve_type`
        Case Temperature, Relative Humidity, and Dewpoint Method are applicable to case defrost
        types with temperature termination only.

        Args:
            value (str): value for IDD Field `defrost_energy_correction_curve_type`
                Accepted values are:
                      - None
                      - CaseTemperatureMethod
                      - RelativeHumidityMethod
                      - DewpointMethod
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_energy_correction_curve_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_energy_correction_curve_type`')
            vals = set()
            vals.add("None")
            vals.add("CaseTemperatureMethod")
            vals.add("RelativeHumidityMethod")
            vals.add("DewpointMethod")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `defrost_energy_correction_curve_type`'.format(value))

        self._data["Defrost Energy Correction Curve Type"] = value

    @property
    def defrost_energy_correction_curve_name(self):
        """Get defrost_energy_correction_curve_name

        Returns:
            str: the value of `defrost_energy_correction_curve_name` or None if not set
        """
        return self._data["Defrost Energy Correction Curve Name"]

    @defrost_energy_correction_curve_name.setter
    def defrost_energy_correction_curve_name(self, value=None):
        """  Corresponds to IDD Field `defrost_energy_correction_curve_name`
        Table:OneIndependentVariable object can also be used
        Defrost Energy Correction Curve Name is applicable to case defrost types
        with temperature termination only.

        Args:
            value (str): value for IDD Field `defrost_energy_correction_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_energy_correction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_energy_correction_curve_name`')

        self._data["Defrost Energy Correction Curve Name"] = value

    @property
    def under_case_hvac_return_air_fraction(self):
        """Get under_case_hvac_return_air_fraction

        Returns:
            float: the value of `under_case_hvac_return_air_fraction` or None if not set
        """
        return self._data["Under Case HVAC Return Air Fraction"]

    @under_case_hvac_return_air_fraction.setter
    def under_case_hvac_return_air_fraction(self, value=0.0 ):
        """  Corresponds to IDD Field `under_case_hvac_return_air_fraction`

        Args:
            value (float): value for IDD Field `under_case_hvac_return_air_fraction`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `under_case_hvac_return_air_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `under_case_hvac_return_air_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `under_case_hvac_return_air_fraction`')

        self._data["Under Case HVAC Return Air Fraction"] = value

    @property
    def refrigerated_case_restocking_schedule_name(self):
        """Get refrigerated_case_restocking_schedule_name

        Returns:
            str: the value of `refrigerated_case_restocking_schedule_name` or None if not set
        """
        return self._data["Refrigerated Case Restocking Schedule Name"]

    @refrigerated_case_restocking_schedule_name.setter
    def refrigerated_case_restocking_schedule_name(self, value=None):
        """  Corresponds to IDD Field `refrigerated_case_restocking_schedule_name`
        Schedule values should be in units of Watts per unit case length (W/m)
        Leave this field blank if no restocking is to be modeled

        Args:
            value (str): value for IDD Field `refrigerated_case_restocking_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigerated_case_restocking_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigerated_case_restocking_schedule_name`')

        self._data["Refrigerated Case Restocking Schedule Name"] = value

    @property
    def case_credit_fraction_schedule_name(self):
        """Get case_credit_fraction_schedule_name

        Returns:
            str: the value of `case_credit_fraction_schedule_name` or None if not set
        """
        return self._data["Case Credit Fraction Schedule Name"]

    @case_credit_fraction_schedule_name.setter
    def case_credit_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `case_credit_fraction_schedule_name`
        Schedule values should be from 0 to 1
        Leave this field blank if no case credit fraction is to be applied

        Args:
            value (str): value for IDD Field `case_credit_fraction_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_credit_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_credit_fraction_schedule_name`')

        self._data["Case Credit Fraction Schedule Name"] = value

    @property
    def design_evaporator_temperature_or_brine_inlet_temperature(self):
        """Get design_evaporator_temperature_or_brine_inlet_temperature

        Returns:
            float: the value of `design_evaporator_temperature_or_brine_inlet_temperature` or None if not set
        """
        return self._data["Design Evaporator Temperature or Brine Inlet Temperature"]

    @design_evaporator_temperature_or_brine_inlet_temperature.setter
    def design_evaporator_temperature_or_brine_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_evaporator_temperature_or_brine_inlet_temperature`
        Required for detailed refrigeration system, not for compressor rack
        For a DX system, enter the saturated temperature for refrigerant pressure leaving case
        For a brine-cooled cooled (secondary system) case, enter the brine inlet temperature
        Default is 5 C less than case operating temperature

        Args:
            value (float): value for IDD Field `design_evaporator_temperature_or_brine_inlet_temperature`
                Units: C
                value >= -70.0
                value <= 40.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_evaporator_temperature_or_brine_inlet_temperature`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `design_evaporator_temperature_or_brine_inlet_temperature`')
            if value > 40.0:
                raise ValueError('value need to be smaller 40.0 '
                                 'for field `design_evaporator_temperature_or_brine_inlet_temperature`')

        self._data["Design Evaporator Temperature or Brine Inlet Temperature"] = value

    @property
    def average_refrigerant_charge_inventory(self):
        """Get average_refrigerant_charge_inventory

        Returns:
            float: the value of `average_refrigerant_charge_inventory` or None if not set
        """
        return self._data["Average Refrigerant Charge Inventory"]

    @average_refrigerant_charge_inventory.setter
    def average_refrigerant_charge_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `average_refrigerant_charge_inventory`

        Args:
            value (float): value for IDD Field `average_refrigerant_charge_inventory`
                Units: kg/m
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `average_refrigerant_charge_inventory`'.format(value))

        self._data["Average Refrigerant Charge Inventory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.rated_ambient_temperature))
        out.append(self._to_str(self.rated_ambient_relative_humidity))
        out.append(self._to_str(self.rated_total_cooling_capacity_per_unit_length))
        out.append(self._to_str(self.rated_latent_heat_ratio))
        out.append(self._to_str(self.rated_runtime_fraction))
        out.append(self._to_str(self.case_length))
        out.append(self._to_str(self.case_operating_temperature))
        out.append(self._to_str(self.latent_case_credit_curve_type))
        out.append(self._to_str(self.latent_case_credit_curve_name))
        out.append(self._to_str(self.standard_case_fan_power_per_unit_length))
        out.append(self._to_str(self.operating_case_fan_power_per_unit_length))
        out.append(self._to_str(self.standard_case_lighting_power_per_unit_length))
        out.append(self._to_str(self.installed_case_lighting_power_per_unit_length))
        out.append(self._to_str(self.case_lighting_schedule_name))
        out.append(self._to_str(self.fraction_of_lighting_energy_to_case))
        out.append(self._to_str(self.case_antisweat_heater_power_per_unit_length))
        out.append(self._to_str(self.minimum_antisweat_heater_power_per_unit_length))
        out.append(self._to_str(self.antisweat_heater_control_type))
        out.append(self._to_str(self.humidity_at_zero_antisweat_heater_energy))
        out.append(self._to_str(self.case_height))
        out.append(self._to_str(self.fraction_of_antisweat_heater_energy_to_case))
        out.append(self._to_str(self.case_defrost_power_per_unit_length))
        out.append(self._to_str(self.case_defrost_type))
        out.append(self._to_str(self.case_defrost_schedule_name))
        out.append(self._to_str(self.case_defrost_dripdown_schedule_name))
        out.append(self._to_str(self.defrost_energy_correction_curve_type))
        out.append(self._to_str(self.defrost_energy_correction_curve_name))
        out.append(self._to_str(self.under_case_hvac_return_air_fraction))
        out.append(self._to_str(self.refrigerated_case_restocking_schedule_name))
        out.append(self._to_str(self.case_credit_fraction_schedule_name))
        out.append(self._to_str(self.design_evaporator_temperature_or_brine_inlet_temperature))
        out.append(self._to_str(self.average_refrigerant_charge_inventory))
        return ",".join(out)

class RefrigerationCompressorRack(object):
    """ Corresponds to IDD object `Refrigeration:CompressorRack`
        Works in conjunction with the refrigeration case and walkin objects to simulate the
        performance of a refrigerated case system. This object models the electric
        consumption of the rack compressors and the condenser fans. Heat can be rejected
        eitheroutdoors or to a zone. Compressor rack waste heat can also be reclaimed for
        use by an optional air- or water-heating coil (Coil:Heating:Desuperheater and
        Coil:WaterHeating:Desuperheater).
    
    """
    internal_name = "Refrigeration:CompressorRack"
    field_count = 26
    required_fields = ["Name", "Compressor Rack COP Function of Temperature Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:CompressorRack`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Rejection Location"] = None
        self._data["Design Compressor Rack COP"] = None
        self._data["Compressor Rack COP Function of Temperature Curve Name"] = None
        self._data["Design Condenser Fan Power"] = None
        self._data["Condenser Fan Power Function of Temperature Curve Name"] = None
        self._data["Condenser Type"] = None
        self._data["Water-Cooled Condenser Inlet Node Name"] = None
        self._data["Water-Cooled Condenser Outlet Node Name"] = None
        self._data["Water-Cooled Loop Flow Type"] = None
        self._data["Water-Cooled Condenser Outlet Temperature Schedule Name"] = None
        self._data["Water-Cooled Condenser Design Flow Rate"] = None
        self._data["Water-Cooled Condenser Maximum Flow Rate"] = None
        self._data["Water-Cooled Condenser Maximum Water Outlet Temperature"] = None
        self._data["Water-Cooled Condenser Minimum Water Inlet Temperature"] = None
        self._data["Evaporative Condenser Availability Schedule Name"] = None
        self._data["Evaporative Condenser Effectiveness"] = None
        self._data["Evaporative Condenser Air Flow Rate"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Design Evaporative Condenser Water Pump Power"] = None
        self._data["Evaporative Water Supply Tank Name"] = None
        self._data["Condenser Air Inlet Node Name"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Refrigeration Case Name or WalkIn Name or CaseAndWalkInList Name"] = None
        self._data["Heat Rejection Zone Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_rejection_location = None
        else:
            self.heat_rejection_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_compressor_rack_cop = None
        else:
            self.design_compressor_rack_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_rack_cop_function_of_temperature_curve_name = None
        else:
            self.compressor_rack_cop_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_condenser_fan_power = None
        else:
            self.design_condenser_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_fan_power_function_of_temperature_curve_name = None
        else:
            self.condenser_fan_power_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_condenser_inlet_node_name = None
        else:
            self.watercooled_condenser_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_condenser_outlet_node_name = None
        else:
            self.watercooled_condenser_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_loop_flow_type = None
        else:
            self.watercooled_loop_flow_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_condenser_outlet_temperature_schedule_name = None
        else:
            self.watercooled_condenser_outlet_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_condenser_design_flow_rate = None
        else:
            self.watercooled_condenser_design_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_condenser_maximum_flow_rate = None
        else:
            self.watercooled_condenser_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_condenser_maximum_water_outlet_temperature = None
        else:
            self.watercooled_condenser_maximum_water_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_condenser_minimum_water_inlet_temperature = None
        else:
            self.watercooled_condenser_minimum_water_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_condenser_availability_schedule_name = None
        else:
            self.evaporative_condenser_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_condenser_effectiveness = None
        else:
            self.evaporative_condenser_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_condenser_air_flow_rate = None
        else:
            self.evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_evaporative_condenser_water_pump_power = None
        else:
            self.design_evaporative_condenser_water_pump_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_water_supply_tank_name = None
        else:
            self.evaporative_water_supply_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_air_inlet_node_name = None
        else:
            self.condenser_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name = None
        else:
            self.refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_rejection_zone_name = None
        else:
            self.heat_rejection_zone_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def heat_rejection_location(self):
        """Get heat_rejection_location

        Returns:
            str: the value of `heat_rejection_location` or None if not set
        """
        return self._data["Heat Rejection Location"]

    @heat_rejection_location.setter
    def heat_rejection_location(self, value="Outdoors"):
        """  Corresponds to IDD Field `heat_rejection_location`

        Args:
            value (str): value for IDD Field `heat_rejection_location`
                Accepted values are:
                      - Outdoors
                      - Zone
                Default value: Outdoors
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_rejection_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_rejection_location`')
            vals = set()
            vals.add("Outdoors")
            vals.add("Zone")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_rejection_location`'.format(value))

        self._data["Heat Rejection Location"] = value

    @property
    def design_compressor_rack_cop(self):
        """Get design_compressor_rack_cop

        Returns:
            float: the value of `design_compressor_rack_cop` or None if not set
        """
        return self._data["Design Compressor Rack COP"]

    @design_compressor_rack_cop.setter
    def design_compressor_rack_cop(self, value=2.0 ):
        """  Corresponds to IDD Field `design_compressor_rack_cop`
        It is important that this COP correspond to the lowest saturated suction
        temperature needed to serve all refrigeration loads

        Args:
            value (float): value for IDD Field `design_compressor_rack_cop`
                Units: W/W
                Default value: 2.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_compressor_rack_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_compressor_rack_cop`')

        self._data["Design Compressor Rack COP"] = value

    @property
    def compressor_rack_cop_function_of_temperature_curve_name(self):
        """Get compressor_rack_cop_function_of_temperature_curve_name

        Returns:
            str: the value of `compressor_rack_cop_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Compressor Rack COP Function of Temperature Curve Name"]

    @compressor_rack_cop_function_of_temperature_curve_name.setter
    def compressor_rack_cop_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `compressor_rack_cop_function_of_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        It is important that this COP curve correspond to the lowest saturated suction
        temperature needed to serve all refrigeration loads

        Args:
            value (str): value for IDD Field `compressor_rack_cop_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compressor_rack_cop_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compressor_rack_cop_function_of_temperature_curve_name`')

        self._data["Compressor Rack COP Function of Temperature Curve Name"] = value

    @property
    def design_condenser_fan_power(self):
        """Get design_condenser_fan_power

        Returns:
            float: the value of `design_condenser_fan_power` or None if not set
        """
        return self._data["Design Condenser Fan Power"]

    @design_condenser_fan_power.setter
    def design_condenser_fan_power(self, value=250.0 ):
        """  Corresponds to IDD Field `design_condenser_fan_power`
        Design power for condenser fan(s).

        Args:
            value (float): value for IDD Field `design_condenser_fan_power`
                Units: W
                Default value: 250.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_condenser_fan_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_fan_power`')

        self._data["Design Condenser Fan Power"] = value

    @property
    def condenser_fan_power_function_of_temperature_curve_name(self):
        """Get condenser_fan_power_function_of_temperature_curve_name

        Returns:
            str: the value of `condenser_fan_power_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Condenser Fan Power Function of Temperature Curve Name"]

    @condenser_fan_power_function_of_temperature_curve_name.setter
    def condenser_fan_power_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `condenser_fan_power_function_of_temperature_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `condenser_fan_power_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_fan_power_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_fan_power_function_of_temperature_curve_name`')

        self._data["Condenser Fan Power Function of Temperature Curve Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `condenser_type`
        Applicable only when Heat Rejection Location is Outdoors.

        Args:
            value (str): value for IDD Field `condenser_type`
                Accepted values are:
                      - AirCooled
                      - EvaporativelyCooled
                      - WaterCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            vals = set()
            vals.add("AirCooled")
            vals.add("EvaporativelyCooled")
            vals.add("WaterCooled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_type`'.format(value))

        self._data["Condenser Type"] = value

    @property
    def watercooled_condenser_inlet_node_name(self):
        """Get watercooled_condenser_inlet_node_name

        Returns:
            str: the value of `watercooled_condenser_inlet_node_name` or None if not set
        """
        return self._data["Water-Cooled Condenser Inlet Node Name"]

    @watercooled_condenser_inlet_node_name.setter
    def watercooled_condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `watercooled_condenser_inlet_node_name`

        Args:
            value (str): value for IDD Field `watercooled_condenser_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `watercooled_condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watercooled_condenser_inlet_node_name`')

        self._data["Water-Cooled Condenser Inlet Node Name"] = value

    @property
    def watercooled_condenser_outlet_node_name(self):
        """Get watercooled_condenser_outlet_node_name

        Returns:
            str: the value of `watercooled_condenser_outlet_node_name` or None if not set
        """
        return self._data["Water-Cooled Condenser Outlet Node Name"]

    @watercooled_condenser_outlet_node_name.setter
    def watercooled_condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `watercooled_condenser_outlet_node_name`

        Args:
            value (str): value for IDD Field `watercooled_condenser_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `watercooled_condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watercooled_condenser_outlet_node_name`')

        self._data["Water-Cooled Condenser Outlet Node Name"] = value

    @property
    def watercooled_loop_flow_type(self):
        """Get watercooled_loop_flow_type

        Returns:
            str: the value of `watercooled_loop_flow_type` or None if not set
        """
        return self._data["Water-Cooled Loop Flow Type"]

    @watercooled_loop_flow_type.setter
    def watercooled_loop_flow_type(self, value="VariableFlow"):
        """  Corresponds to IDD Field `watercooled_loop_flow_type`
        Applicable only when Condenser Type is WaterCooled.

        Args:
            value (str): value for IDD Field `watercooled_loop_flow_type`
                Accepted values are:
                      - VariableFlow
                      - ConstantFlow
                Default value: VariableFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `watercooled_loop_flow_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watercooled_loop_flow_type`')
            vals = set()
            vals.add("VariableFlow")
            vals.add("ConstantFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `watercooled_loop_flow_type`'.format(value))

        self._data["Water-Cooled Loop Flow Type"] = value

    @property
    def watercooled_condenser_outlet_temperature_schedule_name(self):
        """Get watercooled_condenser_outlet_temperature_schedule_name

        Returns:
            str: the value of `watercooled_condenser_outlet_temperature_schedule_name` or None if not set
        """
        return self._data["Water-Cooled Condenser Outlet Temperature Schedule Name"]

    @watercooled_condenser_outlet_temperature_schedule_name.setter
    def watercooled_condenser_outlet_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `watercooled_condenser_outlet_temperature_schedule_name`
        Applicable only when loop Flow type is VariableFlow.

        Args:
            value (str): value for IDD Field `watercooled_condenser_outlet_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `watercooled_condenser_outlet_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watercooled_condenser_outlet_temperature_schedule_name`')

        self._data["Water-Cooled Condenser Outlet Temperature Schedule Name"] = value

    @property
    def watercooled_condenser_design_flow_rate(self):
        """Get watercooled_condenser_design_flow_rate

        Returns:
            float: the value of `watercooled_condenser_design_flow_rate` or None if not set
        """
        return self._data["Water-Cooled Condenser Design Flow Rate"]

    @watercooled_condenser_design_flow_rate.setter
    def watercooled_condenser_design_flow_rate(self, value=None):
        """  Corresponds to IDD Field `watercooled_condenser_design_flow_rate`
        Applicable only when loop flow type is ConstantFlow.

        Args:
            value (float): value for IDD Field `watercooled_condenser_design_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `watercooled_condenser_design_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `watercooled_condenser_design_flow_rate`')

        self._data["Water-Cooled Condenser Design Flow Rate"] = value

    @property
    def watercooled_condenser_maximum_flow_rate(self):
        """Get watercooled_condenser_maximum_flow_rate

        Returns:
            float: the value of `watercooled_condenser_maximum_flow_rate` or None if not set
        """
        return self._data["Water-Cooled Condenser Maximum Flow Rate"]

    @watercooled_condenser_maximum_flow_rate.setter
    def watercooled_condenser_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `watercooled_condenser_maximum_flow_rate`

        Args:
            value (float): value for IDD Field `watercooled_condenser_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `watercooled_condenser_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `watercooled_condenser_maximum_flow_rate`')

        self._data["Water-Cooled Condenser Maximum Flow Rate"] = value

    @property
    def watercooled_condenser_maximum_water_outlet_temperature(self):
        """Get watercooled_condenser_maximum_water_outlet_temperature

        Returns:
            float: the value of `watercooled_condenser_maximum_water_outlet_temperature` or None if not set
        """
        return self._data["Water-Cooled Condenser Maximum Water Outlet Temperature"]

    @watercooled_condenser_maximum_water_outlet_temperature.setter
    def watercooled_condenser_maximum_water_outlet_temperature(self, value=55.0 ):
        """  Corresponds to IDD Field `watercooled_condenser_maximum_water_outlet_temperature`

        Args:
            value (float): value for IDD Field `watercooled_condenser_maximum_water_outlet_temperature`
                Units: C
                Default value: 55.0
                value >= 10.0
                value <= 60.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `watercooled_condenser_maximum_water_outlet_temperature`'.format(value))
            if value < 10.0:
                raise ValueError('value need to be greater or equal 10.0 '
                                 'for field `watercooled_condenser_maximum_water_outlet_temperature`')
            if value > 60.0:
                raise ValueError('value need to be smaller 60.0 '
                                 'for field `watercooled_condenser_maximum_water_outlet_temperature`')

        self._data["Water-Cooled Condenser Maximum Water Outlet Temperature"] = value

    @property
    def watercooled_condenser_minimum_water_inlet_temperature(self):
        """Get watercooled_condenser_minimum_water_inlet_temperature

        Returns:
            float: the value of `watercooled_condenser_minimum_water_inlet_temperature` or None if not set
        """
        return self._data["Water-Cooled Condenser Minimum Water Inlet Temperature"]

    @watercooled_condenser_minimum_water_inlet_temperature.setter
    def watercooled_condenser_minimum_water_inlet_temperature(self, value=10.0 ):
        """  Corresponds to IDD Field `watercooled_condenser_minimum_water_inlet_temperature`

        Args:
            value (float): value for IDD Field `watercooled_condenser_minimum_water_inlet_temperature`
                Units: C
                Default value: 10.0
                value >= 10.0
                value <= 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `watercooled_condenser_minimum_water_inlet_temperature`'.format(value))
            if value < 10.0:
                raise ValueError('value need to be greater or equal 10.0 '
                                 'for field `watercooled_condenser_minimum_water_inlet_temperature`')
            if value > 30.0:
                raise ValueError('value need to be smaller 30.0 '
                                 'for field `watercooled_condenser_minimum_water_inlet_temperature`')

        self._data["Water-Cooled Condenser Minimum Water Inlet Temperature"] = value

    @property
    def evaporative_condenser_availability_schedule_name(self):
        """Get evaporative_condenser_availability_schedule_name

        Returns:
            str: the value of `evaporative_condenser_availability_schedule_name` or None if not set
        """
        return self._data["Evaporative Condenser Availability Schedule Name"]

    @evaporative_condenser_availability_schedule_name.setter
    def evaporative_condenser_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `evaporative_condenser_availability_schedule_name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 indicate that evaporative cooling of the
        condenser is available. This schedule allows the user to define seasonal
        shutdown/draining of the water cooling system in cold climate applications.
        For periods with schedule values of 0, the condenser operates as AirCooled.

        Args:
            value (str): value for IDD Field `evaporative_condenser_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporative_condenser_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporative_condenser_availability_schedule_name`')

        self._data["Evaporative Condenser Availability Schedule Name"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """Get evaporative_condenser_effectiveness

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `evaporative_condenser_effectiveness`
        Applicable only for Condenser Type = EvaporativlyCooled.

        Args:
            value (float): value for IDD Field `evaporative_condenser_effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `evaporative_condenser_effectiveness`')

        self._data["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_air_flow_rate(self):
        """Get evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Evaporative Condenser Air Flow Rate"]

    @evaporative_condenser_air_flow_rate.setter
    def evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `evaporative_condenser_air_flow_rate`
        Applicable only for Condenser Type = EvaporativelyCooled.
        Used to calculate evaporative condenser water use.

        Args:
            value (float): value for IDD Field `evaporative_condenser_air_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `evaporative_condenser_air_flow_rate`')

        self._data["Evaporative Condenser Air Flow Rate"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=200.0 ):
        """  Corresponds to IDD Field `basin_heater_capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the evaporatively cooled condenser is available (field Evaporative Condenser Availability
        Schedule Name). For this situation, the heater heats the basin water when the
        outdoor air dry-bulb temperature falls below the setpoint temperature, but
        only when the condenser fans are off (i.e., no refrigerated case load).

        Args:
            value (float): value for IDD Field `basin_heater_capacity`
                Units: W/K
                Default value: 200.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')

        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `basin_heater_setpoint_temperature`
        Enter the outdoor dry-bulb temperature at which the basin heater turns on.

        Args:
            value (float): value for IDD Field `basin_heater_setpoint_temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')

        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def design_evaporative_condenser_water_pump_power(self):
        """Get design_evaporative_condenser_water_pump_power

        Returns:
            float: the value of `design_evaporative_condenser_water_pump_power` or None if not set
        """
        return self._data["Design Evaporative Condenser Water Pump Power"]

    @design_evaporative_condenser_water_pump_power.setter
    def design_evaporative_condenser_water_pump_power(self, value=1000.0 ):
        """  Corresponds to IDD Field `design_evaporative_condenser_water_pump_power`
        Design recirc water pump power for Condenser Type = EvaporativelyCooled.
        Applicable only for Condenser Type = EvaporativelyCooled.

        Args:
            value (float): value for IDD Field `design_evaporative_condenser_water_pump_power`
                Units: W
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_evaporative_condenser_water_pump_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_evaporative_condenser_water_pump_power`')

        self._data["Design Evaporative Condenser Water Pump Power"] = value

    @property
    def evaporative_water_supply_tank_name(self):
        """Get evaporative_water_supply_tank_name

        Returns:
            str: the value of `evaporative_water_supply_tank_name` or None if not set
        """
        return self._data["Evaporative Water Supply Tank Name"]

    @evaporative_water_supply_tank_name.setter
    def evaporative_water_supply_tank_name(self, value=None):
        """  Corresponds to IDD Field `evaporative_water_supply_tank_name`
        If blank, water supply is from Mains.
        Applicable only for Condenser Type = EvaporativelyCooled.

        Args:
            value (str): value for IDD Field `evaporative_water_supply_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporative_water_supply_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporative_water_supply_tank_name`')

        self._data["Evaporative Water Supply Tank Name"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set
        """
        return self._data["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `condenser_air_inlet_node_name`
        Applicable only when Heat Rejection Location is Outdoors and Condenser Type is
        not WaterCooled; otherwise, leave field blank. If field is left blank with
        Heat Rejection Location = Outdoors, then the model assumes that the Inlet Air
        conditions are the outdoor air conditions for the current timestep
        (e.g., no adjustment for height above ground).

        Args:
            value (str): value for IDD Field `condenser_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_air_inlet_node_name`')

        self._data["Condenser Air Inlet Node Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    @property
    def refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name(self):
        """Get refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name

        Returns:
            str: the value of `refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name` or None if not set
        """
        return self._data["Refrigeration Case Name or WalkIn Name or CaseAndWalkInList Name"]

    @refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name.setter
    def refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name`
        Enter the name of a Refrigeration:Case or Refrigeration:Walkin or
        Refrigeration:CaseAndWalkinList object.

        Args:
            value (str): value for IDD Field `refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name`')

        self._data["Refrigeration Case Name or WalkIn Name or CaseAndWalkInList Name"] = value

    @property
    def heat_rejection_zone_name(self):
        """Get heat_rejection_zone_name

        Returns:
            str: the value of `heat_rejection_zone_name` or None if not set
        """
        return self._data["Heat Rejection Zone Name"]

    @heat_rejection_zone_name.setter
    def heat_rejection_zone_name(self, value=None):
        """  Corresponds to IDD Field `heat_rejection_zone_name`
        This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.
        Required only if walk-in[s] are connected to this rack
        AND the heat rejection location is "Zone"

        Args:
            value (str): value for IDD Field `heat_rejection_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_rejection_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_rejection_zone_name`')

        self._data["Heat Rejection Zone Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.heat_rejection_location))
        out.append(self._to_str(self.design_compressor_rack_cop))
        out.append(self._to_str(self.compressor_rack_cop_function_of_temperature_curve_name))
        out.append(self._to_str(self.design_condenser_fan_power))
        out.append(self._to_str(self.condenser_fan_power_function_of_temperature_curve_name))
        out.append(self._to_str(self.condenser_type))
        out.append(self._to_str(self.watercooled_condenser_inlet_node_name))
        out.append(self._to_str(self.watercooled_condenser_outlet_node_name))
        out.append(self._to_str(self.watercooled_loop_flow_type))
        out.append(self._to_str(self.watercooled_condenser_outlet_temperature_schedule_name))
        out.append(self._to_str(self.watercooled_condenser_design_flow_rate))
        out.append(self._to_str(self.watercooled_condenser_maximum_flow_rate))
        out.append(self._to_str(self.watercooled_condenser_maximum_water_outlet_temperature))
        out.append(self._to_str(self.watercooled_condenser_minimum_water_inlet_temperature))
        out.append(self._to_str(self.evaporative_condenser_availability_schedule_name))
        out.append(self._to_str(self.evaporative_condenser_effectiveness))
        out.append(self._to_str(self.evaporative_condenser_air_flow_rate))
        out.append(self._to_str(self.basin_heater_capacity))
        out.append(self._to_str(self.basin_heater_setpoint_temperature))
        out.append(self._to_str(self.design_evaporative_condenser_water_pump_power))
        out.append(self._to_str(self.evaporative_water_supply_tank_name))
        out.append(self._to_str(self.condenser_air_inlet_node_name))
        out.append(self._to_str(self.enduse_subcategory))
        out.append(self._to_str(self.refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name))
        out.append(self._to_str(self.heat_rejection_zone_name))
        return ",".join(out)

class RefrigerationCaseAndWalkInList(object):
    """ Corresponds to IDD object `Refrigeration:CaseAndWalkInList`
        Provides a list of all the refrigerated cases, walk in coolers, or air chillers
        cooled by a single refrigeration system.  Note that the names of all cases,
        walk-ins ,air chillers, and CaseAndWalkInLists must be unique.  That is, you cannot
        give a list the same name as one of list items. This list may contain a combination
        of case and walk-in names OR a list of air chiller names.  Air chillers
        may not be included in any list that also includes cases or walk-ins.
    
    """
    internal_name = "Refrigeration:CaseAndWalkInList"
    field_count = 41
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:CaseAndWalkInList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Case or WalkIn 1 Name"] = None
        self._data["Case or WalkIn 2 Name"] = None
        self._data["Case or WalkIn 3 Name"] = None
        self._data["Case or WalkIn 4 Name"] = None
        self._data["Case or WalkIn 5 Name"] = None
        self._data["Case or WalkIn 6 Name"] = None
        self._data["Case or WalkIn 7 Name"] = None
        self._data["Case or WalkIn 8 Name"] = None
        self._data["Case or WalkIn 9 Name"] = None
        self._data["Case or WalkIn 10 Name"] = None
        self._data["Case or WalkIn 11 Name"] = None
        self._data["Case or WalkIn 12 Name"] = None
        self._data["Case or WalkIn 13 Name"] = None
        self._data["Case or WalkIn 14 Name"] = None
        self._data["Case or WalkIn 15 Name"] = None
        self._data["Case or WalkIn 16 Name"] = None
        self._data["Case or WalkIn 17 Name"] = None
        self._data["Case or WalkIn 18 Name"] = None
        self._data["Case or WalkIn 19 Name"] = None
        self._data["Case or WalkIn 20 Name"] = None
        self._data["Case or WalkIn 21 Name"] = None
        self._data["Case or WalkIn 22 Name"] = None
        self._data["Case or WalkIn 23 Name"] = None
        self._data["Case or WalkIn 24 Name"] = None
        self._data["Case or WalkIn 25 Name"] = None
        self._data["Case or WalkIn 26 Name"] = None
        self._data["Case or WalkIn 27 Name"] = None
        self._data["Case or WalkIn 28 Name"] = None
        self._data["Case or WalkIn 29 Name"] = None
        self._data["Case or WalkIn 30 Name"] = None
        self._data["Case or WalkIn 31 Name"] = None
        self._data["Case or WalkIn 32 Name"] = None
        self._data["Case or WalkIn 33 Name"] = None
        self._data["Case or WalkIn 34 Name"] = None
        self._data["Case or WalkIn 35 Name"] = None
        self._data["Case or WalkIn 36 Name"] = None
        self._data["Case or WalkIn 37 Name"] = None
        self._data["Case or WalkIn 38 Name"] = None
        self._data["Case or WalkIn 39 Name"] = None
        self._data["Case or WalkIn 40 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_1_name = None
        else:
            self.case_or_walkin_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_2_name = None
        else:
            self.case_or_walkin_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_3_name = None
        else:
            self.case_or_walkin_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_4_name = None
        else:
            self.case_or_walkin_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_5_name = None
        else:
            self.case_or_walkin_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_6_name = None
        else:
            self.case_or_walkin_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_7_name = None
        else:
            self.case_or_walkin_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_8_name = None
        else:
            self.case_or_walkin_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_9_name = None
        else:
            self.case_or_walkin_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_10_name = None
        else:
            self.case_or_walkin_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_11_name = None
        else:
            self.case_or_walkin_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_12_name = None
        else:
            self.case_or_walkin_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_13_name = None
        else:
            self.case_or_walkin_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_14_name = None
        else:
            self.case_or_walkin_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_15_name = None
        else:
            self.case_or_walkin_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_16_name = None
        else:
            self.case_or_walkin_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_17_name = None
        else:
            self.case_or_walkin_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_18_name = None
        else:
            self.case_or_walkin_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_19_name = None
        else:
            self.case_or_walkin_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_20_name = None
        else:
            self.case_or_walkin_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_21_name = None
        else:
            self.case_or_walkin_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_22_name = None
        else:
            self.case_or_walkin_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_23_name = None
        else:
            self.case_or_walkin_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_24_name = None
        else:
            self.case_or_walkin_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_25_name = None
        else:
            self.case_or_walkin_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_26_name = None
        else:
            self.case_or_walkin_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_27_name = None
        else:
            self.case_or_walkin_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_28_name = None
        else:
            self.case_or_walkin_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_29_name = None
        else:
            self.case_or_walkin_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_30_name = None
        else:
            self.case_or_walkin_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_31_name = None
        else:
            self.case_or_walkin_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_32_name = None
        else:
            self.case_or_walkin_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_33_name = None
        else:
            self.case_or_walkin_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_34_name = None
        else:
            self.case_or_walkin_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_35_name = None
        else:
            self.case_or_walkin_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_36_name = None
        else:
            self.case_or_walkin_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_37_name = None
        else:
            self.case_or_walkin_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_38_name = None
        else:
            self.case_or_walkin_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_39_name = None
        else:
            self.case_or_walkin_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.case_or_walkin_40_name = None
        else:
            self.case_or_walkin_40_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def case_or_walkin_1_name(self):
        """Get case_or_walkin_1_name

        Returns:
            str: the value of `case_or_walkin_1_name` or None if not set
        """
        return self._data["Case or WalkIn 1 Name"]

    @case_or_walkin_1_name.setter
    def case_or_walkin_1_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_1_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_1_name`')

        self._data["Case or WalkIn 1 Name"] = value

    @property
    def case_or_walkin_2_name(self):
        """Get case_or_walkin_2_name

        Returns:
            str: the value of `case_or_walkin_2_name` or None if not set
        """
        return self._data["Case or WalkIn 2 Name"]

    @case_or_walkin_2_name.setter
    def case_or_walkin_2_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_2_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_2_name`')

        self._data["Case or WalkIn 2 Name"] = value

    @property
    def case_or_walkin_3_name(self):
        """Get case_or_walkin_3_name

        Returns:
            str: the value of `case_or_walkin_3_name` or None if not set
        """
        return self._data["Case or WalkIn 3 Name"]

    @case_or_walkin_3_name.setter
    def case_or_walkin_3_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_3_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_3_name`')

        self._data["Case or WalkIn 3 Name"] = value

    @property
    def case_or_walkin_4_name(self):
        """Get case_or_walkin_4_name

        Returns:
            str: the value of `case_or_walkin_4_name` or None if not set
        """
        return self._data["Case or WalkIn 4 Name"]

    @case_or_walkin_4_name.setter
    def case_or_walkin_4_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_4_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_4_name`')

        self._data["Case or WalkIn 4 Name"] = value

    @property
    def case_or_walkin_5_name(self):
        """Get case_or_walkin_5_name

        Returns:
            str: the value of `case_or_walkin_5_name` or None if not set
        """
        return self._data["Case or WalkIn 5 Name"]

    @case_or_walkin_5_name.setter
    def case_or_walkin_5_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_5_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_5_name`')

        self._data["Case or WalkIn 5 Name"] = value

    @property
    def case_or_walkin_6_name(self):
        """Get case_or_walkin_6_name

        Returns:
            str: the value of `case_or_walkin_6_name` or None if not set
        """
        return self._data["Case or WalkIn 6 Name"]

    @case_or_walkin_6_name.setter
    def case_or_walkin_6_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_6_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_6_name`')

        self._data["Case or WalkIn 6 Name"] = value

    @property
    def case_or_walkin_7_name(self):
        """Get case_or_walkin_7_name

        Returns:
            str: the value of `case_or_walkin_7_name` or None if not set
        """
        return self._data["Case or WalkIn 7 Name"]

    @case_or_walkin_7_name.setter
    def case_or_walkin_7_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_7_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_7_name`')

        self._data["Case or WalkIn 7 Name"] = value

    @property
    def case_or_walkin_8_name(self):
        """Get case_or_walkin_8_name

        Returns:
            str: the value of `case_or_walkin_8_name` or None if not set
        """
        return self._data["Case or WalkIn 8 Name"]

    @case_or_walkin_8_name.setter
    def case_or_walkin_8_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_8_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_8_name`')

        self._data["Case or WalkIn 8 Name"] = value

    @property
    def case_or_walkin_9_name(self):
        """Get case_or_walkin_9_name

        Returns:
            str: the value of `case_or_walkin_9_name` or None if not set
        """
        return self._data["Case or WalkIn 9 Name"]

    @case_or_walkin_9_name.setter
    def case_or_walkin_9_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_9_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_9_name`')

        self._data["Case or WalkIn 9 Name"] = value

    @property
    def case_or_walkin_10_name(self):
        """Get case_or_walkin_10_name

        Returns:
            str: the value of `case_or_walkin_10_name` or None if not set
        """
        return self._data["Case or WalkIn 10 Name"]

    @case_or_walkin_10_name.setter
    def case_or_walkin_10_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_10_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_10_name`')

        self._data["Case or WalkIn 10 Name"] = value

    @property
    def case_or_walkin_11_name(self):
        """Get case_or_walkin_11_name

        Returns:
            str: the value of `case_or_walkin_11_name` or None if not set
        """
        return self._data["Case or WalkIn 11 Name"]

    @case_or_walkin_11_name.setter
    def case_or_walkin_11_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_11_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_11_name`')

        self._data["Case or WalkIn 11 Name"] = value

    @property
    def case_or_walkin_12_name(self):
        """Get case_or_walkin_12_name

        Returns:
            str: the value of `case_or_walkin_12_name` or None if not set
        """
        return self._data["Case or WalkIn 12 Name"]

    @case_or_walkin_12_name.setter
    def case_or_walkin_12_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_12_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_12_name`')

        self._data["Case or WalkIn 12 Name"] = value

    @property
    def case_or_walkin_13_name(self):
        """Get case_or_walkin_13_name

        Returns:
            str: the value of `case_or_walkin_13_name` or None if not set
        """
        return self._data["Case or WalkIn 13 Name"]

    @case_or_walkin_13_name.setter
    def case_or_walkin_13_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_13_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_13_name`')

        self._data["Case or WalkIn 13 Name"] = value

    @property
    def case_or_walkin_14_name(self):
        """Get case_or_walkin_14_name

        Returns:
            str: the value of `case_or_walkin_14_name` or None if not set
        """
        return self._data["Case or WalkIn 14 Name"]

    @case_or_walkin_14_name.setter
    def case_or_walkin_14_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_14_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_14_name`')

        self._data["Case or WalkIn 14 Name"] = value

    @property
    def case_or_walkin_15_name(self):
        """Get case_or_walkin_15_name

        Returns:
            str: the value of `case_or_walkin_15_name` or None if not set
        """
        return self._data["Case or WalkIn 15 Name"]

    @case_or_walkin_15_name.setter
    def case_or_walkin_15_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_15_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_15_name`')

        self._data["Case or WalkIn 15 Name"] = value

    @property
    def case_or_walkin_16_name(self):
        """Get case_or_walkin_16_name

        Returns:
            str: the value of `case_or_walkin_16_name` or None if not set
        """
        return self._data["Case or WalkIn 16 Name"]

    @case_or_walkin_16_name.setter
    def case_or_walkin_16_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_16_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_16_name`')

        self._data["Case or WalkIn 16 Name"] = value

    @property
    def case_or_walkin_17_name(self):
        """Get case_or_walkin_17_name

        Returns:
            str: the value of `case_or_walkin_17_name` or None if not set
        """
        return self._data["Case or WalkIn 17 Name"]

    @case_or_walkin_17_name.setter
    def case_or_walkin_17_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_17_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_17_name`')

        self._data["Case or WalkIn 17 Name"] = value

    @property
    def case_or_walkin_18_name(self):
        """Get case_or_walkin_18_name

        Returns:
            str: the value of `case_or_walkin_18_name` or None if not set
        """
        return self._data["Case or WalkIn 18 Name"]

    @case_or_walkin_18_name.setter
    def case_or_walkin_18_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_18_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_18_name`')

        self._data["Case or WalkIn 18 Name"] = value

    @property
    def case_or_walkin_19_name(self):
        """Get case_or_walkin_19_name

        Returns:
            str: the value of `case_or_walkin_19_name` or None if not set
        """
        return self._data["Case or WalkIn 19 Name"]

    @case_or_walkin_19_name.setter
    def case_or_walkin_19_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_19_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_19_name`')

        self._data["Case or WalkIn 19 Name"] = value

    @property
    def case_or_walkin_20_name(self):
        """Get case_or_walkin_20_name

        Returns:
            str: the value of `case_or_walkin_20_name` or None if not set
        """
        return self._data["Case or WalkIn 20 Name"]

    @case_or_walkin_20_name.setter
    def case_or_walkin_20_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_20_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_20_name`')

        self._data["Case or WalkIn 20 Name"] = value

    @property
    def case_or_walkin_21_name(self):
        """Get case_or_walkin_21_name

        Returns:
            str: the value of `case_or_walkin_21_name` or None if not set
        """
        return self._data["Case or WalkIn 21 Name"]

    @case_or_walkin_21_name.setter
    def case_or_walkin_21_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_21_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_21_name`')

        self._data["Case or WalkIn 21 Name"] = value

    @property
    def case_or_walkin_22_name(self):
        """Get case_or_walkin_22_name

        Returns:
            str: the value of `case_or_walkin_22_name` or None if not set
        """
        return self._data["Case or WalkIn 22 Name"]

    @case_or_walkin_22_name.setter
    def case_or_walkin_22_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_22_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_22_name`')

        self._data["Case or WalkIn 22 Name"] = value

    @property
    def case_or_walkin_23_name(self):
        """Get case_or_walkin_23_name

        Returns:
            str: the value of `case_or_walkin_23_name` or None if not set
        """
        return self._data["Case or WalkIn 23 Name"]

    @case_or_walkin_23_name.setter
    def case_or_walkin_23_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_23_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_23_name`')

        self._data["Case or WalkIn 23 Name"] = value

    @property
    def case_or_walkin_24_name(self):
        """Get case_or_walkin_24_name

        Returns:
            str: the value of `case_or_walkin_24_name` or None if not set
        """
        return self._data["Case or WalkIn 24 Name"]

    @case_or_walkin_24_name.setter
    def case_or_walkin_24_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_24_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_24_name`')

        self._data["Case or WalkIn 24 Name"] = value

    @property
    def case_or_walkin_25_name(self):
        """Get case_or_walkin_25_name

        Returns:
            str: the value of `case_or_walkin_25_name` or None if not set
        """
        return self._data["Case or WalkIn 25 Name"]

    @case_or_walkin_25_name.setter
    def case_or_walkin_25_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_25_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_25_name`')

        self._data["Case or WalkIn 25 Name"] = value

    @property
    def case_or_walkin_26_name(self):
        """Get case_or_walkin_26_name

        Returns:
            str: the value of `case_or_walkin_26_name` or None if not set
        """
        return self._data["Case or WalkIn 26 Name"]

    @case_or_walkin_26_name.setter
    def case_or_walkin_26_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_26_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_26_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_26_name`')

        self._data["Case or WalkIn 26 Name"] = value

    @property
    def case_or_walkin_27_name(self):
        """Get case_or_walkin_27_name

        Returns:
            str: the value of `case_or_walkin_27_name` or None if not set
        """
        return self._data["Case or WalkIn 27 Name"]

    @case_or_walkin_27_name.setter
    def case_or_walkin_27_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_27_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_27_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_27_name`')

        self._data["Case or WalkIn 27 Name"] = value

    @property
    def case_or_walkin_28_name(self):
        """Get case_or_walkin_28_name

        Returns:
            str: the value of `case_or_walkin_28_name` or None if not set
        """
        return self._data["Case or WalkIn 28 Name"]

    @case_or_walkin_28_name.setter
    def case_or_walkin_28_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_28_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_28_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_28_name`')

        self._data["Case or WalkIn 28 Name"] = value

    @property
    def case_or_walkin_29_name(self):
        """Get case_or_walkin_29_name

        Returns:
            str: the value of `case_or_walkin_29_name` or None if not set
        """
        return self._data["Case or WalkIn 29 Name"]

    @case_or_walkin_29_name.setter
    def case_or_walkin_29_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_29_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_29_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_29_name`')

        self._data["Case or WalkIn 29 Name"] = value

    @property
    def case_or_walkin_30_name(self):
        """Get case_or_walkin_30_name

        Returns:
            str: the value of `case_or_walkin_30_name` or None if not set
        """
        return self._data["Case or WalkIn 30 Name"]

    @case_or_walkin_30_name.setter
    def case_or_walkin_30_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_30_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_30_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_30_name`')

        self._data["Case or WalkIn 30 Name"] = value

    @property
    def case_or_walkin_31_name(self):
        """Get case_or_walkin_31_name

        Returns:
            str: the value of `case_or_walkin_31_name` or None if not set
        """
        return self._data["Case or WalkIn 31 Name"]

    @case_or_walkin_31_name.setter
    def case_or_walkin_31_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_31_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_31_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_31_name`')

        self._data["Case or WalkIn 31 Name"] = value

    @property
    def case_or_walkin_32_name(self):
        """Get case_or_walkin_32_name

        Returns:
            str: the value of `case_or_walkin_32_name` or None if not set
        """
        return self._data["Case or WalkIn 32 Name"]

    @case_or_walkin_32_name.setter
    def case_or_walkin_32_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_32_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_32_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_32_name`')

        self._data["Case or WalkIn 32 Name"] = value

    @property
    def case_or_walkin_33_name(self):
        """Get case_or_walkin_33_name

        Returns:
            str: the value of `case_or_walkin_33_name` or None if not set
        """
        return self._data["Case or WalkIn 33 Name"]

    @case_or_walkin_33_name.setter
    def case_or_walkin_33_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_33_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_33_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_33_name`')

        self._data["Case or WalkIn 33 Name"] = value

    @property
    def case_or_walkin_34_name(self):
        """Get case_or_walkin_34_name

        Returns:
            str: the value of `case_or_walkin_34_name` or None if not set
        """
        return self._data["Case or WalkIn 34 Name"]

    @case_or_walkin_34_name.setter
    def case_or_walkin_34_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_34_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_34_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_34_name`')

        self._data["Case or WalkIn 34 Name"] = value

    @property
    def case_or_walkin_35_name(self):
        """Get case_or_walkin_35_name

        Returns:
            str: the value of `case_or_walkin_35_name` or None if not set
        """
        return self._data["Case or WalkIn 35 Name"]

    @case_or_walkin_35_name.setter
    def case_or_walkin_35_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_35_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_35_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_35_name`')

        self._data["Case or WalkIn 35 Name"] = value

    @property
    def case_or_walkin_36_name(self):
        """Get case_or_walkin_36_name

        Returns:
            str: the value of `case_or_walkin_36_name` or None if not set
        """
        return self._data["Case or WalkIn 36 Name"]

    @case_or_walkin_36_name.setter
    def case_or_walkin_36_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_36_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_36_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_36_name`')

        self._data["Case or WalkIn 36 Name"] = value

    @property
    def case_or_walkin_37_name(self):
        """Get case_or_walkin_37_name

        Returns:
            str: the value of `case_or_walkin_37_name` or None if not set
        """
        return self._data["Case or WalkIn 37 Name"]

    @case_or_walkin_37_name.setter
    def case_or_walkin_37_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_37_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_37_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_37_name`')

        self._data["Case or WalkIn 37 Name"] = value

    @property
    def case_or_walkin_38_name(self):
        """Get case_or_walkin_38_name

        Returns:
            str: the value of `case_or_walkin_38_name` or None if not set
        """
        return self._data["Case or WalkIn 38 Name"]

    @case_or_walkin_38_name.setter
    def case_or_walkin_38_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_38_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_38_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_38_name`')

        self._data["Case or WalkIn 38 Name"] = value

    @property
    def case_or_walkin_39_name(self):
        """Get case_or_walkin_39_name

        Returns:
            str: the value of `case_or_walkin_39_name` or None if not set
        """
        return self._data["Case or WalkIn 39 Name"]

    @case_or_walkin_39_name.setter
    def case_or_walkin_39_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_39_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_39_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_39_name`')

        self._data["Case or WalkIn 39 Name"] = value

    @property
    def case_or_walkin_40_name(self):
        """Get case_or_walkin_40_name

        Returns:
            str: the value of `case_or_walkin_40_name` or None if not set
        """
        return self._data["Case or WalkIn 40 Name"]

    @case_or_walkin_40_name.setter
    def case_or_walkin_40_name(self, value=None):
        """  Corresponds to IDD Field `case_or_walkin_40_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.

        Args:
            value (str): value for IDD Field `case_or_walkin_40_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `case_or_walkin_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `case_or_walkin_40_name`')

        self._data["Case or WalkIn 40 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.case_or_walkin_1_name))
        out.append(self._to_str(self.case_or_walkin_2_name))
        out.append(self._to_str(self.case_or_walkin_3_name))
        out.append(self._to_str(self.case_or_walkin_4_name))
        out.append(self._to_str(self.case_or_walkin_5_name))
        out.append(self._to_str(self.case_or_walkin_6_name))
        out.append(self._to_str(self.case_or_walkin_7_name))
        out.append(self._to_str(self.case_or_walkin_8_name))
        out.append(self._to_str(self.case_or_walkin_9_name))
        out.append(self._to_str(self.case_or_walkin_10_name))
        out.append(self._to_str(self.case_or_walkin_11_name))
        out.append(self._to_str(self.case_or_walkin_12_name))
        out.append(self._to_str(self.case_or_walkin_13_name))
        out.append(self._to_str(self.case_or_walkin_14_name))
        out.append(self._to_str(self.case_or_walkin_15_name))
        out.append(self._to_str(self.case_or_walkin_16_name))
        out.append(self._to_str(self.case_or_walkin_17_name))
        out.append(self._to_str(self.case_or_walkin_18_name))
        out.append(self._to_str(self.case_or_walkin_19_name))
        out.append(self._to_str(self.case_or_walkin_20_name))
        out.append(self._to_str(self.case_or_walkin_21_name))
        out.append(self._to_str(self.case_or_walkin_22_name))
        out.append(self._to_str(self.case_or_walkin_23_name))
        out.append(self._to_str(self.case_or_walkin_24_name))
        out.append(self._to_str(self.case_or_walkin_25_name))
        out.append(self._to_str(self.case_or_walkin_26_name))
        out.append(self._to_str(self.case_or_walkin_27_name))
        out.append(self._to_str(self.case_or_walkin_28_name))
        out.append(self._to_str(self.case_or_walkin_29_name))
        out.append(self._to_str(self.case_or_walkin_30_name))
        out.append(self._to_str(self.case_or_walkin_31_name))
        out.append(self._to_str(self.case_or_walkin_32_name))
        out.append(self._to_str(self.case_or_walkin_33_name))
        out.append(self._to_str(self.case_or_walkin_34_name))
        out.append(self._to_str(self.case_or_walkin_35_name))
        out.append(self._to_str(self.case_or_walkin_36_name))
        out.append(self._to_str(self.case_or_walkin_37_name))
        out.append(self._to_str(self.case_or_walkin_38_name))
        out.append(self._to_str(self.case_or_walkin_39_name))
        out.append(self._to_str(self.case_or_walkin_40_name))
        return ",".join(out)

class RefrigerationCondenserAirCooled(object):
    """ Corresponds to IDD object `Refrigeration:Condenser:AirCooled`
        Air cooled condenser for a refrigeration system (Refrigeration:System).
    
    """
    internal_name = "Refrigeration:Condenser:AirCooled"
    field_count = 11
    required_fields = ["Name", "Rated Fan Power"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:Condenser:AirCooled`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Effective Total Heat Rejection Rate Curve Name"] = None
        self._data["Rated Subcooling Temperature Difference"] = None
        self._data["Condenser Fan Speed Control Type"] = None
        self._data["Rated Fan Power"] = None
        self._data["Minimum Fan Air Flow Ratio"] = None
        self._data["Air Inlet Node Name or Zone Name"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Condenser Refrigerant Operating Charge Inventory"] = None
        self._data["Condensate Receiver Refrigerant Inventory"] = None
        self._data["Condensate Piping Refrigerant Inventory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_effective_total_heat_rejection_rate_curve_name = None
        else:
            self.rated_effective_total_heat_rejection_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_subcooling_temperature_difference = None
        else:
            self.rated_subcooling_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_fan_speed_control_type = None
        else:
            self.condenser_fan_speed_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_fan_power = None
        else:
            self.rated_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_fan_air_flow_ratio = None
        else:
            self.minimum_fan_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name_or_zone_name = None
        else:
            self.air_inlet_node_name_or_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_refrigerant_operating_charge_inventory = None
        else:
            self.condenser_refrigerant_operating_charge_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_receiver_refrigerant_inventory = None
        else:
            self.condensate_receiver_refrigerant_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_piping_refrigerant_inventory = None
        else:
            self.condensate_piping_refrigerant_inventory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_effective_total_heat_rejection_rate_curve_name(self):
        """Get rated_effective_total_heat_rejection_rate_curve_name

        Returns:
            str: the value of `rated_effective_total_heat_rejection_rate_curve_name` or None if not set
        """
        return self._data["Rated Effective Total Heat Rejection Rate Curve Name"]

    @rated_effective_total_heat_rejection_rate_curve_name.setter
    def rated_effective_total_heat_rejection_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `rated_effective_total_heat_rejection_rate_curve_name`
        Rating as per ARI 460
        Be sure the rating corresponds to the correct refrigerant
        Table:OneIndependentVariable object can also be used
        HeatRejection(W)=C1 +C2(Condensing Temp - Entering Air Temp, deg C)
        Will be adjusted for elevation automatically

        Args:
            value (str): value for IDD Field `rated_effective_total_heat_rejection_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `rated_effective_total_heat_rejection_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `rated_effective_total_heat_rejection_rate_curve_name`')

        self._data["Rated Effective Total Heat Rejection Rate Curve Name"] = value

    @property
    def rated_subcooling_temperature_difference(self):
        """Get rated_subcooling_temperature_difference

        Returns:
            float: the value of `rated_subcooling_temperature_difference` or None if not set
        """
        return self._data["Rated Subcooling Temperature Difference"]

    @rated_subcooling_temperature_difference.setter
    def rated_subcooling_temperature_difference(self, value=0.0 ):
        """  Corresponds to IDD Field `rated_subcooling_temperature_difference`
        must correspond to rating given for total heat rejection effect

        Args:
            value (float): value for IDD Field `rated_subcooling_temperature_difference`
                Units: DeltaC
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_subcooling_temperature_difference`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_subcooling_temperature_difference`')

        self._data["Rated Subcooling Temperature Difference"] = value

    @property
    def condenser_fan_speed_control_type(self):
        """Get condenser_fan_speed_control_type

        Returns:
            str: the value of `condenser_fan_speed_control_type` or None if not set
        """
        return self._data["Condenser Fan Speed Control Type"]

    @condenser_fan_speed_control_type.setter
    def condenser_fan_speed_control_type(self, value="Fixed"):
        """  Corresponds to IDD Field `condenser_fan_speed_control_type`

        Args:
            value (str): value for IDD Field `condenser_fan_speed_control_type`
                Accepted values are:
                      - Fixed
                      - FixedLinear
                      - VariableSpeed
                      - TwoSpeed
                Default value: Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_fan_speed_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_fan_speed_control_type`')
            vals = set()
            vals.add("Fixed")
            vals.add("FixedLinear")
            vals.add("VariableSpeed")
            vals.add("TwoSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condenser_fan_speed_control_type`'.format(value))

        self._data["Condenser Fan Speed Control Type"] = value

    @property
    def rated_fan_power(self):
        """Get rated_fan_power

        Returns:
            float: the value of `rated_fan_power` or None if not set
        """
        return self._data["Rated Fan Power"]

    @rated_fan_power.setter
    def rated_fan_power(self, value=250.0 ):
        """  Corresponds to IDD Field `rated_fan_power`
        Power for condenser fan(s) corresponding to rated total heat rejection effect.

        Args:
            value (float): value for IDD Field `rated_fan_power`
                Units: W
                Default value: 250.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_fan_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_fan_power`')

        self._data["Rated Fan Power"] = value

    @property
    def minimum_fan_air_flow_ratio(self):
        """Get minimum_fan_air_flow_ratio

        Returns:
            float: the value of `minimum_fan_air_flow_ratio` or None if not set
        """
        return self._data["Minimum Fan Air Flow Ratio"]

    @minimum_fan_air_flow_ratio.setter
    def minimum_fan_air_flow_ratio(self, value=0.2 ):
        """  Corresponds to IDD Field `minimum_fan_air_flow_ratio`
        Minimum air flow fraction through condenser fan

        Args:
            value (float): value for IDD Field `minimum_fan_air_flow_ratio`
                Units: dimensionless
                Default value: 0.2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_fan_air_flow_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_fan_air_flow_ratio`')

        self._data["Minimum Fan Air Flow Ratio"] = value

    @property
    def air_inlet_node_name_or_zone_name(self):
        """Get air_inlet_node_name_or_zone_name

        Returns:
            str: the value of `air_inlet_node_name_or_zone_name` or None if not set
        """
        return self._data["Air Inlet Node Name or Zone Name"]

    @air_inlet_node_name_or_zone_name.setter
    def air_inlet_node_name_or_zone_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name_or_zone_name`
        If field is left blank,
        then the model assumes that the inlet air
        conditions are the outdoor air conditions for the current timestep
        (e.g., no adjustment for height above ground).
        If the condenser rejects heat to a conditioned zone, enter the zone name here.

        Args:
            value (str): value for IDD Field `air_inlet_node_name_or_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name_or_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name_or_zone_name`')

        self._data["Air Inlet Node Name or Zone Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    @property
    def condenser_refrigerant_operating_charge_inventory(self):
        """Get condenser_refrigerant_operating_charge_inventory

        Returns:
            float: the value of `condenser_refrigerant_operating_charge_inventory` or None if not set
        """
        return self._data["Condenser Refrigerant Operating Charge Inventory"]

    @condenser_refrigerant_operating_charge_inventory.setter
    def condenser_refrigerant_operating_charge_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `condenser_refrigerant_operating_charge_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condenser_refrigerant_operating_charge_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_refrigerant_operating_charge_inventory`'.format(value))

        self._data["Condenser Refrigerant Operating Charge Inventory"] = value

    @property
    def condensate_receiver_refrigerant_inventory(self):
        """Get condensate_receiver_refrigerant_inventory

        Returns:
            float: the value of `condensate_receiver_refrigerant_inventory` or None if not set
        """
        return self._data["Condensate Receiver Refrigerant Inventory"]

    @condensate_receiver_refrigerant_inventory.setter
    def condensate_receiver_refrigerant_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `condensate_receiver_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condensate_receiver_refrigerant_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensate_receiver_refrigerant_inventory`'.format(value))

        self._data["Condensate Receiver Refrigerant Inventory"] = value

    @property
    def condensate_piping_refrigerant_inventory(self):
        """Get condensate_piping_refrigerant_inventory

        Returns:
            float: the value of `condensate_piping_refrigerant_inventory` or None if not set
        """
        return self._data["Condensate Piping Refrigerant Inventory"]

    @condensate_piping_refrigerant_inventory.setter
    def condensate_piping_refrigerant_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `condensate_piping_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condensate_piping_refrigerant_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensate_piping_refrigerant_inventory`'.format(value))

        self._data["Condensate Piping Refrigerant Inventory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_effective_total_heat_rejection_rate_curve_name))
        out.append(self._to_str(self.rated_subcooling_temperature_difference))
        out.append(self._to_str(self.condenser_fan_speed_control_type))
        out.append(self._to_str(self.rated_fan_power))
        out.append(self._to_str(self.minimum_fan_air_flow_ratio))
        out.append(self._to_str(self.air_inlet_node_name_or_zone_name))
        out.append(self._to_str(self.enduse_subcategory))
        out.append(self._to_str(self.condenser_refrigerant_operating_charge_inventory))
        out.append(self._to_str(self.condensate_receiver_refrigerant_inventory))
        out.append(self._to_str(self.condensate_piping_refrigerant_inventory))
        return ",".join(out)

class RefrigerationCondenserEvaporativeCooled(object):
    """ Corresponds to IDD object `Refrigeration:Condenser:EvaporativeCooled`
        Evaporative-cooled condenser for a refrigeration system (Refrigeration:System).
    
    """
    internal_name = "Refrigeration:Condenser:EvaporativeCooled"
    field_count = 23
    required_fields = ["Name", "Rated Effective Total Heat Rejection Rate", "Rated Fan Power"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:Condenser:EvaporativeCooled`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Effective Total Heat Rejection Rate"] = None
        self._data["Rated Subcooling Temperature Difference"] = None
        self._data["Fan Speed Control Type"] = None
        self._data["Rated Fan Power"] = None
        self._data["Minimum Fan Air Flow Ratio"] = None
        self._data["Approach Temperature Constant Term"] = None
        self._data["Approach Temperature Coefficient 2"] = None
        self._data["Approach Temperature Coefficient 3"] = None
        self._data["Approach Temperature Coefficient 4"] = None
        self._data["Minimum Capacity Factor"] = None
        self._data["Maximum Capacity Factor"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Rated Water Pump Power"] = None
        self._data["Evaporative Water Supply Tank Name"] = None
        self._data["Evaporative Condenser Availability Schedule Name"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Condenser Refrigerant Operating Charge Inventory"] = None
        self._data["Condensate Receiver Refrigerant Inventory"] = None
        self._data["Condensate Piping Refrigerant Inventory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_effective_total_heat_rejection_rate = None
        else:
            self.rated_effective_total_heat_rejection_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_subcooling_temperature_difference = None
        else:
            self.rated_subcooling_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_speed_control_type = None
        else:
            self.fan_speed_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_fan_power = None
        else:
            self.rated_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_fan_air_flow_ratio = None
        else:
            self.minimum_fan_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.approach_temperature_constant_term = None
        else:
            self.approach_temperature_constant_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.approach_temperature_coefficient_2 = None
        else:
            self.approach_temperature_coefficient_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.approach_temperature_coefficient_3 = None
        else:
            self.approach_temperature_coefficient_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.approach_temperature_coefficient_4 = None
        else:
            self.approach_temperature_coefficient_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_capacity_factor = None
        else:
            self.minimum_capacity_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_capacity_factor = None
        else:
            self.maximum_capacity_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_water_pump_power = None
        else:
            self.rated_water_pump_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_water_supply_tank_name = None
        else:
            self.evaporative_water_supply_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporative_condenser_availability_schedule_name = None
        else:
            self.evaporative_condenser_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_refrigerant_operating_charge_inventory = None
        else:
            self.condenser_refrigerant_operating_charge_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_receiver_refrigerant_inventory = None
        else:
            self.condensate_receiver_refrigerant_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_piping_refrigerant_inventory = None
        else:
            self.condensate_piping_refrigerant_inventory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_effective_total_heat_rejection_rate(self):
        """Get rated_effective_total_heat_rejection_rate

        Returns:
            float: the value of `rated_effective_total_heat_rejection_rate` or None if not set
        """
        return self._data["Rated Effective Total Heat Rejection Rate"]

    @rated_effective_total_heat_rejection_rate.setter
    def rated_effective_total_heat_rejection_rate(self, value=None):
        """  Corresponds to IDD Field `rated_effective_total_heat_rejection_rate`
        Rating as per ARI 490
        Be sure the rating corresponds to the correct refrigerant

        Args:
            value (float): value for IDD Field `rated_effective_total_heat_rejection_rate`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_effective_total_heat_rejection_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_effective_total_heat_rejection_rate`')

        self._data["Rated Effective Total Heat Rejection Rate"] = value

    @property
    def rated_subcooling_temperature_difference(self):
        """Get rated_subcooling_temperature_difference

        Returns:
            float: the value of `rated_subcooling_temperature_difference` or None if not set
        """
        return self._data["Rated Subcooling Temperature Difference"]

    @rated_subcooling_temperature_difference.setter
    def rated_subcooling_temperature_difference(self, value=0.0 ):
        """  Corresponds to IDD Field `rated_subcooling_temperature_difference`
        must correspond to rating given for total heat rejection effect

        Args:
            value (float): value for IDD Field `rated_subcooling_temperature_difference`
                Units: DeltaC
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_subcooling_temperature_difference`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_subcooling_temperature_difference`')

        self._data["Rated Subcooling Temperature Difference"] = value

    @property
    def fan_speed_control_type(self):
        """Get fan_speed_control_type

        Returns:
            str: the value of `fan_speed_control_type` or None if not set
        """
        return self._data["Fan Speed Control Type"]

    @fan_speed_control_type.setter
    def fan_speed_control_type(self, value="Fixed"):
        """  Corresponds to IDD Field `fan_speed_control_type`

        Args:
            value (str): value for IDD Field `fan_speed_control_type`
                Accepted values are:
                      - Fixed
                      - FixedLinear
                      - VariableSpeed
                      - TwoSpeed
                Default value: Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_speed_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_speed_control_type`')
            vals = set()
            vals.add("Fixed")
            vals.add("FixedLinear")
            vals.add("VariableSpeed")
            vals.add("TwoSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_speed_control_type`'.format(value))

        self._data["Fan Speed Control Type"] = value

    @property
    def rated_fan_power(self):
        """Get rated_fan_power

        Returns:
            float: the value of `rated_fan_power` or None if not set
        """
        return self._data["Rated Fan Power"]

    @rated_fan_power.setter
    def rated_fan_power(self, value=None):
        """  Corresponds to IDD Field `rated_fan_power`
        Power for condenser fan(s) corresponding to rated total heat rejection effect.

        Args:
            value (float): value for IDD Field `rated_fan_power`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_fan_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_fan_power`')

        self._data["Rated Fan Power"] = value

    @property
    def minimum_fan_air_flow_ratio(self):
        """Get minimum_fan_air_flow_ratio

        Returns:
            float: the value of `minimum_fan_air_flow_ratio` or None if not set
        """
        return self._data["Minimum Fan Air Flow Ratio"]

    @minimum_fan_air_flow_ratio.setter
    def minimum_fan_air_flow_ratio(self, value=0.2 ):
        """  Corresponds to IDD Field `minimum_fan_air_flow_ratio`
        Minimum air flow fraction through condenser fan

        Args:
            value (float): value for IDD Field `minimum_fan_air_flow_ratio`
                Units: dimensionless
                Default value: 0.2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_fan_air_flow_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_fan_air_flow_ratio`')

        self._data["Minimum Fan Air Flow Ratio"] = value

    @property
    def approach_temperature_constant_term(self):
        """Get approach_temperature_constant_term

        Returns:
            float: the value of `approach_temperature_constant_term` or None if not set
        """
        return self._data["Approach Temperature Constant Term"]

    @approach_temperature_constant_term.setter
    def approach_temperature_constant_term(self, value=6.63 ):
        """  Corresponds to IDD Field `approach_temperature_constant_term`
        A1 in delta T = A1 + A2(hrcf) + A3/(hrcf) + A4(Twb)

        Args:
            value (float): value for IDD Field `approach_temperature_constant_term`
                Units: C
                Default value: 6.63
                value >= 0.0
                value <= 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `approach_temperature_constant_term`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `approach_temperature_constant_term`')
            if value > 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `approach_temperature_constant_term`')

        self._data["Approach Temperature Constant Term"] = value

    @property
    def approach_temperature_coefficient_2(self):
        """Get approach_temperature_coefficient_2

        Returns:
            float: the value of `approach_temperature_coefficient_2` or None if not set
        """
        return self._data["Approach Temperature Coefficient 2"]

    @approach_temperature_coefficient_2.setter
    def approach_temperature_coefficient_2(self, value=0.468 ):
        """  Corresponds to IDD Field `approach_temperature_coefficient_2`
        A2 in delta T = A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)

        Args:
            value (float): value for IDD Field `approach_temperature_coefficient_2`
                Units: C
                Default value: 0.468
                value >= 0.0
                value <= 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `approach_temperature_coefficient_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `approach_temperature_coefficient_2`')
            if value > 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `approach_temperature_coefficient_2`')

        self._data["Approach Temperature Coefficient 2"] = value

    @property
    def approach_temperature_coefficient_3(self):
        """Get approach_temperature_coefficient_3

        Returns:
            float: the value of `approach_temperature_coefficient_3` or None if not set
        """
        return self._data["Approach Temperature Coefficient 3"]

    @approach_temperature_coefficient_3.setter
    def approach_temperature_coefficient_3(self, value=17.93 ):
        """  Corresponds to IDD Field `approach_temperature_coefficient_3`
        A3 in delta T = A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)

        Args:
            value (float): value for IDD Field `approach_temperature_coefficient_3`
                Units: C
                Default value: 17.93
                value >= 0.0
                value <= 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `approach_temperature_coefficient_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `approach_temperature_coefficient_3`')
            if value > 30.0:
                raise ValueError('value need to be smaller 30.0 '
                                 'for field `approach_temperature_coefficient_3`')

        self._data["Approach Temperature Coefficient 3"] = value

    @property
    def approach_temperature_coefficient_4(self):
        """Get approach_temperature_coefficient_4

        Returns:
            float: the value of `approach_temperature_coefficient_4` or None if not set
        """
        return self._data["Approach Temperature Coefficient 4"]

    @approach_temperature_coefficient_4.setter
    def approach_temperature_coefficient_4(self, value=-0.322 ):
        """  Corresponds to IDD Field `approach_temperature_coefficient_4`
        A4 in deltaT=A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)

        Args:
            value (float): value for IDD Field `approach_temperature_coefficient_4`
                Units: dimensionless
                Default value: -0.322
                value >= -20.0
                value <= 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `approach_temperature_coefficient_4`'.format(value))
            if value < -20.0:
                raise ValueError('value need to be greater or equal -20.0 '
                                 'for field `approach_temperature_coefficient_4`')
            if value > 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `approach_temperature_coefficient_4`')

        self._data["Approach Temperature Coefficient 4"] = value

    @property
    def minimum_capacity_factor(self):
        """Get minimum_capacity_factor

        Returns:
            float: the value of `minimum_capacity_factor` or None if not set
        """
        return self._data["Minimum Capacity Factor"]

    @minimum_capacity_factor.setter
    def minimum_capacity_factor(self, value=0.5 ):
        """  Corresponds to IDD Field `minimum_capacity_factor`
        taken from manufacturer's Heat Rejection Capacity Factor Table

        Args:
            value (float): value for IDD Field `minimum_capacity_factor`
                Units: dimensionless
                Default value: 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_capacity_factor`'.format(value))

        self._data["Minimum Capacity Factor"] = value

    @property
    def maximum_capacity_factor(self):
        """Get maximum_capacity_factor

        Returns:
            float: the value of `maximum_capacity_factor` or None if not set
        """
        return self._data["Maximum Capacity Factor"]

    @maximum_capacity_factor.setter
    def maximum_capacity_factor(self, value=5.0 ):
        """  Corresponds to IDD Field `maximum_capacity_factor`
        taken from manufacturer's Heat Rejection Capacity Factor Table

        Args:
            value (float): value for IDD Field `maximum_capacity_factor`
                Units: dimensionless
                Default value: 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_capacity_factor`'.format(value))

        self._data["Maximum Capacity Factor"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`
        If field is left blank,
        then the model assumes that the inlet air
        conditions are the outdoor air conditions for the current timestep
        (e.g., no adjustment for height above ground).

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `rated_air_flow_rate`
        Used to calculate evaporative condenser water use and fan energy use.

        Args:
            value (float): value for IDD Field `rated_air_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))

        self._data["Rated Air Flow Rate"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=200.0 ):
        """  Corresponds to IDD Field `basin_heater_capacity`
        This field is only used for periods
        when the evap condenser is available (field Evaporative Condenser Availability
        Schedule). For this situation, the heater heats the basin water when the
        outdoor air dry-bulb temperature falls below the set point temperature, but
        only when the condenser fans are off (i.e., no refrigerated case load).

        Args:
            value (float): value for IDD Field `basin_heater_capacity`
                Units: W/K
                Default value: 200.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')

        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `basin_heater_setpoint_temperature`
        Enter the outdoor dry-bulb temperature at which the basin heater turns on.

        Args:
            value (float): value for IDD Field `basin_heater_setpoint_temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')

        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def rated_water_pump_power(self):
        """Get rated_water_pump_power

        Returns:
            float: the value of `rated_water_pump_power` or None if not set
        """
        return self._data["Rated Water Pump Power"]

    @rated_water_pump_power.setter
    def rated_water_pump_power(self, value=1000.0 ):
        """  Corresponds to IDD Field `rated_water_pump_power`
        Design recirculating water pump power.

        Args:
            value (float): value for IDD Field `rated_water_pump_power`
                Units: W
                Default value: 1000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_water_pump_power`'.format(value))

        self._data["Rated Water Pump Power"] = value

    @property
    def evaporative_water_supply_tank_name(self):
        """Get evaporative_water_supply_tank_name

        Returns:
            str: the value of `evaporative_water_supply_tank_name` or None if not set
        """
        return self._data["Evaporative Water Supply Tank Name"]

    @evaporative_water_supply_tank_name.setter
    def evaporative_water_supply_tank_name(self, value=None):
        """  Corresponds to IDD Field `evaporative_water_supply_tank_name`
        If blank, water supply is from Mains.

        Args:
            value (str): value for IDD Field `evaporative_water_supply_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporative_water_supply_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporative_water_supply_tank_name`')

        self._data["Evaporative Water Supply Tank Name"] = value

    @property
    def evaporative_condenser_availability_schedule_name(self):
        """Get evaporative_condenser_availability_schedule_name

        Returns:
            str: the value of `evaporative_condenser_availability_schedule_name` or None if not set
        """
        return self._data["Evaporative Condenser Availability Schedule Name"]

    @evaporative_condenser_availability_schedule_name.setter
    def evaporative_condenser_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `evaporative_condenser_availability_schedule_name`
        Schedule values greater than 0 indicate that evaporative cooling of the
        condenser is available. This schedule allows the user to define seasonal
        shutdown/draining of the water cooling system in cold climate applications.
        For periods with schedule values of 0, the condenser operates as Air Cooled.

        Args:
            value (str): value for IDD Field `evaporative_condenser_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporative_condenser_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporative_condenser_availability_schedule_name`')

        self._data["Evaporative Condenser Availability Schedule Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    @property
    def condenser_refrigerant_operating_charge_inventory(self):
        """Get condenser_refrigerant_operating_charge_inventory

        Returns:
            float: the value of `condenser_refrigerant_operating_charge_inventory` or None if not set
        """
        return self._data["Condenser Refrigerant Operating Charge Inventory"]

    @condenser_refrigerant_operating_charge_inventory.setter
    def condenser_refrigerant_operating_charge_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `condenser_refrigerant_operating_charge_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condenser_refrigerant_operating_charge_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_refrigerant_operating_charge_inventory`'.format(value))

        self._data["Condenser Refrigerant Operating Charge Inventory"] = value

    @property
    def condensate_receiver_refrigerant_inventory(self):
        """Get condensate_receiver_refrigerant_inventory

        Returns:
            float: the value of `condensate_receiver_refrigerant_inventory` or None if not set
        """
        return self._data["Condensate Receiver Refrigerant Inventory"]

    @condensate_receiver_refrigerant_inventory.setter
    def condensate_receiver_refrigerant_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `condensate_receiver_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condensate_receiver_refrigerant_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensate_receiver_refrigerant_inventory`'.format(value))

        self._data["Condensate Receiver Refrigerant Inventory"] = value

    @property
    def condensate_piping_refrigerant_inventory(self):
        """Get condensate_piping_refrigerant_inventory

        Returns:
            float: the value of `condensate_piping_refrigerant_inventory` or None if not set
        """
        return self._data["Condensate Piping Refrigerant Inventory"]

    @condensate_piping_refrigerant_inventory.setter
    def condensate_piping_refrigerant_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `condensate_piping_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condensate_piping_refrigerant_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensate_piping_refrigerant_inventory`'.format(value))

        self._data["Condensate Piping Refrigerant Inventory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_effective_total_heat_rejection_rate))
        out.append(self._to_str(self.rated_subcooling_temperature_difference))
        out.append(self._to_str(self.fan_speed_control_type))
        out.append(self._to_str(self.rated_fan_power))
        out.append(self._to_str(self.minimum_fan_air_flow_ratio))
        out.append(self._to_str(self.approach_temperature_constant_term))
        out.append(self._to_str(self.approach_temperature_coefficient_2))
        out.append(self._to_str(self.approach_temperature_coefficient_3))
        out.append(self._to_str(self.approach_temperature_coefficient_4))
        out.append(self._to_str(self.minimum_capacity_factor))
        out.append(self._to_str(self.maximum_capacity_factor))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.rated_air_flow_rate))
        out.append(self._to_str(self.basin_heater_capacity))
        out.append(self._to_str(self.basin_heater_setpoint_temperature))
        out.append(self._to_str(self.rated_water_pump_power))
        out.append(self._to_str(self.evaporative_water_supply_tank_name))
        out.append(self._to_str(self.evaporative_condenser_availability_schedule_name))
        out.append(self._to_str(self.enduse_subcategory))
        out.append(self._to_str(self.condenser_refrigerant_operating_charge_inventory))
        out.append(self._to_str(self.condensate_receiver_refrigerant_inventory))
        out.append(self._to_str(self.condensate_piping_refrigerant_inventory))
        return ",".join(out)

class RefrigerationCondenserWaterCooled(object):
    """ Corresponds to IDD object `Refrigeration:Condenser:WaterCooled`
        Water cooled condenser for a refrigeration system (Refrigeration:System).
    
    """
    internal_name = "Refrigeration:Condenser:WaterCooled"
    field_count = 17
    required_fields = ["Name", "Rated Condensing Temperature", "Rated Water Inlet Temperature"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:Condenser:WaterCooled`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Effective Total Heat Rejection Rate"] = None
        self._data["Rated Condensing Temperature"] = None
        self._data["Rated Subcooling Temperature Difference"] = None
        self._data["Rated Water Inlet Temperature"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Water-Cooled Loop Flow Type"] = None
        self._data["Water Outlet Temperature Schedule Name"] = None
        self._data["Water Design Flow Rate"] = None
        self._data["Water Maximum Flow Rate"] = None
        self._data["Water Maximum Water Outlet Temperature"] = None
        self._data["Water Minimum Water Inlet Temperature"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Condenser Refrigerant Operating Charge Inventory"] = None
        self._data["Condensate Receiver Refrigerant Inventory"] = None
        self._data["Condensate Piping Refrigerant Inventory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_effective_total_heat_rejection_rate = None
        else:
            self.rated_effective_total_heat_rejection_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_condensing_temperature = None
        else:
            self.rated_condensing_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_subcooling_temperature_difference = None
        else:
            self.rated_subcooling_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_water_inlet_temperature = None
        else:
            self.rated_water_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.watercooled_loop_flow_type = None
        else:
            self.watercooled_loop_flow_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_outlet_temperature_schedule_name = None
        else:
            self.water_outlet_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_design_flow_rate = None
        else:
            self.water_design_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_maximum_flow_rate = None
        else:
            self.water_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_maximum_water_outlet_temperature = None
        else:
            self.water_maximum_water_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_minimum_water_inlet_temperature = None
        else:
            self.water_minimum_water_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_refrigerant_operating_charge_inventory = None
        else:
            self.condenser_refrigerant_operating_charge_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_receiver_refrigerant_inventory = None
        else:
            self.condensate_receiver_refrigerant_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_piping_refrigerant_inventory = None
        else:
            self.condensate_piping_refrigerant_inventory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_effective_total_heat_rejection_rate(self):
        """Get rated_effective_total_heat_rejection_rate

        Returns:
            float: the value of `rated_effective_total_heat_rejection_rate` or None if not set
        """
        return self._data["Rated Effective Total Heat Rejection Rate"]

    @rated_effective_total_heat_rejection_rate.setter
    def rated_effective_total_heat_rejection_rate(self, value=None):
        """  Corresponds to IDD Field `rated_effective_total_heat_rejection_rate`
        Rating as per ARI 450
        Be sure the rating corresponds to the correct refrigerant
        not used in calculations, only for identification and output

        Args:
            value (float): value for IDD Field `rated_effective_total_heat_rejection_rate`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_effective_total_heat_rejection_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_effective_total_heat_rejection_rate`')

        self._data["Rated Effective Total Heat Rejection Rate"] = value

    @property
    def rated_condensing_temperature(self):
        """Get rated_condensing_temperature

        Returns:
            float: the value of `rated_condensing_temperature` or None if not set
        """
        return self._data["Rated Condensing Temperature"]

    @rated_condensing_temperature.setter
    def rated_condensing_temperature(self, value=None):
        """  Corresponds to IDD Field `rated_condensing_temperature`
        must correspond to rating given for total heat rejection effect

        Args:
            value (float): value for IDD Field `rated_condensing_temperature`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_condensing_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_condensing_temperature`')

        self._data["Rated Condensing Temperature"] = value

    @property
    def rated_subcooling_temperature_difference(self):
        """Get rated_subcooling_temperature_difference

        Returns:
            float: the value of `rated_subcooling_temperature_difference` or None if not set
        """
        return self._data["Rated Subcooling Temperature Difference"]

    @rated_subcooling_temperature_difference.setter
    def rated_subcooling_temperature_difference(self, value=0.0 ):
        """  Corresponds to IDD Field `rated_subcooling_temperature_difference`
        must correspond to rating given for total heat rejection effect

        Args:
            value (float): value for IDD Field `rated_subcooling_temperature_difference`
                Units: DeltaC
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_subcooling_temperature_difference`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_subcooling_temperature_difference`')

        self._data["Rated Subcooling Temperature Difference"] = value

    @property
    def rated_water_inlet_temperature(self):
        """Get rated_water_inlet_temperature

        Returns:
            float: the value of `rated_water_inlet_temperature` or None if not set
        """
        return self._data["Rated Water Inlet Temperature"]

    @rated_water_inlet_temperature.setter
    def rated_water_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `rated_water_inlet_temperature`
        must correspond to rating given for total heat rejection effect

        Args:
            value (float): value for IDD Field `rated_water_inlet_temperature`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_water_inlet_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_water_inlet_temperature`')

        self._data["Rated Water Inlet Temperature"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `water_inlet_node_name`

        Args:
            value (str): value for IDD Field `water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')

        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `water_outlet_node_name`

        Args:
            value (str): value for IDD Field `water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')

        self._data["Water Outlet Node Name"] = value

    @property
    def watercooled_loop_flow_type(self):
        """Get watercooled_loop_flow_type

        Returns:
            str: the value of `watercooled_loop_flow_type` or None if not set
        """
        return self._data["Water-Cooled Loop Flow Type"]

    @watercooled_loop_flow_type.setter
    def watercooled_loop_flow_type(self, value="VariableFlow"):
        """  Corresponds to IDD Field `watercooled_loop_flow_type`

        Args:
            value (str): value for IDD Field `watercooled_loop_flow_type`
                Accepted values are:
                      - VariableFlow
                      - ConstantFlow
                Default value: VariableFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `watercooled_loop_flow_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watercooled_loop_flow_type`')
            vals = set()
            vals.add("VariableFlow")
            vals.add("ConstantFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `watercooled_loop_flow_type`'.format(value))

        self._data["Water-Cooled Loop Flow Type"] = value

    @property
    def water_outlet_temperature_schedule_name(self):
        """Get water_outlet_temperature_schedule_name

        Returns:
            str: the value of `water_outlet_temperature_schedule_name` or None if not set
        """
        return self._data["Water Outlet Temperature Schedule Name"]

    @water_outlet_temperature_schedule_name.setter
    def water_outlet_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `water_outlet_temperature_schedule_name`
        Applicable only when loop flow type is Variable Flow.

        Args:
            value (str): value for IDD Field `water_outlet_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_temperature_schedule_name`')

        self._data["Water Outlet Temperature Schedule Name"] = value

    @property
    def water_design_flow_rate(self):
        """Get water_design_flow_rate

        Returns:
            float: the value of `water_design_flow_rate` or None if not set
        """
        return self._data["Water Design Flow Rate"]

    @water_design_flow_rate.setter
    def water_design_flow_rate(self, value=None):
        """  Corresponds to IDD Field `water_design_flow_rate`
        note required units must be converted from L/s as specified in ARI 450-2007
        Applicable only when loop flow type is Constant Flow.

        Args:
            value (float): value for IDD Field `water_design_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_design_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `water_design_flow_rate`')

        self._data["Water Design Flow Rate"] = value

    @property
    def water_maximum_flow_rate(self):
        """Get water_maximum_flow_rate

        Returns:
            float: the value of `water_maximum_flow_rate` or None if not set
        """
        return self._data["Water Maximum Flow Rate"]

    @water_maximum_flow_rate.setter
    def water_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `water_maximum_flow_rate`

        Args:
            value (float): value for IDD Field `water_maximum_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_maximum_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `water_maximum_flow_rate`')

        self._data["Water Maximum Flow Rate"] = value

    @property
    def water_maximum_water_outlet_temperature(self):
        """Get water_maximum_water_outlet_temperature

        Returns:
            float: the value of `water_maximum_water_outlet_temperature` or None if not set
        """
        return self._data["Water Maximum Water Outlet Temperature"]

    @water_maximum_water_outlet_temperature.setter
    def water_maximum_water_outlet_temperature(self, value=55.0 ):
        """  Corresponds to IDD Field `water_maximum_water_outlet_temperature`

        Args:
            value (float): value for IDD Field `water_maximum_water_outlet_temperature`
                Units: C
                Default value: 55.0
                value >= 10.0
                value <= 60.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_maximum_water_outlet_temperature`'.format(value))
            if value < 10.0:
                raise ValueError('value need to be greater or equal 10.0 '
                                 'for field `water_maximum_water_outlet_temperature`')
            if value > 60.0:
                raise ValueError('value need to be smaller 60.0 '
                                 'for field `water_maximum_water_outlet_temperature`')

        self._data["Water Maximum Water Outlet Temperature"] = value

    @property
    def water_minimum_water_inlet_temperature(self):
        """Get water_minimum_water_inlet_temperature

        Returns:
            float: the value of `water_minimum_water_inlet_temperature` or None if not set
        """
        return self._data["Water Minimum Water Inlet Temperature"]

    @water_minimum_water_inlet_temperature.setter
    def water_minimum_water_inlet_temperature(self, value=10.0 ):
        """  Corresponds to IDD Field `water_minimum_water_inlet_temperature`
        related to the minimum allowed refrigeration system condensing temperature

        Args:
            value (float): value for IDD Field `water_minimum_water_inlet_temperature`
                Units: C
                Default value: 10.0
                value >= 10.0
                value <= 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_minimum_water_inlet_temperature`'.format(value))
            if value < 10.0:
                raise ValueError('value need to be greater or equal 10.0 '
                                 'for field `water_minimum_water_inlet_temperature`')
            if value > 30.0:
                raise ValueError('value need to be smaller 30.0 '
                                 'for field `water_minimum_water_inlet_temperature`')

        self._data["Water Minimum Water Inlet Temperature"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    @property
    def condenser_refrigerant_operating_charge_inventory(self):
        """Get condenser_refrigerant_operating_charge_inventory

        Returns:
            float: the value of `condenser_refrigerant_operating_charge_inventory` or None if not set
        """
        return self._data["Condenser Refrigerant Operating Charge Inventory"]

    @condenser_refrigerant_operating_charge_inventory.setter
    def condenser_refrigerant_operating_charge_inventory(self, value=None):
        """  Corresponds to IDD Field `condenser_refrigerant_operating_charge_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condenser_refrigerant_operating_charge_inventory`
                Units: kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_refrigerant_operating_charge_inventory`'.format(value))

        self._data["Condenser Refrigerant Operating Charge Inventory"] = value

    @property
    def condensate_receiver_refrigerant_inventory(self):
        """Get condensate_receiver_refrigerant_inventory

        Returns:
            float: the value of `condensate_receiver_refrigerant_inventory` or None if not set
        """
        return self._data["Condensate Receiver Refrigerant Inventory"]

    @condensate_receiver_refrigerant_inventory.setter
    def condensate_receiver_refrigerant_inventory(self, value=None):
        """  Corresponds to IDD Field `condensate_receiver_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condensate_receiver_refrigerant_inventory`
                Units: kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensate_receiver_refrigerant_inventory`'.format(value))

        self._data["Condensate Receiver Refrigerant Inventory"] = value

    @property
    def condensate_piping_refrigerant_inventory(self):
        """Get condensate_piping_refrigerant_inventory

        Returns:
            float: the value of `condensate_piping_refrigerant_inventory` or None if not set
        """
        return self._data["Condensate Piping Refrigerant Inventory"]

    @condensate_piping_refrigerant_inventory.setter
    def condensate_piping_refrigerant_inventory(self, value=None):
        """  Corresponds to IDD Field `condensate_piping_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condensate_piping_refrigerant_inventory`
                Units: kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensate_piping_refrigerant_inventory`'.format(value))

        self._data["Condensate Piping Refrigerant Inventory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_effective_total_heat_rejection_rate))
        out.append(self._to_str(self.rated_condensing_temperature))
        out.append(self._to_str(self.rated_subcooling_temperature_difference))
        out.append(self._to_str(self.rated_water_inlet_temperature))
        out.append(self._to_str(self.water_inlet_node_name))
        out.append(self._to_str(self.water_outlet_node_name))
        out.append(self._to_str(self.watercooled_loop_flow_type))
        out.append(self._to_str(self.water_outlet_temperature_schedule_name))
        out.append(self._to_str(self.water_design_flow_rate))
        out.append(self._to_str(self.water_maximum_flow_rate))
        out.append(self._to_str(self.water_maximum_water_outlet_temperature))
        out.append(self._to_str(self.water_minimum_water_inlet_temperature))
        out.append(self._to_str(self.enduse_subcategory))
        out.append(self._to_str(self.condenser_refrigerant_operating_charge_inventory))
        out.append(self._to_str(self.condensate_receiver_refrigerant_inventory))
        out.append(self._to_str(self.condensate_piping_refrigerant_inventory))
        return ",".join(out)

class RefrigerationCondenserCascade(object):
    """ Corresponds to IDD object `Refrigeration:Condenser:Cascade`
        Cascade condenser for a refrigeration system (Refrigeration:System). The cascade
        condenser is unlike the other condenser options because it rejects heat to another,
        higher-temperature, refrigeration system. That is, the cascade condenser acts as a
        heat rejection object for one system, but acts as a refrigeration load for another
        system.
    
    """
    internal_name = "Refrigeration:Condenser:Cascade"
    field_count = 8
    required_fields = ["Name", "Rated Condensing Temperature", "Rated Effective Total Heat Rejection Rate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:Condenser:Cascade`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Condensing Temperature"] = None
        self._data["Rated Approach Temperature Difference"] = None
        self._data["Rated Effective Total Heat Rejection Rate"] = None
        self._data["Condensing Temperature Control Type"] = None
        self._data["Condenser Refrigerant Operating Charge Inventory"] = None
        self._data["Condensate Receiver Refrigerant Inventory"] = None
        self._data["Condensate Piping Refrigerant Inventory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_condensing_temperature = None
        else:
            self.rated_condensing_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_approach_temperature_difference = None
        else:
            self.rated_approach_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_effective_total_heat_rejection_rate = None
        else:
            self.rated_effective_total_heat_rejection_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensing_temperature_control_type = None
        else:
            self.condensing_temperature_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condenser_refrigerant_operating_charge_inventory = None
        else:
            self.condenser_refrigerant_operating_charge_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_receiver_refrigerant_inventory = None
        else:
            self.condensate_receiver_refrigerant_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_piping_refrigerant_inventory = None
        else:
            self.condensate_piping_refrigerant_inventory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_condensing_temperature(self):
        """Get rated_condensing_temperature

        Returns:
            float: the value of `rated_condensing_temperature` or None if not set
        """
        return self._data["Rated Condensing Temperature"]

    @rated_condensing_temperature.setter
    def rated_condensing_temperature(self, value=None):
        """  Corresponds to IDD Field `rated_condensing_temperature`
        This is the condensing temperature for the lower temperature secondary loop

        Args:
            value (float): value for IDD Field `rated_condensing_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_condensing_temperature`'.format(value))

        self._data["Rated Condensing Temperature"] = value

    @property
    def rated_approach_temperature_difference(self):
        """Get rated_approach_temperature_difference

        Returns:
            float: the value of `rated_approach_temperature_difference` or None if not set
        """
        return self._data["Rated Approach Temperature Difference"]

    @rated_approach_temperature_difference.setter
    def rated_approach_temperature_difference(self, value=3.0 ):
        """  Corresponds to IDD Field `rated_approach_temperature_difference`
        This is the difference between the condensing and evaporating temperatures

        Args:
            value (float): value for IDD Field `rated_approach_temperature_difference`
                Units: DeltaC
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_approach_temperature_difference`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_approach_temperature_difference`')

        self._data["Rated Approach Temperature Difference"] = value

    @property
    def rated_effective_total_heat_rejection_rate(self):
        """Get rated_effective_total_heat_rejection_rate

        Returns:
            float: the value of `rated_effective_total_heat_rejection_rate` or None if not set
        """
        return self._data["Rated Effective Total Heat Rejection Rate"]

    @rated_effective_total_heat_rejection_rate.setter
    def rated_effective_total_heat_rejection_rate(self, value=None):
        """  Corresponds to IDD Field `rated_effective_total_heat_rejection_rate`
        used for identification and rough system size error checking

        Args:
            value (float): value for IDD Field `rated_effective_total_heat_rejection_rate`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_effective_total_heat_rejection_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_effective_total_heat_rejection_rate`')

        self._data["Rated Effective Total Heat Rejection Rate"] = value

    @property
    def condensing_temperature_control_type(self):
        """Get condensing_temperature_control_type

        Returns:
            str: the value of `condensing_temperature_control_type` or None if not set
        """
        return self._data["Condensing Temperature Control Type"]

    @condensing_temperature_control_type.setter
    def condensing_temperature_control_type(self, value="Fixed"):
        """  Corresponds to IDD Field `condensing_temperature_control_type`
        Fixed keeps condensing temperature constant
        Float sets the condensing temperature according to
        the other loads on the higher temperature system

        Args:
            value (str): value for IDD Field `condensing_temperature_control_type`
                Accepted values are:
                      - Fixed
                      - Float
                Default value: Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensing_temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensing_temperature_control_type`')
            vals = set()
            vals.add("Fixed")
            vals.add("Float")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condensing_temperature_control_type`'.format(value))

        self._data["Condensing Temperature Control Type"] = value

    @property
    def condenser_refrigerant_operating_charge_inventory(self):
        """Get condenser_refrigerant_operating_charge_inventory

        Returns:
            float: the value of `condenser_refrigerant_operating_charge_inventory` or None if not set
        """
        return self._data["Condenser Refrigerant Operating Charge Inventory"]

    @condenser_refrigerant_operating_charge_inventory.setter
    def condenser_refrigerant_operating_charge_inventory(self, value=None):
        """  Corresponds to IDD Field `condenser_refrigerant_operating_charge_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condenser_refrigerant_operating_charge_inventory`
                Units: kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_refrigerant_operating_charge_inventory`'.format(value))

        self._data["Condenser Refrigerant Operating Charge Inventory"] = value

    @property
    def condensate_receiver_refrigerant_inventory(self):
        """Get condensate_receiver_refrigerant_inventory

        Returns:
            float: the value of `condensate_receiver_refrigerant_inventory` or None if not set
        """
        return self._data["Condensate Receiver Refrigerant Inventory"]

    @condensate_receiver_refrigerant_inventory.setter
    def condensate_receiver_refrigerant_inventory(self, value=None):
        """  Corresponds to IDD Field `condensate_receiver_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condensate_receiver_refrigerant_inventory`
                Units: kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensate_receiver_refrigerant_inventory`'.format(value))

        self._data["Condensate Receiver Refrigerant Inventory"] = value

    @property
    def condensate_piping_refrigerant_inventory(self):
        """Get condensate_piping_refrigerant_inventory

        Returns:
            float: the value of `condensate_piping_refrigerant_inventory` or None if not set
        """
        return self._data["Condensate Piping Refrigerant Inventory"]

    @condensate_piping_refrigerant_inventory.setter
    def condensate_piping_refrigerant_inventory(self, value=None):
        """  Corresponds to IDD Field `condensate_piping_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `condensate_piping_refrigerant_inventory`
                Units: kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensate_piping_refrigerant_inventory`'.format(value))

        self._data["Condensate Piping Refrigerant Inventory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_condensing_temperature))
        out.append(self._to_str(self.rated_approach_temperature_difference))
        out.append(self._to_str(self.rated_effective_total_heat_rejection_rate))
        out.append(self._to_str(self.condensing_temperature_control_type))
        out.append(self._to_str(self.condenser_refrigerant_operating_charge_inventory))
        out.append(self._to_str(self.condensate_receiver_refrigerant_inventory))
        out.append(self._to_str(self.condensate_piping_refrigerant_inventory))
        return ",".join(out)

class RefrigerationGasCoolerAirCooled(object):
    """ Corresponds to IDD object `Refrigeration:GasCooler:AirCooled`
        The transcritical refrigeration system requires a single gas cooler to reject the
        system heat.
    
    """
    internal_name = "Refrigeration:GasCooler:AirCooled"
    field_count = 14
    required_fields = ["Name", "Rated Total Heat Rejection Rate Curve Name", "Rated Fan Power"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:GasCooler:AirCooled`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Total Heat Rejection Rate Curve Name"] = None
        self._data["Gas Cooler Fan Speed Control Type"] = None
        self._data["Rated Fan Power"] = None
        self._data["Minimum Fan Air Flow Ratio"] = None
        self._data["Transition Temperature"] = None
        self._data["Transcritical Approach Temperature"] = None
        self._data["Subcritical Temperature Difference"] = None
        self._data["Minimum Condensing Temperature"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Gas Cooler Refrigerant Operating Charge Inventory"] = None
        self._data["Gas Cooler Receiver Refrigerant Inventory"] = None
        self._data["Gas Cooler Outlet Piping Refrigerant Inventory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_total_heat_rejection_rate_curve_name = None
        else:
            self.rated_total_heat_rejection_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_cooler_fan_speed_control_type = None
        else:
            self.gas_cooler_fan_speed_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_fan_power = None
        else:
            self.rated_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_fan_air_flow_ratio = None
        else:
            self.minimum_fan_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.transition_temperature = None
        else:
            self.transition_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.transcritical_approach_temperature = None
        else:
            self.transcritical_approach_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.subcritical_temperature_difference = None
        else:
            self.subcritical_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_condensing_temperature = None
        else:
            self.minimum_condensing_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_cooler_refrigerant_operating_charge_inventory = None
        else:
            self.gas_cooler_refrigerant_operating_charge_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_cooler_receiver_refrigerant_inventory = None
        else:
            self.gas_cooler_receiver_refrigerant_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.gas_cooler_outlet_piping_refrigerant_inventory = None
        else:
            self.gas_cooler_outlet_piping_refrigerant_inventory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_total_heat_rejection_rate_curve_name(self):
        """Get rated_total_heat_rejection_rate_curve_name

        Returns:
            str: the value of `rated_total_heat_rejection_rate_curve_name` or None if not set
        """
        return self._data["Rated Total Heat Rejection Rate Curve Name"]

    @rated_total_heat_rejection_rate_curve_name.setter
    def rated_total_heat_rejection_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `rated_total_heat_rejection_rate_curve_name`
        Table:OneIndependentVariable object can also be used
        Be sure the rating corresponds to the correct refrigerant (R744)
        HeatRejection(W)=C1 +C2(Gas Cooler Outlet Temp - Entering Air Temp, deg C)
        Will be adjusted for elevation automatically

        Args:
            value (str): value for IDD Field `rated_total_heat_rejection_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `rated_total_heat_rejection_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `rated_total_heat_rejection_rate_curve_name`')

        self._data["Rated Total Heat Rejection Rate Curve Name"] = value

    @property
    def gas_cooler_fan_speed_control_type(self):
        """Get gas_cooler_fan_speed_control_type

        Returns:
            str: the value of `gas_cooler_fan_speed_control_type` or None if not set
        """
        return self._data["Gas Cooler Fan Speed Control Type"]

    @gas_cooler_fan_speed_control_type.setter
    def gas_cooler_fan_speed_control_type(self, value="Fixed"):
        """  Corresponds to IDD Field `gas_cooler_fan_speed_control_type`

        Args:
            value (str): value for IDD Field `gas_cooler_fan_speed_control_type`
                Accepted values are:
                      - Fixed
                      - FixedLinear
                      - VariableSpeed
                      - TwoSpeed
                Default value: Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `gas_cooler_fan_speed_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `gas_cooler_fan_speed_control_type`')
            vals = set()
            vals.add("Fixed")
            vals.add("FixedLinear")
            vals.add("VariableSpeed")
            vals.add("TwoSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `gas_cooler_fan_speed_control_type`'.format(value))

        self._data["Gas Cooler Fan Speed Control Type"] = value

    @property
    def rated_fan_power(self):
        """Get rated_fan_power

        Returns:
            float: the value of `rated_fan_power` or None if not set
        """
        return self._data["Rated Fan Power"]

    @rated_fan_power.setter
    def rated_fan_power(self, value=5000.0 ):
        """  Corresponds to IDD Field `rated_fan_power`
        Power for gas cooler fan(s) corresponding to rated total heat rejection effect.

        Args:
            value (float): value for IDD Field `rated_fan_power`
                Units: W
                Default value: 5000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_fan_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_fan_power`')

        self._data["Rated Fan Power"] = value

    @property
    def minimum_fan_air_flow_ratio(self):
        """Get minimum_fan_air_flow_ratio

        Returns:
            float: the value of `minimum_fan_air_flow_ratio` or None if not set
        """
        return self._data["Minimum Fan Air Flow Ratio"]

    @minimum_fan_air_flow_ratio.setter
    def minimum_fan_air_flow_ratio(self, value=0.2 ):
        """  Corresponds to IDD Field `minimum_fan_air_flow_ratio`
        Minimum air flow fraction through gas cooler fan

        Args:
            value (float): value for IDD Field `minimum_fan_air_flow_ratio`
                Units: dimensionless
                Default value: 0.2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_fan_air_flow_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_fan_air_flow_ratio`')

        self._data["Minimum Fan Air Flow Ratio"] = value

    @property
    def transition_temperature(self):
        """Get transition_temperature

        Returns:
            float: the value of `transition_temperature` or None if not set
        """
        return self._data["Transition Temperature"]

    @transition_temperature.setter
    def transition_temperature(self, value=27.0 ):
        """  Corresponds to IDD Field `transition_temperature`
        Temperature at which system transitions between subcritical and transcritical operation.

        Args:
            value (float): value for IDD Field `transition_temperature`
                Units: C
                Default value: 27.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `transition_temperature`'.format(value))

        self._data["Transition Temperature"] = value

    @property
    def transcritical_approach_temperature(self):
        """Get transcritical_approach_temperature

        Returns:
            float: the value of `transcritical_approach_temperature` or None if not set
        """
        return self._data["Transcritical Approach Temperature"]

    @transcritical_approach_temperature.setter
    def transcritical_approach_temperature(self, value=3.0 ):
        """  Corresponds to IDD Field `transcritical_approach_temperature`
        Temperature difference between the CO2 exiting the gas cooler and the air entering the
        gas cooler during transcritical operation.

        Args:
            value (float): value for IDD Field `transcritical_approach_temperature`
                Units: DeltaC
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `transcritical_approach_temperature`'.format(value))

        self._data["Transcritical Approach Temperature"] = value

    @property
    def subcritical_temperature_difference(self):
        """Get subcritical_temperature_difference

        Returns:
            float: the value of `subcritical_temperature_difference` or None if not set
        """
        return self._data["Subcritical Temperature Difference"]

    @subcritical_temperature_difference.setter
    def subcritical_temperature_difference(self, value=10.0 ):
        """  Corresponds to IDD Field `subcritical_temperature_difference`
        Temperature difference between the saturated condensing temperature and the air
        temperature during subcritical operation.

        Args:
            value (float): value for IDD Field `subcritical_temperature_difference`
                Units: DeltaC
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `subcritical_temperature_difference`'.format(value))

        self._data["Subcritical Temperature Difference"] = value

    @property
    def minimum_condensing_temperature(self):
        """Get minimum_condensing_temperature

        Returns:
            float: the value of `minimum_condensing_temperature` or None if not set
        """
        return self._data["Minimum Condensing Temperature"]

    @minimum_condensing_temperature.setter
    def minimum_condensing_temperature(self, value=10.0 ):
        """  Corresponds to IDD Field `minimum_condensing_temperature`
        Minimum saturated condensing temperature during subcritical operation.

        Args:
            value (float): value for IDD Field `minimum_condensing_temperature`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_condensing_temperature`'.format(value))

        self._data["Minimum Condensing Temperature"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`
        If field is left blank,
        then the model assumes that the inlet air
        conditions are the outdoor air conditions for the current timestep
        (e.g., no adjustment for height above ground).

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    @property
    def gas_cooler_refrigerant_operating_charge_inventory(self):
        """Get gas_cooler_refrigerant_operating_charge_inventory

        Returns:
            float: the value of `gas_cooler_refrigerant_operating_charge_inventory` or None if not set
        """
        return self._data["Gas Cooler Refrigerant Operating Charge Inventory"]

    @gas_cooler_refrigerant_operating_charge_inventory.setter
    def gas_cooler_refrigerant_operating_charge_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_cooler_refrigerant_operating_charge_inventory`
        optional input

        Args:
            value (float): value for IDD Field `gas_cooler_refrigerant_operating_charge_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_cooler_refrigerant_operating_charge_inventory`'.format(value))

        self._data["Gas Cooler Refrigerant Operating Charge Inventory"] = value

    @property
    def gas_cooler_receiver_refrigerant_inventory(self):
        """Get gas_cooler_receiver_refrigerant_inventory

        Returns:
            float: the value of `gas_cooler_receiver_refrigerant_inventory` or None if not set
        """
        return self._data["Gas Cooler Receiver Refrigerant Inventory"]

    @gas_cooler_receiver_refrigerant_inventory.setter
    def gas_cooler_receiver_refrigerant_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_cooler_receiver_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `gas_cooler_receiver_refrigerant_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_cooler_receiver_refrigerant_inventory`'.format(value))

        self._data["Gas Cooler Receiver Refrigerant Inventory"] = value

    @property
    def gas_cooler_outlet_piping_refrigerant_inventory(self):
        """Get gas_cooler_outlet_piping_refrigerant_inventory

        Returns:
            float: the value of `gas_cooler_outlet_piping_refrigerant_inventory` or None if not set
        """
        return self._data["Gas Cooler Outlet Piping Refrigerant Inventory"]

    @gas_cooler_outlet_piping_refrigerant_inventory.setter
    def gas_cooler_outlet_piping_refrigerant_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `gas_cooler_outlet_piping_refrigerant_inventory`
        optional input

        Args:
            value (float): value for IDD Field `gas_cooler_outlet_piping_refrigerant_inventory`
                Units: kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_cooler_outlet_piping_refrigerant_inventory`'.format(value))

        self._data["Gas Cooler Outlet Piping Refrigerant Inventory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_total_heat_rejection_rate_curve_name))
        out.append(self._to_str(self.gas_cooler_fan_speed_control_type))
        out.append(self._to_str(self.rated_fan_power))
        out.append(self._to_str(self.minimum_fan_air_flow_ratio))
        out.append(self._to_str(self.transition_temperature))
        out.append(self._to_str(self.transcritical_approach_temperature))
        out.append(self._to_str(self.subcritical_temperature_difference))
        out.append(self._to_str(self.minimum_condensing_temperature))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.enduse_subcategory))
        out.append(self._to_str(self.gas_cooler_refrigerant_operating_charge_inventory))
        out.append(self._to_str(self.gas_cooler_receiver_refrigerant_inventory))
        out.append(self._to_str(self.gas_cooler_outlet_piping_refrigerant_inventory))
        return ",".join(out)

class RefrigerationTransferLoadList(object):
    """ Corresponds to IDD object `Refrigeration:TransferLoadList`
        A refrigeration system may provide cooling to other, secondary, systems through
        either a secondary loop or a cascade condenser. If multiple transfer loads are served
        by a single primary system, use this list to group them together for reference by the
        primary system (see the field "Refrigeration Transfer Load or TransferLoad List Name"
        in the Refrigeration:System object).
    
    """
    internal_name = "Refrigeration:TransferLoadList"
    field_count = 10
    required_fields = ["Name", "Cascade Condenser Name or Secondary System 1 Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:TransferLoadList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Cascade Condenser Name or Secondary System 1 Name"] = None
        self._data["Cascade Condenser Name or Secondary System 2 Name"] = None
        self._data["Cascade Condenser Name or Secondary System 3 Name"] = None
        self._data["Cascade Condenser Name or Secondary System 4 Name"] = None
        self._data["Cascade Condenser Name or Secondary System 5 Name"] = None
        self._data["Cascade Condenser Name or Secondary System 6 Name"] = None
        self._data["Cascade Condenser Name or Secondary System 7 Name"] = None
        self._data["Cascade Condenser Name or Secondary System 8 Name"] = None
        self._data["Cascade Condenser Name or Secondary System 9 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_1_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_2_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_3_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_4_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_5_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_6_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_7_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_8_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cascade_condenser_name_or_secondary_system_9_name = None
        else:
            self.cascade_condenser_name_or_secondary_system_9_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_1_name(self):
        """Get cascade_condenser_name_or_secondary_system_1_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_1_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 1 Name"]

    @cascade_condenser_name_or_secondary_system_1_name.setter
    def cascade_condenser_name_or_secondary_system_1_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_1_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_1_name`')

        self._data["Cascade Condenser Name or Secondary System 1 Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_2_name(self):
        """Get cascade_condenser_name_or_secondary_system_2_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_2_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 2 Name"]

    @cascade_condenser_name_or_secondary_system_2_name.setter
    def cascade_condenser_name_or_secondary_system_2_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_2_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_2_name`')

        self._data["Cascade Condenser Name or Secondary System 2 Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_3_name(self):
        """Get cascade_condenser_name_or_secondary_system_3_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_3_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 3 Name"]

    @cascade_condenser_name_or_secondary_system_3_name.setter
    def cascade_condenser_name_or_secondary_system_3_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_3_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_3_name`')

        self._data["Cascade Condenser Name or Secondary System 3 Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_4_name(self):
        """Get cascade_condenser_name_or_secondary_system_4_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_4_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 4 Name"]

    @cascade_condenser_name_or_secondary_system_4_name.setter
    def cascade_condenser_name_or_secondary_system_4_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_4_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_4_name`')

        self._data["Cascade Condenser Name or Secondary System 4 Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_5_name(self):
        """Get cascade_condenser_name_or_secondary_system_5_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_5_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 5 Name"]

    @cascade_condenser_name_or_secondary_system_5_name.setter
    def cascade_condenser_name_or_secondary_system_5_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_5_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_5_name`')

        self._data["Cascade Condenser Name or Secondary System 5 Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_6_name(self):
        """Get cascade_condenser_name_or_secondary_system_6_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_6_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 6 Name"]

    @cascade_condenser_name_or_secondary_system_6_name.setter
    def cascade_condenser_name_or_secondary_system_6_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_6_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_6_name`')

        self._data["Cascade Condenser Name or Secondary System 6 Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_7_name(self):
        """Get cascade_condenser_name_or_secondary_system_7_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_7_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 7 Name"]

    @cascade_condenser_name_or_secondary_system_7_name.setter
    def cascade_condenser_name_or_secondary_system_7_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_7_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_7_name`')

        self._data["Cascade Condenser Name or Secondary System 7 Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_8_name(self):
        """Get cascade_condenser_name_or_secondary_system_8_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_8_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 8 Name"]

    @cascade_condenser_name_or_secondary_system_8_name.setter
    def cascade_condenser_name_or_secondary_system_8_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_8_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_8_name`')

        self._data["Cascade Condenser Name or Secondary System 8 Name"] = value

    @property
    def cascade_condenser_name_or_secondary_system_9_name(self):
        """Get cascade_condenser_name_or_secondary_system_9_name

        Returns:
            str: the value of `cascade_condenser_name_or_secondary_system_9_name` or None if not set
        """
        return self._data["Cascade Condenser Name or Secondary System 9 Name"]

    @cascade_condenser_name_or_secondary_system_9_name.setter
    def cascade_condenser_name_or_secondary_system_9_name(self, value=None):
        """  Corresponds to IDD Field `cascade_condenser_name_or_secondary_system_9_name`
        Enter the name of a Refrigeration:Condenser:Cascade object OR
        the name of a Refrigeration:SecondarySystem object.

        Args:
            value (str): value for IDD Field `cascade_condenser_name_or_secondary_system_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cascade_condenser_name_or_secondary_system_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cascade_condenser_name_or_secondary_system_9_name`')

        self._data["Cascade Condenser Name or Secondary System 9 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_1_name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_2_name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_3_name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_4_name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_5_name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_6_name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_7_name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_8_name))
        out.append(self._to_str(self.cascade_condenser_name_or_secondary_system_9_name))
        return ",".join(out)

class RefrigerationSubcooler(object):
    """ Corresponds to IDD object `Refrigeration:Subcooler`
        Two types of subcoolers are modeled by the detailed refrigeration system.  The
        liquid suction heat exchanger uses cool suction gas to subcool the hot condensate
        after it leaves the condenser and before it reaches the thermal expansion valve.
        A mechanical subcooler is used to transfer cooling capacity from one refrigeration
        system to another.
    
    """
    internal_name = "Refrigeration:Subcooler"
    field_count = 7
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:Subcooler`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Subcooler Type"] = None
        self._data["Liquid Suction Design Subcooling Temperature Difference"] = None
        self._data["Design Liquid Inlet Temperature"] = None
        self._data["Design Vapor Inlet Temperature"] = None
        self._data["Capacity-Providing System"] = None
        self._data["Outlet Control Temperature"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.subcooler_type = None
        else:
            self.subcooler_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_suction_design_subcooling_temperature_difference = None
        else:
            self.liquid_suction_design_subcooling_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_liquid_inlet_temperature = None
        else:
            self.design_liquid_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_vapor_inlet_temperature = None
        else:
            self.design_vapor_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacityproviding_system = None
        else:
            self.capacityproviding_system = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_control_temperature = None
        else:
            self.outlet_control_temperature = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def subcooler_type(self):
        """Get subcooler_type

        Returns:
            str: the value of `subcooler_type` or None if not set
        """
        return self._data["Subcooler Type"]

    @subcooler_type.setter
    def subcooler_type(self, value="LiquidSuction"):
        """  Corresponds to IDD Field `subcooler_type`
        plan to add ambient subcoolers at future time

        Args:
            value (str): value for IDD Field `subcooler_type`
                Accepted values are:
                      - Mechanical
                      - LiquidSuction
                Default value: LiquidSuction
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `subcooler_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `subcooler_type`')
            vals = set()
            vals.add("Mechanical")
            vals.add("LiquidSuction")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `subcooler_type`'.format(value))

        self._data["Subcooler Type"] = value

    @property
    def liquid_suction_design_subcooling_temperature_difference(self):
        """Get liquid_suction_design_subcooling_temperature_difference

        Returns:
            float: the value of `liquid_suction_design_subcooling_temperature_difference` or None if not set
        """
        return self._data["Liquid Suction Design Subcooling Temperature Difference"]

    @liquid_suction_design_subcooling_temperature_difference.setter
    def liquid_suction_design_subcooling_temperature_difference(self, value=None):
        """  Corresponds to IDD Field `liquid_suction_design_subcooling_temperature_difference`
        Applicable only and required for liquid suction heat exchangers
        design liquid suction subcooling

        Args:
            value (float): value for IDD Field `liquid_suction_design_subcooling_temperature_difference`
                Units: DeltaC
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_suction_design_subcooling_temperature_difference`'.format(value))

        self._data["Liquid Suction Design Subcooling Temperature Difference"] = value

    @property
    def design_liquid_inlet_temperature(self):
        """Get design_liquid_inlet_temperature

        Returns:
            float: the value of `design_liquid_inlet_temperature` or None if not set
        """
        return self._data["Design Liquid Inlet Temperature"]

    @design_liquid_inlet_temperature.setter
    def design_liquid_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_liquid_inlet_temperature`
        design inlet temperature on liquid side
        Applicable only and required for liquid suction heat exchangers (LSHX)

        Args:
            value (float): value for IDD Field `design_liquid_inlet_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_liquid_inlet_temperature`'.format(value))

        self._data["Design Liquid Inlet Temperature"] = value

    @property
    def design_vapor_inlet_temperature(self):
        """Get design_vapor_inlet_temperature

        Returns:
            float: the value of `design_vapor_inlet_temperature` or None if not set
        """
        return self._data["Design Vapor Inlet Temperature"]

    @design_vapor_inlet_temperature.setter
    def design_vapor_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_vapor_inlet_temperature`
        design inlet temperature on vapor side
        Applicable only and required for liquid suction heat exchangers (LSHX)
        Design vapor inlet temperature must be less than or equal to
        the Liquid inlet design temp

        Args:
            value (float): value for IDD Field `design_vapor_inlet_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_vapor_inlet_temperature`'.format(value))

        self._data["Design Vapor Inlet Temperature"] = value

    @property
    def capacityproviding_system(self):
        """Get capacityproviding_system

        Returns:
            str: the value of `capacityproviding_system` or None if not set
        """
        return self._data["Capacity-Providing System"]

    @capacityproviding_system.setter
    def capacityproviding_system(self, value=None):
        """  Corresponds to IDD Field `capacityproviding_system`
        Name of the Detailed Refrigeration System providing cooling capacity
        Applicable only and required for mechanical subcoolers

        Args:
            value (str): value for IDD Field `capacityproviding_system`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacityproviding_system`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacityproviding_system`')

        self._data["Capacity-Providing System"] = value

    @property
    def outlet_control_temperature(self):
        """Get outlet_control_temperature

        Returns:
            float: the value of `outlet_control_temperature` or None if not set
        """
        return self._data["Outlet Control Temperature"]

    @outlet_control_temperature.setter
    def outlet_control_temperature(self, value=None):
        """  Corresponds to IDD Field `outlet_control_temperature`
        Control Temperature Out for subcooled liquid
        Applicable only and required for mechanical subcoolers

        Args:
            value (float): value for IDD Field `outlet_control_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outlet_control_temperature`'.format(value))

        self._data["Outlet Control Temperature"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.subcooler_type))
        out.append(self._to_str(self.liquid_suction_design_subcooling_temperature_difference))
        out.append(self._to_str(self.design_liquid_inlet_temperature))
        out.append(self._to_str(self.design_vapor_inlet_temperature))
        out.append(self._to_str(self.capacityproviding_system))
        out.append(self._to_str(self.outlet_control_temperature))
        return ",".join(out)

class RefrigerationCompressor(object):
    """ Corresponds to IDD object `Refrigeration:Compressor`
        Refrigeration system compressor. Data is available for many compressors
        in the RefrigerationCompressor.idf dataset
    
    """
    internal_name = "Refrigeration:Compressor"
    field_count = 11
    required_fields = ["Name", "Refrigeration Compressor Power Curve Name", "Refrigeration Compressor Capacity Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:Compressor`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Refrigeration Compressor Power Curve Name"] = None
        self._data["Refrigeration Compressor Capacity Curve Name"] = None
        self._data["Rated Superheat"] = None
        self._data["Rated Return Gas Temperature"] = None
        self._data["Rated Liquid Temperature"] = None
        self._data["Rated Subcooling"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Mode of Operation"] = None
        self._data["Transcritical Compressor Power Curve Name"] = None
        self._data["Transcritical Compressor Capacity Curve Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_power_curve_name = None
        else:
            self.refrigeration_compressor_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_capacity_curve_name = None
        else:
            self.refrigeration_compressor_capacity_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_superheat = None
        else:
            self.rated_superheat = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_return_gas_temperature = None
        else:
            self.rated_return_gas_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_liquid_temperature = None
        else:
            self.rated_liquid_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_subcooling = None
        else:
            self.rated_subcooling = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.mode_of_operation = None
        else:
            self.mode_of_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.transcritical_compressor_power_curve_name = None
        else:
            self.transcritical_compressor_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.transcritical_compressor_capacity_curve_name = None
        else:
            self.transcritical_compressor_capacity_curve_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def refrigeration_compressor_power_curve_name(self):
        """Get refrigeration_compressor_power_curve_name

        Returns:
            str: the value of `refrigeration_compressor_power_curve_name` or None if not set
        """
        return self._data["Refrigeration Compressor Power Curve Name"]

    @refrigeration_compressor_power_curve_name.setter
    def refrigeration_compressor_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_power_curve_name`
        Table:TwoIndependentVariable object can also be used
        the input order for the Curve:Bicubic does not
        match the ARI 540-2004 Eq. 1 coefficient order
        N1 is ARI_C1, N2 is ARI_C2, N3 is ARI_C4, N4 is ARI_C3,
        N5 is ARI_C6, N6 is ARI_C5, N7 is ARI_C7, N8 is ARI_C10,
        N9 is ARI_C8, N10 is ARI_C9,
        N11 is Minimum Suction dewpoint temperature,
        N12 is Maximum Suction dewpoint temperature,
        N13 is Minimum Discharge dewpoint temperature,
        N14 is Maximum Discharge dewpoint temperature

        Args:
            value (str): value for IDD Field `refrigeration_compressor_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_power_curve_name`')

        self._data["Refrigeration Compressor Power Curve Name"] = value

    @property
    def refrigeration_compressor_capacity_curve_name(self):
        """Get refrigeration_compressor_capacity_curve_name

        Returns:
            str: the value of `refrigeration_compressor_capacity_curve_name` or None if not set
        """
        return self._data["Refrigeration Compressor Capacity Curve Name"]

    @refrigeration_compressor_capacity_curve_name.setter
    def refrigeration_compressor_capacity_curve_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_capacity_curve_name`
        Table:TwoIndependentVariable object can also be used
        the input order for the Curve:Bicubic does not
        match the ARI 540-2004 Eq. 1 coefficient order
        N1 is ARI_C1, N2 is ARI_C2, N3 is ARI_C4, N4 is ARI_C3,
        N5 is ARI_C6, N6 is ARI_C5, N7 is ARI_C7, N8 is ARI_C10,
        N9 is ARI_C8, N10 is ARI_C9,
        N11 is Minimum Suction dewpoint temperature,
        N12 is Maximum Suction dewpoint temperature,
        N13 is Minimum Discharge dewpoint temperature,
        N14 is Maximum Discharge dewpoint temperature

        Args:
            value (str): value for IDD Field `refrigeration_compressor_capacity_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_capacity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_capacity_curve_name`')

        self._data["Refrigeration Compressor Capacity Curve Name"] = value

    @property
    def rated_superheat(self):
        """Get rated_superheat

        Returns:
            float: the value of `rated_superheat` or None if not set
        """
        return self._data["Rated Superheat"]

    @rated_superheat.setter
    def rated_superheat(self, value=None):
        """  Corresponds to IDD Field `rated_superheat`
        Use this input field OR the next, not both
        This is used if the compressor rating is based upon
        degrees of superheat

        Args:
            value (float): value for IDD Field `rated_superheat`
                Units: deltaC
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_superheat`'.format(value))

        self._data["Rated Superheat"] = value

    @property
    def rated_return_gas_temperature(self):
        """Get rated_return_gas_temperature

        Returns:
            float: the value of `rated_return_gas_temperature` or None if not set
        """
        return self._data["Rated Return Gas Temperature"]

    @rated_return_gas_temperature.setter
    def rated_return_gas_temperature(self, value=None):
        """  Corresponds to IDD Field `rated_return_gas_temperature`
        Use this input field OR the previous, not both
        This is used if the compressor rating is based upon
        rated return gas temperature (Rated Suction Temperature)

        Args:
            value (float): value for IDD Field `rated_return_gas_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_return_gas_temperature`'.format(value))

        self._data["Rated Return Gas Temperature"] = value

    @property
    def rated_liquid_temperature(self):
        """Get rated_liquid_temperature

        Returns:
            float: the value of `rated_liquid_temperature` or None if not set
        """
        return self._data["Rated Liquid Temperature"]

    @rated_liquid_temperature.setter
    def rated_liquid_temperature(self, value=None):
        """  Corresponds to IDD Field `rated_liquid_temperature`
        Use this input field OR the next, not both
        This is used if the compressor rating is based upon
        rated liquid temperature at the expansion valve

        Args:
            value (float): value for IDD Field `rated_liquid_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_liquid_temperature`'.format(value))

        self._data["Rated Liquid Temperature"] = value

    @property
    def rated_subcooling(self):
        """Get rated_subcooling

        Returns:
            float: the value of `rated_subcooling` or None if not set
        """
        return self._data["Rated Subcooling"]

    @rated_subcooling.setter
    def rated_subcooling(self, value=None):
        """  Corresponds to IDD Field `rated_subcooling`
        Use this input field OR the previous, not both
        This is used if the compressor rating is based upon
        degrees of subcooling

        Args:
            value (float): value for IDD Field `rated_subcooling`
                Units: deltaC
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_subcooling`'.format(value))

        self._data["Rated Subcooling"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    @property
    def mode_of_operation(self):
        """Get mode_of_operation

        Returns:
            str: the value of `mode_of_operation` or None if not set
        """
        return self._data["Mode of Operation"]

    @mode_of_operation.setter
    def mode_of_operation(self, value="Subcritical"):
        """  Corresponds to IDD Field `mode_of_operation`

        Args:
            value (str): value for IDD Field `mode_of_operation`
                Accepted values are:
                      - Subcritical
                      - Transcritical
                Default value: Subcritical
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `mode_of_operation`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `mode_of_operation`')
            vals = set()
            vals.add("Subcritical")
            vals.add("Transcritical")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `mode_of_operation`'.format(value))

        self._data["Mode of Operation"] = value

    @property
    def transcritical_compressor_power_curve_name(self):
        """Get transcritical_compressor_power_curve_name

        Returns:
            str: the value of `transcritical_compressor_power_curve_name` or None if not set
        """
        return self._data["Transcritical Compressor Power Curve Name"]

    @transcritical_compressor_power_curve_name.setter
    def transcritical_compressor_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `transcritical_compressor_power_curve_name`

        Args:
            value (str): value for IDD Field `transcritical_compressor_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `transcritical_compressor_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transcritical_compressor_power_curve_name`')

        self._data["Transcritical Compressor Power Curve Name"] = value

    @property
    def transcritical_compressor_capacity_curve_name(self):
        """Get transcritical_compressor_capacity_curve_name

        Returns:
            str: the value of `transcritical_compressor_capacity_curve_name` or None if not set
        """
        return self._data["Transcritical Compressor Capacity Curve Name"]

    @transcritical_compressor_capacity_curve_name.setter
    def transcritical_compressor_capacity_curve_name(self, value=None):
        """  Corresponds to IDD Field `transcritical_compressor_capacity_curve_name`

        Args:
            value (str): value for IDD Field `transcritical_compressor_capacity_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `transcritical_compressor_capacity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transcritical_compressor_capacity_curve_name`')

        self._data["Transcritical Compressor Capacity Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.refrigeration_compressor_power_curve_name))
        out.append(self._to_str(self.refrigeration_compressor_capacity_curve_name))
        out.append(self._to_str(self.rated_superheat))
        out.append(self._to_str(self.rated_return_gas_temperature))
        out.append(self._to_str(self.rated_liquid_temperature))
        out.append(self._to_str(self.rated_subcooling))
        out.append(self._to_str(self.enduse_subcategory))
        out.append(self._to_str(self.mode_of_operation))
        out.append(self._to_str(self.transcritical_compressor_power_curve_name))
        out.append(self._to_str(self.transcritical_compressor_capacity_curve_name))
        return ",".join(out)

class RefrigerationCompressorList(object):
    """ Corresponds to IDD object `Refrigeration:CompressorList`
        List of all the compressors included within a single refrigeration system
        (Refrigeration:System). Each list must contain at least one compressor.
        The order in which the individual compressors are listed here will be the
        order in which the compressors are dispatched to meet the system load.
        IMPORTANT: List compressor names in the order in which the compressors will be loaded
        Data is available for many compressors in the RefrigerationCompressor.idf dataset
    
    """
    internal_name = "Refrigeration:CompressorList"
    field_count = 41
    required_fields = ["Name", "Refrigeration Compressor 1 Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:CompressorList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Refrigeration Compressor 1 Name"] = None
        self._data["Refrigeration Compressor 2 Name"] = None
        self._data["Refrigeration Compressor 3 Name"] = None
        self._data["Refrigeration Compressor 4 Name"] = None
        self._data["Refrigeration Compressor 5 Name"] = None
        self._data["Refrigeration Compressor 6 Name"] = None
        self._data["Refrigeration Compressor 7 Name"] = None
        self._data["Refrigeration Compressor 8 Name"] = None
        self._data["Refrigeration Compressor 9 Name"] = None
        self._data["Refrigeration Compressor 10 Name"] = None
        self._data["Refrigeration Compressor 11 Name"] = None
        self._data["Refrigeration Compressor 12  Name"] = None
        self._data["Refrigeration Compressor 13 Name"] = None
        self._data["Refrigeration Compressor 14 Name"] = None
        self._data["Refrigeration Compressor 15 Name"] = None
        self._data["Refrigeration Compressor 16 Name"] = None
        self._data["Refrigeration Compressor 17 Name"] = None
        self._data["Refrigeration Compressor 18 Name"] = None
        self._data["Refrigeration Compressor 19 Name"] = None
        self._data["Refrigeration Compressor 20 Name"] = None
        self._data["Refrigeration Compressor 21 Name"] = None
        self._data["Refrigeration Compressor 22 Name"] = None
        self._data["Refrigeration Compressor 23 Name"] = None
        self._data["Refrigeration Compressor 24 Name"] = None
        self._data["Refrigeration Compressor 25 Name"] = None
        self._data["Refrigeration Compressor 26 Name"] = None
        self._data["Refrigeration Compressor 27 Name"] = None
        self._data["Refrigeration Compressor 28 Name"] = None
        self._data["Refrigeration Compressor 29 Name"] = None
        self._data["Refrigeration Compressor 30 Name"] = None
        self._data["Refrigeration Compressor 31 Name"] = None
        self._data["Refrigeration Compressor 32 Name"] = None
        self._data["Refrigeration Compressor 33 Name"] = None
        self._data["Refrigeration Compressor 34 Name"] = None
        self._data["Refrigeration Compressor 35 Name"] = None
        self._data["Refrigeration Compressor 36 Name"] = None
        self._data["Refrigeration Compressor 37 Name"] = None
        self._data["Refrigeration Compressor 38 Name"] = None
        self._data["Refrigeration Compressor 39 Name"] = None
        self._data["Refrigeration Compressor 40 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_1_name = None
        else:
            self.refrigeration_compressor_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_2_name = None
        else:
            self.refrigeration_compressor_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_3_name = None
        else:
            self.refrigeration_compressor_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_4_name = None
        else:
            self.refrigeration_compressor_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_5_name = None
        else:
            self.refrigeration_compressor_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_6_name = None
        else:
            self.refrigeration_compressor_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_7_name = None
        else:
            self.refrigeration_compressor_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_8_name = None
        else:
            self.refrigeration_compressor_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_9_name = None
        else:
            self.refrigeration_compressor_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_10_name = None
        else:
            self.refrigeration_compressor_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_11_name = None
        else:
            self.refrigeration_compressor_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_12_name = None
        else:
            self.refrigeration_compressor_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_13_name = None
        else:
            self.refrigeration_compressor_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_14_name = None
        else:
            self.refrigeration_compressor_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_15_name = None
        else:
            self.refrigeration_compressor_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_16_name = None
        else:
            self.refrigeration_compressor_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_17_name = None
        else:
            self.refrigeration_compressor_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_18_name = None
        else:
            self.refrigeration_compressor_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_19_name = None
        else:
            self.refrigeration_compressor_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_20_name = None
        else:
            self.refrigeration_compressor_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_21_name = None
        else:
            self.refrigeration_compressor_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_22_name = None
        else:
            self.refrigeration_compressor_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_23_name = None
        else:
            self.refrigeration_compressor_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_24_name = None
        else:
            self.refrigeration_compressor_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_25_name = None
        else:
            self.refrigeration_compressor_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_26_name = None
        else:
            self.refrigeration_compressor_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_27_name = None
        else:
            self.refrigeration_compressor_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_28_name = None
        else:
            self.refrigeration_compressor_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_29_name = None
        else:
            self.refrigeration_compressor_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_30_name = None
        else:
            self.refrigeration_compressor_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_31_name = None
        else:
            self.refrigeration_compressor_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_32_name = None
        else:
            self.refrigeration_compressor_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_33_name = None
        else:
            self.refrigeration_compressor_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_34_name = None
        else:
            self.refrigeration_compressor_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_35_name = None
        else:
            self.refrigeration_compressor_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_36_name = None
        else:
            self.refrigeration_compressor_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_37_name = None
        else:
            self.refrigeration_compressor_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_38_name = None
        else:
            self.refrigeration_compressor_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_39_name = None
        else:
            self.refrigeration_compressor_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_compressor_40_name = None
        else:
            self.refrigeration_compressor_40_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def refrigeration_compressor_1_name(self):
        """Get refrigeration_compressor_1_name

        Returns:
            str: the value of `refrigeration_compressor_1_name` or None if not set
        """
        return self._data["Refrigeration Compressor 1 Name"]

    @refrigeration_compressor_1_name.setter
    def refrigeration_compressor_1_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_1_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_1_name`')

        self._data["Refrigeration Compressor 1 Name"] = value

    @property
    def refrigeration_compressor_2_name(self):
        """Get refrigeration_compressor_2_name

        Returns:
            str: the value of `refrigeration_compressor_2_name` or None if not set
        """
        return self._data["Refrigeration Compressor 2 Name"]

    @refrigeration_compressor_2_name.setter
    def refrigeration_compressor_2_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_2_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_2_name`')

        self._data["Refrigeration Compressor 2 Name"] = value

    @property
    def refrigeration_compressor_3_name(self):
        """Get refrigeration_compressor_3_name

        Returns:
            str: the value of `refrigeration_compressor_3_name` or None if not set
        """
        return self._data["Refrigeration Compressor 3 Name"]

    @refrigeration_compressor_3_name.setter
    def refrigeration_compressor_3_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_3_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_3_name`')

        self._data["Refrigeration Compressor 3 Name"] = value

    @property
    def refrigeration_compressor_4_name(self):
        """Get refrigeration_compressor_4_name

        Returns:
            str: the value of `refrigeration_compressor_4_name` or None if not set
        """
        return self._data["Refrigeration Compressor 4 Name"]

    @refrigeration_compressor_4_name.setter
    def refrigeration_compressor_4_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_4_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_4_name`')

        self._data["Refrigeration Compressor 4 Name"] = value

    @property
    def refrigeration_compressor_5_name(self):
        """Get refrigeration_compressor_5_name

        Returns:
            str: the value of `refrigeration_compressor_5_name` or None if not set
        """
        return self._data["Refrigeration Compressor 5 Name"]

    @refrigeration_compressor_5_name.setter
    def refrigeration_compressor_5_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_5_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_5_name`')

        self._data["Refrigeration Compressor 5 Name"] = value

    @property
    def refrigeration_compressor_6_name(self):
        """Get refrigeration_compressor_6_name

        Returns:
            str: the value of `refrigeration_compressor_6_name` or None if not set
        """
        return self._data["Refrigeration Compressor 6 Name"]

    @refrigeration_compressor_6_name.setter
    def refrigeration_compressor_6_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_6_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_6_name`')

        self._data["Refrigeration Compressor 6 Name"] = value

    @property
    def refrigeration_compressor_7_name(self):
        """Get refrigeration_compressor_7_name

        Returns:
            str: the value of `refrigeration_compressor_7_name` or None if not set
        """
        return self._data["Refrigeration Compressor 7 Name"]

    @refrigeration_compressor_7_name.setter
    def refrigeration_compressor_7_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_7_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_7_name`')

        self._data["Refrigeration Compressor 7 Name"] = value

    @property
    def refrigeration_compressor_8_name(self):
        """Get refrigeration_compressor_8_name

        Returns:
            str: the value of `refrigeration_compressor_8_name` or None if not set
        """
        return self._data["Refrigeration Compressor 8 Name"]

    @refrigeration_compressor_8_name.setter
    def refrigeration_compressor_8_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_8_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_8_name`')

        self._data["Refrigeration Compressor 8 Name"] = value

    @property
    def refrigeration_compressor_9_name(self):
        """Get refrigeration_compressor_9_name

        Returns:
            str: the value of `refrigeration_compressor_9_name` or None if not set
        """
        return self._data["Refrigeration Compressor 9 Name"]

    @refrigeration_compressor_9_name.setter
    def refrigeration_compressor_9_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_9_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_9_name`')

        self._data["Refrigeration Compressor 9 Name"] = value

    @property
    def refrigeration_compressor_10_name(self):
        """Get refrigeration_compressor_10_name

        Returns:
            str: the value of `refrigeration_compressor_10_name` or None if not set
        """
        return self._data["Refrigeration Compressor 10 Name"]

    @refrigeration_compressor_10_name.setter
    def refrigeration_compressor_10_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_10_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_10_name`')

        self._data["Refrigeration Compressor 10 Name"] = value

    @property
    def refrigeration_compressor_11_name(self):
        """Get refrigeration_compressor_11_name

        Returns:
            str: the value of `refrigeration_compressor_11_name` or None if not set
        """
        return self._data["Refrigeration Compressor 11 Name"]

    @refrigeration_compressor_11_name.setter
    def refrigeration_compressor_11_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_11_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_11_name`')

        self._data["Refrigeration Compressor 11 Name"] = value

    @property
    def refrigeration_compressor_12_name(self):
        """Get refrigeration_compressor_12_name

        Returns:
            str: the value of `refrigeration_compressor_12_name` or None if not set
        """
        return self._data["Refrigeration Compressor 12  Name"]

    @refrigeration_compressor_12_name.setter
    def refrigeration_compressor_12_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_12_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_12_name`')

        self._data["Refrigeration Compressor 12  Name"] = value

    @property
    def refrigeration_compressor_13_name(self):
        """Get refrigeration_compressor_13_name

        Returns:
            str: the value of `refrigeration_compressor_13_name` or None if not set
        """
        return self._data["Refrigeration Compressor 13 Name"]

    @refrigeration_compressor_13_name.setter
    def refrigeration_compressor_13_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_13_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_13_name`')

        self._data["Refrigeration Compressor 13 Name"] = value

    @property
    def refrigeration_compressor_14_name(self):
        """Get refrigeration_compressor_14_name

        Returns:
            str: the value of `refrigeration_compressor_14_name` or None if not set
        """
        return self._data["Refrigeration Compressor 14 Name"]

    @refrigeration_compressor_14_name.setter
    def refrigeration_compressor_14_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_14_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_14_name`')

        self._data["Refrigeration Compressor 14 Name"] = value

    @property
    def refrigeration_compressor_15_name(self):
        """Get refrigeration_compressor_15_name

        Returns:
            str: the value of `refrigeration_compressor_15_name` or None if not set
        """
        return self._data["Refrigeration Compressor 15 Name"]

    @refrigeration_compressor_15_name.setter
    def refrigeration_compressor_15_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_15_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_15_name`')

        self._data["Refrigeration Compressor 15 Name"] = value

    @property
    def refrigeration_compressor_16_name(self):
        """Get refrigeration_compressor_16_name

        Returns:
            str: the value of `refrigeration_compressor_16_name` or None if not set
        """
        return self._data["Refrigeration Compressor 16 Name"]

    @refrigeration_compressor_16_name.setter
    def refrigeration_compressor_16_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_16_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_16_name`')

        self._data["Refrigeration Compressor 16 Name"] = value

    @property
    def refrigeration_compressor_17_name(self):
        """Get refrigeration_compressor_17_name

        Returns:
            str: the value of `refrigeration_compressor_17_name` or None if not set
        """
        return self._data["Refrigeration Compressor 17 Name"]

    @refrigeration_compressor_17_name.setter
    def refrigeration_compressor_17_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_17_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_17_name`')

        self._data["Refrigeration Compressor 17 Name"] = value

    @property
    def refrigeration_compressor_18_name(self):
        """Get refrigeration_compressor_18_name

        Returns:
            str: the value of `refrigeration_compressor_18_name` or None if not set
        """
        return self._data["Refrigeration Compressor 18 Name"]

    @refrigeration_compressor_18_name.setter
    def refrigeration_compressor_18_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_18_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_18_name`')

        self._data["Refrigeration Compressor 18 Name"] = value

    @property
    def refrigeration_compressor_19_name(self):
        """Get refrigeration_compressor_19_name

        Returns:
            str: the value of `refrigeration_compressor_19_name` or None if not set
        """
        return self._data["Refrigeration Compressor 19 Name"]

    @refrigeration_compressor_19_name.setter
    def refrigeration_compressor_19_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_19_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_19_name`')

        self._data["Refrigeration Compressor 19 Name"] = value

    @property
    def refrigeration_compressor_20_name(self):
        """Get refrigeration_compressor_20_name

        Returns:
            str: the value of `refrigeration_compressor_20_name` or None if not set
        """
        return self._data["Refrigeration Compressor 20 Name"]

    @refrigeration_compressor_20_name.setter
    def refrigeration_compressor_20_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_20_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_20_name`')

        self._data["Refrigeration Compressor 20 Name"] = value

    @property
    def refrigeration_compressor_21_name(self):
        """Get refrigeration_compressor_21_name

        Returns:
            str: the value of `refrigeration_compressor_21_name` or None if not set
        """
        return self._data["Refrigeration Compressor 21 Name"]

    @refrigeration_compressor_21_name.setter
    def refrigeration_compressor_21_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_21_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_21_name`')

        self._data["Refrigeration Compressor 21 Name"] = value

    @property
    def refrigeration_compressor_22_name(self):
        """Get refrigeration_compressor_22_name

        Returns:
            str: the value of `refrigeration_compressor_22_name` or None if not set
        """
        return self._data["Refrigeration Compressor 22 Name"]

    @refrigeration_compressor_22_name.setter
    def refrigeration_compressor_22_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_22_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_22_name`')

        self._data["Refrigeration Compressor 22 Name"] = value

    @property
    def refrigeration_compressor_23_name(self):
        """Get refrigeration_compressor_23_name

        Returns:
            str: the value of `refrigeration_compressor_23_name` or None if not set
        """
        return self._data["Refrigeration Compressor 23 Name"]

    @refrigeration_compressor_23_name.setter
    def refrigeration_compressor_23_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_23_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_23_name`')

        self._data["Refrigeration Compressor 23 Name"] = value

    @property
    def refrigeration_compressor_24_name(self):
        """Get refrigeration_compressor_24_name

        Returns:
            str: the value of `refrigeration_compressor_24_name` or None if not set
        """
        return self._data["Refrigeration Compressor 24 Name"]

    @refrigeration_compressor_24_name.setter
    def refrigeration_compressor_24_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_24_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_24_name`')

        self._data["Refrigeration Compressor 24 Name"] = value

    @property
    def refrigeration_compressor_25_name(self):
        """Get refrigeration_compressor_25_name

        Returns:
            str: the value of `refrigeration_compressor_25_name` or None if not set
        """
        return self._data["Refrigeration Compressor 25 Name"]

    @refrigeration_compressor_25_name.setter
    def refrigeration_compressor_25_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_25_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_25_name`')

        self._data["Refrigeration Compressor 25 Name"] = value

    @property
    def refrigeration_compressor_26_name(self):
        """Get refrigeration_compressor_26_name

        Returns:
            str: the value of `refrigeration_compressor_26_name` or None if not set
        """
        return self._data["Refrigeration Compressor 26 Name"]

    @refrigeration_compressor_26_name.setter
    def refrigeration_compressor_26_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_26_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_26_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_26_name`')

        self._data["Refrigeration Compressor 26 Name"] = value

    @property
    def refrigeration_compressor_27_name(self):
        """Get refrigeration_compressor_27_name

        Returns:
            str: the value of `refrigeration_compressor_27_name` or None if not set
        """
        return self._data["Refrigeration Compressor 27 Name"]

    @refrigeration_compressor_27_name.setter
    def refrigeration_compressor_27_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_27_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_27_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_27_name`')

        self._data["Refrigeration Compressor 27 Name"] = value

    @property
    def refrigeration_compressor_28_name(self):
        """Get refrigeration_compressor_28_name

        Returns:
            str: the value of `refrigeration_compressor_28_name` or None if not set
        """
        return self._data["Refrigeration Compressor 28 Name"]

    @refrigeration_compressor_28_name.setter
    def refrigeration_compressor_28_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_28_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_28_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_28_name`')

        self._data["Refrigeration Compressor 28 Name"] = value

    @property
    def refrigeration_compressor_29_name(self):
        """Get refrigeration_compressor_29_name

        Returns:
            str: the value of `refrigeration_compressor_29_name` or None if not set
        """
        return self._data["Refrigeration Compressor 29 Name"]

    @refrigeration_compressor_29_name.setter
    def refrigeration_compressor_29_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_29_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_29_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_29_name`')

        self._data["Refrigeration Compressor 29 Name"] = value

    @property
    def refrigeration_compressor_30_name(self):
        """Get refrigeration_compressor_30_name

        Returns:
            str: the value of `refrigeration_compressor_30_name` or None if not set
        """
        return self._data["Refrigeration Compressor 30 Name"]

    @refrigeration_compressor_30_name.setter
    def refrigeration_compressor_30_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_30_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_30_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_30_name`')

        self._data["Refrigeration Compressor 30 Name"] = value

    @property
    def refrigeration_compressor_31_name(self):
        """Get refrigeration_compressor_31_name

        Returns:
            str: the value of `refrigeration_compressor_31_name` or None if not set
        """
        return self._data["Refrigeration Compressor 31 Name"]

    @refrigeration_compressor_31_name.setter
    def refrigeration_compressor_31_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_31_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_31_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_31_name`')

        self._data["Refrigeration Compressor 31 Name"] = value

    @property
    def refrigeration_compressor_32_name(self):
        """Get refrigeration_compressor_32_name

        Returns:
            str: the value of `refrigeration_compressor_32_name` or None if not set
        """
        return self._data["Refrigeration Compressor 32 Name"]

    @refrigeration_compressor_32_name.setter
    def refrigeration_compressor_32_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_32_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_32_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_32_name`')

        self._data["Refrigeration Compressor 32 Name"] = value

    @property
    def refrigeration_compressor_33_name(self):
        """Get refrigeration_compressor_33_name

        Returns:
            str: the value of `refrigeration_compressor_33_name` or None if not set
        """
        return self._data["Refrigeration Compressor 33 Name"]

    @refrigeration_compressor_33_name.setter
    def refrigeration_compressor_33_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_33_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_33_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_33_name`')

        self._data["Refrigeration Compressor 33 Name"] = value

    @property
    def refrigeration_compressor_34_name(self):
        """Get refrigeration_compressor_34_name

        Returns:
            str: the value of `refrigeration_compressor_34_name` or None if not set
        """
        return self._data["Refrigeration Compressor 34 Name"]

    @refrigeration_compressor_34_name.setter
    def refrigeration_compressor_34_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_34_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_34_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_34_name`')

        self._data["Refrigeration Compressor 34 Name"] = value

    @property
    def refrigeration_compressor_35_name(self):
        """Get refrigeration_compressor_35_name

        Returns:
            str: the value of `refrigeration_compressor_35_name` or None if not set
        """
        return self._data["Refrigeration Compressor 35 Name"]

    @refrigeration_compressor_35_name.setter
    def refrigeration_compressor_35_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_35_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_35_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_35_name`')

        self._data["Refrigeration Compressor 35 Name"] = value

    @property
    def refrigeration_compressor_36_name(self):
        """Get refrigeration_compressor_36_name

        Returns:
            str: the value of `refrigeration_compressor_36_name` or None if not set
        """
        return self._data["Refrigeration Compressor 36 Name"]

    @refrigeration_compressor_36_name.setter
    def refrigeration_compressor_36_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_36_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_36_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_36_name`')

        self._data["Refrigeration Compressor 36 Name"] = value

    @property
    def refrigeration_compressor_37_name(self):
        """Get refrigeration_compressor_37_name

        Returns:
            str: the value of `refrigeration_compressor_37_name` or None if not set
        """
        return self._data["Refrigeration Compressor 37 Name"]

    @refrigeration_compressor_37_name.setter
    def refrigeration_compressor_37_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_37_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_37_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_37_name`')

        self._data["Refrigeration Compressor 37 Name"] = value

    @property
    def refrigeration_compressor_38_name(self):
        """Get refrigeration_compressor_38_name

        Returns:
            str: the value of `refrigeration_compressor_38_name` or None if not set
        """
        return self._data["Refrigeration Compressor 38 Name"]

    @refrigeration_compressor_38_name.setter
    def refrigeration_compressor_38_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_38_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_38_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_38_name`')

        self._data["Refrigeration Compressor 38 Name"] = value

    @property
    def refrigeration_compressor_39_name(self):
        """Get refrigeration_compressor_39_name

        Returns:
            str: the value of `refrigeration_compressor_39_name` or None if not set
        """
        return self._data["Refrigeration Compressor 39 Name"]

    @refrigeration_compressor_39_name.setter
    def refrigeration_compressor_39_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_39_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_39_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_39_name`')

        self._data["Refrigeration Compressor 39 Name"] = value

    @property
    def refrigeration_compressor_40_name(self):
        """Get refrigeration_compressor_40_name

        Returns:
            str: the value of `refrigeration_compressor_40_name` or None if not set
        """
        return self._data["Refrigeration Compressor 40 Name"]

    @refrigeration_compressor_40_name.setter
    def refrigeration_compressor_40_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_compressor_40_name`
        Enter the name of a Refrigeration:Compressor object.

        Args:
            value (str): value for IDD Field `refrigeration_compressor_40_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_compressor_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_compressor_40_name`')

        self._data["Refrigeration Compressor 40 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.refrigeration_compressor_1_name))
        out.append(self._to_str(self.refrigeration_compressor_2_name))
        out.append(self._to_str(self.refrigeration_compressor_3_name))
        out.append(self._to_str(self.refrigeration_compressor_4_name))
        out.append(self._to_str(self.refrigeration_compressor_5_name))
        out.append(self._to_str(self.refrigeration_compressor_6_name))
        out.append(self._to_str(self.refrigeration_compressor_7_name))
        out.append(self._to_str(self.refrigeration_compressor_8_name))
        out.append(self._to_str(self.refrigeration_compressor_9_name))
        out.append(self._to_str(self.refrigeration_compressor_10_name))
        out.append(self._to_str(self.refrigeration_compressor_11_name))
        out.append(self._to_str(self.refrigeration_compressor_12_name))
        out.append(self._to_str(self.refrigeration_compressor_13_name))
        out.append(self._to_str(self.refrigeration_compressor_14_name))
        out.append(self._to_str(self.refrigeration_compressor_15_name))
        out.append(self._to_str(self.refrigeration_compressor_16_name))
        out.append(self._to_str(self.refrigeration_compressor_17_name))
        out.append(self._to_str(self.refrigeration_compressor_18_name))
        out.append(self._to_str(self.refrigeration_compressor_19_name))
        out.append(self._to_str(self.refrigeration_compressor_20_name))
        out.append(self._to_str(self.refrigeration_compressor_21_name))
        out.append(self._to_str(self.refrigeration_compressor_22_name))
        out.append(self._to_str(self.refrigeration_compressor_23_name))
        out.append(self._to_str(self.refrigeration_compressor_24_name))
        out.append(self._to_str(self.refrigeration_compressor_25_name))
        out.append(self._to_str(self.refrigeration_compressor_26_name))
        out.append(self._to_str(self.refrigeration_compressor_27_name))
        out.append(self._to_str(self.refrigeration_compressor_28_name))
        out.append(self._to_str(self.refrigeration_compressor_29_name))
        out.append(self._to_str(self.refrigeration_compressor_30_name))
        out.append(self._to_str(self.refrigeration_compressor_31_name))
        out.append(self._to_str(self.refrigeration_compressor_32_name))
        out.append(self._to_str(self.refrigeration_compressor_33_name))
        out.append(self._to_str(self.refrigeration_compressor_34_name))
        out.append(self._to_str(self.refrigeration_compressor_35_name))
        out.append(self._to_str(self.refrigeration_compressor_36_name))
        out.append(self._to_str(self.refrigeration_compressor_37_name))
        out.append(self._to_str(self.refrigeration_compressor_38_name))
        out.append(self._to_str(self.refrigeration_compressor_39_name))
        out.append(self._to_str(self.refrigeration_compressor_40_name))
        return ",".join(out)

class RefrigerationSystem(object):
    """ Corresponds to IDD object `Refrigeration:System`
        Simulates the performance of a supermarket refrigeration system when used along with
        other objects to define the refrigeration load(s), the compressor(s), and the
        condenser.
    
    """
    internal_name = "Refrigeration:System"
    field_count = 17
    required_fields = ["Name", "Refrigeration Condenser Name", "Compressor or CompressorList Name", "Minimum Condensing Temperature", "Refrigeration System Working Fluid Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:System`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Refrigerated Case or Walkin or CaseAndWalkInList Name"] = None
        self._data["Refrigeration Transfer Load or TransferLoad List Name"] = None
        self._data["Refrigeration Condenser Name"] = None
        self._data["Compressor or CompressorList Name"] = None
        self._data["Minimum Condensing Temperature"] = None
        self._data["Refrigeration System Working Fluid Type"] = None
        self._data["Suction Temperature Control Type"] = None
        self._data["Mechanical Subcooler Name"] = None
        self._data["Liquid Suction Heat Exchanger Subcooler Name"] = None
        self._data["Sum UA Suction Piping"] = None
        self._data["Suction Piping Zone Name"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Number of Compressor Stages"] = None
        self._data["Intercooler Type"] = None
        self._data["Shell-and-Coil Intercooler Effectiveness"] = None
        self._data["High-Stage Compressor or CompressorList Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigerated_case_or_walkin_or_caseandwalkinlist_name = None
        else:
            self.refrigerated_case_or_walkin_or_caseandwalkinlist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_transfer_load_or_transferload_list_name = None
        else:
            self.refrigeration_transfer_load_or_transferload_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_condenser_name = None
        else:
            self.refrigeration_condenser_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_or_compressorlist_name = None
        else:
            self.compressor_or_compressorlist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_condensing_temperature = None
        else:
            self.minimum_condensing_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_system_working_fluid_type = None
        else:
            self.refrigeration_system_working_fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suction_temperature_control_type = None
        else:
            self.suction_temperature_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.mechanical_subcooler_name = None
        else:
            self.mechanical_subcooler_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_suction_heat_exchanger_subcooler_name = None
        else:
            self.liquid_suction_heat_exchanger_subcooler_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sum_ua_suction_piping = None
        else:
            self.sum_ua_suction_piping = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suction_piping_zone_name = None
        else:
            self.suction_piping_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_compressor_stages = None
        else:
            self.number_of_compressor_stages = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.intercooler_type = None
        else:
            self.intercooler_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shellandcoil_intercooler_effectiveness = None
        else:
            self.shellandcoil_intercooler_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.highstage_compressor_or_compressorlist_name = None
        else:
            self.highstage_compressor_or_compressorlist_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def refrigerated_case_or_walkin_or_caseandwalkinlist_name(self):
        """Get refrigerated_case_or_walkin_or_caseandwalkinlist_name

        Returns:
            str: the value of `refrigerated_case_or_walkin_or_caseandwalkinlist_name` or None if not set
        """
        return self._data["Refrigerated Case or Walkin or CaseAndWalkInList Name"]

    @refrigerated_case_or_walkin_or_caseandwalkinlist_name.setter
    def refrigerated_case_or_walkin_or_caseandwalkinlist_name(self, value=None):
        """  Corresponds to IDD Field `refrigerated_case_or_walkin_or_caseandwalkinlist_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.
        If there is more than one refrigerated case or walkin served by this system,
        enter the name of a Refrigeration:CaseAndWalkInList object.
        Only cases and walkins served directly by the system should be included in this list.
        Any cases served indirectly via a secondary chiller should NOT be included in this list

        Args:
            value (str): value for IDD Field `refrigerated_case_or_walkin_or_caseandwalkinlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigerated_case_or_walkin_or_caseandwalkinlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigerated_case_or_walkin_or_caseandwalkinlist_name`')

        self._data["Refrigerated Case or Walkin or CaseAndWalkInList Name"] = value

    @property
    def refrigeration_transfer_load_or_transferload_list_name(self):
        """Get refrigeration_transfer_load_or_transferload_list_name

        Returns:
            str: the value of `refrigeration_transfer_load_or_transferload_list_name` or None if not set
        """
        return self._data["Refrigeration Transfer Load or TransferLoad List Name"]

    @refrigeration_transfer_load_or_transferload_list_name.setter
    def refrigeration_transfer_load_or_transferload_list_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_transfer_load_or_transferload_list_name`
        Enter the name of a Refrigeration:SecondarySystem object OR
        a Refrigeration:Condenser:Cascade object OR,
        a Refrigeration:TransferLoadList object.
        A transfer load is identified as one which moves the load from one system to another.
        So if you have more than one such load (including cascade condensers and secondary
        loops) served by the same system, use a TransferLoadList object.

        Args:
            value (str): value for IDD Field `refrigeration_transfer_load_or_transferload_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_transfer_load_or_transferload_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_transfer_load_or_transferload_list_name`')

        self._data["Refrigeration Transfer Load or TransferLoad List Name"] = value

    @property
    def refrigeration_condenser_name(self):
        """Get refrigeration_condenser_name

        Returns:
            str: the value of `refrigeration_condenser_name` or None if not set
        """
        return self._data["Refrigeration Condenser Name"]

    @refrigeration_condenser_name.setter
    def refrigeration_condenser_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_condenser_name`

        Args:
            value (str): value for IDD Field `refrigeration_condenser_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_condenser_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_condenser_name`')

        self._data["Refrigeration Condenser Name"] = value

    @property
    def compressor_or_compressorlist_name(self):
        """Get compressor_or_compressorlist_name

        Returns:
            str: the value of `compressor_or_compressorlist_name` or None if not set
        """
        return self._data["Compressor or CompressorList Name"]

    @compressor_or_compressorlist_name.setter
    def compressor_or_compressorlist_name(self, value=None):
        """  Corresponds to IDD Field `compressor_or_compressorlist_name`

        Args:
            value (str): value for IDD Field `compressor_or_compressorlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compressor_or_compressorlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compressor_or_compressorlist_name`')

        self._data["Compressor or CompressorList Name"] = value

    @property
    def minimum_condensing_temperature(self):
        """Get minimum_condensing_temperature

        Returns:
            float: the value of `minimum_condensing_temperature` or None if not set
        """
        return self._data["Minimum Condensing Temperature"]

    @minimum_condensing_temperature.setter
    def minimum_condensing_temperature(self, value=None):
        """  Corresponds to IDD Field `minimum_condensing_temperature`
        related to the proper operation of the thermal expansion
        valves and compressors

        Args:
            value (float): value for IDD Field `minimum_condensing_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_condensing_temperature`'.format(value))

        self._data["Minimum Condensing Temperature"] = value

    @property
    def refrigeration_system_working_fluid_type(self):
        """Get refrigeration_system_working_fluid_type

        Returns:
            str: the value of `refrigeration_system_working_fluid_type` or None if not set
        """
        return self._data["Refrigeration System Working Fluid Type"]

    @refrigeration_system_working_fluid_type.setter
    def refrigeration_system_working_fluid_type(self, value=None):
        """  Corresponds to IDD Field `refrigeration_system_working_fluid_type`
        Fluid property data for the refrigerant must be entered.
        The fluid property data, including the objects:
        FluidProperties:Name, FluidProperties:Temperatures,
        FluidProperties:Saturated and FluidProperties:Superheated
        can be copied from the FluidPropertiesRefData.idf dataset

        Args:
            value (str): value for IDD Field `refrigeration_system_working_fluid_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_system_working_fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_system_working_fluid_type`')

        self._data["Refrigeration System Working Fluid Type"] = value

    @property
    def suction_temperature_control_type(self):
        """Get suction_temperature_control_type

        Returns:
            str: the value of `suction_temperature_control_type` or None if not set
        """
        return self._data["Suction Temperature Control Type"]

    @suction_temperature_control_type.setter
    def suction_temperature_control_type(self, value="ConstantSuctionTemperature"):
        """  Corresponds to IDD Field `suction_temperature_control_type`

        Args:
            value (str): value for IDD Field `suction_temperature_control_type`
                Accepted values are:
                      - FloatSuctionTemperature
                      - ConstantSuctionTemperature
                Default value: ConstantSuctionTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suction_temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suction_temperature_control_type`')
            vals = set()
            vals.add("FloatSuctionTemperature")
            vals.add("ConstantSuctionTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `suction_temperature_control_type`'.format(value))

        self._data["Suction Temperature Control Type"] = value

    @property
    def mechanical_subcooler_name(self):
        """Get mechanical_subcooler_name

        Returns:
            str: the value of `mechanical_subcooler_name` or None if not set
        """
        return self._data["Mechanical Subcooler Name"]

    @mechanical_subcooler_name.setter
    def mechanical_subcooler_name(self, value=None):
        """  Corresponds to IDD Field `mechanical_subcooler_name`
        Optional Field
        Recipient of refrigeration capacity, that is receives cool liquid
        from another refrigeraiton system to help meet aggregate case loads

        Args:
            value (str): value for IDD Field `mechanical_subcooler_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `mechanical_subcooler_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `mechanical_subcooler_name`')

        self._data["Mechanical Subcooler Name"] = value

    @property
    def liquid_suction_heat_exchanger_subcooler_name(self):
        """Get liquid_suction_heat_exchanger_subcooler_name

        Returns:
            str: the value of `liquid_suction_heat_exchanger_subcooler_name` or None if not set
        """
        return self._data["Liquid Suction Heat Exchanger Subcooler Name"]

    @liquid_suction_heat_exchanger_subcooler_name.setter
    def liquid_suction_heat_exchanger_subcooler_name(self, value=None):
        """  Corresponds to IDD Field `liquid_suction_heat_exchanger_subcooler_name`
        Optional Field
        Liquid Suction Heat Exchanger Name, or leave blank

        Args:
            value (str): value for IDD Field `liquid_suction_heat_exchanger_subcooler_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `liquid_suction_heat_exchanger_subcooler_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `liquid_suction_heat_exchanger_subcooler_name`')

        self._data["Liquid Suction Heat Exchanger Subcooler Name"] = value

    @property
    def sum_ua_suction_piping(self):
        """Get sum_ua_suction_piping

        Returns:
            float: the value of `sum_ua_suction_piping` or None if not set
        """
        return self._data["Sum UA Suction Piping"]

    @sum_ua_suction_piping.setter
    def sum_ua_suction_piping(self, value=0.0 ):
        """  Corresponds to IDD Field `sum_ua_suction_piping`
        Use only if you want to include suction piping heat gain in refrigeration load

        Args:
            value (float): value for IDD Field `sum_ua_suction_piping`
                Units: W/K
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sum_ua_suction_piping`'.format(value))

        self._data["Sum UA Suction Piping"] = value

    @property
    def suction_piping_zone_name(self):
        """Get suction_piping_zone_name

        Returns:
            str: the value of `suction_piping_zone_name` or None if not set
        """
        return self._data["Suction Piping Zone Name"]

    @suction_piping_zone_name.setter
    def suction_piping_zone_name(self, value=None):
        """  Corresponds to IDD Field `suction_piping_zone_name`
        This will be used to determine the temperature used for distribution piping heat gain
        and the pipe heat gains  as cooling credit for the zone.
        Required only if Sum UA Distribution Piping >0.0

        Args:
            value (str): value for IDD Field `suction_piping_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suction_piping_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suction_piping_zone_name`')

        self._data["Suction Piping Zone Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    @property
    def number_of_compressor_stages(self):
        """Get number_of_compressor_stages

        Returns:
            str: the value of `number_of_compressor_stages` or None if not set
        """
        return self._data["Number of Compressor Stages"]

    @number_of_compressor_stages.setter
    def number_of_compressor_stages(self, value="1"):
        """  Corresponds to IDD Field `number_of_compressor_stages`

        Args:
            value (str): value for IDD Field `number_of_compressor_stages`
                Accepted values are:
                      - 1
                      - 2
                Default value: 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `number_of_compressor_stages`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `number_of_compressor_stages`')
            vals = set()
            vals.add("1")
            vals.add("2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `number_of_compressor_stages`'.format(value))

        self._data["Number of Compressor Stages"] = value

    @property
    def intercooler_type(self):
        """Get intercooler_type

        Returns:
            str: the value of `intercooler_type` or None if not set
        """
        return self._data["Intercooler Type"]

    @intercooler_type.setter
    def intercooler_type(self, value="None"):
        """  Corresponds to IDD Field `intercooler_type`

        Args:
            value (str): value for IDD Field `intercooler_type`
                Accepted values are:
                      - None
                      - Flash Intercooler
                      - Shell-and-Coil Intercooler
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `intercooler_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `intercooler_type`')
            vals = set()
            vals.add("None")
            vals.add("Flash Intercooler")
            vals.add("Shell-and-Coil Intercooler")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `intercooler_type`'.format(value))

        self._data["Intercooler Type"] = value

    @property
    def shellandcoil_intercooler_effectiveness(self):
        """Get shellandcoil_intercooler_effectiveness

        Returns:
            float: the value of `shellandcoil_intercooler_effectiveness` or None if not set
        """
        return self._data["Shell-and-Coil Intercooler Effectiveness"]

    @shellandcoil_intercooler_effectiveness.setter
    def shellandcoil_intercooler_effectiveness(self, value=0.8 ):
        """  Corresponds to IDD Field `shellandcoil_intercooler_effectiveness`

        Args:
            value (float): value for IDD Field `shellandcoil_intercooler_effectiveness`
                Default value: 0.8
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shellandcoil_intercooler_effectiveness`'.format(value))

        self._data["Shell-and-Coil Intercooler Effectiveness"] = value

    @property
    def highstage_compressor_or_compressorlist_name(self):
        """Get highstage_compressor_or_compressorlist_name

        Returns:
            str: the value of `highstage_compressor_or_compressorlist_name` or None if not set
        """
        return self._data["High-Stage Compressor or CompressorList Name"]

    @highstage_compressor_or_compressorlist_name.setter
    def highstage_compressor_or_compressorlist_name(self, value=None):
        """  Corresponds to IDD Field `highstage_compressor_or_compressorlist_name`

        Args:
            value (str): value for IDD Field `highstage_compressor_or_compressorlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `highstage_compressor_or_compressorlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `highstage_compressor_or_compressorlist_name`')

        self._data["High-Stage Compressor or CompressorList Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.refrigerated_case_or_walkin_or_caseandwalkinlist_name))
        out.append(self._to_str(self.refrigeration_transfer_load_or_transferload_list_name))
        out.append(self._to_str(self.refrigeration_condenser_name))
        out.append(self._to_str(self.compressor_or_compressorlist_name))
        out.append(self._to_str(self.minimum_condensing_temperature))
        out.append(self._to_str(self.refrigeration_system_working_fluid_type))
        out.append(self._to_str(self.suction_temperature_control_type))
        out.append(self._to_str(self.mechanical_subcooler_name))
        out.append(self._to_str(self.liquid_suction_heat_exchanger_subcooler_name))
        out.append(self._to_str(self.sum_ua_suction_piping))
        out.append(self._to_str(self.suction_piping_zone_name))
        out.append(self._to_str(self.enduse_subcategory))
        out.append(self._to_str(self.number_of_compressor_stages))
        out.append(self._to_str(self.intercooler_type))
        out.append(self._to_str(self.shellandcoil_intercooler_effectiveness))
        out.append(self._to_str(self.highstage_compressor_or_compressorlist_name))
        return ",".join(out)

class RefrigerationTranscriticalSystem(object):
    """ Corresponds to IDD object `Refrigeration:TranscriticalSystem`
        Detailed transcritical carbon dioxide (CO2) booster refrigeration systems used in
        supermarkets.  The object allows for modeling either a single stage system with
        medium-temperature loads or a two stage system with both medium- and low-temperature
        loads.
    
    """
    internal_name = "Refrigeration:TranscriticalSystem"
    field_count = 15
    required_fields = ["Name", "System Type", "Medium Temperature Refrigerated Case or Walkin or CaseAndWalkInList Name", "Refrigeration Gas Cooler Name", "High Pressure Compressor or CompressorList Name", "Refrigeration System Working Fluid Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:TranscriticalSystem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["System Type"] = None
        self._data["Medium Temperature Refrigerated Case or Walkin or CaseAndWalkInList Name"] = None
        self._data["Low Temperature Refrigerated Case or Walkin or CaseAndWalkInList Name"] = None
        self._data["Refrigeration Gas Cooler Name"] = None
        self._data["High Pressure Compressor or CompressorList Name"] = None
        self._data["Low Pressure Compressor or CompressorList Name"] = None
        self._data["Receiver Pressure"] = None
        self._data["Subcooler Effectiveness"] = None
        self._data["Refrigeration System Working Fluid Type"] = None
        self._data["Sum UA Suction Piping for Medium Temperature Loads"] = None
        self._data["Medium Temperature Suction Piping Zone Name"] = None
        self._data["Sum UA Suction Piping for Low Temperature Loads"] = None
        self._data["Low Temperature Suction Piping Zone Name"] = None
        self._data["End-Use Subcategory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_type = None
        else:
            self.system_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name = None
        else:
            self.medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name = None
        else:
            self.low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_gas_cooler_name = None
        else:
            self.refrigeration_gas_cooler_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_pressure_compressor_or_compressorlist_name = None
        else:
            self.high_pressure_compressor_or_compressorlist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_pressure_compressor_or_compressorlist_name = None
        else:
            self.low_pressure_compressor_or_compressorlist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.receiver_pressure = None
        else:
            self.receiver_pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.subcooler_effectiveness = None
        else:
            self.subcooler_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigeration_system_working_fluid_type = None
        else:
            self.refrigeration_system_working_fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sum_ua_suction_piping_for_medium_temperature_loads = None
        else:
            self.sum_ua_suction_piping_for_medium_temperature_loads = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.medium_temperature_suction_piping_zone_name = None
        else:
            self.medium_temperature_suction_piping_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sum_ua_suction_piping_for_low_temperature_loads = None
        else:
            self.sum_ua_suction_piping_for_low_temperature_loads = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_temperature_suction_piping_zone_name = None
        else:
            self.low_temperature_suction_piping_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def system_type(self):
        """Get system_type

        Returns:
            str: the value of `system_type` or None if not set
        """
        return self._data["System Type"]

    @system_type.setter
    def system_type(self, value=None):
        """  Corresponds to IDD Field `system_type`

        Args:
            value (str): value for IDD Field `system_type`
                Accepted values are:
                      - SingleStage
                      - TwoStage
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_type`')
            vals = set()
            vals.add("SingleStage")
            vals.add("TwoStage")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `system_type`'.format(value))

        self._data["System Type"] = value

    @property
    def medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name(self):
        """Get medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name

        Returns:
            str: the value of `medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name` or None if not set
        """
        return self._data["Medium Temperature Refrigerated Case or Walkin or CaseAndWalkInList Name"]

    @medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name.setter
    def medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name(self, value=None):
        """  Corresponds to IDD Field `medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.
        If there is more than one refrigerated case or walkin served by this system,
        enter the name of a Refrigeration:CaseAndWalkInList object.
        Only medium temperature cases and walkins served directly by the system should
        be included in this list.

        Args:
            value (str): value for IDD Field `medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name`')

        self._data["Medium Temperature Refrigerated Case or Walkin or CaseAndWalkInList Name"] = value

    @property
    def low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name(self):
        """Get low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name

        Returns:
            str: the value of `low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name` or None if not set
        """
        return self._data["Low Temperature Refrigerated Case or Walkin or CaseAndWalkInList Name"]

    @low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name.setter
    def low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name(self, value=None):
        """  Corresponds to IDD Field `low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.
        If there is more than one refrigerated case or walkin served by this system,
        enter the name of a Refrigeration:CaseAndWalkInList object.
        Only low temperature cases and walkins served directly by the system should be
        included in this list.

        Args:
            value (str): value for IDD Field `low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name`')

        self._data["Low Temperature Refrigerated Case or Walkin or CaseAndWalkInList Name"] = value

    @property
    def refrigeration_gas_cooler_name(self):
        """Get refrigeration_gas_cooler_name

        Returns:
            str: the value of `refrigeration_gas_cooler_name` or None if not set
        """
        return self._data["Refrigeration Gas Cooler Name"]

    @refrigeration_gas_cooler_name.setter
    def refrigeration_gas_cooler_name(self, value=None):
        """  Corresponds to IDD Field `refrigeration_gas_cooler_name`

        Args:
            value (str): value for IDD Field `refrigeration_gas_cooler_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_gas_cooler_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_gas_cooler_name`')

        self._data["Refrigeration Gas Cooler Name"] = value

    @property
    def high_pressure_compressor_or_compressorlist_name(self):
        """Get high_pressure_compressor_or_compressorlist_name

        Returns:
            str: the value of `high_pressure_compressor_or_compressorlist_name` or None if not set
        """
        return self._data["High Pressure Compressor or CompressorList Name"]

    @high_pressure_compressor_or_compressorlist_name.setter
    def high_pressure_compressor_or_compressorlist_name(self, value=None):
        """  Corresponds to IDD Field `high_pressure_compressor_or_compressorlist_name`

        Args:
            value (str): value for IDD Field `high_pressure_compressor_or_compressorlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `high_pressure_compressor_or_compressorlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `high_pressure_compressor_or_compressorlist_name`')

        self._data["High Pressure Compressor or CompressorList Name"] = value

    @property
    def low_pressure_compressor_or_compressorlist_name(self):
        """Get low_pressure_compressor_or_compressorlist_name

        Returns:
            str: the value of `low_pressure_compressor_or_compressorlist_name` or None if not set
        """
        return self._data["Low Pressure Compressor or CompressorList Name"]

    @low_pressure_compressor_or_compressorlist_name.setter
    def low_pressure_compressor_or_compressorlist_name(self, value=None):
        """  Corresponds to IDD Field `low_pressure_compressor_or_compressorlist_name`

        Args:
            value (str): value for IDD Field `low_pressure_compressor_or_compressorlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_pressure_compressor_or_compressorlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_pressure_compressor_or_compressorlist_name`')

        self._data["Low Pressure Compressor or CompressorList Name"] = value

    @property
    def receiver_pressure(self):
        """Get receiver_pressure

        Returns:
            float: the value of `receiver_pressure` or None if not set
        """
        return self._data["Receiver Pressure"]

    @receiver_pressure.setter
    def receiver_pressure(self, value=4000000.0 ):
        """  Corresponds to IDD Field `receiver_pressure`

        Args:
            value (float): value for IDD Field `receiver_pressure`
                Units: Pa
                Default value: 4000000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `receiver_pressure`'.format(value))

        self._data["Receiver Pressure"] = value

    @property
    def subcooler_effectiveness(self):
        """Get subcooler_effectiveness

        Returns:
            float: the value of `subcooler_effectiveness` or None if not set
        """
        return self._data["Subcooler Effectiveness"]

    @subcooler_effectiveness.setter
    def subcooler_effectiveness(self, value=0.4 ):
        """  Corresponds to IDD Field `subcooler_effectiveness`

        Args:
            value (float): value for IDD Field `subcooler_effectiveness`
                Default value: 0.4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `subcooler_effectiveness`'.format(value))

        self._data["Subcooler Effectiveness"] = value

    @property
    def refrigeration_system_working_fluid_type(self):
        """Get refrigeration_system_working_fluid_type

        Returns:
            str: the value of `refrigeration_system_working_fluid_type` or None if not set
        """
        return self._data["Refrigeration System Working Fluid Type"]

    @refrigeration_system_working_fluid_type.setter
    def refrigeration_system_working_fluid_type(self, value=None):
        """  Corresponds to IDD Field `refrigeration_system_working_fluid_type`
        Fluid property data for the refrigerant must be entered.
        The fluid property data, including the objects:
        FluidProperties:Name, FluidProperties:Temperatures,
        FluidProperties:Saturated and FluidProperties:Superheated
        can be copied from the FluidPropertiesRefData.idf dataset

        Args:
            value (str): value for IDD Field `refrigeration_system_working_fluid_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigeration_system_working_fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigeration_system_working_fluid_type`')

        self._data["Refrigeration System Working Fluid Type"] = value

    @property
    def sum_ua_suction_piping_for_medium_temperature_loads(self):
        """Get sum_ua_suction_piping_for_medium_temperature_loads

        Returns:
            float: the value of `sum_ua_suction_piping_for_medium_temperature_loads` or None if not set
        """
        return self._data["Sum UA Suction Piping for Medium Temperature Loads"]

    @sum_ua_suction_piping_for_medium_temperature_loads.setter
    def sum_ua_suction_piping_for_medium_temperature_loads(self, value=0.0 ):
        """  Corresponds to IDD Field `sum_ua_suction_piping_for_medium_temperature_loads`
        Use only if you want to include suction piping heat gain in refrigeration load

        Args:
            value (float): value for IDD Field `sum_ua_suction_piping_for_medium_temperature_loads`
                Units: W/K
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sum_ua_suction_piping_for_medium_temperature_loads`'.format(value))

        self._data["Sum UA Suction Piping for Medium Temperature Loads"] = value

    @property
    def medium_temperature_suction_piping_zone_name(self):
        """Get medium_temperature_suction_piping_zone_name

        Returns:
            str: the value of `medium_temperature_suction_piping_zone_name` or None if not set
        """
        return self._data["Medium Temperature Suction Piping Zone Name"]

    @medium_temperature_suction_piping_zone_name.setter
    def medium_temperature_suction_piping_zone_name(self, value=None):
        """  Corresponds to IDD Field `medium_temperature_suction_piping_zone_name`
        This will be used to determine the temperature used for distribution piping heat
        gain and the pipe heat gains as cooling credit for the zone.
        Required only if Sum UA Distribution Piping for Medium Temperature Loads > 0.0

        Args:
            value (str): value for IDD Field `medium_temperature_suction_piping_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `medium_temperature_suction_piping_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `medium_temperature_suction_piping_zone_name`')

        self._data["Medium Temperature Suction Piping Zone Name"] = value

    @property
    def sum_ua_suction_piping_for_low_temperature_loads(self):
        """Get sum_ua_suction_piping_for_low_temperature_loads

        Returns:
            float: the value of `sum_ua_suction_piping_for_low_temperature_loads` or None if not set
        """
        return self._data["Sum UA Suction Piping for Low Temperature Loads"]

    @sum_ua_suction_piping_for_low_temperature_loads.setter
    def sum_ua_suction_piping_for_low_temperature_loads(self, value=0.0 ):
        """  Corresponds to IDD Field `sum_ua_suction_piping_for_low_temperature_loads`
        Use only if you want to include suction piping heat gain in refrigeration load

        Args:
            value (float): value for IDD Field `sum_ua_suction_piping_for_low_temperature_loads`
                Units: W/K
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sum_ua_suction_piping_for_low_temperature_loads`'.format(value))

        self._data["Sum UA Suction Piping for Low Temperature Loads"] = value

    @property
    def low_temperature_suction_piping_zone_name(self):
        """Get low_temperature_suction_piping_zone_name

        Returns:
            str: the value of `low_temperature_suction_piping_zone_name` or None if not set
        """
        return self._data["Low Temperature Suction Piping Zone Name"]

    @low_temperature_suction_piping_zone_name.setter
    def low_temperature_suction_piping_zone_name(self, value=None):
        """  Corresponds to IDD Field `low_temperature_suction_piping_zone_name`
        This will be used to determine the temperature used for distribution piping heat
        gain and the pipe heat gains as cooling credit for the zone.
        Required only if Sum UA Distribution Piping for Low Temperature Loads > 0.0

        Args:
            value (str): value for IDD Field `low_temperature_suction_piping_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_temperature_suction_piping_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_temperature_suction_piping_zone_name`')

        self._data["Low Temperature Suction Piping Zone Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.system_type))
        out.append(self._to_str(self.medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name))
        out.append(self._to_str(self.low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name))
        out.append(self._to_str(self.refrigeration_gas_cooler_name))
        out.append(self._to_str(self.high_pressure_compressor_or_compressorlist_name))
        out.append(self._to_str(self.low_pressure_compressor_or_compressorlist_name))
        out.append(self._to_str(self.receiver_pressure))
        out.append(self._to_str(self.subcooler_effectiveness))
        out.append(self._to_str(self.refrigeration_system_working_fluid_type))
        out.append(self._to_str(self.sum_ua_suction_piping_for_medium_temperature_loads))
        out.append(self._to_str(self.medium_temperature_suction_piping_zone_name))
        out.append(self._to_str(self.sum_ua_suction_piping_for_low_temperature_loads))
        out.append(self._to_str(self.low_temperature_suction_piping_zone_name))
        out.append(self._to_str(self.enduse_subcategory))
        return ",".join(out)

class RefrigerationSecondarySystem(object):
    """ Corresponds to IDD object `Refrigeration:SecondarySystem`
        Works in conjunction with refrigerated cases and walkins to simulate the performance
        of a secondary loop supermarket refrigeration system. Heat from the refrigeration
        loads served by the secondary loop is absorbed by a primary refrigeration system
        (Refrigeration:System). The SecondarySystem object simulates a heat exchanger that
        is an evaporator, or refrigeration load, on the primary refrigeration system.
    
    """
    internal_name = "Refrigeration:SecondarySystem"
    field_count = 23
    required_fields = ["Name", "Refrigerated Case or Walkin or CaseAndWalkInList Name", "Circulating Fluid Type", "Circulating Fluid Name", "Evaporator Evaporating Temperature", "Evaporator Approach Temperature Difference"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:SecondarySystem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Refrigerated Case or Walkin or CaseAndWalkInList Name"] = None
        self._data["Circulating Fluid Type"] = None
        self._data["Circulating Fluid Name"] = None
        self._data["Evaporator Capacity"] = None
        self._data["Evaporator Flow Rate for Secondary Fluid"] = None
        self._data["Evaporator Evaporating Temperature"] = None
        self._data["Evaporator Approach Temperature Difference"] = None
        self._data["Evaporator Range Temperature Difference"] = None
        self._data["Number of Pumps in Loop"] = None
        self._data["Total Pump Flow Rate"] = None
        self._data["Total Pump Power"] = None
        self._data["Total Pump Head"] = None
        self._data["PhaseChange Circulating Rate"] = None
        self._data["Pump Drive Type"] = None
        self._data["Variable Speed Pump Cubic Curve Name"] = None
        self._data["Pump Motor Heat to Fluid"] = None
        self._data["Sum UA Distribution Piping"] = None
        self._data["Distribution Piping Zone Name"] = None
        self._data["Sum UA Receiver/Separator Shell"] = None
        self._data["Receiver/Separator Zone Name"] = None
        self._data["Evaporator Refrigerant Inventory"] = None
        self._data["End-Use Subcategory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigerated_case_or_walkin_or_caseandwalkinlist_name = None
        else:
            self.refrigerated_case_or_walkin_or_caseandwalkinlist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.circulating_fluid_type = None
        else:
            self.circulating_fluid_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.circulating_fluid_name = None
        else:
            self.circulating_fluid_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporator_capacity = None
        else:
            self.evaporator_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporator_flow_rate_for_secondary_fluid = None
        else:
            self.evaporator_flow_rate_for_secondary_fluid = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporator_evaporating_temperature = None
        else:
            self.evaporator_evaporating_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporator_approach_temperature_difference = None
        else:
            self.evaporator_approach_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporator_range_temperature_difference = None
        else:
            self.evaporator_range_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_pumps_in_loop = None
        else:
            self.number_of_pumps_in_loop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_pump_flow_rate = None
        else:
            self.total_pump_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_pump_power = None
        else:
            self.total_pump_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_pump_head = None
        else:
            self.total_pump_head = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.phasechange_circulating_rate = None
        else:
            self.phasechange_circulating_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_drive_type = None
        else:
            self.pump_drive_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_speed_pump_cubic_curve_name = None
        else:
            self.variable_speed_pump_cubic_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_motor_heat_to_fluid = None
        else:
            self.pump_motor_heat_to_fluid = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sum_ua_distribution_piping = None
        else:
            self.sum_ua_distribution_piping = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.distribution_piping_zone_name = None
        else:
            self.distribution_piping_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sum_ua_receiver_or_separator_shell = None
        else:
            self.sum_ua_receiver_or_separator_shell = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.receiver_or_separator_zone_name = None
        else:
            self.receiver_or_separator_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.evaporator_refrigerant_inventory = None
        else:
            self.evaporator_refrigerant_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def refrigerated_case_or_walkin_or_caseandwalkinlist_name(self):
        """Get refrigerated_case_or_walkin_or_caseandwalkinlist_name

        Returns:
            str: the value of `refrigerated_case_or_walkin_or_caseandwalkinlist_name` or None if not set
        """
        return self._data["Refrigerated Case or Walkin or CaseAndWalkInList Name"]

    @refrigerated_case_or_walkin_or_caseandwalkinlist_name.setter
    def refrigerated_case_or_walkin_or_caseandwalkinlist_name(self, value=None):
        """  Corresponds to IDD Field `refrigerated_case_or_walkin_or_caseandwalkinlist_name`
        Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object.
        If there is more than one refrigerated case or walkin served by this secondary system,
        enter the name of a Refrigeration:CaseAndWalkInList object.

        Args:
            value (str): value for IDD Field `refrigerated_case_or_walkin_or_caseandwalkinlist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigerated_case_or_walkin_or_caseandwalkinlist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigerated_case_or_walkin_or_caseandwalkinlist_name`')

        self._data["Refrigerated Case or Walkin or CaseAndWalkInList Name"] = value

    @property
    def circulating_fluid_type(self):
        """Get circulating_fluid_type

        Returns:
            str: the value of `circulating_fluid_type` or None if not set
        """
        return self._data["Circulating Fluid Type"]

    @circulating_fluid_type.setter
    def circulating_fluid_type(self, value=None):
        """  Corresponds to IDD Field `circulating_fluid_type`
        If "FluidAlwaysLiquid" is selected, the fluid properties
        must be input using the objects: FluidProperties:Name,
        FluidProperties:GlycolConcentration, and, if user defined fluid type,
        FluidProperties:Temperatures and FluidProperties:Concentration.
        Many sets of fluid properties can be found in GlycolPropertiesRefData.idf.
        If "FluidPhaseChange" is selected, the refrigerant properties
        must be input using the objects: (if user defined fluid type): FluidProperties:Name,
        FluidProperties:Temperatures, FluidProperties:Saturated, and
        FluidProperties:Superheated.
        Many sets of refrigerant data can be found in FluidPropertiesRefData.idf.

        Args:
            value (str): value for IDD Field `circulating_fluid_type`
                Accepted values are:
                      - FluidAlwaysLiquid
                      - FluidPhaseChange
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `circulating_fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `circulating_fluid_type`')
            vals = set()
            vals.add("FluidAlwaysLiquid")
            vals.add("FluidPhaseChange")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `circulating_fluid_type`'.format(value))

        self._data["Circulating Fluid Type"] = value

    @property
    def circulating_fluid_name(self):
        """Get circulating_fluid_name

        Returns:
            str: the value of `circulating_fluid_name` or None if not set
        """
        return self._data["Circulating Fluid Name"]

    @circulating_fluid_name.setter
    def circulating_fluid_name(self, value=None):
        """  Corresponds to IDD Field `circulating_fluid_name`
        This must correspond to a name in the FluidProperties:Name object.

        Args:
            value (str): value for IDD Field `circulating_fluid_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `circulating_fluid_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `circulating_fluid_name`')

        self._data["Circulating Fluid Name"] = value

    @property
    def evaporator_capacity(self):
        """Get evaporator_capacity

        Returns:
            float: the value of `evaporator_capacity` or None if not set
        """
        return self._data["Evaporator Capacity"]

    @evaporator_capacity.setter
    def evaporator_capacity(self, value=None):
        """  Corresponds to IDD Field `evaporator_capacity`
        For "FluidAlwaysLiquid", at least one of the two, Evaporator Capacity OR
        Evaporator Flow Rate for Secondary Fluid, is required.
        For "FluidPhaseChange", the default capacity is the sum of the rated capacities of the
        Cases and Walk-ins served by the secondary loop.

        Args:
            value (float): value for IDD Field `evaporator_capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporator_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporator_capacity`')

        self._data["Evaporator Capacity"] = value

    @property
    def evaporator_flow_rate_for_secondary_fluid(self):
        """Get evaporator_flow_rate_for_secondary_fluid

        Returns:
            float: the value of `evaporator_flow_rate_for_secondary_fluid` or None if not set
        """
        return self._data["Evaporator Flow Rate for Secondary Fluid"]

    @evaporator_flow_rate_for_secondary_fluid.setter
    def evaporator_flow_rate_for_secondary_fluid(self, value=None):
        """  Corresponds to IDD Field `evaporator_flow_rate_for_secondary_fluid`
        For "FluidAlwaysLiquid", at least one of the two, Evaporator Capacity OR
        Evaporator Flow Rate for Secondary Fluid, is required.
        For "FluidPhaseChange" loops, this input is not used. (see PhaseChange Circulating
        Rate)

        Args:
            value (float): value for IDD Field `evaporator_flow_rate_for_secondary_fluid`
                Units: M3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporator_flow_rate_for_secondary_fluid`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporator_flow_rate_for_secondary_fluid`')

        self._data["Evaporator Flow Rate for Secondary Fluid"] = value

    @property
    def evaporator_evaporating_temperature(self):
        """Get evaporator_evaporating_temperature

        Returns:
            float: the value of `evaporator_evaporating_temperature` or None if not set
        """
        return self._data["Evaporator Evaporating Temperature"]

    @evaporator_evaporating_temperature.setter
    def evaporator_evaporating_temperature(self, value=None):
        """  Corresponds to IDD Field `evaporator_evaporating_temperature`
        This is the evaporating temperature in the heat exchanger
        used to chill or condense the secondary loop circulating fluid.
        It is NOT the temperature in any cases or walk-ins served by the
        secondary loop.

        Args:
            value (float): value for IDD Field `evaporator_evaporating_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporator_evaporating_temperature`'.format(value))

        self._data["Evaporator Evaporating Temperature"] = value

    @property
    def evaporator_approach_temperature_difference(self):
        """Get evaporator_approach_temperature_difference

        Returns:
            float: the value of `evaporator_approach_temperature_difference` or None if not set
        """
        return self._data["Evaporator Approach Temperature Difference"]

    @evaporator_approach_temperature_difference.setter
    def evaporator_approach_temperature_difference(self, value=None):
        """  Corresponds to IDD Field `evaporator_approach_temperature_difference`
        For "FluidAlwaysLiquid", this is the rated difference between the temperature of the
        circulating fluid leaving the heat exchanger
        and the heat exchanger's rated evaporating temperature.
        For "FluidPhaseChange", this is the difference between the temperature of the
        evaporating and condensing temperatures in the heat exchanger.

        Args:
            value (float): value for IDD Field `evaporator_approach_temperature_difference`
                Units: DeltaC
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporator_approach_temperature_difference`'.format(value))

        self._data["Evaporator Approach Temperature Difference"] = value

    @property
    def evaporator_range_temperature_difference(self):
        """Get evaporator_range_temperature_difference

        Returns:
            float: the value of `evaporator_range_temperature_difference` or None if not set
        """
        return self._data["Evaporator Range Temperature Difference"]

    @evaporator_range_temperature_difference.setter
    def evaporator_range_temperature_difference(self, value=None):
        """  Corresponds to IDD Field `evaporator_range_temperature_difference`
        For "FluidAlwaysLiquid", this is the rated difference between the temperature of the
        circulating fluid entering the heat exchanger and the temperature of the
        circulating fluid leaving the heat exchanger, and is Required.
        For "FluidPhaseChange", this input is not used.

        Args:
            value (float): value for IDD Field `evaporator_range_temperature_difference`
                Units: DeltaC
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporator_range_temperature_difference`'.format(value))

        self._data["Evaporator Range Temperature Difference"] = value

    @property
    def number_of_pumps_in_loop(self):
        """Get number_of_pumps_in_loop

        Returns:
            int: the value of `number_of_pumps_in_loop` or None if not set
        """
        return self._data["Number of Pumps in Loop"]

    @number_of_pumps_in_loop.setter
    def number_of_pumps_in_loop(self, value=1 ):
        """  Corresponds to IDD Field `number_of_pumps_in_loop`

        Args:
            value (int): value for IDD Field `number_of_pumps_in_loop`
                Default value: 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_pumps_in_loop`'.format(value))

        self._data["Number of Pumps in Loop"] = value

    @property
    def total_pump_flow_rate(self):
        """Get total_pump_flow_rate

        Returns:
            float: the value of `total_pump_flow_rate` or None if not set
        """
        return self._data["Total Pump Flow Rate"]

    @total_pump_flow_rate.setter
    def total_pump_flow_rate(self, value=None):
        """  Corresponds to IDD Field `total_pump_flow_rate`
        For "FluidAlwaysLiquid",if not input, Evaporator Flow Rate for Secondary Fluid
        will be used.
        For "FluidPhaseChange", if not input, this will be calculated using the
        PhaseChange Circulating Rate.

        Args:
            value (float): value for IDD Field `total_pump_flow_rate`
                Units: M3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_pump_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `total_pump_flow_rate`')

        self._data["Total Pump Flow Rate"] = value

    @property
    def total_pump_power(self):
        """Get total_pump_power

        Returns:
            float: the value of `total_pump_power` or None if not set
        """
        return self._data["Total Pump Power"]

    @total_pump_power.setter
    def total_pump_power(self, value=None):
        """  Corresponds to IDD Field `total_pump_power`
        Either the Total Pump Power or the Total Pump Head is required.

        Args:
            value (float): value for IDD Field `total_pump_power`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_pump_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `total_pump_power`')

        self._data["Total Pump Power"] = value

    @property
    def total_pump_head(self):
        """Get total_pump_head

        Returns:
            float: the value of `total_pump_head` or None if not set
        """
        return self._data["Total Pump Head"]

    @total_pump_head.setter
    def total_pump_head(self, value=None):
        """  Corresponds to IDD Field `total_pump_head`
        Either the Total Pump Power or the Total Pump Head is required.

        Args:
            value (float): value for IDD Field `total_pump_head`
                Units: Pa
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_pump_head`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `total_pump_head`')

        self._data["Total Pump Head"] = value

    @property
    def phasechange_circulating_rate(self):
        """Get phasechange_circulating_rate

        Returns:
            float: the value of `phasechange_circulating_rate` or None if not set
        """
        return self._data["PhaseChange Circulating Rate"]

    @phasechange_circulating_rate.setter
    def phasechange_circulating_rate(self, value=2.5 ):
        """  Corresponds to IDD Field `phasechange_circulating_rate`
        This is the total mass flow at the pump divided by the gaseous mass flow
        leaving the refrigeration load.

        Args:
            value (float): value for IDD Field `phasechange_circulating_rate`
                Units: dimensionless
                Default value: 2.5
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `phasechange_circulating_rate`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `phasechange_circulating_rate`')

        self._data["PhaseChange Circulating Rate"] = value

    @property
    def pump_drive_type(self):
        """Get pump_drive_type

        Returns:
            str: the value of `pump_drive_type` or None if not set
        """
        return self._data["Pump Drive Type"]

    @pump_drive_type.setter
    def pump_drive_type(self, value="Constant"):
        """  Corresponds to IDD Field `pump_drive_type`

        Args:
            value (str): value for IDD Field `pump_drive_type`
                Accepted values are:
                      - Constant
                      - Variable
                Default value: Constant
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_drive_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_drive_type`')
            vals = set()
            vals.add("Constant")
            vals.add("Variable")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `pump_drive_type`'.format(value))

        self._data["Pump Drive Type"] = value

    @property
    def variable_speed_pump_cubic_curve_name(self):
        """Get variable_speed_pump_cubic_curve_name

        Returns:
            str: the value of `variable_speed_pump_cubic_curve_name` or None if not set
        """
        return self._data["Variable Speed Pump Cubic Curve Name"]

    @variable_speed_pump_cubic_curve_name.setter
    def variable_speed_pump_cubic_curve_name(self, value=None):
        """  Corresponds to IDD Field `variable_speed_pump_cubic_curve_name`
        Variable Speed Pump Curve Name is applicable to variable speed pumps
        only.

        Args:
            value (str): value for IDD Field `variable_speed_pump_cubic_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_speed_pump_cubic_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_speed_pump_cubic_curve_name`')

        self._data["Variable Speed Pump Cubic Curve Name"] = value

    @property
    def pump_motor_heat_to_fluid(self):
        """Get pump_motor_heat_to_fluid

        Returns:
            float: the value of `pump_motor_heat_to_fluid` or None if not set
        """
        return self._data["Pump Motor Heat to Fluid"]

    @pump_motor_heat_to_fluid.setter
    def pump_motor_heat_to_fluid(self, value=0.85 ):
        """  Corresponds to IDD Field `pump_motor_heat_to_fluid`
        This is the portion of the pump motor heat added to secondary circulating fluid
        and is equal to the motor efficiency for non-hermetic motor.
        Enter 1.0 for a semi-hermetic motor.

        Args:
            value (float): value for IDD Field `pump_motor_heat_to_fluid`
                Units: dimensionless
                Default value: 0.85
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pump_motor_heat_to_fluid`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `pump_motor_heat_to_fluid`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `pump_motor_heat_to_fluid`')

        self._data["Pump Motor Heat to Fluid"] = value

    @property
    def sum_ua_distribution_piping(self):
        """Get sum_ua_distribution_piping

        Returns:
            float: the value of `sum_ua_distribution_piping` or None if not set
        """
        return self._data["Sum UA Distribution Piping"]

    @sum_ua_distribution_piping.setter
    def sum_ua_distribution_piping(self, value=0.0 ):
        """  Corresponds to IDD Field `sum_ua_distribution_piping`
        Use only if you want to include distribution piping heat gain in refrigeration load.

        Args:
            value (float): value for IDD Field `sum_ua_distribution_piping`
                Units: W/K
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sum_ua_distribution_piping`'.format(value))

        self._data["Sum UA Distribution Piping"] = value

    @property
    def distribution_piping_zone_name(self):
        """Get distribution_piping_zone_name

        Returns:
            str: the value of `distribution_piping_zone_name` or None if not set
        """
        return self._data["Distribution Piping Zone Name"]

    @distribution_piping_zone_name.setter
    def distribution_piping_zone_name(self, value=None):
        """  Corresponds to IDD Field `distribution_piping_zone_name`
        This will be used to determine the temperature used for distribution piping heat gain.
        The pipe heat gains are also counted as cooling credit for the zone.
        Required only if Sum UA Distribution Piping >0.0

        Args:
            value (str): value for IDD Field `distribution_piping_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `distribution_piping_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `distribution_piping_zone_name`')

        self._data["Distribution Piping Zone Name"] = value

    @property
    def sum_ua_receiver_or_separator_shell(self):
        """Get sum_ua_receiver_or_separator_shell

        Returns:
            float: the value of `sum_ua_receiver_or_separator_shell` or None if not set
        """
        return self._data["Sum UA Receiver/Separator Shell"]

    @sum_ua_receiver_or_separator_shell.setter
    def sum_ua_receiver_or_separator_shell(self, value=0.0 ):
        """  Corresponds to IDD Field `sum_ua_receiver_or_separator_shell`
        Use only if you want to include Receiver/Separator Shell heat gain in refrigeration load.

        Args:
            value (float): value for IDD Field `sum_ua_receiver_or_separator_shell`
                Units: W/K
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sum_ua_receiver_or_separator_shell`'.format(value))

        self._data["Sum UA Receiver/Separator Shell"] = value

    @property
    def receiver_or_separator_zone_name(self):
        """Get receiver_or_separator_zone_name

        Returns:
            str: the value of `receiver_or_separator_zone_name` or None if not set
        """
        return self._data["Receiver/Separator Zone Name"]

    @receiver_or_separator_zone_name.setter
    def receiver_or_separator_zone_name(self, value=None):
        """  Corresponds to IDD Field `receiver_or_separator_zone_name`
        This will be used to determine the temperature used for Receiver/Separator Shell heat gain.
        The shell heat gains are also counted as cooling credit for the zone.
        Required only if Sum UA Receiver/Separator Shell >0.0

        Args:
            value (str): value for IDD Field `receiver_or_separator_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `receiver_or_separator_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `receiver_or_separator_zone_name`')

        self._data["Receiver/Separator Zone Name"] = value

    @property
    def evaporator_refrigerant_inventory(self):
        """Get evaporator_refrigerant_inventory

        Returns:
            float: the value of `evaporator_refrigerant_inventory` or None if not set
        """
        return self._data["Evaporator Refrigerant Inventory"]

    @evaporator_refrigerant_inventory.setter
    def evaporator_refrigerant_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `evaporator_refrigerant_inventory`
        This value refers to the refrigerant circulating within the primary system providing
        cooling to the chiller for the secondary loop, not to the fluid circulating
        within the secondary loop itself.

        Args:
            value (float): value for IDD Field `evaporator_refrigerant_inventory`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporator_refrigerant_inventory`'.format(value))

        self._data["Evaporator Refrigerant Inventory"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.refrigerated_case_or_walkin_or_caseandwalkinlist_name))
        out.append(self._to_str(self.circulating_fluid_type))
        out.append(self._to_str(self.circulating_fluid_name))
        out.append(self._to_str(self.evaporator_capacity))
        out.append(self._to_str(self.evaporator_flow_rate_for_secondary_fluid))
        out.append(self._to_str(self.evaporator_evaporating_temperature))
        out.append(self._to_str(self.evaporator_approach_temperature_difference))
        out.append(self._to_str(self.evaporator_range_temperature_difference))
        out.append(self._to_str(self.number_of_pumps_in_loop))
        out.append(self._to_str(self.total_pump_flow_rate))
        out.append(self._to_str(self.total_pump_power))
        out.append(self._to_str(self.total_pump_head))
        out.append(self._to_str(self.phasechange_circulating_rate))
        out.append(self._to_str(self.pump_drive_type))
        out.append(self._to_str(self.variable_speed_pump_cubic_curve_name))
        out.append(self._to_str(self.pump_motor_heat_to_fluid))
        out.append(self._to_str(self.sum_ua_distribution_piping))
        out.append(self._to_str(self.distribution_piping_zone_name))
        out.append(self._to_str(self.sum_ua_receiver_or_separator_shell))
        out.append(self._to_str(self.receiver_or_separator_zone_name))
        out.append(self._to_str(self.evaporator_refrigerant_inventory))
        out.append(self._to_str(self.enduse_subcategory))
        return ",".join(out)

class RefrigerationWalkIn(object):
    """ Corresponds to IDD object `Refrigeration:WalkIn`
        Works in conjunction with a compressor rack, a refrigeration system, or a
        refrigeration secondary system to simulate the performance of a walk-in cooler.
        The walk-in cooler model uses information at rated conditions along with input
        descriptions for heat transfer surfaces facing multiple zones to determine
        performance.
    
    """
    internal_name = "Refrigeration:WalkIn"
    field_count = 57
    required_fields = ["Name", "Rated Coil Cooling Capacity", "Operating Temperature", "Rated Cooling Source Temperature", "Rated Total Heating Power", "Rated Total Lighting Power", "Defrost Schedule Name", "Insulated Floor Surface Area", "Zone 1 Name", "Total Insulated Surface Area Facing Zone 1"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:WalkIn`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Rated Coil Cooling Capacity"] = None
        self._data["Operating Temperature"] = None
        self._data["Rated Cooling Source Temperature"] = None
        self._data["Rated Total Heating Power"] = None
        self._data["Heating Power Schedule Name"] = None
        self._data["Rated Cooling Coil Fan Power"] = None
        self._data["Rated Circulation Fan Power"] = None
        self._data["Rated Total Lighting Power"] = None
        self._data["Lighting Schedule Name"] = None
        self._data["Defrost Type"] = None
        self._data["Defrost Control Type"] = None
        self._data["Defrost Schedule Name"] = None
        self._data["Defrost Drip-Down Schedule Name"] = None
        self._data["Defrost Power"] = None
        self._data["Temperature Termination Defrost Fraction to Ice"] = None
        self._data["Restocking Schedule Name"] = None
        self._data["Average Refrigerant Charge Inventory"] = None
        self._data["Insulated Floor Surface Area"] = None
        self._data["Insulated Floor U-Value"] = None
        self._data["Zone 1 Name"] = None
        self._data["Total Insulated Surface Area Facing Zone 1"] = None
        self._data["Insulated Surface U-Value Facing Zone 1"] = None
        self._data["Area of Glass Reach In Doors Facing Zone 1"] = None
        self._data["Height of Glass Reach In Doors Facing Zone 1"] = None
        self._data["Glass Reach In Door U Value Facing Zone 1"] = None
        self._data["Glass Reach In Door Opening Schedule Name Facing Zone 1"] = None
        self._data["Area of Stocking Doors Facing Zone 1"] = None
        self._data["Height of Stocking Doors Facing Zone 1"] = None
        self._data["Stocking Door U Value Facing Zone 1"] = None
        self._data["Stocking Door Opening Schedule Name Facing Zone 1"] = None
        self._data["Stocking Door Opening Protection Type Facing Zone 1"] = None
        self._data["Zone 2 Name"] = None
        self._data["Total Insulated Surface Area Facing Zone 2"] = None
        self._data["Insulated Surface U-Value Facing Zone 2"] = None
        self._data["Area of Glass Reach In Doors Facing Zone 2"] = None
        self._data["Height of Glass Reach In Doors Facing Zone 2"] = None
        self._data["Glass Reach In Door U Value Facing Zone 2"] = None
        self._data["Glass Reach In Door Opening Schedule Name Facing Zone 2"] = None
        self._data["Area of Stocking Doors Facing Zone 2"] = None
        self._data["Height of Stocking Doors Facing Zone 2"] = None
        self._data["Stocking Door U Value Facing Zone 2"] = None
        self._data["Stocking Door Opening Schedule Name Facing Zone 2"] = None
        self._data["Stocking Door Opening Protection Type Facing Zone 2"] = None
        self._data["Zone 3 Name"] = None
        self._data["Total Insulated Surface Area Facing Zone 3"] = None
        self._data["Insulated Surface U-Value Facing Zone 3"] = None
        self._data["Area of Glass Reach In Doors Facing Zone 3"] = None
        self._data["Height of Glass Reach In Doors Facing Zone 3"] = None
        self._data["Glass Reach In Door U Value Facing Zone 3"] = None
        self._data["Glass Reach In Door Opening Schedule Name Facing Zone 3"] = None
        self._data["Area of Stocking Doors Facing Zone 3"] = None
        self._data["Height of Stocking Doors Facing Zone 3"] = None
        self._data["Stocking Door U Value Facing Zone 3"] = None
        self._data["Stocking Door Opening Schedule Name Facing Zone 3"] = None
        self._data["Stocking Door Opening Protection Type Facing Zone 3"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_coil_cooling_capacity = None
        else:
            self.rated_coil_cooling_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.operating_temperature = None
        else:
            self.operating_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_cooling_source_temperature = None
        else:
            self.rated_cooling_source_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_total_heating_power = None
        else:
            self.rated_total_heating_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_power_schedule_name = None
        else:
            self.heating_power_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_cooling_coil_fan_power = None
        else:
            self.rated_cooling_coil_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_circulation_fan_power = None
        else:
            self.rated_circulation_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_total_lighting_power = None
        else:
            self.rated_total_lighting_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lighting_schedule_name = None
        else:
            self.lighting_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_type = None
        else:
            self.defrost_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_control_type = None
        else:
            self.defrost_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_schedule_name = None
        else:
            self.defrost_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_dripdown_schedule_name = None
        else:
            self.defrost_dripdown_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_power = None
        else:
            self.defrost_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_termination_defrost_fraction_to_ice = None
        else:
            self.temperature_termination_defrost_fraction_to_ice = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.restocking_schedule_name = None
        else:
            self.restocking_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.average_refrigerant_charge_inventory = None
        else:
            self.average_refrigerant_charge_inventory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.insulated_floor_surface_area = None
        else:
            self.insulated_floor_surface_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.insulated_floor_uvalue = None
        else:
            self.insulated_floor_uvalue = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_1_name = None
        else:
            self.zone_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_insulated_surface_area_facing_zone_1 = None
        else:
            self.total_insulated_surface_area_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.insulated_surface_uvalue_facing_zone_1 = None
        else:
            self.insulated_surface_uvalue_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.area_of_glass_reach_in_doors_facing_zone_1 = None
        else:
            self.area_of_glass_reach_in_doors_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.height_of_glass_reach_in_doors_facing_zone_1 = None
        else:
            self.height_of_glass_reach_in_doors_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glass_reach_in_door_u_value_facing_zone_1 = None
        else:
            self.glass_reach_in_door_u_value_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glass_reach_in_door_opening_schedule_name_facing_zone_1 = None
        else:
            self.glass_reach_in_door_opening_schedule_name_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.area_of_stocking_doors_facing_zone_1 = None
        else:
            self.area_of_stocking_doors_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.height_of_stocking_doors_facing_zone_1 = None
        else:
            self.height_of_stocking_doors_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_u_value_facing_zone_1 = None
        else:
            self.stocking_door_u_value_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_opening_schedule_name_facing_zone_1 = None
        else:
            self.stocking_door_opening_schedule_name_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_opening_protection_type_facing_zone_1 = None
        else:
            self.stocking_door_opening_protection_type_facing_zone_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_2_name = None
        else:
            self.zone_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_insulated_surface_area_facing_zone_2 = None
        else:
            self.total_insulated_surface_area_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.insulated_surface_uvalue_facing_zone_2 = None
        else:
            self.insulated_surface_uvalue_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.area_of_glass_reach_in_doors_facing_zone_2 = None
        else:
            self.area_of_glass_reach_in_doors_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.height_of_glass_reach_in_doors_facing_zone_2 = None
        else:
            self.height_of_glass_reach_in_doors_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glass_reach_in_door_u_value_facing_zone_2 = None
        else:
            self.glass_reach_in_door_u_value_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glass_reach_in_door_opening_schedule_name_facing_zone_2 = None
        else:
            self.glass_reach_in_door_opening_schedule_name_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.area_of_stocking_doors_facing_zone_2 = None
        else:
            self.area_of_stocking_doors_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.height_of_stocking_doors_facing_zone_2 = None
        else:
            self.height_of_stocking_doors_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_u_value_facing_zone_2 = None
        else:
            self.stocking_door_u_value_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_opening_schedule_name_facing_zone_2 = None
        else:
            self.stocking_door_opening_schedule_name_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_opening_protection_type_facing_zone_2 = None
        else:
            self.stocking_door_opening_protection_type_facing_zone_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_3_name = None
        else:
            self.zone_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_insulated_surface_area_facing_zone_3 = None
        else:
            self.total_insulated_surface_area_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.insulated_surface_uvalue_facing_zone_3 = None
        else:
            self.insulated_surface_uvalue_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.area_of_glass_reach_in_doors_facing_zone_3 = None
        else:
            self.area_of_glass_reach_in_doors_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.height_of_glass_reach_in_doors_facing_zone_3 = None
        else:
            self.height_of_glass_reach_in_doors_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glass_reach_in_door_u_value_facing_zone_3 = None
        else:
            self.glass_reach_in_door_u_value_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glass_reach_in_door_opening_schedule_name_facing_zone_3 = None
        else:
            self.glass_reach_in_door_opening_schedule_name_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.area_of_stocking_doors_facing_zone_3 = None
        else:
            self.area_of_stocking_doors_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.height_of_stocking_doors_facing_zone_3 = None
        else:
            self.height_of_stocking_doors_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_u_value_facing_zone_3 = None
        else:
            self.stocking_door_u_value_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_opening_schedule_name_facing_zone_3 = None
        else:
            self.stocking_door_opening_schedule_name_facing_zone_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stocking_door_opening_protection_type_facing_zone_3 = None
        else:
            self.stocking_door_opening_protection_type_facing_zone_3 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def rated_coil_cooling_capacity(self):
        """Get rated_coil_cooling_capacity

        Returns:
            float: the value of `rated_coil_cooling_capacity` or None if not set
        """
        return self._data["Rated Coil Cooling Capacity"]

    @rated_coil_cooling_capacity.setter
    def rated_coil_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `rated_coil_cooling_capacity`

        Args:
            value (float): value for IDD Field `rated_coil_cooling_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_coil_cooling_capacity`'.format(value))

        self._data["Rated Coil Cooling Capacity"] = value

    @property
    def operating_temperature(self):
        """Get operating_temperature

        Returns:
            float: the value of `operating_temperature` or None if not set
        """
        return self._data["Operating Temperature"]

    @operating_temperature.setter
    def operating_temperature(self, value=None):
        """  Corresponds to IDD Field `operating_temperature`

        Args:
            value (float): value for IDD Field `operating_temperature`
                Units: C
                value < 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `operating_temperature`'.format(value))
            if value >= 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `operating_temperature`')

        self._data["Operating Temperature"] = value

    @property
    def rated_cooling_source_temperature(self):
        """Get rated_cooling_source_temperature

        Returns:
            float: the value of `rated_cooling_source_temperature` or None if not set
        """
        return self._data["Rated Cooling Source Temperature"]

    @rated_cooling_source_temperature.setter
    def rated_cooling_source_temperature(self, value=None):
        """  Corresponds to IDD Field `rated_cooling_source_temperature`
        If DXEvaporator, use evaporating temperature (saturated suction temperature)
        If BrineCoil, use Brine entering temperature
        used to set minimum suction pressure for DX systems and
        minimum brine temp for secondary systems

        Args:
            value (float): value for IDD Field `rated_cooling_source_temperature`
                Units: C
                value >= -70.0
                value <= 40.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_cooling_source_temperature`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `rated_cooling_source_temperature`')
            if value > 40.0:
                raise ValueError('value need to be smaller 40.0 '
                                 'for field `rated_cooling_source_temperature`')

        self._data["Rated Cooling Source Temperature"] = value

    @property
    def rated_total_heating_power(self):
        """Get rated_total_heating_power

        Returns:
            float: the value of `rated_total_heating_power` or None if not set
        """
        return self._data["Rated Total Heating Power"]

    @rated_total_heating_power.setter
    def rated_total_heating_power(self, value=None):
        """  Corresponds to IDD Field `rated_total_heating_power`
        Include total for all anti-sweat, door, drip-pan, and floor heater power
        Do not include defrost heater power

        Args:
            value (float): value for IDD Field `rated_total_heating_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_total_heating_power`'.format(value))

        self._data["Rated Total Heating Power"] = value

    @property
    def heating_power_schedule_name(self):
        """Get heating_power_schedule_name

        Returns:
            str: the value of `heating_power_schedule_name` or None if not set
        """
        return self._data["Heating Power Schedule Name"]

    @heating_power_schedule_name.setter
    def heating_power_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_power_schedule_name`
        Values will be used to multiply the total heating power
        Values in the schedule should be between 0.0 and 1.0
        For example, this could be used if display door antisweat heaters
        are turned off at night
        Defaults to always on if schedule name left blank.

        Args:
            value (str): value for IDD Field `heating_power_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_power_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_power_schedule_name`')

        self._data["Heating Power Schedule Name"] = value

    @property
    def rated_cooling_coil_fan_power(self):
        """Get rated_cooling_coil_fan_power

        Returns:
            float: the value of `rated_cooling_coil_fan_power` or None if not set
        """
        return self._data["Rated Cooling Coil Fan Power"]

    @rated_cooling_coil_fan_power.setter
    def rated_cooling_coil_fan_power(self, value=375.0 ):
        """  Corresponds to IDD Field `rated_cooling_coil_fan_power`

        Args:
            value (float): value for IDD Field `rated_cooling_coil_fan_power`
                Units: W
                Default value: 375.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_cooling_coil_fan_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_cooling_coil_fan_power`')

        self._data["Rated Cooling Coil Fan Power"] = value

    @property
    def rated_circulation_fan_power(self):
        """Get rated_circulation_fan_power

        Returns:
            float: the value of `rated_circulation_fan_power` or None if not set
        """
        return self._data["Rated Circulation Fan Power"]

    @rated_circulation_fan_power.setter
    def rated_circulation_fan_power(self, value=0.0 ):
        """  Corresponds to IDD Field `rated_circulation_fan_power`

        Args:
            value (float): value for IDD Field `rated_circulation_fan_power`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_circulation_fan_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_circulation_fan_power`')

        self._data["Rated Circulation Fan Power"] = value

    @property
    def rated_total_lighting_power(self):
        """Get rated_total_lighting_power

        Returns:
            float: the value of `rated_total_lighting_power` or None if not set
        """
        return self._data["Rated Total Lighting Power"]

    @rated_total_lighting_power.setter
    def rated_total_lighting_power(self, value=None):
        """  Corresponds to IDD Field `rated_total_lighting_power`
        Enter the total (display + task) installed lighting power.

        Args:
            value (float): value for IDD Field `rated_total_lighting_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_total_lighting_power`'.format(value))

        self._data["Rated Total Lighting Power"] = value

    @property
    def lighting_schedule_name(self):
        """Get lighting_schedule_name

        Returns:
            str: the value of `lighting_schedule_name` or None if not set
        """
        return self._data["Lighting Schedule Name"]

    @lighting_schedule_name.setter
    def lighting_schedule_name(self, value=None):
        """  Corresponds to IDD Field `lighting_schedule_name`
        The schedule should contain values between 0 and 1
        Defaults to always on if schedule name left blank.

        Args:
            value (str): value for IDD Field `lighting_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lighting_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lighting_schedule_name`')

        self._data["Lighting Schedule Name"] = value

    @property
    def defrost_type(self):
        """Get defrost_type

        Returns:
            str: the value of `defrost_type` or None if not set
        """
        return self._data["Defrost Type"]

    @defrost_type.setter
    def defrost_type(self, value="Electric"):
        """  Corresponds to IDD Field `defrost_type`
        HotFluid includes either hot gas defrost for a DX system or
        Hot Brine defrost if this walk in is cooled by brine from a secondary chiller

        Args:
            value (str): value for IDD Field `defrost_type`
                Accepted values are:
                      - HotFluid
                      - Electric
                      - None
                      - OffCycle
                Default value: Electric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_type`')
            vals = set()
            vals.add("HotFluid")
            vals.add("Electric")
            vals.add("None")
            vals.add("OffCycle")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `defrost_type`'.format(value))

        self._data["Defrost Type"] = value

    @property
    def defrost_control_type(self):
        """Get defrost_control_type

        Returns:
            str: the value of `defrost_control_type` or None if not set
        """
        return self._data["Defrost Control Type"]

    @defrost_control_type.setter
    def defrost_control_type(self, value="TimeSchedule"):
        """  Corresponds to IDD Field `defrost_control_type`

        Args:
            value (str): value for IDD Field `defrost_control_type`
                Accepted values are:
                      - TimeSchedule
                      - TemperatureTermination
                Default value: TimeSchedule
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_control_type`')
            vals = set()
            vals.add("TimeSchedule")
            vals.add("TemperatureTermination")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `defrost_control_type`'.format(value))

        self._data["Defrost Control Type"] = value

    @property
    def defrost_schedule_name(self):
        """Get defrost_schedule_name

        Returns:
            str: the value of `defrost_schedule_name` or None if not set
        """
        return self._data["Defrost Schedule Name"]

    @defrost_schedule_name.setter
    def defrost_schedule_name(self, value=None):
        """  Corresponds to IDD Field `defrost_schedule_name`
        The schedule values should be 0 (off) or 1 (on)

        Args:
            value (str): value for IDD Field `defrost_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_schedule_name`')

        self._data["Defrost Schedule Name"] = value

    @property
    def defrost_dripdown_schedule_name(self):
        """Get defrost_dripdown_schedule_name

        Returns:
            str: the value of `defrost_dripdown_schedule_name` or None if not set
        """
        return self._data["Defrost Drip-Down Schedule Name"]

    @defrost_dripdown_schedule_name.setter
    def defrost_dripdown_schedule_name(self, value=None):
        """  Corresponds to IDD Field `defrost_dripdown_schedule_name`
        The schedule values should be 0 (off) or 1 (on)
        The start time for each defrost period in this drip-down schedule should coincide with
        the start time for each defrost period in the defrost schedule (previous input
        field).The length of each defrost drip-down period must be greater than or equal to the
        corresponding defrost period specified in the defrost schedule. This extra time
        allows the melted frost to drip from the coil before refrigeration is restarted.

        Args:
            value (str): value for IDD Field `defrost_dripdown_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_dripdown_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_dripdown_schedule_name`')

        self._data["Defrost Drip-Down Schedule Name"] = value

    @property
    def defrost_power(self):
        """Get defrost_power

        Returns:
            float: the value of `defrost_power` or None if not set
        """
        return self._data["Defrost Power"]

    @defrost_power.setter
    def defrost_power(self, value=None):
        """  Corresponds to IDD Field `defrost_power`
        needed for all defrost types except none and offcycle

        Args:
            value (float): value for IDD Field `defrost_power`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `defrost_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `defrost_power`')

        self._data["Defrost Power"] = value

    @property
    def temperature_termination_defrost_fraction_to_ice(self):
        """Get temperature_termination_defrost_fraction_to_ice

        Returns:
            float: the value of `temperature_termination_defrost_fraction_to_ice` or None if not set
        """
        return self._data["Temperature Termination Defrost Fraction to Ice"]

    @temperature_termination_defrost_fraction_to_ice.setter
    def temperature_termination_defrost_fraction_to_ice(self, value=None):
        """  Corresponds to IDD Field `temperature_termination_defrost_fraction_to_ice`
        This is the portion of the defrost energy that is available to melt frost
        Needed only for defrost control type TemperatureTermination
        defaults to 0.7 for electric defrost and to 0.3 for hot fluid defrost

        Args:
            value (float): value for IDD Field `temperature_termination_defrost_fraction_to_ice`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_termination_defrost_fraction_to_ice`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `temperature_termination_defrost_fraction_to_ice`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `temperature_termination_defrost_fraction_to_ice`')

        self._data["Temperature Termination Defrost Fraction to Ice"] = value

    @property
    def restocking_schedule_name(self):
        """Get restocking_schedule_name

        Returns:
            str: the value of `restocking_schedule_name` or None if not set
        """
        return self._data["Restocking Schedule Name"]

    @restocking_schedule_name.setter
    def restocking_schedule_name(self, value=None):
        """  Corresponds to IDD Field `restocking_schedule_name`
        Schedule values should be in units of Watts
        Leave this field blank if no restocking is to be modeled

        Args:
            value (str): value for IDD Field `restocking_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `restocking_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `restocking_schedule_name`')

        self._data["Restocking Schedule Name"] = value

    @property
    def average_refrigerant_charge_inventory(self):
        """Get average_refrigerant_charge_inventory

        Returns:
            float: the value of `average_refrigerant_charge_inventory` or None if not set
        """
        return self._data["Average Refrigerant Charge Inventory"]

    @average_refrigerant_charge_inventory.setter
    def average_refrigerant_charge_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `average_refrigerant_charge_inventory`
        This value is only used if the Cooling Source Type is DXEvaporator

        Args:
            value (float): value for IDD Field `average_refrigerant_charge_inventory`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `average_refrigerant_charge_inventory`'.format(value))

        self._data["Average Refrigerant Charge Inventory"] = value

    @property
    def insulated_floor_surface_area(self):
        """Get insulated_floor_surface_area

        Returns:
            float: the value of `insulated_floor_surface_area` or None if not set
        """
        return self._data["Insulated Floor Surface Area"]

    @insulated_floor_surface_area.setter
    def insulated_floor_surface_area(self, value=None):
        """  Corresponds to IDD Field `insulated_floor_surface_area`
        floor area of walk-in cooler

        Args:
            value (float): value for IDD Field `insulated_floor_surface_area`
                Units: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `insulated_floor_surface_area`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `insulated_floor_surface_area`')

        self._data["Insulated Floor Surface Area"] = value

    @property
    def insulated_floor_uvalue(self):
        """Get insulated_floor_uvalue

        Returns:
            float: the value of `insulated_floor_uvalue` or None if not set
        """
        return self._data["Insulated Floor U-Value"]

    @insulated_floor_uvalue.setter
    def insulated_floor_uvalue(self, value=0.3154 ):
        """  Corresponds to IDD Field `insulated_floor_uvalue`
        The default value corresponds to R18
        To convert other Archaic American R-values to U, divide 5.678 by the R-value
        Some examples:
        R15 is U 0.3785 W/m2-K
        R5 is U 1.136 W/m2-K

        Args:
            value (float): value for IDD Field `insulated_floor_uvalue`
                Units: W/m2-K
                Default value: 0.3154
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `insulated_floor_uvalue`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `insulated_floor_uvalue`')

        self._data["Insulated Floor U-Value"] = value

    @property
    def zone_1_name(self):
        """Get zone_1_name

        Returns:
            str: the value of `zone_1_name` or None if not set
        """
        return self._data["Zone 1 Name"]

    @zone_1_name.setter
    def zone_1_name(self, value=None):
        """  Corresponds to IDD Field `zone_1_name`
        This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.
        The walkin cooler can face multiple zones.  The heat exchange with each zone
        must be input separately

        Args:
            value (str): value for IDD Field `zone_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_1_name`')

        self._data["Zone 1 Name"] = value

    @property
    def total_insulated_surface_area_facing_zone_1(self):
        """Get total_insulated_surface_area_facing_zone_1

        Returns:
            float: the value of `total_insulated_surface_area_facing_zone_1` or None if not set
        """
        return self._data["Total Insulated Surface Area Facing Zone 1"]

    @total_insulated_surface_area_facing_zone_1.setter
    def total_insulated_surface_area_facing_zone_1(self, value=None):
        """  Corresponds to IDD Field `total_insulated_surface_area_facing_zone_1`
        Area should include walls and ceilings, but not doors

        Args:
            value (float): value for IDD Field `total_insulated_surface_area_facing_zone_1`
                Units: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_insulated_surface_area_facing_zone_1`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `total_insulated_surface_area_facing_zone_1`')

        self._data["Total Insulated Surface Area Facing Zone 1"] = value

    @property
    def insulated_surface_uvalue_facing_zone_1(self):
        """Get insulated_surface_uvalue_facing_zone_1

        Returns:
            float: the value of `insulated_surface_uvalue_facing_zone_1` or None if not set
        """
        return self._data["Insulated Surface U-Value Facing Zone 1"]

    @insulated_surface_uvalue_facing_zone_1.setter
    def insulated_surface_uvalue_facing_zone_1(self, value=0.3154 ):
        """  Corresponds to IDD Field `insulated_surface_uvalue_facing_zone_1`
        The default value corresponds to R18
        To convert other Archaic American R-values to U, divide 5.678 by the R-value
        Some examples:
        R15 is U 0.3785 W/m2-K
        R5 is U 1.136 W/m2-K

        Args:
            value (float): value for IDD Field `insulated_surface_uvalue_facing_zone_1`
                Units: W/m2-K
                Default value: 0.3154
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `insulated_surface_uvalue_facing_zone_1`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `insulated_surface_uvalue_facing_zone_1`')

        self._data["Insulated Surface U-Value Facing Zone 1"] = value

    @property
    def area_of_glass_reach_in_doors_facing_zone_1(self):
        """Get area_of_glass_reach_in_doors_facing_zone_1

        Returns:
            float: the value of `area_of_glass_reach_in_doors_facing_zone_1` or None if not set
        """
        return self._data["Area of Glass Reach In Doors Facing Zone 1"]

    @area_of_glass_reach_in_doors_facing_zone_1.setter
    def area_of_glass_reach_in_doors_facing_zone_1(self, value=0.0 ):
        """  Corresponds to IDD Field `area_of_glass_reach_in_doors_facing_zone_1`

        Args:
            value (float): value for IDD Field `area_of_glass_reach_in_doors_facing_zone_1`
                Units: m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `area_of_glass_reach_in_doors_facing_zone_1`'.format(value))

        self._data["Area of Glass Reach In Doors Facing Zone 1"] = value

    @property
    def height_of_glass_reach_in_doors_facing_zone_1(self):
        """Get height_of_glass_reach_in_doors_facing_zone_1

        Returns:
            float: the value of `height_of_glass_reach_in_doors_facing_zone_1` or None if not set
        """
        return self._data["Height of Glass Reach In Doors Facing Zone 1"]

    @height_of_glass_reach_in_doors_facing_zone_1.setter
    def height_of_glass_reach_in_doors_facing_zone_1(self, value=1.5 ):
        """  Corresponds to IDD Field `height_of_glass_reach_in_doors_facing_zone_1`

        Args:
            value (float): value for IDD Field `height_of_glass_reach_in_doors_facing_zone_1`
                Units: m
                Default value: 1.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_of_glass_reach_in_doors_facing_zone_1`'.format(value))

        self._data["Height of Glass Reach In Doors Facing Zone 1"] = value

    @property
    def glass_reach_in_door_u_value_facing_zone_1(self):
        """Get glass_reach_in_door_u_value_facing_zone_1

        Returns:
            float: the value of `glass_reach_in_door_u_value_facing_zone_1` or None if not set
        """
        return self._data["Glass Reach In Door U Value Facing Zone 1"]

    @glass_reach_in_door_u_value_facing_zone_1.setter
    def glass_reach_in_door_u_value_facing_zone_1(self, value=1.136 ):
        """  Corresponds to IDD Field `glass_reach_in_door_u_value_facing_zone_1`
        The default value corresponds to R5
        To convert other Archaic American R-values to U, divide 5.678 by the R-value

        Args:
            value (float): value for IDD Field `glass_reach_in_door_u_value_facing_zone_1`
                Units: W/m2-K
                Default value: 1.136
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `glass_reach_in_door_u_value_facing_zone_1`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `glass_reach_in_door_u_value_facing_zone_1`')

        self._data["Glass Reach In Door U Value Facing Zone 1"] = value

    @property
    def glass_reach_in_door_opening_schedule_name_facing_zone_1(self):
        """Get glass_reach_in_door_opening_schedule_name_facing_zone_1

        Returns:
            str: the value of `glass_reach_in_door_opening_schedule_name_facing_zone_1` or None if not set
        """
        return self._data["Glass Reach In Door Opening Schedule Name Facing Zone 1"]

    @glass_reach_in_door_opening_schedule_name_facing_zone_1.setter
    def glass_reach_in_door_opening_schedule_name_facing_zone_1(self, value=None):
        """  Corresponds to IDD Field `glass_reach_in_door_opening_schedule_name_facing_zone_1`
        Schedule values should all be between 0.0 and 1.0.
        For example, if the door is open 30% of the time during working hours,
        then the schedule would hold the value 0.3 during working hours
        and 0 during other hours
        If no schedule name is entered, default is 5% open time during all hours

        Args:
            value (str): value for IDD Field `glass_reach_in_door_opening_schedule_name_facing_zone_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `glass_reach_in_door_opening_schedule_name_facing_zone_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `glass_reach_in_door_opening_schedule_name_facing_zone_1`')

        self._data["Glass Reach In Door Opening Schedule Name Facing Zone 1"] = value

    @property
    def area_of_stocking_doors_facing_zone_1(self):
        """Get area_of_stocking_doors_facing_zone_1

        Returns:
            float: the value of `area_of_stocking_doors_facing_zone_1` or None if not set
        """
        return self._data["Area of Stocking Doors Facing Zone 1"]

    @area_of_stocking_doors_facing_zone_1.setter
    def area_of_stocking_doors_facing_zone_1(self, value=0.0 ):
        """  Corresponds to IDD Field `area_of_stocking_doors_facing_zone_1`

        Args:
            value (float): value for IDD Field `area_of_stocking_doors_facing_zone_1`
                Units: m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `area_of_stocking_doors_facing_zone_1`'.format(value))

        self._data["Area of Stocking Doors Facing Zone 1"] = value

    @property
    def height_of_stocking_doors_facing_zone_1(self):
        """Get height_of_stocking_doors_facing_zone_1

        Returns:
            float: the value of `height_of_stocking_doors_facing_zone_1` or None if not set
        """
        return self._data["Height of Stocking Doors Facing Zone 1"]

    @height_of_stocking_doors_facing_zone_1.setter
    def height_of_stocking_doors_facing_zone_1(self, value=3.0 ):
        """  Corresponds to IDD Field `height_of_stocking_doors_facing_zone_1`

        Args:
            value (float): value for IDD Field `height_of_stocking_doors_facing_zone_1`
                Units: m
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_of_stocking_doors_facing_zone_1`'.format(value))

        self._data["Height of Stocking Doors Facing Zone 1"] = value

    @property
    def stocking_door_u_value_facing_zone_1(self):
        """Get stocking_door_u_value_facing_zone_1

        Returns:
            float: the value of `stocking_door_u_value_facing_zone_1` or None if not set
        """
        return self._data["Stocking Door U Value Facing Zone 1"]

    @stocking_door_u_value_facing_zone_1.setter
    def stocking_door_u_value_facing_zone_1(self, value=0.3785 ):
        """  Corresponds to IDD Field `stocking_door_u_value_facing_zone_1`
        The default value corresponds to R15
        To convert other Archaic American R-values to U, divide 5.678 by the R-value
        Some examples:
        R5 is U 1.136 W/m2-K
        R18 is U 0.3154 W/m2-K

        Args:
            value (float): value for IDD Field `stocking_door_u_value_facing_zone_1`
                Units: W/m2-K
                Default value: 0.3785
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stocking_door_u_value_facing_zone_1`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stocking_door_u_value_facing_zone_1`')

        self._data["Stocking Door U Value Facing Zone 1"] = value

    @property
    def stocking_door_opening_schedule_name_facing_zone_1(self):
        """Get stocking_door_opening_schedule_name_facing_zone_1

        Returns:
            str: the value of `stocking_door_opening_schedule_name_facing_zone_1` or None if not set
        """
        return self._data["Stocking Door Opening Schedule Name Facing Zone 1"]

    @stocking_door_opening_schedule_name_facing_zone_1.setter
    def stocking_door_opening_schedule_name_facing_zone_1(self, value=None):
        """  Corresponds to IDD Field `stocking_door_opening_schedule_name_facing_zone_1`
        Schedule values should all be between 0.0 and 1.0.
        For example, if the door is open 30% of the time during working hours,
        then the schedule would hold the value 0.3 during working hours
        and 0 during other hours
        If no schedule name is entered, default is 5% open time during all hours

        Args:
            value (str): value for IDD Field `stocking_door_opening_schedule_name_facing_zone_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stocking_door_opening_schedule_name_facing_zone_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stocking_door_opening_schedule_name_facing_zone_1`')

        self._data["Stocking Door Opening Schedule Name Facing Zone 1"] = value

    @property
    def stocking_door_opening_protection_type_facing_zone_1(self):
        """Get stocking_door_opening_protection_type_facing_zone_1

        Returns:
            str: the value of `stocking_door_opening_protection_type_facing_zone_1` or None if not set
        """
        return self._data["Stocking Door Opening Protection Type Facing Zone 1"]

    @stocking_door_opening_protection_type_facing_zone_1.setter
    def stocking_door_opening_protection_type_facing_zone_1(self, value="AirCurtain"):
        """  Corresponds to IDD Field `stocking_door_opening_protection_type_facing_zone_1`
        Use StripCurtain for hanging strips or airlock vestibules

        Args:
            value (str): value for IDD Field `stocking_door_opening_protection_type_facing_zone_1`
                Accepted values are:
                      - None
                      - AirCurtain
                      - StripCurtain
                Default value: AirCurtain
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stocking_door_opening_protection_type_facing_zone_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stocking_door_opening_protection_type_facing_zone_1`')
            vals = set()
            vals.add("None")
            vals.add("AirCurtain")
            vals.add("StripCurtain")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `stocking_door_opening_protection_type_facing_zone_1`'.format(value))

        self._data["Stocking Door Opening Protection Type Facing Zone 1"] = value

    @property
    def zone_2_name(self):
        """Get zone_2_name

        Returns:
            str: the value of `zone_2_name` or None if not set
        """
        return self._data["Zone 2 Name"]

    @zone_2_name.setter
    def zone_2_name(self, value=None):
        """  Corresponds to IDD Field `zone_2_name`
        required if more than one zone
        This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.

        Args:
            value (str): value for IDD Field `zone_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_2_name`')

        self._data["Zone 2 Name"] = value

    @property
    def total_insulated_surface_area_facing_zone_2(self):
        """Get total_insulated_surface_area_facing_zone_2

        Returns:
            float: the value of `total_insulated_surface_area_facing_zone_2` or None if not set
        """
        return self._data["Total Insulated Surface Area Facing Zone 2"]

    @total_insulated_surface_area_facing_zone_2.setter
    def total_insulated_surface_area_facing_zone_2(self, value=None):
        """  Corresponds to IDD Field `total_insulated_surface_area_facing_zone_2`
        Area should include walls and ceilings, but not doors
        required if more than one zone

        Args:
            value (float): value for IDD Field `total_insulated_surface_area_facing_zone_2`
                Units: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_insulated_surface_area_facing_zone_2`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `total_insulated_surface_area_facing_zone_2`')

        self._data["Total Insulated Surface Area Facing Zone 2"] = value

    @property
    def insulated_surface_uvalue_facing_zone_2(self):
        """Get insulated_surface_uvalue_facing_zone_2

        Returns:
            float: the value of `insulated_surface_uvalue_facing_zone_2` or None if not set
        """
        return self._data["Insulated Surface U-Value Facing Zone 2"]

    @insulated_surface_uvalue_facing_zone_2.setter
    def insulated_surface_uvalue_facing_zone_2(self, value=0.3154 ):
        """  Corresponds to IDD Field `insulated_surface_uvalue_facing_zone_2`
        The default value corresponds to R18
        To convert other Archaic American R-values to U, divide 5.678 by the R-value
        Some examples:
        R15 is U 0.3785 W/m2-K
        R5 is U 1.136 W/m2-K

        Args:
            value (float): value for IDD Field `insulated_surface_uvalue_facing_zone_2`
                Units: W/m2-K
                Default value: 0.3154
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `insulated_surface_uvalue_facing_zone_2`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `insulated_surface_uvalue_facing_zone_2`')

        self._data["Insulated Surface U-Value Facing Zone 2"] = value

    @property
    def area_of_glass_reach_in_doors_facing_zone_2(self):
        """Get area_of_glass_reach_in_doors_facing_zone_2

        Returns:
            float: the value of `area_of_glass_reach_in_doors_facing_zone_2` or None if not set
        """
        return self._data["Area of Glass Reach In Doors Facing Zone 2"]

    @area_of_glass_reach_in_doors_facing_zone_2.setter
    def area_of_glass_reach_in_doors_facing_zone_2(self, value=0.0 ):
        """  Corresponds to IDD Field `area_of_glass_reach_in_doors_facing_zone_2`

        Args:
            value (float): value for IDD Field `area_of_glass_reach_in_doors_facing_zone_2`
                Units: m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `area_of_glass_reach_in_doors_facing_zone_2`'.format(value))

        self._data["Area of Glass Reach In Doors Facing Zone 2"] = value

    @property
    def height_of_glass_reach_in_doors_facing_zone_2(self):
        """Get height_of_glass_reach_in_doors_facing_zone_2

        Returns:
            float: the value of `height_of_glass_reach_in_doors_facing_zone_2` or None if not set
        """
        return self._data["Height of Glass Reach In Doors Facing Zone 2"]

    @height_of_glass_reach_in_doors_facing_zone_2.setter
    def height_of_glass_reach_in_doors_facing_zone_2(self, value=1.5 ):
        """  Corresponds to IDD Field `height_of_glass_reach_in_doors_facing_zone_2`

        Args:
            value (float): value for IDD Field `height_of_glass_reach_in_doors_facing_zone_2`
                Units: m
                Default value: 1.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_of_glass_reach_in_doors_facing_zone_2`'.format(value))

        self._data["Height of Glass Reach In Doors Facing Zone 2"] = value

    @property
    def glass_reach_in_door_u_value_facing_zone_2(self):
        """Get glass_reach_in_door_u_value_facing_zone_2

        Returns:
            float: the value of `glass_reach_in_door_u_value_facing_zone_2` or None if not set
        """
        return self._data["Glass Reach In Door U Value Facing Zone 2"]

    @glass_reach_in_door_u_value_facing_zone_2.setter
    def glass_reach_in_door_u_value_facing_zone_2(self, value=1.136 ):
        """  Corresponds to IDD Field `glass_reach_in_door_u_value_facing_zone_2`
        The default value corresponds to R5
        To convert other Archaic American R-values to U, divide 5.678 by the R-value

        Args:
            value (float): value for IDD Field `glass_reach_in_door_u_value_facing_zone_2`
                Units: W/m2-K
                Default value: 1.136
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `glass_reach_in_door_u_value_facing_zone_2`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `glass_reach_in_door_u_value_facing_zone_2`')

        self._data["Glass Reach In Door U Value Facing Zone 2"] = value

    @property
    def glass_reach_in_door_opening_schedule_name_facing_zone_2(self):
        """Get glass_reach_in_door_opening_schedule_name_facing_zone_2

        Returns:
            str: the value of `glass_reach_in_door_opening_schedule_name_facing_zone_2` or None if not set
        """
        return self._data["Glass Reach In Door Opening Schedule Name Facing Zone 2"]

    @glass_reach_in_door_opening_schedule_name_facing_zone_2.setter
    def glass_reach_in_door_opening_schedule_name_facing_zone_2(self, value=None):
        """  Corresponds to IDD Field `glass_reach_in_door_opening_schedule_name_facing_zone_2`
        Schedule values should all be between 0.0 and 1.0.
        For example, if the door is open 30% of the time during working hours,
        then the schedule would hold the value 0.3 during working hours
        and 0 during other hours
        If no schedule name is entered, default is 5% open time during all hours

        Args:
            value (str): value for IDD Field `glass_reach_in_door_opening_schedule_name_facing_zone_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `glass_reach_in_door_opening_schedule_name_facing_zone_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `glass_reach_in_door_opening_schedule_name_facing_zone_2`')

        self._data["Glass Reach In Door Opening Schedule Name Facing Zone 2"] = value

    @property
    def area_of_stocking_doors_facing_zone_2(self):
        """Get area_of_stocking_doors_facing_zone_2

        Returns:
            float: the value of `area_of_stocking_doors_facing_zone_2` or None if not set
        """
        return self._data["Area of Stocking Doors Facing Zone 2"]

    @area_of_stocking_doors_facing_zone_2.setter
    def area_of_stocking_doors_facing_zone_2(self, value=0.0 ):
        """  Corresponds to IDD Field `area_of_stocking_doors_facing_zone_2`

        Args:
            value (float): value for IDD Field `area_of_stocking_doors_facing_zone_2`
                Units: m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `area_of_stocking_doors_facing_zone_2`'.format(value))

        self._data["Area of Stocking Doors Facing Zone 2"] = value

    @property
    def height_of_stocking_doors_facing_zone_2(self):
        """Get height_of_stocking_doors_facing_zone_2

        Returns:
            float: the value of `height_of_stocking_doors_facing_zone_2` or None if not set
        """
        return self._data["Height of Stocking Doors Facing Zone 2"]

    @height_of_stocking_doors_facing_zone_2.setter
    def height_of_stocking_doors_facing_zone_2(self, value=3.0 ):
        """  Corresponds to IDD Field `height_of_stocking_doors_facing_zone_2`

        Args:
            value (float): value for IDD Field `height_of_stocking_doors_facing_zone_2`
                Units: m
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_of_stocking_doors_facing_zone_2`'.format(value))

        self._data["Height of Stocking Doors Facing Zone 2"] = value

    @property
    def stocking_door_u_value_facing_zone_2(self):
        """Get stocking_door_u_value_facing_zone_2

        Returns:
            float: the value of `stocking_door_u_value_facing_zone_2` or None if not set
        """
        return self._data["Stocking Door U Value Facing Zone 2"]

    @stocking_door_u_value_facing_zone_2.setter
    def stocking_door_u_value_facing_zone_2(self, value=0.3785 ):
        """  Corresponds to IDD Field `stocking_door_u_value_facing_zone_2`
        The default value corresponds to R15
        To convert other Archaic American R-values to U, divide 5.678 by the R-value
        Some examples:
        R5 is U 1.136 W/m2-K
        R18 is U 0.3154 W/m2-K

        Args:
            value (float): value for IDD Field `stocking_door_u_value_facing_zone_2`
                Units: W/m2-K
                Default value: 0.3785
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stocking_door_u_value_facing_zone_2`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stocking_door_u_value_facing_zone_2`')

        self._data["Stocking Door U Value Facing Zone 2"] = value

    @property
    def stocking_door_opening_schedule_name_facing_zone_2(self):
        """Get stocking_door_opening_schedule_name_facing_zone_2

        Returns:
            str: the value of `stocking_door_opening_schedule_name_facing_zone_2` or None if not set
        """
        return self._data["Stocking Door Opening Schedule Name Facing Zone 2"]

    @stocking_door_opening_schedule_name_facing_zone_2.setter
    def stocking_door_opening_schedule_name_facing_zone_2(self, value=None):
        """  Corresponds to IDD Field `stocking_door_opening_schedule_name_facing_zone_2`
        Schedule values should all be between 0.0 and 1.0.
        For example, if the door is open 30% of the time during working hours,
        then the schedule would hold the value 0.3 during working hours
        and 0 during other hours
        If no schedule name is entered, default is 5% open time during all hours

        Args:
            value (str): value for IDD Field `stocking_door_opening_schedule_name_facing_zone_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stocking_door_opening_schedule_name_facing_zone_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stocking_door_opening_schedule_name_facing_zone_2`')

        self._data["Stocking Door Opening Schedule Name Facing Zone 2"] = value

    @property
    def stocking_door_opening_protection_type_facing_zone_2(self):
        """Get stocking_door_opening_protection_type_facing_zone_2

        Returns:
            str: the value of `stocking_door_opening_protection_type_facing_zone_2` or None if not set
        """
        return self._data["Stocking Door Opening Protection Type Facing Zone 2"]

    @stocking_door_opening_protection_type_facing_zone_2.setter
    def stocking_door_opening_protection_type_facing_zone_2(self, value="AirCurtain"):
        """  Corresponds to IDD Field `stocking_door_opening_protection_type_facing_zone_2`
        Use StripCurtain for hanging strips or airlock vestibules
        last extensible set begins here
        dup remaining 12 lines as many times as there are zones exchanging heat with walkin
        Move the ending semicolon and increment the field numbers.

        Args:
            value (str): value for IDD Field `stocking_door_opening_protection_type_facing_zone_2`
                Accepted values are:
                      - None
                      - AirCurtain
                      - StripCurtain
                Default value: AirCurtain
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stocking_door_opening_protection_type_facing_zone_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stocking_door_opening_protection_type_facing_zone_2`')
            vals = set()
            vals.add("None")
            vals.add("AirCurtain")
            vals.add("StripCurtain")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `stocking_door_opening_protection_type_facing_zone_2`'.format(value))

        self._data["Stocking Door Opening Protection Type Facing Zone 2"] = value

    @property
    def zone_3_name(self):
        """Get zone_3_name

        Returns:
            str: the value of `zone_3_name` or None if not set
        """
        return self._data["Zone 3 Name"]

    @zone_3_name.setter
    def zone_3_name(self, value=None):
        """  Corresponds to IDD Field `zone_3_name`
        This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.
        required if more than two zones

        Args:
            value (str): value for IDD Field `zone_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_3_name`')

        self._data["Zone 3 Name"] = value

    @property
    def total_insulated_surface_area_facing_zone_3(self):
        """Get total_insulated_surface_area_facing_zone_3

        Returns:
            float: the value of `total_insulated_surface_area_facing_zone_3` or None if not set
        """
        return self._data["Total Insulated Surface Area Facing Zone 3"]

    @total_insulated_surface_area_facing_zone_3.setter
    def total_insulated_surface_area_facing_zone_3(self, value=None):
        """  Corresponds to IDD Field `total_insulated_surface_area_facing_zone_3`
        required if more than two zones
        Area should include walls and ceilings, but not doors

        Args:
            value (float): value for IDD Field `total_insulated_surface_area_facing_zone_3`
                Units: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_insulated_surface_area_facing_zone_3`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `total_insulated_surface_area_facing_zone_3`')

        self._data["Total Insulated Surface Area Facing Zone 3"] = value

    @property
    def insulated_surface_uvalue_facing_zone_3(self):
        """Get insulated_surface_uvalue_facing_zone_3

        Returns:
            float: the value of `insulated_surface_uvalue_facing_zone_3` or None if not set
        """
        return self._data["Insulated Surface U-Value Facing Zone 3"]

    @insulated_surface_uvalue_facing_zone_3.setter
    def insulated_surface_uvalue_facing_zone_3(self, value=0.3154 ):
        """  Corresponds to IDD Field `insulated_surface_uvalue_facing_zone_3`
        The default value corresponds to R18
        To convert other Archaic American R-values to U, divide 5.678 by the R-value
        Some examples:
        R15 is U 0.3785 W/m2-K
        R5 is U 1.136 W/m2-K

        Args:
            value (float): value for IDD Field `insulated_surface_uvalue_facing_zone_3`
                Units: W/m2-K
                Default value: 0.3154
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `insulated_surface_uvalue_facing_zone_3`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `insulated_surface_uvalue_facing_zone_3`')

        self._data["Insulated Surface U-Value Facing Zone 3"] = value

    @property
    def area_of_glass_reach_in_doors_facing_zone_3(self):
        """Get area_of_glass_reach_in_doors_facing_zone_3

        Returns:
            float: the value of `area_of_glass_reach_in_doors_facing_zone_3` or None if not set
        """
        return self._data["Area of Glass Reach In Doors Facing Zone 3"]

    @area_of_glass_reach_in_doors_facing_zone_3.setter
    def area_of_glass_reach_in_doors_facing_zone_3(self, value=0.0 ):
        """  Corresponds to IDD Field `area_of_glass_reach_in_doors_facing_zone_3`

        Args:
            value (float): value for IDD Field `area_of_glass_reach_in_doors_facing_zone_3`
                Units: m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `area_of_glass_reach_in_doors_facing_zone_3`'.format(value))

        self._data["Area of Glass Reach In Doors Facing Zone 3"] = value

    @property
    def height_of_glass_reach_in_doors_facing_zone_3(self):
        """Get height_of_glass_reach_in_doors_facing_zone_3

        Returns:
            float: the value of `height_of_glass_reach_in_doors_facing_zone_3` or None if not set
        """
        return self._data["Height of Glass Reach In Doors Facing Zone 3"]

    @height_of_glass_reach_in_doors_facing_zone_3.setter
    def height_of_glass_reach_in_doors_facing_zone_3(self, value=1.5 ):
        """  Corresponds to IDD Field `height_of_glass_reach_in_doors_facing_zone_3`

        Args:
            value (float): value for IDD Field `height_of_glass_reach_in_doors_facing_zone_3`
                Units: m
                Default value: 1.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_of_glass_reach_in_doors_facing_zone_3`'.format(value))

        self._data["Height of Glass Reach In Doors Facing Zone 3"] = value

    @property
    def glass_reach_in_door_u_value_facing_zone_3(self):
        """Get glass_reach_in_door_u_value_facing_zone_3

        Returns:
            float: the value of `glass_reach_in_door_u_value_facing_zone_3` or None if not set
        """
        return self._data["Glass Reach In Door U Value Facing Zone 3"]

    @glass_reach_in_door_u_value_facing_zone_3.setter
    def glass_reach_in_door_u_value_facing_zone_3(self, value=1.136 ):
        """  Corresponds to IDD Field `glass_reach_in_door_u_value_facing_zone_3`
        The default value corresponds to R5
        To convert other Archaic American R-values to U, divide 5.678 by the R-value

        Args:
            value (float): value for IDD Field `glass_reach_in_door_u_value_facing_zone_3`
                Units: W/m2-K
                Default value: 1.136
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `glass_reach_in_door_u_value_facing_zone_3`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `glass_reach_in_door_u_value_facing_zone_3`')

        self._data["Glass Reach In Door U Value Facing Zone 3"] = value

    @property
    def glass_reach_in_door_opening_schedule_name_facing_zone_3(self):
        """Get glass_reach_in_door_opening_schedule_name_facing_zone_3

        Returns:
            str: the value of `glass_reach_in_door_opening_schedule_name_facing_zone_3` or None if not set
        """
        return self._data["Glass Reach In Door Opening Schedule Name Facing Zone 3"]

    @glass_reach_in_door_opening_schedule_name_facing_zone_3.setter
    def glass_reach_in_door_opening_schedule_name_facing_zone_3(self, value=None):
        """  Corresponds to IDD Field `glass_reach_in_door_opening_schedule_name_facing_zone_3`
        Schedule values should all be between 0.0 and 1.0.
        For example, if the door is open 30% of the time during working hours,
        then the schedule would hold the value 0.3 during working hours
        and 0 during other hours
        If no schedule name is entered, default is 5% open time during all hours

        Args:
            value (str): value for IDD Field `glass_reach_in_door_opening_schedule_name_facing_zone_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `glass_reach_in_door_opening_schedule_name_facing_zone_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `glass_reach_in_door_opening_schedule_name_facing_zone_3`')

        self._data["Glass Reach In Door Opening Schedule Name Facing Zone 3"] = value

    @property
    def area_of_stocking_doors_facing_zone_3(self):
        """Get area_of_stocking_doors_facing_zone_3

        Returns:
            float: the value of `area_of_stocking_doors_facing_zone_3` or None if not set
        """
        return self._data["Area of Stocking Doors Facing Zone 3"]

    @area_of_stocking_doors_facing_zone_3.setter
    def area_of_stocking_doors_facing_zone_3(self, value=0.0 ):
        """  Corresponds to IDD Field `area_of_stocking_doors_facing_zone_3`

        Args:
            value (float): value for IDD Field `area_of_stocking_doors_facing_zone_3`
                Units: m2
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `area_of_stocking_doors_facing_zone_3`'.format(value))

        self._data["Area of Stocking Doors Facing Zone 3"] = value

    @property
    def height_of_stocking_doors_facing_zone_3(self):
        """Get height_of_stocking_doors_facing_zone_3

        Returns:
            float: the value of `height_of_stocking_doors_facing_zone_3` or None if not set
        """
        return self._data["Height of Stocking Doors Facing Zone 3"]

    @height_of_stocking_doors_facing_zone_3.setter
    def height_of_stocking_doors_facing_zone_3(self, value=3.0 ):
        """  Corresponds to IDD Field `height_of_stocking_doors_facing_zone_3`

        Args:
            value (float): value for IDD Field `height_of_stocking_doors_facing_zone_3`
                Units: m
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_of_stocking_doors_facing_zone_3`'.format(value))

        self._data["Height of Stocking Doors Facing Zone 3"] = value

    @property
    def stocking_door_u_value_facing_zone_3(self):
        """Get stocking_door_u_value_facing_zone_3

        Returns:
            float: the value of `stocking_door_u_value_facing_zone_3` or None if not set
        """
        return self._data["Stocking Door U Value Facing Zone 3"]

    @stocking_door_u_value_facing_zone_3.setter
    def stocking_door_u_value_facing_zone_3(self, value=0.3785 ):
        """  Corresponds to IDD Field `stocking_door_u_value_facing_zone_3`
        The default value corresponds to R15
        To convert other Archaic American R-values to U, divide 5.678 by the R-value
        Some examples:
        R5 is U 1.136 W/m2-K
        R18 is U 0.3154 W/m2-K

        Args:
            value (float): value for IDD Field `stocking_door_u_value_facing_zone_3`
                Units: W/m2-K
                Default value: 0.3785
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stocking_door_u_value_facing_zone_3`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stocking_door_u_value_facing_zone_3`')

        self._data["Stocking Door U Value Facing Zone 3"] = value

    @property
    def stocking_door_opening_schedule_name_facing_zone_3(self):
        """Get stocking_door_opening_schedule_name_facing_zone_3

        Returns:
            str: the value of `stocking_door_opening_schedule_name_facing_zone_3` or None if not set
        """
        return self._data["Stocking Door Opening Schedule Name Facing Zone 3"]

    @stocking_door_opening_schedule_name_facing_zone_3.setter
    def stocking_door_opening_schedule_name_facing_zone_3(self, value=None):
        """  Corresponds to IDD Field `stocking_door_opening_schedule_name_facing_zone_3`
        Schedule values should all be between 0.0 and 1.0.
        For example, if the door is open 30% of the time during working hours,
        then the schedule would hold the value 0.3 during working hours
        and 0 during other hours
        If no schedule name is entered, default is 5% open time during all hours

        Args:
            value (str): value for IDD Field `stocking_door_opening_schedule_name_facing_zone_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stocking_door_opening_schedule_name_facing_zone_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stocking_door_opening_schedule_name_facing_zone_3`')

        self._data["Stocking Door Opening Schedule Name Facing Zone 3"] = value

    @property
    def stocking_door_opening_protection_type_facing_zone_3(self):
        """Get stocking_door_opening_protection_type_facing_zone_3

        Returns:
            str: the value of `stocking_door_opening_protection_type_facing_zone_3` or None if not set
        """
        return self._data["Stocking Door Opening Protection Type Facing Zone 3"]

    @stocking_door_opening_protection_type_facing_zone_3.setter
    def stocking_door_opening_protection_type_facing_zone_3(self, value="AirCurtain"):
        """  Corresponds to IDD Field `stocking_door_opening_protection_type_facing_zone_3`
        Use StripCurtain for hanging strips or airlock vestibules

        Args:
            value (str): value for IDD Field `stocking_door_opening_protection_type_facing_zone_3`
                Accepted values are:
                      - None
                      - AirCurtain
                      - StripCurtain
                Default value: AirCurtain
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stocking_door_opening_protection_type_facing_zone_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stocking_door_opening_protection_type_facing_zone_3`')
            vals = set()
            vals.add("None")
            vals.add("AirCurtain")
            vals.add("StripCurtain")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `stocking_door_opening_protection_type_facing_zone_3`'.format(value))

        self._data["Stocking Door Opening Protection Type Facing Zone 3"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.rated_coil_cooling_capacity))
        out.append(self._to_str(self.operating_temperature))
        out.append(self._to_str(self.rated_cooling_source_temperature))
        out.append(self._to_str(self.rated_total_heating_power))
        out.append(self._to_str(self.heating_power_schedule_name))
        out.append(self._to_str(self.rated_cooling_coil_fan_power))
        out.append(self._to_str(self.rated_circulation_fan_power))
        out.append(self._to_str(self.rated_total_lighting_power))
        out.append(self._to_str(self.lighting_schedule_name))
        out.append(self._to_str(self.defrost_type))
        out.append(self._to_str(self.defrost_control_type))
        out.append(self._to_str(self.defrost_schedule_name))
        out.append(self._to_str(self.defrost_dripdown_schedule_name))
        out.append(self._to_str(self.defrost_power))
        out.append(self._to_str(self.temperature_termination_defrost_fraction_to_ice))
        out.append(self._to_str(self.restocking_schedule_name))
        out.append(self._to_str(self.average_refrigerant_charge_inventory))
        out.append(self._to_str(self.insulated_floor_surface_area))
        out.append(self._to_str(self.insulated_floor_uvalue))
        out.append(self._to_str(self.zone_1_name))
        out.append(self._to_str(self.total_insulated_surface_area_facing_zone_1))
        out.append(self._to_str(self.insulated_surface_uvalue_facing_zone_1))
        out.append(self._to_str(self.area_of_glass_reach_in_doors_facing_zone_1))
        out.append(self._to_str(self.height_of_glass_reach_in_doors_facing_zone_1))
        out.append(self._to_str(self.glass_reach_in_door_u_value_facing_zone_1))
        out.append(self._to_str(self.glass_reach_in_door_opening_schedule_name_facing_zone_1))
        out.append(self._to_str(self.area_of_stocking_doors_facing_zone_1))
        out.append(self._to_str(self.height_of_stocking_doors_facing_zone_1))
        out.append(self._to_str(self.stocking_door_u_value_facing_zone_1))
        out.append(self._to_str(self.stocking_door_opening_schedule_name_facing_zone_1))
        out.append(self._to_str(self.stocking_door_opening_protection_type_facing_zone_1))
        out.append(self._to_str(self.zone_2_name))
        out.append(self._to_str(self.total_insulated_surface_area_facing_zone_2))
        out.append(self._to_str(self.insulated_surface_uvalue_facing_zone_2))
        out.append(self._to_str(self.area_of_glass_reach_in_doors_facing_zone_2))
        out.append(self._to_str(self.height_of_glass_reach_in_doors_facing_zone_2))
        out.append(self._to_str(self.glass_reach_in_door_u_value_facing_zone_2))
        out.append(self._to_str(self.glass_reach_in_door_opening_schedule_name_facing_zone_2))
        out.append(self._to_str(self.area_of_stocking_doors_facing_zone_2))
        out.append(self._to_str(self.height_of_stocking_doors_facing_zone_2))
        out.append(self._to_str(self.stocking_door_u_value_facing_zone_2))
        out.append(self._to_str(self.stocking_door_opening_schedule_name_facing_zone_2))
        out.append(self._to_str(self.stocking_door_opening_protection_type_facing_zone_2))
        out.append(self._to_str(self.zone_3_name))
        out.append(self._to_str(self.total_insulated_surface_area_facing_zone_3))
        out.append(self._to_str(self.insulated_surface_uvalue_facing_zone_3))
        out.append(self._to_str(self.area_of_glass_reach_in_doors_facing_zone_3))
        out.append(self._to_str(self.height_of_glass_reach_in_doors_facing_zone_3))
        out.append(self._to_str(self.glass_reach_in_door_u_value_facing_zone_3))
        out.append(self._to_str(self.glass_reach_in_door_opening_schedule_name_facing_zone_3))
        out.append(self._to_str(self.area_of_stocking_doors_facing_zone_3))
        out.append(self._to_str(self.height_of_stocking_doors_facing_zone_3))
        out.append(self._to_str(self.stocking_door_u_value_facing_zone_3))
        out.append(self._to_str(self.stocking_door_opening_schedule_name_facing_zone_3))
        out.append(self._to_str(self.stocking_door_opening_protection_type_facing_zone_3))
        return ",".join(out)

class RefrigerationAirChiller(object):
    """ Corresponds to IDD object `Refrigeration:AirChiller`
        Works in conjunction with a refrigeration chiller set, compressor rack, a
        refrigeration system, or a refrigeration secondary system to simulate the performance
        of an air chiller, similar to one found in a refrigerated warehouse. Energy use for
        fans and heaters is modeled based on inputs for nominal power, schedules, and control
        type. The air chiller model accounts for the sensible and latent heat exchange
        with the surrounding environment.
    
    """
    internal_name = "Refrigeration:AirChiller"
    field_count = 28
    required_fields = ["Name", "Capacity Rating Type", "Rated Cooling Source Temperature", "Rated Temperature Difference DT1", "Rated Total Heating Power", "Rated Air Flow", "Defrost Schedule Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Refrigeration:AirChiller`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Capacity Rating Type"] = None
        self._data["Rated Unit Load Factor"] = None
        self._data["Rated Capacity"] = None
        self._data["Rated Relative Humidity"] = None
        self._data["Rated Cooling Source Temperature"] = None
        self._data["Rated Temperature Difference DT1"] = None
        self._data["Maximum Temperature Difference Between Inlet Air and Evaporating Temperature"] = None
        self._data["Coil Material Correction Factor"] = None
        self._data["Refrigerant Correction Factor"] = None
        self._data["Capacity Correction Curve Type"] = None
        self._data["Capacity Correction Curve Name"] = None
        self._data["SHR60 Correction Factor"] = None
        self._data["Rated Total Heating Power"] = None
        self._data["Heating Power Schedule Name"] = None
        self._data["Fan Speed Control Type"] = None
        self._data["Rated Fan Power"] = None
        self._data["Rated Air Flow"] = None
        self._data["Minimum Fan Air Flow Ratio"] = None
        self._data["Defrost Type"] = None
        self._data["Defrost Control Type"] = None
        self._data["Defrost Schedule Name"] = None
        self._data["Defrost Drip-Down Schedule Name"] = None
        self._data["Defrost Power"] = None
        self._data["Temperature Termination Defrost Fraction to Ice"] = None
        self._data["Vertical Location"] = None
        self._data["Average Refrigerant Charge Inventory"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_rating_type = None
        else:
            self.capacity_rating_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_unit_load_factor = None
        else:
            self.rated_unit_load_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_capacity = None
        else:
            self.rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_relative_humidity = None
        else:
            self.rated_relative_humidity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_cooling_source_temperature = None
        else:
            self.rated_cooling_source_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_temperature_difference_dt1 = None
        else:
            self.rated_temperature_difference_dt1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_temperature_difference_between_inlet_air_and_evaporating_temperature = None
        else:
            self.maximum_temperature_difference_between_inlet_air_and_evaporating_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coil_material_correction_factor = None
        else:
            self.coil_material_correction_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.refrigerant_correction_factor = None
        else:
            self.refrigerant_correction_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_correction_curve_type = None
        else:
            self.capacity_correction_curve_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_correction_curve_name = None
        else:
            self.capacity_correction_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shr60_correction_factor = None
        else:
            self.shr60_correction_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_total_heating_power = None
        else:
            self.rated_total_heating_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_power_schedule_name = None
        else:
            self.heating_power_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_speed_control_type = None
        else:
            self.fan_speed_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_fan_power = None
        else:
            self.rated_fan_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_air_flow = None
        else:
            self.rated_air_flow = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_fan_air_flow_ratio = None
        else:
            self.minimum_fan_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_type = None
        else:
            self.defrost_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_control_type = None
        else:
            self.defrost_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_schedule_name = None
        else:
            self.defrost_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_dripdown_schedule_name = None
        else:
            self.defrost_dripdown_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.defrost_power = None
        else:
            self.defrost_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_termination_defrost_fraction_to_ice = None
        else:
            self.temperature_termination_defrost_fraction_to_ice = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.vertical_location = None
        else:
            self.vertical_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.average_refrigerant_charge_inventory = None
        else:
            self.average_refrigerant_charge_inventory = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def capacity_rating_type(self):
        """Get capacity_rating_type

        Returns:
            str: the value of `capacity_rating_type` or None if not set
        """
        return self._data["Capacity Rating Type"]

    @capacity_rating_type.setter
    def capacity_rating_type(self, value=None):
        """  Corresponds to IDD Field `capacity_rating_type`
        In each case, select the rating option that corresponds to the expected service conditions.
        For example, U.S. manufacturers quote a separate Unit Load Factor for wet or frosted coils.
        If the evaporating temperature is less than 0C, input the frosted coil value.
        Within the European convention, select SC1, 2, 3, 4, or 5 depending upon the expected evaporating temperature.        \type choice

        Args:
            value (str): value for IDD Field `capacity_rating_type`
                Accepted values are:
                      - UnitLoadFactorSensibleOnly
                      - CapacityTotalSpecificConditions
                      - EuropeanSC1Standard
                      - EuropeanSC1NominalWet
                      - EuropeanSC2Standard
                      - EuropeanSC2NominalWet
                      - EuropeanSC3Standard
                      - FixedLinear
                      - EuropeanSC3NominalWet
                      - EuropeanSC4Standard
                      - EuropeanSC4NominalWet
                      - EuropeanSC5Standard
                      - EuropeanSC5NominalWet
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_rating_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_rating_type`')
            vals = set()
            vals.add("UnitLoadFactorSensibleOnly")
            vals.add("CapacityTotalSpecificConditions")
            vals.add("EuropeanSC1Standard")
            vals.add("EuropeanSC1NominalWet")
            vals.add("EuropeanSC2Standard")
            vals.add("EuropeanSC2NominalWet")
            vals.add("EuropeanSC3Standard")
            vals.add("FixedLinear")
            vals.add("EuropeanSC3NominalWet")
            vals.add("EuropeanSC4Standard")
            vals.add("EuropeanSC4NominalWet")
            vals.add("EuropeanSC5Standard")
            vals.add("EuropeanSC5NominalWet")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `capacity_rating_type`'.format(value))

        self._data["Capacity Rating Type"] = value

    @property
    def rated_unit_load_factor(self):
        """Get rated_unit_load_factor

        Returns:
            float: the value of `rated_unit_load_factor` or None if not set
        """
        return self._data["Rated Unit Load Factor"]

    @rated_unit_load_factor.setter
    def rated_unit_load_factor(self, value=None):
        """  Corresponds to IDD Field `rated_unit_load_factor`
        The sensible cooling capacity in watts (W/C) at rated conditions.
        The value entered for this field must be greater than zero, with no default value.
        This value is only used if the Capacity Rating Type is UnitLoadFactorSensibleOnly.
        The value given must be based upon the difference between the chiller inlet and
        outlet air temperatures, not on the difference between the zone mean temperature
        and the outlet air temperature

        Args:
            value (float): value for IDD Field `rated_unit_load_factor`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_unit_load_factor`'.format(value))

        self._data["Rated Unit Load Factor"] = value

    @property
    def rated_capacity(self):
        """Get rated_capacity

        Returns:
            float: the value of `rated_capacity` or None if not set
        """
        return self._data["Rated Capacity"]

    @rated_capacity.setter
    def rated_capacity(self, value=None):
        """  Corresponds to IDD Field `rated_capacity`
        This value is only used if the Capacity Rating Type is NOT UnitLoadFactorSensibleOnly.
        For CapacityTotalSpecificConditions, this capacity includes both sensible and latent
        at the conditions given in the next two fields.
        Note that the European Standard ratings are sensible only and
        the European Nominal ratings include latent capacity as well.
        The value given here must correspond to the capacity rating type given previously

        Args:
            value (float): value for IDD Field `rated_capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_capacity`'.format(value))

        self._data["Rated Capacity"] = value

    @property
    def rated_relative_humidity(self):
        """Get rated_relative_humidity

        Returns:
            float: the value of `rated_relative_humidity` or None if not set
        """
        return self._data["Rated Relative Humidity"]

    @rated_relative_humidity.setter
    def rated_relative_humidity(self, value=85.0 ):
        """  Corresponds to IDD Field `rated_relative_humidity`
        This field is ONLY used if the Capacity Rating Type is CapacityTotalSpecificConditions and
        represents the relative humidity at rated conditions. The default is 85.

        Args:
            value (float): value for IDD Field `rated_relative_humidity`
                Units: percent
                Default value: 85.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_relative_humidity`'.format(value))
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `rated_relative_humidity`')

        self._data["Rated Relative Humidity"] = value

    @property
    def rated_cooling_source_temperature(self):
        """Get rated_cooling_source_temperature

        Returns:
            float: the value of `rated_cooling_source_temperature` or None if not set
        """
        return self._data["Rated Cooling Source Temperature"]

    @rated_cooling_source_temperature.setter
    def rated_cooling_source_temperature(self, value=None):
        """  Corresponds to IDD Field `rated_cooling_source_temperature`
        If DXEvaporator, use evaporating temperature (saturated suction temperature)
        If BrineCoil, use Brine entering temperature
        used to set minimum suction pressure for DX systems and
        minimum brine temp for secondary systems

        Args:
            value (float): value for IDD Field `rated_cooling_source_temperature`
                Units: C
                value >= -70.0
                value <= 40.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_cooling_source_temperature`'.format(value))
            if value < -70.0:
                raise ValueError('value need to be greater or equal -70.0 '
                                 'for field `rated_cooling_source_temperature`')
            if value > 40.0:
                raise ValueError('value need to be smaller 40.0 '
                                 'for field `rated_cooling_source_temperature`')

        self._data["Rated Cooling Source Temperature"] = value

    @property
    def rated_temperature_difference_dt1(self):
        """Get rated_temperature_difference_dt1

        Returns:
            float: the value of `rated_temperature_difference_dt1` or None if not set
        """
        return self._data["Rated Temperature Difference DT1"]

    @rated_temperature_difference_dt1.setter
    def rated_temperature_difference_dt1(self, value=None):
        """  Corresponds to IDD Field `rated_temperature_difference_dt1`
        The rated difference between the air entering the refrigeration chiller and the
        cooling source temperature in C.

        Args:
            value (float): value for IDD Field `rated_temperature_difference_dt1`
                Units: deltaC
                value >= 0.0
                value <= 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_temperature_difference_dt1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_temperature_difference_dt1`')
            if value > 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `rated_temperature_difference_dt1`')

        self._data["Rated Temperature Difference DT1"] = value

    @property
    def maximum_temperature_difference_between_inlet_air_and_evaporating_temperature(self):
        """Get maximum_temperature_difference_between_inlet_air_and_evaporating_temperature

        Returns:
            float: the value of `maximum_temperature_difference_between_inlet_air_and_evaporating_temperature` or None if not set
        """
        return self._data["Maximum Temperature Difference Between Inlet Air and Evaporating Temperature"]

    @maximum_temperature_difference_between_inlet_air_and_evaporating_temperature.setter
    def maximum_temperature_difference_between_inlet_air_and_evaporating_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_temperature_difference_between_inlet_air_and_evaporating_temperature`
        The maximum difference between the air entering the refrigeration chiller and the
        cooling source temperature in C used to limit capacity during pull-down.
        defaults to 1.3 times the Rated Temperature Difference DT1

        Args:
            value (float): value for IDD Field `maximum_temperature_difference_between_inlet_air_and_evaporating_temperature`
                Units: deltaC
                value >= 0.0
                value <= 25.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_temperature_difference_between_inlet_air_and_evaporating_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_temperature_difference_between_inlet_air_and_evaporating_temperature`')
            if value > 25.0:
                raise ValueError('value need to be smaller 25.0 '
                                 'for field `maximum_temperature_difference_between_inlet_air_and_evaporating_temperature`')

        self._data["Maximum Temperature Difference Between Inlet Air and Evaporating Temperature"] = value

    @property
    def coil_material_correction_factor(self):
        """Get coil_material_correction_factor

        Returns:
            float: the value of `coil_material_correction_factor` or None if not set
        """
        return self._data["Coil Material Correction Factor"]

    @coil_material_correction_factor.setter
    def coil_material_correction_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `coil_material_correction_factor`
        This is the manufacturer's correction factor for coil material corresponding to rating

        Args:
            value (float): value for IDD Field `coil_material_correction_factor`
                Units: dimensionless
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coil_material_correction_factor`'.format(value))

        self._data["Coil Material Correction Factor"] = value

    @property
    def refrigerant_correction_factor(self):
        """Get refrigerant_correction_factor

        Returns:
            float: the value of `refrigerant_correction_factor` or None if not set
        """
        return self._data["Refrigerant Correction Factor"]

    @refrigerant_correction_factor.setter
    def refrigerant_correction_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `refrigerant_correction_factor`
        This is the manufacturer's correction factor for refrigerant corresponding to rating

        Args:
            value (float): value for IDD Field `refrigerant_correction_factor`
                Units: dimensionless
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `refrigerant_correction_factor`'.format(value))

        self._data["Refrigerant Correction Factor"] = value

    @property
    def capacity_correction_curve_type(self):
        """Get capacity_correction_curve_type

        Returns:
            str: the value of `capacity_correction_curve_type` or None if not set
        """
        return self._data["Capacity Correction Curve Type"]

    @capacity_correction_curve_type.setter
    def capacity_correction_curve_type(self, value=None):
        """  Corresponds to IDD Field `capacity_correction_curve_type`
        In each case, select the correction curve type that corresponds to the rating type.
        default LinearSHR60 unless Capcity Rating Type = CapacityTotalSpecificConditions

        Args:
            value (str): value for IDD Field `capacity_correction_curve_type`
                Accepted values are:
                      - LinearSHR60
                      - QuadraticSHR
                      - European
                      - TabularRHxDT1xTRoom
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_correction_curve_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_correction_curve_type`')
            vals = set()
            vals.add("LinearSHR60")
            vals.add("QuadraticSHR")
            vals.add("European")
            vals.add("TabularRHxDT1xTRoom")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `capacity_correction_curve_type`'.format(value))

        self._data["Capacity Correction Curve Type"] = value

    @property
    def capacity_correction_curve_name(self):
        """Get capacity_correction_curve_name

        Returns:
            str: the value of `capacity_correction_curve_name` or None if not set
        """
        return self._data["Capacity Correction Curve Name"]

    @capacity_correction_curve_name.setter
    def capacity_correction_curve_name(self, value=None):
        """  Corresponds to IDD Field `capacity_correction_curve_name`
        Table:OneIndependentVariable object can also be used
        Can also be the name of a "Table:OneIndependentVariable" or a "Table:MultiVariableLookup"
        Should be blank for LinearSHR60 correction curve type

        Args:
            value (str): value for IDD Field `capacity_correction_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_correction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_correction_curve_name`')

        self._data["Capacity Correction Curve Name"] = value

    @property
    def shr60_correction_factor(self):
        """Get shr60_correction_factor

        Returns:
            float: the value of `shr60_correction_factor` or None if not set
        """
        return self._data["SHR60 Correction Factor"]

    @shr60_correction_factor.setter
    def shr60_correction_factor(self, value=1.48 ):
        """  Corresponds to IDD Field `shr60_correction_factor`
        only used when the capacity correction curve type is LinearSHR60

        Args:
            value (float): value for IDD Field `shr60_correction_factor`
                Units: dimensionless
                Default value: 1.48
                value <= 1.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shr60_correction_factor`'.format(value))
            if value > 1.67:
                raise ValueError('value need to be smaller 1.67 '
                                 'for field `shr60_correction_factor`')

        self._data["SHR60 Correction Factor"] = value

    @property
    def rated_total_heating_power(self):
        """Get rated_total_heating_power

        Returns:
            float: the value of `rated_total_heating_power` or None if not set
        """
        return self._data["Rated Total Heating Power"]

    @rated_total_heating_power.setter
    def rated_total_heating_power(self, value=None):
        """  Corresponds to IDD Field `rated_total_heating_power`
        Include total for all heater power
        Do not include defrost heater power

        Args:
            value (float): value for IDD Field `rated_total_heating_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_total_heating_power`'.format(value))

        self._data["Rated Total Heating Power"] = value

    @property
    def heating_power_schedule_name(self):
        """Get heating_power_schedule_name

        Returns:
            str: the value of `heating_power_schedule_name` or None if not set
        """
        return self._data["Heating Power Schedule Name"]

    @heating_power_schedule_name.setter
    def heating_power_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_power_schedule_name`
        Values will be used to multiply the total heating power
        Values in the schedule should be between 0.0 and 1.0
        Defaults to always on if schedule name left blank.

        Args:
            value (str): value for IDD Field `heating_power_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_power_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_power_schedule_name`')

        self._data["Heating Power Schedule Name"] = value

    @property
    def fan_speed_control_type(self):
        """Get fan_speed_control_type

        Returns:
            str: the value of `fan_speed_control_type` or None if not set
        """
        return self._data["Fan Speed Control Type"]

    @fan_speed_control_type.setter
    def fan_speed_control_type(self, value="Fixed"):
        """  Corresponds to IDD Field `fan_speed_control_type`

        Args:
            value (str): value for IDD Field `fan_speed_control_type`
                Accepted values are:
                      - Fixed
                      - FixedLinear
                      - VariableSpeed
                      - TwoSpeed
                Default value: Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_speed_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_speed_control_type`')
            vals = set()
            vals.add("Fixed")
            vals.add("FixedLinear")
            vals.add("VariableSpeed")
            vals.add("TwoSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_speed_control_type`'.format(value))

        self._data["Fan Speed Control Type"] = value

    @property
    def rated_fan_power(self):
        """Get rated_fan_power

        Returns:
            float: the value of `rated_fan_power` or None if not set
        """
        return self._data["Rated Fan Power"]

    @rated_fan_power.setter
    def rated_fan_power(self, value=375.0 ):
        """  Corresponds to IDD Field `rated_fan_power`

        Args:
            value (float): value for IDD Field `rated_fan_power`
                Units: W
                Default value: 375.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_fan_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_fan_power`')

        self._data["Rated Fan Power"] = value

    @property
    def rated_air_flow(self):
        """Get rated_air_flow

        Returns:
            float: the value of `rated_air_flow` or None if not set
        """
        return self._data["Rated Air Flow"]

    @rated_air_flow.setter
    def rated_air_flow(self, value=None):
        """  Corresponds to IDD Field `rated_air_flow`

        Args:
            value (float): value for IDD Field `rated_air_flow`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow`'.format(value))

        self._data["Rated Air Flow"] = value

    @property
    def minimum_fan_air_flow_ratio(self):
        """Get minimum_fan_air_flow_ratio

        Returns:
            float: the value of `minimum_fan_air_flow_ratio` or None if not set
        """
        return self._data["Minimum Fan Air Flow Ratio"]

    @minimum_fan_air_flow_ratio.setter
    def minimum_fan_air_flow_ratio(self, value=0.2 ):
        """  Corresponds to IDD Field `minimum_fan_air_flow_ratio`
        Minimum air flow fraction through fan

        Args:
            value (float): value for IDD Field `minimum_fan_air_flow_ratio`
                Units: dimensionless
                Default value: 0.2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_fan_air_flow_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_fan_air_flow_ratio`')

        self._data["Minimum Fan Air Flow Ratio"] = value

    @property
    def defrost_type(self):
        """Get defrost_type

        Returns:
            str: the value of `defrost_type` or None if not set
        """
        return self._data["Defrost Type"]

    @defrost_type.setter
    def defrost_type(self, value="Electric"):
        """  Corresponds to IDD Field `defrost_type`
        HotFluid includes either hot gas defrost for a DX system or
        Hot Brine defrost if this walk in is cooled by brine from a secondary chiller

        Args:
            value (str): value for IDD Field `defrost_type`
                Accepted values are:
                      - HotFluid
                      - Electric
                      - None
                      - OffCycle
                Default value: Electric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_type`')
            vals = set()
            vals.add("HotFluid")
            vals.add("Electric")
            vals.add("None")
            vals.add("OffCycle")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `defrost_type`'.format(value))

        self._data["Defrost Type"] = value

    @property
    def defrost_control_type(self):
        """Get defrost_control_type

        Returns:
            str: the value of `defrost_control_type` or None if not set
        """
        return self._data["Defrost Control Type"]

    @defrost_control_type.setter
    def defrost_control_type(self, value="TimeSchedule"):
        """  Corresponds to IDD Field `defrost_control_type`

        Args:
            value (str): value for IDD Field `defrost_control_type`
                Accepted values are:
                      - TimeSchedule
                      - TemperatureTermination
                Default value: TimeSchedule
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_control_type`')
            vals = set()
            vals.add("TimeSchedule")
            vals.add("TemperatureTermination")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `defrost_control_type`'.format(value))

        self._data["Defrost Control Type"] = value

    @property
    def defrost_schedule_name(self):
        """Get defrost_schedule_name

        Returns:
            str: the value of `defrost_schedule_name` or None if not set
        """
        return self._data["Defrost Schedule Name"]

    @defrost_schedule_name.setter
    def defrost_schedule_name(self, value=None):
        """  Corresponds to IDD Field `defrost_schedule_name`
        The schedule values should be 0 (off) or 1 (on)

        Args:
            value (str): value for IDD Field `defrost_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_schedule_name`')

        self._data["Defrost Schedule Name"] = value

    @property
    def defrost_dripdown_schedule_name(self):
        """Get defrost_dripdown_schedule_name

        Returns:
            str: the value of `defrost_dripdown_schedule_name` or None if not set
        """
        return self._data["Defrost Drip-Down Schedule Name"]

    @defrost_dripdown_schedule_name.setter
    def defrost_dripdown_schedule_name(self, value=None):
        """  Corresponds to IDD Field `defrost_dripdown_schedule_name`
        The schedule values should be 0 (off) or 1 (on)
        The start time for each defrost period in this drip-down schedule should coincide with
        the start time for each defrost period in the defrost schedule (previous input
        field).The length of each defrost drip-down period must be greater than or equal to the
        corresponding defrost period specified in the defrost schedule. This extra time
        allows the melted frost to drip from the coil before refrigeration is restarted.

        Args:
            value (str): value for IDD Field `defrost_dripdown_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_dripdown_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_dripdown_schedule_name`')

        self._data["Defrost Drip-Down Schedule Name"] = value

    @property
    def defrost_power(self):
        """Get defrost_power

        Returns:
            float: the value of `defrost_power` or None if not set
        """
        return self._data["Defrost Power"]

    @defrost_power.setter
    def defrost_power(self, value=None):
        """  Corresponds to IDD Field `defrost_power`
        needed for all defrost types except none and offcycle

        Args:
            value (float): value for IDD Field `defrost_power`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `defrost_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `defrost_power`')

        self._data["Defrost Power"] = value

    @property
    def temperature_termination_defrost_fraction_to_ice(self):
        """Get temperature_termination_defrost_fraction_to_ice

        Returns:
            float: the value of `temperature_termination_defrost_fraction_to_ice` or None if not set
        """
        return self._data["Temperature Termination Defrost Fraction to Ice"]

    @temperature_termination_defrost_fraction_to_ice.setter
    def temperature_termination_defrost_fraction_to_ice(self, value=None):
        """  Corresponds to IDD Field `temperature_termination_defrost_fraction_to_ice`
        This is the portion of the defrost energy that is available to melt frost
        Needed only for defrost control type TemperatureTermination
        defaults to 0.7 for electric defrost and to 0.3 for hot fluid defrost

        Args:
            value (float): value for IDD Field `temperature_termination_defrost_fraction_to_ice`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_termination_defrost_fraction_to_ice`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `temperature_termination_defrost_fraction_to_ice`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `temperature_termination_defrost_fraction_to_ice`')

        self._data["Temperature Termination Defrost Fraction to Ice"] = value

    @property
    def vertical_location(self):
        """Get vertical_location

        Returns:
            str: the value of `vertical_location` or None if not set
        """
        return self._data["Vertical Location"]

    @vertical_location.setter
    def vertical_location(self, value="Middle"):
        """  Corresponds to IDD Field `vertical_location`

        Args:
            value (str): value for IDD Field `vertical_location`
                Accepted values are:
                      - Ceiling
                      - Middle
                      - Floor
                Default value: Middle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `vertical_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `vertical_location`')
            vals = set()
            vals.add("Ceiling")
            vals.add("Middle")
            vals.add("Floor")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `vertical_location`'.format(value))

        self._data["Vertical Location"] = value

    @property
    def average_refrigerant_charge_inventory(self):
        """Get average_refrigerant_charge_inventory

        Returns:
            float: the value of `average_refrigerant_charge_inventory` or None if not set
        """
        return self._data["Average Refrigerant Charge Inventory"]

    @average_refrigerant_charge_inventory.setter
    def average_refrigerant_charge_inventory(self, value=0.0 ):
        """  Corresponds to IDD Field `average_refrigerant_charge_inventory`
        This value is only used if the Cooling Source Type is DXEvaporator

        Args:
            value (float): value for IDD Field `average_refrigerant_charge_inventory`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `average_refrigerant_charge_inventory`'.format(value))

        self._data["Average Refrigerant Charge Inventory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.capacity_rating_type))
        out.append(self._to_str(self.rated_unit_load_factor))
        out.append(self._to_str(self.rated_capacity))
        out.append(self._to_str(self.rated_relative_humidity))
        out.append(self._to_str(self.rated_cooling_source_temperature))
        out.append(self._to_str(self.rated_temperature_difference_dt1))
        out.append(self._to_str(self.maximum_temperature_difference_between_inlet_air_and_evaporating_temperature))
        out.append(self._to_str(self.coil_material_correction_factor))
        out.append(self._to_str(self.refrigerant_correction_factor))
        out.append(self._to_str(self.capacity_correction_curve_type))
        out.append(self._to_str(self.capacity_correction_curve_name))
        out.append(self._to_str(self.shr60_correction_factor))
        out.append(self._to_str(self.rated_total_heating_power))
        out.append(self._to_str(self.heating_power_schedule_name))
        out.append(self._to_str(self.fan_speed_control_type))
        out.append(self._to_str(self.rated_fan_power))
        out.append(self._to_str(self.rated_air_flow))
        out.append(self._to_str(self.minimum_fan_air_flow_ratio))
        out.append(self._to_str(self.defrost_type))
        out.append(self._to_str(self.defrost_control_type))
        out.append(self._to_str(self.defrost_schedule_name))
        out.append(self._to_str(self.defrost_dripdown_schedule_name))
        out.append(self._to_str(self.defrost_power))
        out.append(self._to_str(self.temperature_termination_defrost_fraction_to_ice))
        out.append(self._to_str(self.vertical_location))
        out.append(self._to_str(self.average_refrigerant_charge_inventory))
        return ",".join(out)

class DemandManagerAssignmentList(object):
    """ Corresponds to IDD object `DemandManagerAssignmentList`
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "DemandManagerAssignmentList"
    field_count = 28
    required_fields = ["Name", "Meter Name", "Demand Limit Safety Fraction", "Demand Window Length", "Demand Manager Priority"]

    def __init__(self):
        """ Init data dictionary object for IDD  `DemandManagerAssignmentList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Meter Name"] = None
        self._data["Demand Limit Schedule Name"] = None
        self._data["Demand Limit Safety Fraction"] = None
        self._data["Billing Period Schedule Name"] = None
        self._data["Peak Period Schedule Name"] = None
        self._data["Demand Window Length"] = None
        self._data["Demand Manager Priority"] = None
        self._data["DemandManager 1 Object Type"] = None
        self._data["DemandManager 1 Name"] = None
        self._data["DemandManager 2 Object Type"] = None
        self._data["DemandManager 2 Name"] = None
        self._data["DemandManager 3 Object Type"] = None
        self._data["DemandManager 3 Name"] = None
        self._data["DemandManager 4 Object Type"] = None
        self._data["DemandManager 4 Name"] = None
        self._data["DemandManager 5 Object Type"] = None
        self._data["DemandManager 5 Name"] = None
        self._data["DemandManager 6 Object Type"] = None
        self._data["DemandManager 6 Name"] = None
        self._data["DemandManager 7 Object Type"] = None
        self._data["DemandManager 7 Name"] = None
        self._data["DemandManager 8 Object Type"] = None
        self._data["DemandManager 8 Name"] = None
        self._data["DemandManager 9 Object Type"] = None
        self._data["DemandManager 9 Name"] = None
        self._data["DemandManager 10 Object Type"] = None
        self._data["DemandManager 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_name = None
        else:
            self.meter_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_limit_schedule_name = None
        else:
            self.demand_limit_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_limit_safety_fraction = None
        else:
            self.demand_limit_safety_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.billing_period_schedule_name = None
        else:
            self.billing_period_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.peak_period_schedule_name = None
        else:
            self.peak_period_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_window_length = None
        else:
            self.demand_window_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_manager_priority = None
        else:
            self.demand_manager_priority = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_1_object_type = None
        else:
            self.demandmanager_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_1_name = None
        else:
            self.demandmanager_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_2_object_type = None
        else:
            self.demandmanager_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_2_name = None
        else:
            self.demandmanager_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_3_object_type = None
        else:
            self.demandmanager_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_3_name = None
        else:
            self.demandmanager_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_4_object_type = None
        else:
            self.demandmanager_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_4_name = None
        else:
            self.demandmanager_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_5_object_type = None
        else:
            self.demandmanager_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_5_name = None
        else:
            self.demandmanager_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_6_object_type = None
        else:
            self.demandmanager_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_6_name = None
        else:
            self.demandmanager_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_7_object_type = None
        else:
            self.demandmanager_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_7_name = None
        else:
            self.demandmanager_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_8_object_type = None
        else:
            self.demandmanager_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_8_name = None
        else:
            self.demandmanager_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_9_object_type = None
        else:
            self.demandmanager_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_9_name = None
        else:
            self.demandmanager_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_10_object_type = None
        else:
            self.demandmanager_10_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demandmanager_10_name = None
        else:
            self.demandmanager_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def meter_name(self):
        """Get meter_name

        Returns:
            str: the value of `meter_name` or None if not set
        """
        return self._data["Meter Name"]

    @meter_name.setter
    def meter_name(self, value=None):
        """  Corresponds to IDD Field `meter_name`

        Args:
            value (str): value for IDD Field `meter_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_name`')

        self._data["Meter Name"] = value

    @property
    def demand_limit_schedule_name(self):
        """Get demand_limit_schedule_name

        Returns:
            str: the value of `demand_limit_schedule_name` or None if not set
        """
        return self._data["Demand Limit Schedule Name"]

    @demand_limit_schedule_name.setter
    def demand_limit_schedule_name(self, value=None):
        """  Corresponds to IDD Field `demand_limit_schedule_name`

        Args:
            value (str): value for IDD Field `demand_limit_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_limit_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_limit_schedule_name`')

        self._data["Demand Limit Schedule Name"] = value

    @property
    def demand_limit_safety_fraction(self):
        """Get demand_limit_safety_fraction

        Returns:
            float: the value of `demand_limit_safety_fraction` or None if not set
        """
        return self._data["Demand Limit Safety Fraction"]

    @demand_limit_safety_fraction.setter
    def demand_limit_safety_fraction(self, value=None):
        """  Corresponds to IDD Field `demand_limit_safety_fraction`

        Args:
            value (float): value for IDD Field `demand_limit_safety_fraction`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `demand_limit_safety_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `demand_limit_safety_fraction`')

        self._data["Demand Limit Safety Fraction"] = value

    @property
    def billing_period_schedule_name(self):
        """Get billing_period_schedule_name

        Returns:
            str: the value of `billing_period_schedule_name` or None if not set
        """
        return self._data["Billing Period Schedule Name"]

    @billing_period_schedule_name.setter
    def billing_period_schedule_name(self, value=None):
        """  Corresponds to IDD Field `billing_period_schedule_name`
        This field should reference the same schedule as the month schedule name field of the
        UtilityCost:Tariff object, if used.
        If blank, defaults to regular divisions between months.

        Args:
            value (str): value for IDD Field `billing_period_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `billing_period_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `billing_period_schedule_name`')

        self._data["Billing Period Schedule Name"] = value

    @property
    def peak_period_schedule_name(self):
        """Get peak_period_schedule_name

        Returns:
            str: the value of `peak_period_schedule_name` or None if not set
        """
        return self._data["Peak Period Schedule Name"]

    @peak_period_schedule_name.setter
    def peak_period_schedule_name(self, value=None):
        """  Corresponds to IDD Field `peak_period_schedule_name`
        This field should reference the same schedule as the period schedule name field of the
        UtilityCost:Tariff object, if used.
        If blank, defaults to always on peak.

        Args:
            value (str): value for IDD Field `peak_period_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `peak_period_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `peak_period_schedule_name`')

        self._data["Peak Period Schedule Name"] = value

    @property
    def demand_window_length(self):
        """Get demand_window_length

        Returns:
            int: the value of `demand_window_length` or None if not set
        """
        return self._data["Demand Window Length"]

    @demand_window_length.setter
    def demand_window_length(self, value=None):
        """  Corresponds to IDD Field `demand_window_length`

        Args:
            value (int): value for IDD Field `demand_window_length`
                Units: minutes
                value > 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `demand_window_length`'.format(value))
            if value <= 0:
                raise ValueError('value need to be greater 0 '
                                 'for field `demand_window_length`')

        self._data["Demand Window Length"] = value

    @property
    def demand_manager_priority(self):
        """Get demand_manager_priority

        Returns:
            str: the value of `demand_manager_priority` or None if not set
        """
        return self._data["Demand Manager Priority"]

    @demand_manager_priority.setter
    def demand_manager_priority(self, value=None):
        """  Corresponds to IDD Field `demand_manager_priority`

        Args:
            value (str): value for IDD Field `demand_manager_priority`
                Accepted values are:
                      - Sequential
                      - All
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_manager_priority`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_manager_priority`')
            vals = set()
            vals.add("Sequential")
            vals.add("All")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demand_manager_priority`'.format(value))

        self._data["Demand Manager Priority"] = value

    @property
    def demandmanager_1_object_type(self):
        """Get demandmanager_1_object_type

        Returns:
            str: the value of `demandmanager_1_object_type` or None if not set
        """
        return self._data["DemandManager 1 Object Type"]

    @demandmanager_1_object_type.setter
    def demandmanager_1_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_1_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_1_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_1_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_1_object_type`'.format(value))

        self._data["DemandManager 1 Object Type"] = value

    @property
    def demandmanager_1_name(self):
        """Get demandmanager_1_name

        Returns:
            str: the value of `demandmanager_1_name` or None if not set
        """
        return self._data["DemandManager 1 Name"]

    @demandmanager_1_name.setter
    def demandmanager_1_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_1_name`

        Args:
            value (str): value for IDD Field `demandmanager_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_1_name`')

        self._data["DemandManager 1 Name"] = value

    @property
    def demandmanager_2_object_type(self):
        """Get demandmanager_2_object_type

        Returns:
            str: the value of `demandmanager_2_object_type` or None if not set
        """
        return self._data["DemandManager 2 Object Type"]

    @demandmanager_2_object_type.setter
    def demandmanager_2_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_2_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_2_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_2_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_2_object_type`'.format(value))

        self._data["DemandManager 2 Object Type"] = value

    @property
    def demandmanager_2_name(self):
        """Get demandmanager_2_name

        Returns:
            str: the value of `demandmanager_2_name` or None if not set
        """
        return self._data["DemandManager 2 Name"]

    @demandmanager_2_name.setter
    def demandmanager_2_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_2_name`

        Args:
            value (str): value for IDD Field `demandmanager_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_2_name`')

        self._data["DemandManager 2 Name"] = value

    @property
    def demandmanager_3_object_type(self):
        """Get demandmanager_3_object_type

        Returns:
            str: the value of `demandmanager_3_object_type` or None if not set
        """
        return self._data["DemandManager 3 Object Type"]

    @demandmanager_3_object_type.setter
    def demandmanager_3_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_3_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_3_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_3_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_3_object_type`'.format(value))

        self._data["DemandManager 3 Object Type"] = value

    @property
    def demandmanager_3_name(self):
        """Get demandmanager_3_name

        Returns:
            str: the value of `demandmanager_3_name` or None if not set
        """
        return self._data["DemandManager 3 Name"]

    @demandmanager_3_name.setter
    def demandmanager_3_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_3_name`

        Args:
            value (str): value for IDD Field `demandmanager_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_3_name`')

        self._data["DemandManager 3 Name"] = value

    @property
    def demandmanager_4_object_type(self):
        """Get demandmanager_4_object_type

        Returns:
            str: the value of `demandmanager_4_object_type` or None if not set
        """
        return self._data["DemandManager 4 Object Type"]

    @demandmanager_4_object_type.setter
    def demandmanager_4_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_4_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_4_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_4_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_4_object_type`'.format(value))

        self._data["DemandManager 4 Object Type"] = value

    @property
    def demandmanager_4_name(self):
        """Get demandmanager_4_name

        Returns:
            str: the value of `demandmanager_4_name` or None if not set
        """
        return self._data["DemandManager 4 Name"]

    @demandmanager_4_name.setter
    def demandmanager_4_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_4_name`

        Args:
            value (str): value for IDD Field `demandmanager_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_4_name`')

        self._data["DemandManager 4 Name"] = value

    @property
    def demandmanager_5_object_type(self):
        """Get demandmanager_5_object_type

        Returns:
            str: the value of `demandmanager_5_object_type` or None if not set
        """
        return self._data["DemandManager 5 Object Type"]

    @demandmanager_5_object_type.setter
    def demandmanager_5_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_5_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_5_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_5_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_5_object_type`'.format(value))

        self._data["DemandManager 5 Object Type"] = value

    @property
    def demandmanager_5_name(self):
        """Get demandmanager_5_name

        Returns:
            str: the value of `demandmanager_5_name` or None if not set
        """
        return self._data["DemandManager 5 Name"]

    @demandmanager_5_name.setter
    def demandmanager_5_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_5_name`

        Args:
            value (str): value for IDD Field `demandmanager_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_5_name`')

        self._data["DemandManager 5 Name"] = value

    @property
    def demandmanager_6_object_type(self):
        """Get demandmanager_6_object_type

        Returns:
            str: the value of `demandmanager_6_object_type` or None if not set
        """
        return self._data["DemandManager 6 Object Type"]

    @demandmanager_6_object_type.setter
    def demandmanager_6_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_6_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_6_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_6_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_6_object_type`'.format(value))

        self._data["DemandManager 6 Object Type"] = value

    @property
    def demandmanager_6_name(self):
        """Get demandmanager_6_name

        Returns:
            str: the value of `demandmanager_6_name` or None if not set
        """
        return self._data["DemandManager 6 Name"]

    @demandmanager_6_name.setter
    def demandmanager_6_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_6_name`

        Args:
            value (str): value for IDD Field `demandmanager_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_6_name`')

        self._data["DemandManager 6 Name"] = value

    @property
    def demandmanager_7_object_type(self):
        """Get demandmanager_7_object_type

        Returns:
            str: the value of `demandmanager_7_object_type` or None if not set
        """
        return self._data["DemandManager 7 Object Type"]

    @demandmanager_7_object_type.setter
    def demandmanager_7_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_7_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_7_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_7_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_7_object_type`'.format(value))

        self._data["DemandManager 7 Object Type"] = value

    @property
    def demandmanager_7_name(self):
        """Get demandmanager_7_name

        Returns:
            str: the value of `demandmanager_7_name` or None if not set
        """
        return self._data["DemandManager 7 Name"]

    @demandmanager_7_name.setter
    def demandmanager_7_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_7_name`

        Args:
            value (str): value for IDD Field `demandmanager_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_7_name`')

        self._data["DemandManager 7 Name"] = value

    @property
    def demandmanager_8_object_type(self):
        """Get demandmanager_8_object_type

        Returns:
            str: the value of `demandmanager_8_object_type` or None if not set
        """
        return self._data["DemandManager 8 Object Type"]

    @demandmanager_8_object_type.setter
    def demandmanager_8_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_8_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_8_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_8_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_8_object_type`'.format(value))

        self._data["DemandManager 8 Object Type"] = value

    @property
    def demandmanager_8_name(self):
        """Get demandmanager_8_name

        Returns:
            str: the value of `demandmanager_8_name` or None if not set
        """
        return self._data["DemandManager 8 Name"]

    @demandmanager_8_name.setter
    def demandmanager_8_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_8_name`

        Args:
            value (str): value for IDD Field `demandmanager_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_8_name`')

        self._data["DemandManager 8 Name"] = value

    @property
    def demandmanager_9_object_type(self):
        """Get demandmanager_9_object_type

        Returns:
            str: the value of `demandmanager_9_object_type` or None if not set
        """
        return self._data["DemandManager 9 Object Type"]

    @demandmanager_9_object_type.setter
    def demandmanager_9_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_9_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_9_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_9_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_9_object_type`'.format(value))

        self._data["DemandManager 9 Object Type"] = value

    @property
    def demandmanager_9_name(self):
        """Get demandmanager_9_name

        Returns:
            str: the value of `demandmanager_9_name` or None if not set
        """
        return self._data["DemandManager 9 Name"]

    @demandmanager_9_name.setter
    def demandmanager_9_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_9_name`

        Args:
            value (str): value for IDD Field `demandmanager_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_9_name`')

        self._data["DemandManager 9 Name"] = value

    @property
    def demandmanager_10_object_type(self):
        """Get demandmanager_10_object_type

        Returns:
            str: the value of `demandmanager_10_object_type` or None if not set
        """
        return self._data["DemandManager 10 Object Type"]

    @demandmanager_10_object_type.setter
    def demandmanager_10_object_type(self, value=None):
        """  Corresponds to IDD Field `demandmanager_10_object_type`

        Args:
            value (str): value for IDD Field `demandmanager_10_object_type`
                Accepted values are:
                      - DemandManager:ExteriorLights
                      - DemandManager:Lights
                      - DemandManager:ElectricEquipment
                      - DemandManager:Thermostats
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_10_object_type`')
            vals = set()
            vals.add("DemandManager:ExteriorLights")
            vals.add("DemandManager:Lights")
            vals.add("DemandManager:ElectricEquipment")
            vals.add("DemandManager:Thermostats")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demandmanager_10_object_type`'.format(value))

        self._data["DemandManager 10 Object Type"] = value

    @property
    def demandmanager_10_name(self):
        """Get demandmanager_10_name

        Returns:
            str: the value of `demandmanager_10_name` or None if not set
        """
        return self._data["DemandManager 10 Name"]

    @demandmanager_10_name.setter
    def demandmanager_10_name(self, value=None):
        """  Corresponds to IDD Field `demandmanager_10_name`

        Args:
            value (str): value for IDD Field `demandmanager_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demandmanager_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demandmanager_10_name`')

        self._data["DemandManager 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.meter_name))
        out.append(self._to_str(self.demand_limit_schedule_name))
        out.append(self._to_str(self.demand_limit_safety_fraction))
        out.append(self._to_str(self.billing_period_schedule_name))
        out.append(self._to_str(self.peak_period_schedule_name))
        out.append(self._to_str(self.demand_window_length))
        out.append(self._to_str(self.demand_manager_priority))
        out.append(self._to_str(self.demandmanager_1_object_type))
        out.append(self._to_str(self.demandmanager_1_name))
        out.append(self._to_str(self.demandmanager_2_object_type))
        out.append(self._to_str(self.demandmanager_2_name))
        out.append(self._to_str(self.demandmanager_3_object_type))
        out.append(self._to_str(self.demandmanager_3_name))
        out.append(self._to_str(self.demandmanager_4_object_type))
        out.append(self._to_str(self.demandmanager_4_name))
        out.append(self._to_str(self.demandmanager_5_object_type))
        out.append(self._to_str(self.demandmanager_5_name))
        out.append(self._to_str(self.demandmanager_6_object_type))
        out.append(self._to_str(self.demandmanager_6_name))
        out.append(self._to_str(self.demandmanager_7_object_type))
        out.append(self._to_str(self.demandmanager_7_name))
        out.append(self._to_str(self.demandmanager_8_object_type))
        out.append(self._to_str(self.demandmanager_8_name))
        out.append(self._to_str(self.demandmanager_9_object_type))
        out.append(self._to_str(self.demandmanager_9_name))
        out.append(self._to_str(self.demandmanager_10_object_type))
        out.append(self._to_str(self.demandmanager_10_name))
        return ",".join(out)

class DemandManagerExteriorLights(object):
    """ Corresponds to IDD object `DemandManager:ExteriorLights`
        used for demand limiting Exterior:Lights objects.
    
    """
    internal_name = "DemandManager:ExteriorLights"
    field_count = 18
    required_fields = ["Name", "Limit Control", "Selection Control", "Exterior Lights 1 Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `DemandManager:ExteriorLights`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Limit Control"] = None
        self._data["Minimum Limit Duration"] = None
        self._data["Maximum Limit Fraction"] = None
        self._data["Limit Step Change"] = None
        self._data["Selection Control"] = None
        self._data["Rotation Duration"] = None
        self._data["Exterior Lights 1 Name"] = None
        self._data["Exterior Lights 2 Name"] = None
        self._data["Exterior Lights 3 Name"] = None
        self._data["Exterior Lights 4 Name"] = None
        self._data["Exterior Lights 5 Name"] = None
        self._data["Exterior Lights 6 Name"] = None
        self._data["Exterior Lights 7 Name"] = None
        self._data["Exterior Lights 8 Name"] = None
        self._data["Exterior Lights 9 Name"] = None
        self._data["Exterior Lights 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.limit_control = None
        else:
            self.limit_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_limit_duration = None
        else:
            self.minimum_limit_duration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_limit_fraction = None
        else:
            self.maximum_limit_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.limit_step_change = None
        else:
            self.limit_step_change = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.selection_control = None
        else:
            self.selection_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rotation_duration = None
        else:
            self.rotation_duration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_1_name = None
        else:
            self.exterior_lights_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_2_name = None
        else:
            self.exterior_lights_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_3_name = None
        else:
            self.exterior_lights_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_4_name = None
        else:
            self.exterior_lights_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_5_name = None
        else:
            self.exterior_lights_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_6_name = None
        else:
            self.exterior_lights_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_7_name = None
        else:
            self.exterior_lights_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_8_name = None
        else:
            self.exterior_lights_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_9_name = None
        else:
            self.exterior_lights_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exterior_lights_10_name = None
        else:
            self.exterior_lights_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def limit_control(self):
        """Get limit_control

        Returns:
            str: the value of `limit_control` or None if not set
        """
        return self._data["Limit Control"]

    @limit_control.setter
    def limit_control(self, value=None):
        """  Corresponds to IDD Field `limit_control`

        Args:
            value (str): value for IDD Field `limit_control`
                Accepted values are:
                      - Off
                      - Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `limit_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `limit_control`')
            vals = set()
            vals.add("Off")
            vals.add("Fixed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `limit_control`'.format(value))

        self._data["Limit Control"] = value

    @property
    def minimum_limit_duration(self):
        """Get minimum_limit_duration

        Returns:
            int: the value of `minimum_limit_duration` or None if not set
        """
        return self._data["Minimum Limit Duration"]

    @minimum_limit_duration.setter
    def minimum_limit_duration(self, value=None):
        """  Corresponds to IDD Field `minimum_limit_duration`
        If blank, duration defaults to the timestep

        Args:
            value (int): value for IDD Field `minimum_limit_duration`
                Units: minutes
                value > 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `minimum_limit_duration`'.format(value))
            if value <= 0:
                raise ValueError('value need to be greater 0 '
                                 'for field `minimum_limit_duration`')

        self._data["Minimum Limit Duration"] = value

    @property
    def maximum_limit_fraction(self):
        """Get maximum_limit_fraction

        Returns:
            float: the value of `maximum_limit_fraction` or None if not set
        """
        return self._data["Maximum Limit Fraction"]

    @maximum_limit_fraction.setter
    def maximum_limit_fraction(self, value=None):
        """  Corresponds to IDD Field `maximum_limit_fraction`

        Args:
            value (float): value for IDD Field `maximum_limit_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_limit_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_limit_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_limit_fraction`')

        self._data["Maximum Limit Fraction"] = value

    @property
    def limit_step_change(self):
        """Get limit_step_change

        Returns:
            float: the value of `limit_step_change` or None if not set
        """
        return self._data["Limit Step Change"]

    @limit_step_change.setter
    def limit_step_change(self, value=None):
        """  Corresponds to IDD Field `limit_step_change`
        Not yet implemented

        Args:
            value (float): value for IDD Field `limit_step_change`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `limit_step_change`'.format(value))

        self._data["Limit Step Change"] = value

    @property
    def selection_control(self):
        """Get selection_control

        Returns:
            str: the value of `selection_control` or None if not set
        """
        return self._data["Selection Control"]

    @selection_control.setter
    def selection_control(self, value=None):
        """  Corresponds to IDD Field `selection_control`

        Args:
            value (str): value for IDD Field `selection_control`
                Accepted values are:
                      - All
                      - RotateMany
                      - RotateOne
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `selection_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `selection_control`')
            vals = set()
            vals.add("All")
            vals.add("RotateMany")
            vals.add("RotateOne")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `selection_control`'.format(value))

        self._data["Selection Control"] = value

    @property
    def rotation_duration(self):
        """Get rotation_duration

        Returns:
            int: the value of `rotation_duration` or None if not set
        """
        return self._data["Rotation Duration"]

    @rotation_duration.setter
    def rotation_duration(self, value=None):
        """  Corresponds to IDD Field `rotation_duration`
        If blank, duration defaults to the timestep

        Args:
            value (int): value for IDD Field `rotation_duration`
                Units: minutes
                value >= 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `rotation_duration`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `rotation_duration`')

        self._data["Rotation Duration"] = value

    @property
    def exterior_lights_1_name(self):
        """Get exterior_lights_1_name

        Returns:
            str: the value of `exterior_lights_1_name` or None if not set
        """
        return self._data["Exterior Lights 1 Name"]

    @exterior_lights_1_name.setter
    def exterior_lights_1_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_1_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_1_name`')

        self._data["Exterior Lights 1 Name"] = value

    @property
    def exterior_lights_2_name(self):
        """Get exterior_lights_2_name

        Returns:
            str: the value of `exterior_lights_2_name` or None if not set
        """
        return self._data["Exterior Lights 2 Name"]

    @exterior_lights_2_name.setter
    def exterior_lights_2_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_2_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_2_name`')

        self._data["Exterior Lights 2 Name"] = value

    @property
    def exterior_lights_3_name(self):
        """Get exterior_lights_3_name

        Returns:
            str: the value of `exterior_lights_3_name` or None if not set
        """
        return self._data["Exterior Lights 3 Name"]

    @exterior_lights_3_name.setter
    def exterior_lights_3_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_3_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_3_name`')

        self._data["Exterior Lights 3 Name"] = value

    @property
    def exterior_lights_4_name(self):
        """Get exterior_lights_4_name

        Returns:
            str: the value of `exterior_lights_4_name` or None if not set
        """
        return self._data["Exterior Lights 4 Name"]

    @exterior_lights_4_name.setter
    def exterior_lights_4_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_4_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_4_name`')

        self._data["Exterior Lights 4 Name"] = value

    @property
    def exterior_lights_5_name(self):
        """Get exterior_lights_5_name

        Returns:
            str: the value of `exterior_lights_5_name` or None if not set
        """
        return self._data["Exterior Lights 5 Name"]

    @exterior_lights_5_name.setter
    def exterior_lights_5_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_5_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_5_name`')

        self._data["Exterior Lights 5 Name"] = value

    @property
    def exterior_lights_6_name(self):
        """Get exterior_lights_6_name

        Returns:
            str: the value of `exterior_lights_6_name` or None if not set
        """
        return self._data["Exterior Lights 6 Name"]

    @exterior_lights_6_name.setter
    def exterior_lights_6_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_6_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_6_name`')

        self._data["Exterior Lights 6 Name"] = value

    @property
    def exterior_lights_7_name(self):
        """Get exterior_lights_7_name

        Returns:
            str: the value of `exterior_lights_7_name` or None if not set
        """
        return self._data["Exterior Lights 7 Name"]

    @exterior_lights_7_name.setter
    def exterior_lights_7_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_7_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_7_name`')

        self._data["Exterior Lights 7 Name"] = value

    @property
    def exterior_lights_8_name(self):
        """Get exterior_lights_8_name

        Returns:
            str: the value of `exterior_lights_8_name` or None if not set
        """
        return self._data["Exterior Lights 8 Name"]

    @exterior_lights_8_name.setter
    def exterior_lights_8_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_8_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_8_name`')

        self._data["Exterior Lights 8 Name"] = value

    @property
    def exterior_lights_9_name(self):
        """Get exterior_lights_9_name

        Returns:
            str: the value of `exterior_lights_9_name` or None if not set
        """
        return self._data["Exterior Lights 9 Name"]

    @exterior_lights_9_name.setter
    def exterior_lights_9_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_9_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_9_name`')

        self._data["Exterior Lights 9 Name"] = value

    @property
    def exterior_lights_10_name(self):
        """Get exterior_lights_10_name

        Returns:
            str: the value of `exterior_lights_10_name` or None if not set
        """
        return self._data["Exterior Lights 10 Name"]

    @exterior_lights_10_name.setter
    def exterior_lights_10_name(self, value=None):
        """  Corresponds to IDD Field `exterior_lights_10_name`
        Enter the name of an Exterior:Lights object.

        Args:
            value (str): value for IDD Field `exterior_lights_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exterior_lights_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exterior_lights_10_name`')

        self._data["Exterior Lights 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.limit_control))
        out.append(self._to_str(self.minimum_limit_duration))
        out.append(self._to_str(self.maximum_limit_fraction))
        out.append(self._to_str(self.limit_step_change))
        out.append(self._to_str(self.selection_control))
        out.append(self._to_str(self.rotation_duration))
        out.append(self._to_str(self.exterior_lights_1_name))
        out.append(self._to_str(self.exterior_lights_2_name))
        out.append(self._to_str(self.exterior_lights_3_name))
        out.append(self._to_str(self.exterior_lights_4_name))
        out.append(self._to_str(self.exterior_lights_5_name))
        out.append(self._to_str(self.exterior_lights_6_name))
        out.append(self._to_str(self.exterior_lights_7_name))
        out.append(self._to_str(self.exterior_lights_8_name))
        out.append(self._to_str(self.exterior_lights_9_name))
        out.append(self._to_str(self.exterior_lights_10_name))
        return ",".join(out)

class DemandManagerLights(object):
    """ Corresponds to IDD object `DemandManager:Lights`
        used for demand limiting Lights objects.
    
    """
    internal_name = "DemandManager:Lights"
    field_count = 18
    required_fields = ["Name", "Limit Control", "Selection Control", "Lights 1 Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `DemandManager:Lights`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Limit Control"] = None
        self._data["Minimum Limit Duration"] = None
        self._data["Maximum Limit Fraction"] = None
        self._data["Limit Step Change"] = None
        self._data["Selection Control"] = None
        self._data["Rotation Duration"] = None
        self._data["Lights 1 Name"] = None
        self._data["Lights 2 Name"] = None
        self._data["Lights 3 Name"] = None
        self._data["Lights 4 Name"] = None
        self._data["Lights 5 Name"] = None
        self._data["Lights 6 Name"] = None
        self._data["Lights 7 Name"] = None
        self._data["Lights 8 Name"] = None
        self._data["Lights 9 Name"] = None
        self._data["Lights 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.limit_control = None
        else:
            self.limit_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_limit_duration = None
        else:
            self.minimum_limit_duration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_limit_fraction = None
        else:
            self.maximum_limit_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.limit_step_change = None
        else:
            self.limit_step_change = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.selection_control = None
        else:
            self.selection_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rotation_duration = None
        else:
            self.rotation_duration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_1_name = None
        else:
            self.lights_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_2_name = None
        else:
            self.lights_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_3_name = None
        else:
            self.lights_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_4_name = None
        else:
            self.lights_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_5_name = None
        else:
            self.lights_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_6_name = None
        else:
            self.lights_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_7_name = None
        else:
            self.lights_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_8_name = None
        else:
            self.lights_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_9_name = None
        else:
            self.lights_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lights_10_name = None
        else:
            self.lights_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def limit_control(self):
        """Get limit_control

        Returns:
            str: the value of `limit_control` or None if not set
        """
        return self._data["Limit Control"]

    @limit_control.setter
    def limit_control(self, value=None):
        """  Corresponds to IDD Field `limit_control`

        Args:
            value (str): value for IDD Field `limit_control`
                Accepted values are:
                      - Off
                      - Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `limit_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `limit_control`')
            vals = set()
            vals.add("Off")
            vals.add("Fixed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `limit_control`'.format(value))

        self._data["Limit Control"] = value

    @property
    def minimum_limit_duration(self):
        """Get minimum_limit_duration

        Returns:
            int: the value of `minimum_limit_duration` or None if not set
        """
        return self._data["Minimum Limit Duration"]

    @minimum_limit_duration.setter
    def minimum_limit_duration(self, value=None):
        """  Corresponds to IDD Field `minimum_limit_duration`
        If blank, duration defaults to the timestep

        Args:
            value (int): value for IDD Field `minimum_limit_duration`
                Units: minutes
                value > 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `minimum_limit_duration`'.format(value))
            if value <= 0:
                raise ValueError('value need to be greater 0 '
                                 'for field `minimum_limit_duration`')

        self._data["Minimum Limit Duration"] = value

    @property
    def maximum_limit_fraction(self):
        """Get maximum_limit_fraction

        Returns:
            float: the value of `maximum_limit_fraction` or None if not set
        """
        return self._data["Maximum Limit Fraction"]

    @maximum_limit_fraction.setter
    def maximum_limit_fraction(self, value=None):
        """  Corresponds to IDD Field `maximum_limit_fraction`

        Args:
            value (float): value for IDD Field `maximum_limit_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_limit_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_limit_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_limit_fraction`')

        self._data["Maximum Limit Fraction"] = value

    @property
    def limit_step_change(self):
        """Get limit_step_change

        Returns:
            float: the value of `limit_step_change` or None if not set
        """
        return self._data["Limit Step Change"]

    @limit_step_change.setter
    def limit_step_change(self, value=None):
        """  Corresponds to IDD Field `limit_step_change`
        Not yet implemented

        Args:
            value (float): value for IDD Field `limit_step_change`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `limit_step_change`'.format(value))

        self._data["Limit Step Change"] = value

    @property
    def selection_control(self):
        """Get selection_control

        Returns:
            str: the value of `selection_control` or None if not set
        """
        return self._data["Selection Control"]

    @selection_control.setter
    def selection_control(self, value=None):
        """  Corresponds to IDD Field `selection_control`

        Args:
            value (str): value for IDD Field `selection_control`
                Accepted values are:
                      - All
                      - RotateMany
                      - RotateOne
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `selection_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `selection_control`')
            vals = set()
            vals.add("All")
            vals.add("RotateMany")
            vals.add("RotateOne")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `selection_control`'.format(value))

        self._data["Selection Control"] = value

    @property
    def rotation_duration(self):
        """Get rotation_duration

        Returns:
            int: the value of `rotation_duration` or None if not set
        """
        return self._data["Rotation Duration"]

    @rotation_duration.setter
    def rotation_duration(self, value=None):
        """  Corresponds to IDD Field `rotation_duration`
        If blank, duration defaults to the timestep

        Args:
            value (int): value for IDD Field `rotation_duration`
                Units: minutes
                value >= 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `rotation_duration`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `rotation_duration`')

        self._data["Rotation Duration"] = value

    @property
    def lights_1_name(self):
        """Get lights_1_name

        Returns:
            str: the value of `lights_1_name` or None if not set
        """
        return self._data["Lights 1 Name"]

    @lights_1_name.setter
    def lights_1_name(self, value=None):
        """  Corresponds to IDD Field `lights_1_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_1_name`')

        self._data["Lights 1 Name"] = value

    @property
    def lights_2_name(self):
        """Get lights_2_name

        Returns:
            str: the value of `lights_2_name` or None if not set
        """
        return self._data["Lights 2 Name"]

    @lights_2_name.setter
    def lights_2_name(self, value=None):
        """  Corresponds to IDD Field `lights_2_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_2_name`')

        self._data["Lights 2 Name"] = value

    @property
    def lights_3_name(self):
        """Get lights_3_name

        Returns:
            str: the value of `lights_3_name` or None if not set
        """
        return self._data["Lights 3 Name"]

    @lights_3_name.setter
    def lights_3_name(self, value=None):
        """  Corresponds to IDD Field `lights_3_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_3_name`')

        self._data["Lights 3 Name"] = value

    @property
    def lights_4_name(self):
        """Get lights_4_name

        Returns:
            str: the value of `lights_4_name` or None if not set
        """
        return self._data["Lights 4 Name"]

    @lights_4_name.setter
    def lights_4_name(self, value=None):
        """  Corresponds to IDD Field `lights_4_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_4_name`')

        self._data["Lights 4 Name"] = value

    @property
    def lights_5_name(self):
        """Get lights_5_name

        Returns:
            str: the value of `lights_5_name` or None if not set
        """
        return self._data["Lights 5 Name"]

    @lights_5_name.setter
    def lights_5_name(self, value=None):
        """  Corresponds to IDD Field `lights_5_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_5_name`')

        self._data["Lights 5 Name"] = value

    @property
    def lights_6_name(self):
        """Get lights_6_name

        Returns:
            str: the value of `lights_6_name` or None if not set
        """
        return self._data["Lights 6 Name"]

    @lights_6_name.setter
    def lights_6_name(self, value=None):
        """  Corresponds to IDD Field `lights_6_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_6_name`')

        self._data["Lights 6 Name"] = value

    @property
    def lights_7_name(self):
        """Get lights_7_name

        Returns:
            str: the value of `lights_7_name` or None if not set
        """
        return self._data["Lights 7 Name"]

    @lights_7_name.setter
    def lights_7_name(self, value=None):
        """  Corresponds to IDD Field `lights_7_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_7_name`')

        self._data["Lights 7 Name"] = value

    @property
    def lights_8_name(self):
        """Get lights_8_name

        Returns:
            str: the value of `lights_8_name` or None if not set
        """
        return self._data["Lights 8 Name"]

    @lights_8_name.setter
    def lights_8_name(self, value=None):
        """  Corresponds to IDD Field `lights_8_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_8_name`')

        self._data["Lights 8 Name"] = value

    @property
    def lights_9_name(self):
        """Get lights_9_name

        Returns:
            str: the value of `lights_9_name` or None if not set
        """
        return self._data["Lights 9 Name"]

    @lights_9_name.setter
    def lights_9_name(self, value=None):
        """  Corresponds to IDD Field `lights_9_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_9_name`')

        self._data["Lights 9 Name"] = value

    @property
    def lights_10_name(self):
        """Get lights_10_name

        Returns:
            str: the value of `lights_10_name` or None if not set
        """
        return self._data["Lights 10 Name"]

    @lights_10_name.setter
    def lights_10_name(self, value=None):
        """  Corresponds to IDD Field `lights_10_name`
        Enter the name of an Lights object.
        if ZoneList option is used on the Lights object,
        a single lights object from that assignment
        can be selected by entering <Zone Name><space><Global Lights Object Name>.

        Args:
            value (str): value for IDD Field `lights_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lights_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lights_10_name`')

        self._data["Lights 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.limit_control))
        out.append(self._to_str(self.minimum_limit_duration))
        out.append(self._to_str(self.maximum_limit_fraction))
        out.append(self._to_str(self.limit_step_change))
        out.append(self._to_str(self.selection_control))
        out.append(self._to_str(self.rotation_duration))
        out.append(self._to_str(self.lights_1_name))
        out.append(self._to_str(self.lights_2_name))
        out.append(self._to_str(self.lights_3_name))
        out.append(self._to_str(self.lights_4_name))
        out.append(self._to_str(self.lights_5_name))
        out.append(self._to_str(self.lights_6_name))
        out.append(self._to_str(self.lights_7_name))
        out.append(self._to_str(self.lights_8_name))
        out.append(self._to_str(self.lights_9_name))
        out.append(self._to_str(self.lights_10_name))
        return ",".join(out)

class DemandManagerElectricEquipment(object):
    """ Corresponds to IDD object `DemandManager:ElectricEquipment`
        used for demand limiting ElectricEquipment objects.
    
    """
    internal_name = "DemandManager:ElectricEquipment"
    field_count = 18
    required_fields = ["Name", "Limit Control", "Selection Control", "Electric Equipment 1 Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `DemandManager:ElectricEquipment`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Limit Control"] = None
        self._data["Minimum Limit Duration"] = None
        self._data["Maximum Limit Fraction"] = None
        self._data["Limit Step Change"] = None
        self._data["Selection Control"] = None
        self._data["Rotation Duration"] = None
        self._data["Electric Equipment 1 Name"] = None
        self._data["Electric Equipment 2 Name"] = None
        self._data["Electric Equipment 3 Name"] = None
        self._data["Electric Equipment 4 Name"] = None
        self._data["Electric Equipment 5 Name"] = None
        self._data["Electric Equipment 6 Name"] = None
        self._data["Electric Equipment 7 Name"] = None
        self._data["Electric Equipment 8 Name"] = None
        self._data["Electric Equipment 9 Name"] = None
        self._data["Electric Equipment 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.limit_control = None
        else:
            self.limit_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_limit_duration = None
        else:
            self.minimum_limit_duration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_limit_fraction = None
        else:
            self.maximum_limit_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.limit_step_change = None
        else:
            self.limit_step_change = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.selection_control = None
        else:
            self.selection_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rotation_duration = None
        else:
            self.rotation_duration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_1_name = None
        else:
            self.electric_equipment_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_2_name = None
        else:
            self.electric_equipment_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_3_name = None
        else:
            self.electric_equipment_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_4_name = None
        else:
            self.electric_equipment_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_5_name = None
        else:
            self.electric_equipment_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_6_name = None
        else:
            self.electric_equipment_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_7_name = None
        else:
            self.electric_equipment_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_8_name = None
        else:
            self.electric_equipment_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_9_name = None
        else:
            self.electric_equipment_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_equipment_10_name = None
        else:
            self.electric_equipment_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def limit_control(self):
        """Get limit_control

        Returns:
            str: the value of `limit_control` or None if not set
        """
        return self._data["Limit Control"]

    @limit_control.setter
    def limit_control(self, value=None):
        """  Corresponds to IDD Field `limit_control`

        Args:
            value (str): value for IDD Field `limit_control`
                Accepted values are:
                      - Off
                      - Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `limit_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `limit_control`')
            vals = set()
            vals.add("Off")
            vals.add("Fixed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `limit_control`'.format(value))

        self._data["Limit Control"] = value

    @property
    def minimum_limit_duration(self):
        """Get minimum_limit_duration

        Returns:
            int: the value of `minimum_limit_duration` or None if not set
        """
        return self._data["Minimum Limit Duration"]

    @minimum_limit_duration.setter
    def minimum_limit_duration(self, value=None):
        """  Corresponds to IDD Field `minimum_limit_duration`
        If blank, duration defaults to the timestep

        Args:
            value (int): value for IDD Field `minimum_limit_duration`
                Units: minutes
                value > 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `minimum_limit_duration`'.format(value))
            if value <= 0:
                raise ValueError('value need to be greater 0 '
                                 'for field `minimum_limit_duration`')

        self._data["Minimum Limit Duration"] = value

    @property
    def maximum_limit_fraction(self):
        """Get maximum_limit_fraction

        Returns:
            float: the value of `maximum_limit_fraction` or None if not set
        """
        return self._data["Maximum Limit Fraction"]

    @maximum_limit_fraction.setter
    def maximum_limit_fraction(self, value=None):
        """  Corresponds to IDD Field `maximum_limit_fraction`

        Args:
            value (float): value for IDD Field `maximum_limit_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_limit_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_limit_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_limit_fraction`')

        self._data["Maximum Limit Fraction"] = value

    @property
    def limit_step_change(self):
        """Get limit_step_change

        Returns:
            float: the value of `limit_step_change` or None if not set
        """
        return self._data["Limit Step Change"]

    @limit_step_change.setter
    def limit_step_change(self, value=None):
        """  Corresponds to IDD Field `limit_step_change`
        Not yet implemented

        Args:
            value (float): value for IDD Field `limit_step_change`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `limit_step_change`'.format(value))

        self._data["Limit Step Change"] = value

    @property
    def selection_control(self):
        """Get selection_control

        Returns:
            str: the value of `selection_control` or None if not set
        """
        return self._data["Selection Control"]

    @selection_control.setter
    def selection_control(self, value=None):
        """  Corresponds to IDD Field `selection_control`

        Args:
            value (str): value for IDD Field `selection_control`
                Accepted values are:
                      - All
                      - RotateMany
                      - RotateOne
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `selection_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `selection_control`')
            vals = set()
            vals.add("All")
            vals.add("RotateMany")
            vals.add("RotateOne")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `selection_control`'.format(value))

        self._data["Selection Control"] = value

    @property
    def rotation_duration(self):
        """Get rotation_duration

        Returns:
            int: the value of `rotation_duration` or None if not set
        """
        return self._data["Rotation Duration"]

    @rotation_duration.setter
    def rotation_duration(self, value=None):
        """  Corresponds to IDD Field `rotation_duration`
        If blank, duration defaults to the timestep

        Args:
            value (int): value for IDD Field `rotation_duration`
                Units: minutes
                value >= 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `rotation_duration`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `rotation_duration`')

        self._data["Rotation Duration"] = value

    @property
    def electric_equipment_1_name(self):
        """Get electric_equipment_1_name

        Returns:
            str: the value of `electric_equipment_1_name` or None if not set
        """
        return self._data["Electric Equipment 1 Name"]

    @electric_equipment_1_name.setter
    def electric_equipment_1_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_1_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_1_name`')

        self._data["Electric Equipment 1 Name"] = value

    @property
    def electric_equipment_2_name(self):
        """Get electric_equipment_2_name

        Returns:
            str: the value of `electric_equipment_2_name` or None if not set
        """
        return self._data["Electric Equipment 2 Name"]

    @electric_equipment_2_name.setter
    def electric_equipment_2_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_2_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_2_name`')

        self._data["Electric Equipment 2 Name"] = value

    @property
    def electric_equipment_3_name(self):
        """Get electric_equipment_3_name

        Returns:
            str: the value of `electric_equipment_3_name` or None if not set
        """
        return self._data["Electric Equipment 3 Name"]

    @electric_equipment_3_name.setter
    def electric_equipment_3_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_3_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_3_name`')

        self._data["Electric Equipment 3 Name"] = value

    @property
    def electric_equipment_4_name(self):
        """Get electric_equipment_4_name

        Returns:
            str: the value of `electric_equipment_4_name` or None if not set
        """
        return self._data["Electric Equipment 4 Name"]

    @electric_equipment_4_name.setter
    def electric_equipment_4_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_4_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_4_name`')

        self._data["Electric Equipment 4 Name"] = value

    @property
    def electric_equipment_5_name(self):
        """Get electric_equipment_5_name

        Returns:
            str: the value of `electric_equipment_5_name` or None if not set
        """
        return self._data["Electric Equipment 5 Name"]

    @electric_equipment_5_name.setter
    def electric_equipment_5_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_5_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_5_name`')

        self._data["Electric Equipment 5 Name"] = value

    @property
    def electric_equipment_6_name(self):
        """Get electric_equipment_6_name

        Returns:
            str: the value of `electric_equipment_6_name` or None if not set
        """
        return self._data["Electric Equipment 6 Name"]

    @electric_equipment_6_name.setter
    def electric_equipment_6_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_6_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_6_name`')

        self._data["Electric Equipment 6 Name"] = value

    @property
    def electric_equipment_7_name(self):
        """Get electric_equipment_7_name

        Returns:
            str: the value of `electric_equipment_7_name` or None if not set
        """
        return self._data["Electric Equipment 7 Name"]

    @electric_equipment_7_name.setter
    def electric_equipment_7_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_7_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_7_name`')

        self._data["Electric Equipment 7 Name"] = value

    @property
    def electric_equipment_8_name(self):
        """Get electric_equipment_8_name

        Returns:
            str: the value of `electric_equipment_8_name` or None if not set
        """
        return self._data["Electric Equipment 8 Name"]

    @electric_equipment_8_name.setter
    def electric_equipment_8_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_8_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_8_name`')

        self._data["Electric Equipment 8 Name"] = value

    @property
    def electric_equipment_9_name(self):
        """Get electric_equipment_9_name

        Returns:
            str: the value of `electric_equipment_9_name` or None if not set
        """
        return self._data["Electric Equipment 9 Name"]

    @electric_equipment_9_name.setter
    def electric_equipment_9_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_9_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_9_name`')

        self._data["Electric Equipment 9 Name"] = value

    @property
    def electric_equipment_10_name(self):
        """Get electric_equipment_10_name

        Returns:
            str: the value of `electric_equipment_10_name` or None if not set
        """
        return self._data["Electric Equipment 10 Name"]

    @electric_equipment_10_name.setter
    def electric_equipment_10_name(self, value=None):
        """  Corresponds to IDD Field `electric_equipment_10_name`
        Enter the name of an ElectricEquipment object.
        if ZoneList option is used on the ElectricEquipment object,
        a single equipment object from that assignment
        can be selected by entering <Zone Name><space><Global ElectricEquipment Object Name>.

        Args:
            value (str): value for IDD Field `electric_equipment_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_equipment_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_equipment_10_name`')

        self._data["Electric Equipment 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.limit_control))
        out.append(self._to_str(self.minimum_limit_duration))
        out.append(self._to_str(self.maximum_limit_fraction))
        out.append(self._to_str(self.limit_step_change))
        out.append(self._to_str(self.selection_control))
        out.append(self._to_str(self.rotation_duration))
        out.append(self._to_str(self.electric_equipment_1_name))
        out.append(self._to_str(self.electric_equipment_2_name))
        out.append(self._to_str(self.electric_equipment_3_name))
        out.append(self._to_str(self.electric_equipment_4_name))
        out.append(self._to_str(self.electric_equipment_5_name))
        out.append(self._to_str(self.electric_equipment_6_name))
        out.append(self._to_str(self.electric_equipment_7_name))
        out.append(self._to_str(self.electric_equipment_8_name))
        out.append(self._to_str(self.electric_equipment_9_name))
        out.append(self._to_str(self.electric_equipment_10_name))
        return ",".join(out)

class DemandManagerThermostats(object):
    """ Corresponds to IDD object `DemandManager:Thermostats`
        used for demand limiting ZoneControl:Thermostat objects.
    
    """
    internal_name = "DemandManager:Thermostats"
    field_count = 19
    required_fields = ["Name", "Reset Control", "Maximum Heating Setpoint Reset", "Maximum Cooling Setpoint Reset", "Selection Control", "Thermostat 1 Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `DemandManager:Thermostats`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Reset Control"] = None
        self._data["Minimum Reset Duration"] = None
        self._data["Maximum Heating Setpoint Reset"] = None
        self._data["Maximum Cooling Setpoint Reset"] = None
        self._data["Reset Step Change"] = None
        self._data["Selection Control"] = None
        self._data["Rotation Duration"] = None
        self._data["Thermostat 1 Name"] = None
        self._data["Thermostat 2 Name"] = None
        self._data["Thermostat 3 Name"] = None
        self._data["Thermostat 4 Name"] = None
        self._data["Thermostat 5 Name"] = None
        self._data["Thermostat 6 Name"] = None
        self._data["Thermostat 7 Name"] = None
        self._data["Thermostat 8 Name"] = None
        self._data["Thermostat 9 Name"] = None
        self._data["Thermostat 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reset_control = None
        else:
            self.reset_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_reset_duration = None
        else:
            self.minimum_reset_duration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_setpoint_reset = None
        else:
            self.maximum_heating_setpoint_reset = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cooling_setpoint_reset = None
        else:
            self.maximum_cooling_setpoint_reset = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reset_step_change = None
        else:
            self.reset_step_change = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.selection_control = None
        else:
            self.selection_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rotation_duration = None
        else:
            self.rotation_duration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_1_name = None
        else:
            self.thermostat_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_2_name = None
        else:
            self.thermostat_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_3_name = None
        else:
            self.thermostat_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_4_name = None
        else:
            self.thermostat_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_5_name = None
        else:
            self.thermostat_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_6_name = None
        else:
            self.thermostat_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_7_name = None
        else:
            self.thermostat_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_8_name = None
        else:
            self.thermostat_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_9_name = None
        else:
            self.thermostat_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermostat_10_name = None
        else:
            self.thermostat_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def reset_control(self):
        """Get reset_control

        Returns:
            str: the value of `reset_control` or None if not set
        """
        return self._data["Reset Control"]

    @reset_control.setter
    def reset_control(self, value=None):
        """  Corresponds to IDD Field `reset_control`

        Args:
            value (str): value for IDD Field `reset_control`
                Accepted values are:
                      - Off
                      - Fixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reset_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reset_control`')
            vals = set()
            vals.add("Off")
            vals.add("Fixed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reset_control`'.format(value))

        self._data["Reset Control"] = value

    @property
    def minimum_reset_duration(self):
        """Get minimum_reset_duration

        Returns:
            int: the value of `minimum_reset_duration` or None if not set
        """
        return self._data["Minimum Reset Duration"]

    @minimum_reset_duration.setter
    def minimum_reset_duration(self, value=None):
        """  Corresponds to IDD Field `minimum_reset_duration`
        If blank, duration defaults to the timestep

        Args:
            value (int): value for IDD Field `minimum_reset_duration`
                Units: minutes
                value > 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `minimum_reset_duration`'.format(value))
            if value <= 0:
                raise ValueError('value need to be greater 0 '
                                 'for field `minimum_reset_duration`')

        self._data["Minimum Reset Duration"] = value

    @property
    def maximum_heating_setpoint_reset(self):
        """Get maximum_heating_setpoint_reset

        Returns:
            float: the value of `maximum_heating_setpoint_reset` or None if not set
        """
        return self._data["Maximum Heating Setpoint Reset"]

    @maximum_heating_setpoint_reset.setter
    def maximum_heating_setpoint_reset(self, value=None):
        """  Corresponds to IDD Field `maximum_heating_setpoint_reset`

        Args:
            value (float): value for IDD Field `maximum_heating_setpoint_reset`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_setpoint_reset`'.format(value))

        self._data["Maximum Heating Setpoint Reset"] = value

    @property
    def maximum_cooling_setpoint_reset(self):
        """Get maximum_cooling_setpoint_reset

        Returns:
            float: the value of `maximum_cooling_setpoint_reset` or None if not set
        """
        return self._data["Maximum Cooling Setpoint Reset"]

    @maximum_cooling_setpoint_reset.setter
    def maximum_cooling_setpoint_reset(self, value=None):
        """  Corresponds to IDD Field `maximum_cooling_setpoint_reset`

        Args:
            value (float): value for IDD Field `maximum_cooling_setpoint_reset`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cooling_setpoint_reset`'.format(value))

        self._data["Maximum Cooling Setpoint Reset"] = value

    @property
    def reset_step_change(self):
        """Get reset_step_change

        Returns:
            float: the value of `reset_step_change` or None if not set
        """
        return self._data["Reset Step Change"]

    @reset_step_change.setter
    def reset_step_change(self, value=None):
        """  Corresponds to IDD Field `reset_step_change`
        Not yet implemented

        Args:
            value (float): value for IDD Field `reset_step_change`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reset_step_change`'.format(value))

        self._data["Reset Step Change"] = value

    @property
    def selection_control(self):
        """Get selection_control

        Returns:
            str: the value of `selection_control` or None if not set
        """
        return self._data["Selection Control"]

    @selection_control.setter
    def selection_control(self, value=None):
        """  Corresponds to IDD Field `selection_control`

        Args:
            value (str): value for IDD Field `selection_control`
                Accepted values are:
                      - All
                      - RotateMany
                      - RotateOne
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `selection_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `selection_control`')
            vals = set()
            vals.add("All")
            vals.add("RotateMany")
            vals.add("RotateOne")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `selection_control`'.format(value))

        self._data["Selection Control"] = value

    @property
    def rotation_duration(self):
        """Get rotation_duration

        Returns:
            int: the value of `rotation_duration` or None if not set
        """
        return self._data["Rotation Duration"]

    @rotation_duration.setter
    def rotation_duration(self, value=None):
        """  Corresponds to IDD Field `rotation_duration`
        If blank, duration defaults to the timestep

        Args:
            value (int): value for IDD Field `rotation_duration`
                Units: minutes
                value >= 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `rotation_duration`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `rotation_duration`')

        self._data["Rotation Duration"] = value

    @property
    def thermostat_1_name(self):
        """Get thermostat_1_name

        Returns:
            str: the value of `thermostat_1_name` or None if not set
        """
        return self._data["Thermostat 1 Name"]

    @thermostat_1_name.setter
    def thermostat_1_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_1_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_1_name`')

        self._data["Thermostat 1 Name"] = value

    @property
    def thermostat_2_name(self):
        """Get thermostat_2_name

        Returns:
            str: the value of `thermostat_2_name` or None if not set
        """
        return self._data["Thermostat 2 Name"]

    @thermostat_2_name.setter
    def thermostat_2_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_2_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_2_name`')

        self._data["Thermostat 2 Name"] = value

    @property
    def thermostat_3_name(self):
        """Get thermostat_3_name

        Returns:
            str: the value of `thermostat_3_name` or None if not set
        """
        return self._data["Thermostat 3 Name"]

    @thermostat_3_name.setter
    def thermostat_3_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_3_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_3_name`')

        self._data["Thermostat 3 Name"] = value

    @property
    def thermostat_4_name(self):
        """Get thermostat_4_name

        Returns:
            str: the value of `thermostat_4_name` or None if not set
        """
        return self._data["Thermostat 4 Name"]

    @thermostat_4_name.setter
    def thermostat_4_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_4_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_4_name`')

        self._data["Thermostat 4 Name"] = value

    @property
    def thermostat_5_name(self):
        """Get thermostat_5_name

        Returns:
            str: the value of `thermostat_5_name` or None if not set
        """
        return self._data["Thermostat 5 Name"]

    @thermostat_5_name.setter
    def thermostat_5_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_5_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_5_name`')

        self._data["Thermostat 5 Name"] = value

    @property
    def thermostat_6_name(self):
        """Get thermostat_6_name

        Returns:
            str: the value of `thermostat_6_name` or None if not set
        """
        return self._data["Thermostat 6 Name"]

    @thermostat_6_name.setter
    def thermostat_6_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_6_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_6_name`')

        self._data["Thermostat 6 Name"] = value

    @property
    def thermostat_7_name(self):
        """Get thermostat_7_name

        Returns:
            str: the value of `thermostat_7_name` or None if not set
        """
        return self._data["Thermostat 7 Name"]

    @thermostat_7_name.setter
    def thermostat_7_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_7_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_7_name`')

        self._data["Thermostat 7 Name"] = value

    @property
    def thermostat_8_name(self):
        """Get thermostat_8_name

        Returns:
            str: the value of `thermostat_8_name` or None if not set
        """
        return self._data["Thermostat 8 Name"]

    @thermostat_8_name.setter
    def thermostat_8_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_8_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_8_name`')

        self._data["Thermostat 8 Name"] = value

    @property
    def thermostat_9_name(self):
        """Get thermostat_9_name

        Returns:
            str: the value of `thermostat_9_name` or None if not set
        """
        return self._data["Thermostat 9 Name"]

    @thermostat_9_name.setter
    def thermostat_9_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_9_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_9_name`')

        self._data["Thermostat 9 Name"] = value

    @property
    def thermostat_10_name(self):
        """Get thermostat_10_name

        Returns:
            str: the value of `thermostat_10_name` or None if not set
        """
        return self._data["Thermostat 10 Name"]

    @thermostat_10_name.setter
    def thermostat_10_name(self, value=None):
        """  Corresponds to IDD Field `thermostat_10_name`
        Enter the name of a ZoneControl:Thermostat object.
        if ZoneList option is used on the ZoneControl:Thermostat object,
        a single thermostat object from that assignment
        can be selected by entering <Zone Name><space><Global Thermostat Object Name>.

        Args:
            value (str): value for IDD Field `thermostat_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermostat_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermostat_10_name`')

        self._data["Thermostat 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.reset_control))
        out.append(self._to_str(self.minimum_reset_duration))
        out.append(self._to_str(self.maximum_heating_setpoint_reset))
        out.append(self._to_str(self.maximum_cooling_setpoint_reset))
        out.append(self._to_str(self.reset_step_change))
        out.append(self._to_str(self.selection_control))
        out.append(self._to_str(self.rotation_duration))
        out.append(self._to_str(self.thermostat_1_name))
        out.append(self._to_str(self.thermostat_2_name))
        out.append(self._to_str(self.thermostat_3_name))
        out.append(self._to_str(self.thermostat_4_name))
        out.append(self._to_str(self.thermostat_5_name))
        out.append(self._to_str(self.thermostat_6_name))
        out.append(self._to_str(self.thermostat_7_name))
        out.append(self._to_str(self.thermostat_8_name))
        out.append(self._to_str(self.thermostat_9_name))
        out.append(self._to_str(self.thermostat_10_name))
        return ",".join(out)

class GeneratorInternalCombustionEngine(object):
    """ Corresponds to IDD object `Generator:InternalCombustionEngine`
        This generator model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Engine performance
        curves are generated by fitting catalog data to second order
        polynomial equations.  Three sets of coefficients are required.
    
    """
    internal_name = "Generator:InternalCombustionEngine"
    field_count = 21
    required_fields = ["Name", "Fuel Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:InternalCombustionEngine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Power Output"] = None
        self._data["Electric Circuit Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Shaft Power Curve Name"] = None
        self._data["Jacket Heat Recovery Curve Name"] = None
        self._data["Lube Heat Recovery Curve Name"] = None
        self._data["Total Exhaust Energy Curve Name"] = None
        self._data["Exhaust Temperature Curve Name"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Minimum Exhaust Temperature"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Fuel Type"] = None
        self._data["Heat Recovery Maximum Temperature"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_power_output = None
        else:
            self.rated_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_circuit_node_name = None
        else:
            self.electric_circuit_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shaft_power_curve_name = None
        else:
            self.shaft_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.jacket_heat_recovery_curve_name = None
        else:
            self.jacket_heat_recovery_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lube_heat_recovery_curve_name = None
        else:
            self.lube_heat_recovery_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_exhaust_energy_curve_name = None
        else:
            self.total_exhaust_energy_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_temperature_curve_name = None
        else:
            self.exhaust_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_minimum_exhaust_temperature = None
        else:
            self.design_minimum_exhaust_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_maximum_temperature = None
        else:
            self.heat_recovery_maximum_temperature = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_power_output(self):
        """Get rated_power_output

        Returns:
            float: the value of `rated_power_output` or None if not set
        """
        return self._data["Rated Power Output"]

    @rated_power_output.setter
    def rated_power_output(self, value=None):
        """  Corresponds to IDD Field `rated_power_output`

        Args:
            value (float): value for IDD Field `rated_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_power_output`'.format(value))

        self._data["Rated Power Output"] = value

    @property
    def electric_circuit_node_name(self):
        """Get electric_circuit_node_name

        Returns:
            str: the value of `electric_circuit_node_name` or None if not set
        """
        return self._data["Electric Circuit Node Name"]

    @electric_circuit_node_name.setter
    def electric_circuit_node_name(self, value=None):
        """  Corresponds to IDD Field `electric_circuit_node_name`

        Args:
            value (str): value for IDD Field `electric_circuit_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_circuit_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_circuit_node_name`')

        self._data["Electric Circuit Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))

        self._data["Optimum Part Load Ratio"] = value

    @property
    def shaft_power_curve_name(self):
        """Get shaft_power_curve_name

        Returns:
            str: the value of `shaft_power_curve_name` or None if not set
        """
        return self._data["Shaft Power Curve Name"]

    @shaft_power_curve_name.setter
    def shaft_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `shaft_power_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `shaft_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `shaft_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shaft_power_curve_name`')

        self._data["Shaft Power Curve Name"] = value

    @property
    def jacket_heat_recovery_curve_name(self):
        """Get jacket_heat_recovery_curve_name

        Returns:
            str: the value of `jacket_heat_recovery_curve_name` or None if not set
        """
        return self._data["Jacket Heat Recovery Curve Name"]

    @jacket_heat_recovery_curve_name.setter
    def jacket_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `jacket_heat_recovery_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `jacket_heat_recovery_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `jacket_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `jacket_heat_recovery_curve_name`')

        self._data["Jacket Heat Recovery Curve Name"] = value

    @property
    def lube_heat_recovery_curve_name(self):
        """Get lube_heat_recovery_curve_name

        Returns:
            str: the value of `lube_heat_recovery_curve_name` or None if not set
        """
        return self._data["Lube Heat Recovery Curve Name"]

    @lube_heat_recovery_curve_name.setter
    def lube_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `lube_heat_recovery_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `lube_heat_recovery_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lube_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lube_heat_recovery_curve_name`')

        self._data["Lube Heat Recovery Curve Name"] = value

    @property
    def total_exhaust_energy_curve_name(self):
        """Get total_exhaust_energy_curve_name

        Returns:
            str: the value of `total_exhaust_energy_curve_name` or None if not set
        """
        return self._data["Total Exhaust Energy Curve Name"]

    @total_exhaust_energy_curve_name.setter
    def total_exhaust_energy_curve_name(self, value=None):
        """  Corresponds to IDD Field `total_exhaust_energy_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `total_exhaust_energy_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_exhaust_energy_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_exhaust_energy_curve_name`')

        self._data["Total Exhaust Energy Curve Name"] = value

    @property
    def exhaust_temperature_curve_name(self):
        """Get exhaust_temperature_curve_name

        Returns:
            str: the value of `exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Temperature Curve Name"]

    @exhaust_temperature_curve_name.setter
    def exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `exhaust_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_temperature_curve_name`')

        self._data["Exhaust Temperature Curve Name"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_ufactor_times_area_curve`
        curve = C1 * Generator Rated Power Output**C2

        Args:
            value (float): value for IDD Field `coefficient_1_of_ufactor_times_area_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))

        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_ufactor_times_area_curve`
        curve = C1 * Generator Rated Power Output**C2
        typical value .9

        Args:
            value (float): value for IDD Field `coefficient_2_of_ufactor_times_area_curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')

        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_exhaust_flow_per_unit_of_power_output`

        Args:
            value (float): value for IDD Field `maximum_exhaust_flow_per_unit_of_power_output`
                Units: (kg/s)/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))

        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_minimum_exhaust_temperature(self):
        """Get design_minimum_exhaust_temperature

        Returns:
            float: the value of `design_minimum_exhaust_temperature` or None if not set
        """
        return self._data["Design Minimum Exhaust Temperature"]

    @design_minimum_exhaust_temperature.setter
    def design_minimum_exhaust_temperature(self, value=None):
        """  Corresponds to IDD Field `design_minimum_exhaust_temperature`

        Args:
            value (float): value for IDD Field `design_minimum_exhaust_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_minimum_exhaust_temperature`'.format(value))

        self._data["Design Minimum Exhaust Temperature"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))

        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        if non-zero, then inlet, outlet nodes must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="Diesel"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: Diesel
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def heat_recovery_maximum_temperature(self):
        """Get heat_recovery_maximum_temperature

        Returns:
            float: the value of `heat_recovery_maximum_temperature` or None if not set
        """
        return self._data["Heat Recovery Maximum Temperature"]

    @heat_recovery_maximum_temperature.setter
    def heat_recovery_maximum_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `heat_recovery_maximum_temperature`

        Args:
            value (float): value for IDD Field `heat_recovery_maximum_temperature`
                Units: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_maximum_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_maximum_temperature`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `heat_recovery_maximum_temperature`')

        self._data["Heat Recovery Maximum Temperature"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_power_output))
        out.append(self._to_str(self.electric_circuit_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.shaft_power_curve_name))
        out.append(self._to_str(self.jacket_heat_recovery_curve_name))
        out.append(self._to_str(self.lube_heat_recovery_curve_name))
        out.append(self._to_str(self.total_exhaust_energy_curve_name))
        out.append(self._to_str(self.exhaust_temperature_curve_name))
        out.append(self._to_str(self.coefficient_1_of_ufactor_times_area_curve))
        out.append(self._to_str(self.coefficient_2_of_ufactor_times_area_curve))
        out.append(self._to_str(self.maximum_exhaust_flow_per_unit_of_power_output))
        out.append(self._to_str(self.design_minimum_exhaust_temperature))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.heat_recovery_maximum_temperature))
        return ",".join(out)

class GeneratorCombustionTurbine(object):
    """ Corresponds to IDD object `Generator:CombustionTurbine`
        This generator model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Generator performance
        curves are generated by fitting catalog data to second order
        polynomial equations.  Three sets of coefficients are required.
    
    """
    internal_name = "Generator:CombustionTurbine"
    field_count = 24
    required_fields = ["Name", "Fuel Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:CombustionTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Power Output"] = None
        self._data["Electric Circuit Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Part Load Based Fuel Input Curve Name"] = None
        self._data["Temperature Based Fuel Input Curve Name"] = None
        self._data["Exhaust Flow Curve Name"] = None
        self._data["Part Load Based Exhaust Temperature Curve Name"] = None
        self._data["Temperature Based Exhaust Temperature Curve Name"] = None
        self._data["Heat Recovery Lube Energy Curve Name"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Minimum Exhaust Temperature"] = None
        self._data["Design Air Inlet Temperature"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Fuel Type"] = None
        self._data["Heat Recovery Maximum Temperature"] = None
        self._data["Outdoor Air Inlet Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_power_output = None
        else:
            self.rated_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_circuit_node_name = None
        else:
            self.electric_circuit_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.part_load_based_fuel_input_curve_name = None
        else:
            self.part_load_based_fuel_input_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_based_fuel_input_curve_name = None
        else:
            self.temperature_based_fuel_input_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_flow_curve_name = None
        else:
            self.exhaust_flow_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.part_load_based_exhaust_temperature_curve_name = None
        else:
            self.part_load_based_exhaust_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_based_exhaust_temperature_curve_name = None
        else:
            self.temperature_based_exhaust_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_lube_energy_curve_name = None
        else:
            self.heat_recovery_lube_energy_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_minimum_exhaust_temperature = None
        else:
            self.design_minimum_exhaust_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_air_inlet_temperature = None
        else:
            self.design_air_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_maximum_temperature = None
        else:
            self.heat_recovery_maximum_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_inlet_node_name = None
        else:
            self.outdoor_air_inlet_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_power_output(self):
        """Get rated_power_output

        Returns:
            float: the value of `rated_power_output` or None if not set
        """
        return self._data["Rated Power Output"]

    @rated_power_output.setter
    def rated_power_output(self, value=None):
        """  Corresponds to IDD Field `rated_power_output`

        Args:
            value (float): value for IDD Field `rated_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_power_output`'.format(value))

        self._data["Rated Power Output"] = value

    @property
    def electric_circuit_node_name(self):
        """Get electric_circuit_node_name

        Returns:
            str: the value of `electric_circuit_node_name` or None if not set
        """
        return self._data["Electric Circuit Node Name"]

    @electric_circuit_node_name.setter
    def electric_circuit_node_name(self, value=None):
        """  Corresponds to IDD Field `electric_circuit_node_name`

        Args:
            value (str): value for IDD Field `electric_circuit_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_circuit_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_circuit_node_name`')

        self._data["Electric Circuit Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))

        self._data["Optimum Part Load Ratio"] = value

    @property
    def part_load_based_fuel_input_curve_name(self):
        """Get part_load_based_fuel_input_curve_name

        Returns:
            str: the value of `part_load_based_fuel_input_curve_name` or None if not set
        """
        return self._data["Part Load Based Fuel Input Curve Name"]

    @part_load_based_fuel_input_curve_name.setter
    def part_load_based_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `part_load_based_fuel_input_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output
        this curve is multiplied to the Temperature Based Fuel Input Curve
        to determine Fuel Energy In

        Args:
            value (str): value for IDD Field `part_load_based_fuel_input_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_based_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_based_fuel_input_curve_name`')

        self._data["Part Load Based Fuel Input Curve Name"] = value

    @property
    def temperature_based_fuel_input_curve_name(self):
        """Get temperature_based_fuel_input_curve_name

        Returns:
            str: the value of `temperature_based_fuel_input_curve_name` or None if not set
        """
        return self._data["Temperature Based Fuel Input Curve Name"]

    @temperature_based_fuel_input_curve_name.setter
    def temperature_based_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `temperature_based_fuel_input_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T
        this curve is multiplied to the Part Load Based Fuel Input Curve
        to determine Fuel Energy In

        Args:
            value (str): value for IDD Field `temperature_based_fuel_input_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_based_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_based_fuel_input_curve_name`')

        self._data["Temperature Based Fuel Input Curve Name"] = value

    @property
    def exhaust_flow_curve_name(self):
        """Get exhaust_flow_curve_name

        Returns:
            str: the value of `exhaust_flow_curve_name` or None if not set
        """
        return self._data["Exhaust Flow Curve Name"]

    @exhaust_flow_curve_name.setter
    def exhaust_flow_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_flow_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T

        Args:
            value (str): value for IDD Field `exhaust_flow_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_flow_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_flow_curve_name`')

        self._data["Exhaust Flow Curve Name"] = value

    @property
    def part_load_based_exhaust_temperature_curve_name(self):
        """Get part_load_based_exhaust_temperature_curve_name

        Returns:
            str: the value of `part_load_based_exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Part Load Based Exhaust Temperature Curve Name"]

    @part_load_based_exhaust_temperature_curve_name.setter
    def part_load_based_exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `part_load_based_exhaust_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output
        this curve is multiplied to the Temperature Based Exhaust Temperature Curve
        to determine Exhaust Temperature

        Args:
            value (str): value for IDD Field `part_load_based_exhaust_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_based_exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_based_exhaust_temperature_curve_name`')

        self._data["Part Load Based Exhaust Temperature Curve Name"] = value

    @property
    def temperature_based_exhaust_temperature_curve_name(self):
        """Get temperature_based_exhaust_temperature_curve_name

        Returns:
            str: the value of `temperature_based_exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Temperature Based Exhaust Temperature Curve Name"]

    @temperature_based_exhaust_temperature_curve_name.setter
    def temperature_based_exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `temperature_based_exhaust_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T
        this curve is multiplied to the Part Load Based Exhaust Temperatuer Curve
        to determine Exhaust Temperature

        Args:
            value (str): value for IDD Field `temperature_based_exhaust_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_based_exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_based_exhaust_temperature_curve_name`')

        self._data["Temperature Based Exhaust Temperature Curve Name"] = value

    @property
    def heat_recovery_lube_energy_curve_name(self):
        """Get heat_recovery_lube_energy_curve_name

        Returns:
            str: the value of `heat_recovery_lube_energy_curve_name` or None if not set
        """
        return self._data["Heat Recovery Lube Energy Curve Name"]

    @heat_recovery_lube_energy_curve_name.setter
    def heat_recovery_lube_energy_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_lube_energy_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `heat_recovery_lube_energy_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_lube_energy_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_lube_energy_curve_name`')

        self._data["Heat Recovery Lube Energy Curve Name"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_ufactor_times_area_curve`
        curve = C1 * Rated Power Output**C2

        Args:
            value (float): value for IDD Field `coefficient_1_of_ufactor_times_area_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))

        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_ufactor_times_area_curve`
        curve = C1 * Rated Power Output**C2
        typical value .9

        Args:
            value (float): value for IDD Field `coefficient_2_of_ufactor_times_area_curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')

        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_exhaust_flow_per_unit_of_power_output`

        Args:
            value (float): value for IDD Field `maximum_exhaust_flow_per_unit_of_power_output`
                Units: (Kg/s)/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))

        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_minimum_exhaust_temperature(self):
        """Get design_minimum_exhaust_temperature

        Returns:
            float: the value of `design_minimum_exhaust_temperature` or None if not set
        """
        return self._data["Design Minimum Exhaust Temperature"]

    @design_minimum_exhaust_temperature.setter
    def design_minimum_exhaust_temperature(self, value=None):
        """  Corresponds to IDD Field `design_minimum_exhaust_temperature`

        Args:
            value (float): value for IDD Field `design_minimum_exhaust_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_minimum_exhaust_temperature`'.format(value))

        self._data["Design Minimum Exhaust Temperature"] = value

    @property
    def design_air_inlet_temperature(self):
        """Get design_air_inlet_temperature

        Returns:
            float: the value of `design_air_inlet_temperature` or None if not set
        """
        return self._data["Design Air Inlet Temperature"]

    @design_air_inlet_temperature.setter
    def design_air_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_air_inlet_temperature`

        Args:
            value (float): value for IDD Field `design_air_inlet_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_air_inlet_temperature`'.format(value))

        self._data["Design Air Inlet Temperature"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))

        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        if non-zero, then inlet, outlet nodes must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def heat_recovery_maximum_temperature(self):
        """Get heat_recovery_maximum_temperature

        Returns:
            float: the value of `heat_recovery_maximum_temperature` or None if not set
        """
        return self._data["Heat Recovery Maximum Temperature"]

    @heat_recovery_maximum_temperature.setter
    def heat_recovery_maximum_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `heat_recovery_maximum_temperature`

        Args:
            value (float): value for IDD Field `heat_recovery_maximum_temperature`
                Units: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_maximum_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_maximum_temperature`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `heat_recovery_maximum_temperature`')

        self._data["Heat Recovery Maximum Temperature"] = value

    @property
    def outdoor_air_inlet_node_name(self):
        """Get outdoor_air_inlet_node_name

        Returns:
            str: the value of `outdoor_air_inlet_node_name` or None if not set
        """
        return self._data["Outdoor Air Inlet Node Name"]

    @outdoor_air_inlet_node_name.setter
    def outdoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_inlet_node_name`
        Enter the name of an outdoor air node

        Args:
            value (str): value for IDD Field `outdoor_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_inlet_node_name`')

        self._data["Outdoor Air Inlet Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_power_output))
        out.append(self._to_str(self.electric_circuit_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.part_load_based_fuel_input_curve_name))
        out.append(self._to_str(self.temperature_based_fuel_input_curve_name))
        out.append(self._to_str(self.exhaust_flow_curve_name))
        out.append(self._to_str(self.part_load_based_exhaust_temperature_curve_name))
        out.append(self._to_str(self.temperature_based_exhaust_temperature_curve_name))
        out.append(self._to_str(self.heat_recovery_lube_energy_curve_name))
        out.append(self._to_str(self.coefficient_1_of_ufactor_times_area_curve))
        out.append(self._to_str(self.coefficient_2_of_ufactor_times_area_curve))
        out.append(self._to_str(self.maximum_exhaust_flow_per_unit_of_power_output))
        out.append(self._to_str(self.design_minimum_exhaust_temperature))
        out.append(self._to_str(self.design_air_inlet_temperature))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.heat_recovery_maximum_temperature))
        out.append(self._to_str(self.outdoor_air_inlet_node_name))
        return ",".join(out)

class GeneratorMicroTurbine(object):
    """ Corresponds to IDD object `Generator:MicroTurbine`
        MicroTurbine generators are small combustion turbines (e.g., 25kW to 500kW). The model
        calculates electrical power output, fuel use, standby and ancillary power.
        Energy recovery from exhaust air can be used to heat water.
    
    """
    internal_name = "Generator:MicroTurbine"
    field_count = 39
    required_fields = ["Name", "Reference Electrical Power Output", "Reference Electrical Efficiency Using Lower Heating Value", "Electrical Power Function of Temperature and Elevation Curve Name", "Electrical Efficiency Function of Temperature Curve Name", "Electrical Efficiency Function of Part Load Ratio Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:MicroTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Electrical Power Output"] = None
        self._data["Minimum Full Load Electrical Power Output"] = None
        self._data["Maximum Full Load Electrical Power Output"] = None
        self._data["Reference Electrical Efficiency Using Lower Heating Value"] = None
        self._data["Reference Combustion Air Inlet Temperature"] = None
        self._data["Reference Combustion Air Inlet Humidity Ratio"] = None
        self._data["Reference Elevation"] = None
        self._data["Electrical Power Function of Temperature and Elevation Curve Name"] = None
        self._data["Electrical Efficiency Function of Temperature Curve Name"] = None
        self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"] = None
        self._data["Fuel Type"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Fuel Lower Heating Value"] = None
        self._data["Standby Power"] = None
        self._data["Ancillary Power"] = None
        self._data["Ancillary Power Function of Fuel Input Curve Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Reference Thermal Efficiency Using Lower Heat Value"] = None
        self._data["Reference Inlet Water Temperature"] = None
        self._data["Heat Recovery Water Flow Operating Mode"] = None
        self._data["Reference Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"] = None
        self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"] = None
        self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"] = None
        self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"] = None
        self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"] = None
        self._data["Minimum Heat Recovery Water Flow Rate"] = None
        self._data["Maximum Heat Recovery Water Flow Rate"] = None
        self._data["Maximum Heat Recovery Water Temperature"] = None
        self._data["Combustion Air Inlet Node Name"] = None
        self._data["Combustion Air Outlet Node Name"] = None
        self._data["Reference Exhaust Air Mass Flow Rate"] = None
        self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"] = None
        self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"] = None
        self._data["Nominal Exhaust Air Outlet Temperature"] = None
        self._data["Exhaust Air Temperature Function of Temperature Curve Name"] = None
        self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_electrical_power_output = None
        else:
            self.reference_electrical_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_full_load_electrical_power_output = None
        else:
            self.minimum_full_load_electrical_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_full_load_electrical_power_output = None
        else:
            self.maximum_full_load_electrical_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_electrical_efficiency_using_lower_heating_value = None
        else:
            self.reference_electrical_efficiency_using_lower_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_combustion_air_inlet_temperature = None
        else:
            self.reference_combustion_air_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_combustion_air_inlet_humidity_ratio = None
        else:
            self.reference_combustion_air_inlet_humidity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_elevation = None
        else:
            self.reference_elevation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_power_function_of_temperature_and_elevation_curve_name = None
        else:
            self.electrical_power_function_of_temperature_and_elevation_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_efficiency_function_of_temperature_curve_name = None
        else:
            self.electrical_efficiency_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_efficiency_function_of_part_load_ratio_curve_name = None
        else:
            self.electrical_efficiency_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_lower_heating_value = None
        else:
            self.fuel_lower_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.standby_power = None
        else:
            self.standby_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancillary_power = None
        else:
            self.ancillary_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancillary_power_function_of_fuel_input_curve_name = None
        else:
            self.ancillary_power_function_of_fuel_input_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_thermal_efficiency_using_lower_heat_value = None
        else:
            self.reference_thermal_efficiency_using_lower_heat_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_inlet_water_temperature = None
        else:
            self.reference_inlet_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_flow_operating_mode = None
        else:
            self.heat_recovery_water_flow_operating_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_heat_recovery_water_flow_rate = None
        else:
            self.reference_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name = None
        else:
            self.heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_efficiency_function_of_temperature_and_elevation_curve_name = None
        else:
            self.thermal_efficiency_function_of_temperature_and_elevation_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_part_load_ratio_curve_name = None
        else:
            self.heat_recovery_rate_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_inlet_water_temperature_curve_name = None
        else:
            self.heat_recovery_rate_function_of_inlet_water_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_water_flow_rate_curve_name = None
        else:
            self.heat_recovery_rate_function_of_water_flow_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_heat_recovery_water_flow_rate = None
        else:
            self.minimum_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heat_recovery_water_flow_rate = None
        else:
            self.maximum_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heat_recovery_water_temperature = None
        else:
            self.maximum_heat_recovery_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.combustion_air_inlet_node_name = None
        else:
            self.combustion_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.combustion_air_outlet_node_name = None
        else:
            self.combustion_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_exhaust_air_mass_flow_rate = None
        else:
            self.reference_exhaust_air_mass_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_flow_rate_function_of_temperature_curve_name = None
        else:
            self.exhaust_air_flow_rate_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_flow_rate_function_of_part_load_ratio_curve_name = None
        else:
            self.exhaust_air_flow_rate_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_exhaust_air_outlet_temperature = None
        else:
            self.nominal_exhaust_air_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_temperature_function_of_temperature_curve_name = None
        else:
            self.exhaust_air_temperature_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_temperature_function_of_part_load_ratio_curve_name = None
        else:
            self.exhaust_air_temperature_function_of_part_load_ratio_curve_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reference_electrical_power_output(self):
        """Get reference_electrical_power_output

        Returns:
            float: the value of `reference_electrical_power_output` or None if not set
        """
        return self._data["Reference Electrical Power Output"]

    @reference_electrical_power_output.setter
    def reference_electrical_power_output(self, value=None):
        """  Corresponds to IDD Field `reference_electrical_power_output`

        Args:
            value (float): value for IDD Field `reference_electrical_power_output`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_electrical_power_output`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_electrical_power_output`')

        self._data["Reference Electrical Power Output"] = value

    @property
    def minimum_full_load_electrical_power_output(self):
        """Get minimum_full_load_electrical_power_output

        Returns:
            float: the value of `minimum_full_load_electrical_power_output` or None if not set
        """
        return self._data["Minimum Full Load Electrical Power Output"]

    @minimum_full_load_electrical_power_output.setter
    def minimum_full_load_electrical_power_output(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_full_load_electrical_power_output`

        Args:
            value (float): value for IDD Field `minimum_full_load_electrical_power_output`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_full_load_electrical_power_output`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_full_load_electrical_power_output`')

        self._data["Minimum Full Load Electrical Power Output"] = value

    @property
    def maximum_full_load_electrical_power_output(self):
        """Get maximum_full_load_electrical_power_output

        Returns:
            float: the value of `maximum_full_load_electrical_power_output` or None if not set
        """
        return self._data["Maximum Full Load Electrical Power Output"]

    @maximum_full_load_electrical_power_output.setter
    def maximum_full_load_electrical_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_full_load_electrical_power_output`
        If left blank, Maximum Full Load Electrical Power Output will be set
        equal to the Reference Electrical Power Output.

        Args:
            value (float): value for IDD Field `maximum_full_load_electrical_power_output`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_full_load_electrical_power_output`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_full_load_electrical_power_output`')

        self._data["Maximum Full Load Electrical Power Output"] = value

    @property
    def reference_electrical_efficiency_using_lower_heating_value(self):
        """Get reference_electrical_efficiency_using_lower_heating_value

        Returns:
            float: the value of `reference_electrical_efficiency_using_lower_heating_value` or None if not set
        """
        return self._data["Reference Electrical Efficiency Using Lower Heating Value"]

    @reference_electrical_efficiency_using_lower_heating_value.setter
    def reference_electrical_efficiency_using_lower_heating_value(self, value=None):
        """  Corresponds to IDD Field `reference_electrical_efficiency_using_lower_heating_value`
        Electric power output divided by fuel energy input (LHV basis)
        at reference conditions.

        Args:
            value (float): value for IDD Field `reference_electrical_efficiency_using_lower_heating_value`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`')

        self._data["Reference Electrical Efficiency Using Lower Heating Value"] = value

    @property
    def reference_combustion_air_inlet_temperature(self):
        """Get reference_combustion_air_inlet_temperature

        Returns:
            float: the value of `reference_combustion_air_inlet_temperature` or None if not set
        """
        return self._data["Reference Combustion Air Inlet Temperature"]

    @reference_combustion_air_inlet_temperature.setter
    def reference_combustion_air_inlet_temperature(self, value=15.0 ):
        """  Corresponds to IDD Field `reference_combustion_air_inlet_temperature`

        Args:
            value (float): value for IDD Field `reference_combustion_air_inlet_temperature`
                Units: C
                Default value: 15.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_combustion_air_inlet_temperature`'.format(value))

        self._data["Reference Combustion Air Inlet Temperature"] = value

    @property
    def reference_combustion_air_inlet_humidity_ratio(self):
        """Get reference_combustion_air_inlet_humidity_ratio

        Returns:
            float: the value of `reference_combustion_air_inlet_humidity_ratio` or None if not set
        """
        return self._data["Reference Combustion Air Inlet Humidity Ratio"]

    @reference_combustion_air_inlet_humidity_ratio.setter
    def reference_combustion_air_inlet_humidity_ratio(self, value=0.00638 ):
        """  Corresponds to IDD Field `reference_combustion_air_inlet_humidity_ratio`

        Args:
            value (float): value for IDD Field `reference_combustion_air_inlet_humidity_ratio`
                Units: kgWater/kgDryAir
                Default value: 0.00638
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_combustion_air_inlet_humidity_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_combustion_air_inlet_humidity_ratio`')

        self._data["Reference Combustion Air Inlet Humidity Ratio"] = value

    @property
    def reference_elevation(self):
        """Get reference_elevation

        Returns:
            float: the value of `reference_elevation` or None if not set
        """
        return self._data["Reference Elevation"]

    @reference_elevation.setter
    def reference_elevation(self, value=0.0 ):
        """  Corresponds to IDD Field `reference_elevation`

        Args:
            value (float): value for IDD Field `reference_elevation`
                Units: m
                Default value: 0.0
                value >= -300.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_elevation`'.format(value))
            if value < -300.0:
                raise ValueError('value need to be greater or equal -300.0 '
                                 'for field `reference_elevation`')

        self._data["Reference Elevation"] = value

    @property
    def electrical_power_function_of_temperature_and_elevation_curve_name(self):
        """Get electrical_power_function_of_temperature_and_elevation_curve_name

        Returns:
            str: the value of `electrical_power_function_of_temperature_and_elevation_curve_name` or None if not set
        """
        return self._data["Electrical Power Function of Temperature and Elevation Curve Name"]

    @electrical_power_function_of_temperature_and_elevation_curve_name.setter
    def electrical_power_function_of_temperature_and_elevation_curve_name(self, value=None):
        """  Corresponds to IDD Field `electrical_power_function_of_temperature_and_elevation_curve_name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev
        T = combustion air inlet temperature (C)
        Elev = elevation (m)

        Args:
            value (str): value for IDD Field `electrical_power_function_of_temperature_and_elevation_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_power_function_of_temperature_and_elevation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_power_function_of_temperature_and_elevation_curve_name`')

        self._data["Electrical Power Function of Temperature and Elevation Curve Name"] = value

    @property
    def electrical_efficiency_function_of_temperature_curve_name(self):
        """Get electrical_efficiency_function_of_temperature_curve_name

        Returns:
            str: the value of `electrical_efficiency_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Function of Temperature Curve Name"]

    @electrical_efficiency_function_of_temperature_curve_name.setter
    def electrical_efficiency_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `electrical_efficiency_function_of_temperature_curve_name`
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)

        Args:
            value (str): value for IDD Field `electrical_efficiency_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_efficiency_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_function_of_temperature_curve_name`')

        self._data["Electrical Efficiency Function of Temperature Curve Name"] = value

    @property
    def electrical_efficiency_function_of_part_load_ratio_curve_name(self):
        """Get electrical_efficiency_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electrical_efficiency_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"]

    @electrical_efficiency_function_of_part_load_ratio_curve_name.setter
    def electrical_efficiency_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `electrical_efficiency_function_of_part_load_ratio_curve_name`
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions

        Args:
            value (str): value for IDD Field `electrical_efficiency_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_efficiency_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_function_of_part_load_ratio_curve_name`')

        self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=50000.0 ):
        """  Corresponds to IDD Field `fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Units: kJ/kg
                Default value: 50000.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fuel_higher_heating_value`')

        self._data["Fuel Higher Heating Value"] = value

    @property
    def fuel_lower_heating_value(self):
        """Get fuel_lower_heating_value

        Returns:
            float: the value of `fuel_lower_heating_value` or None if not set
        """
        return self._data["Fuel Lower Heating Value"]

    @fuel_lower_heating_value.setter
    def fuel_lower_heating_value(self, value=45450.0 ):
        """  Corresponds to IDD Field `fuel_lower_heating_value`

        Args:
            value (float): value for IDD Field `fuel_lower_heating_value`
                Units: kJ/kg
                Default value: 45450.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_lower_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fuel_lower_heating_value`')

        self._data["Fuel Lower Heating Value"] = value

    @property
    def standby_power(self):
        """Get standby_power

        Returns:
            float: the value of `standby_power` or None if not set
        """
        return self._data["Standby Power"]

    @standby_power.setter
    def standby_power(self, value=0.0 ):
        """  Corresponds to IDD Field `standby_power`
        Electric power consumed when the generator is available but not being called
        by the Electric Load Center.

        Args:
            value (float): value for IDD Field `standby_power`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `standby_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `standby_power`')

        self._data["Standby Power"] = value

    @property
    def ancillary_power(self):
        """Get ancillary_power

        Returns:
            float: the value of `ancillary_power` or None if not set
        """
        return self._data["Ancillary Power"]

    @ancillary_power.setter
    def ancillary_power(self, value=0.0 ):
        """  Corresponds to IDD Field `ancillary_power`
        Electric power consumed by ancillary equipment (e.g., external fuel pressurization pump).
        Set to zero if Reference Electrical Power Output is the 'net' value (ancillary power
        already deducted). Input value is positive, but indicates negative electric generation.

        Args:
            value (float): value for IDD Field `ancillary_power`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancillary_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ancillary_power`')

        self._data["Ancillary Power"] = value

    @property
    def ancillary_power_function_of_fuel_input_curve_name(self):
        """Get ancillary_power_function_of_fuel_input_curve_name

        Returns:
            str: the value of `ancillary_power_function_of_fuel_input_curve_name` or None if not set
        """
        return self._data["Ancillary Power Function of Fuel Input Curve Name"]

    @ancillary_power_function_of_fuel_input_curve_name.setter
    def ancillary_power_function_of_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `ancillary_power_function_of_fuel_input_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*mdot + c*mdot**2
        mdot = fuel mass flow rate (kg/s)
        If left blank, model assumes ancillary power defined in previous field is constant
        whenever the generator is operating.

        Args:
            value (str): value for IDD Field `ancillary_power_function_of_fuel_input_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ancillary_power_function_of_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ancillary_power_function_of_fuel_input_curve_name`')

        self._data["Ancillary Power Function of Fuel Input Curve Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')

        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')

        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def reference_thermal_efficiency_using_lower_heat_value(self):
        """Get reference_thermal_efficiency_using_lower_heat_value

        Returns:
            float: the value of `reference_thermal_efficiency_using_lower_heat_value` or None if not set
        """
        return self._data["Reference Thermal Efficiency Using Lower Heat Value"]

    @reference_thermal_efficiency_using_lower_heat_value.setter
    def reference_thermal_efficiency_using_lower_heat_value(self, value=0.0 ):
        """  Corresponds to IDD Field `reference_thermal_efficiency_using_lower_heat_value`
        Reference thermal efficiency (heat recovery to water) based on the
        Lower Heating Value (LHV) of the fuel.

        Args:
            value (float): value for IDD Field `reference_thermal_efficiency_using_lower_heat_value`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`')

        self._data["Reference Thermal Efficiency Using Lower Heat Value"] = value

    @property
    def reference_inlet_water_temperature(self):
        """Get reference_inlet_water_temperature

        Returns:
            float: the value of `reference_inlet_water_temperature` or None if not set
        """
        return self._data["Reference Inlet Water Temperature"]

    @reference_inlet_water_temperature.setter
    def reference_inlet_water_temperature(self, value=None):
        """  Corresponds to IDD Field `reference_inlet_water_temperature`

        Args:
            value (float): value for IDD Field `reference_inlet_water_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_inlet_water_temperature`'.format(value))

        self._data["Reference Inlet Water Temperature"] = value

    @property
    def heat_recovery_water_flow_operating_mode(self):
        """Get heat_recovery_water_flow_operating_mode

        Returns:
            str: the value of `heat_recovery_water_flow_operating_mode` or None if not set
        """
        return self._data["Heat Recovery Water Flow Operating Mode"]

    @heat_recovery_water_flow_operating_mode.setter
    def heat_recovery_water_flow_operating_mode(self, value="PlantControl"):
        """  Corresponds to IDD Field `heat_recovery_water_flow_operating_mode`
        PlantControl means the heat recovery water flow rate is determined by the plant,
        but the user needs to supply a heat recovery water flow rate.
        InternalControl means the heat recovery water flow rate is controlled by this generator.
        If 'InternalControl' is selected, then the user needs to supply a reference heat
        recovery water flow rate and optionally the name of a heat recovery flow rate modifier curve.

        Args:
            value (str): value for IDD Field `heat_recovery_water_flow_operating_mode`
                Accepted values are:
                      - PlantControl
                      - InternalControl
                Default value: PlantControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_flow_operating_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_flow_operating_mode`')
            vals = set()
            vals.add("PlantControl")
            vals.add("InternalControl")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_water_flow_operating_mode`'.format(value))

        self._data["Heat Recovery Water Flow Operating Mode"] = value

    @property
    def reference_heat_recovery_water_flow_rate(self):
        """Get reference_heat_recovery_water_flow_rate

        Returns:
            float: the value of `reference_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Reference Heat Recovery Water Flow Rate"]

    @reference_heat_recovery_water_flow_rate.setter
    def reference_heat_recovery_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `reference_heat_recovery_water_flow_rate`

        Args:
            value (float): value for IDD Field `reference_heat_recovery_water_flow_rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_heat_recovery_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_heat_recovery_water_flow_rate`')

        self._data["Reference Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name(self):
        """Get heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name

        Returns:
            str: the value of `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name` or None if not set
        """
        return self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"]

    @heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name.setter
    def heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*T + c*T**2 + d*Pnet + e*Pnet + f*T*Pnet
        T = heat recovery inlet water temperature
        Pnet = net power output = electric power output - ancillary power
        If left blank, model assumes the heat recovery water flow rate is constant whenever the
        generator is operating, at the Reference HR Water Flow Rate defined in the previous field.

        Args:
            value (str): value for IDD Field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`')

        self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"] = value

    @property
    def thermal_efficiency_function_of_temperature_and_elevation_curve_name(self):
        """Get thermal_efficiency_function_of_temperature_and_elevation_curve_name

        Returns:
            str: the value of `thermal_efficiency_function_of_temperature_and_elevation_curve_name` or None if not set
        """
        return self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"]

    @thermal_efficiency_function_of_temperature_and_elevation_curve_name.setter
    def thermal_efficiency_function_of_temperature_and_elevation_curve_name(self, value=None):
        """  Corresponds to IDD Field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`
        Table:TwoIndependentVariables object can also be used
        Bicubic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev + g*T**3 + h*Elev**3 + i*T**2*Elev + j*T*Elev**2
        Biquadratic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev
        T = combustion air inlet temperature (C)
        Elev = elevation (m)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`')

        self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_part_load_ratio_curve_name(self):
        """Get heat_recovery_rate_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"]

    @heat_recovery_rate_function_of_part_load_ratio_curve_name.setter
    def heat_recovery_rate_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_rate_function_of_part_load_ratio_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `heat_recovery_rate_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_rate_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_part_load_ratio_curve_name`')

        self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_inlet_water_temperature_curve_name(self):
        """Get heat_recovery_rate_function_of_inlet_water_temperature_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_inlet_water_temperature_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"]

    @heat_recovery_rate_function_of_inlet_water_temperature_curve_name.setter
    def heat_recovery_rate_function_of_inlet_water_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        T = inlet water temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`')

        self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_water_flow_rate_curve_name(self):
        """Get heat_recovery_rate_function_of_water_flow_rate_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_water_flow_rate_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"]

    @heat_recovery_rate_function_of_water_flow_rate_curve_name.setter
    def heat_recovery_rate_function_of_water_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_rate_function_of_water_flow_rate_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*Flow + c*Flow**2
        Flow = flow rate of water through the heat exchanger (m3/s)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `heat_recovery_rate_function_of_water_flow_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_rate_function_of_water_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_water_flow_rate_curve_name`')

        self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"] = value

    @property
    def minimum_heat_recovery_water_flow_rate(self):
        """Get minimum_heat_recovery_water_flow_rate

        Returns:
            float: the value of `minimum_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Minimum Heat Recovery Water Flow Rate"]

    @minimum_heat_recovery_water_flow_rate.setter
    def minimum_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_heat_recovery_water_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_heat_recovery_water_flow_rate`
                Units: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_heat_recovery_water_flow_rate`')

        self._data["Minimum Heat Recovery Water Flow Rate"] = value

    @property
    def maximum_heat_recovery_water_flow_rate(self):
        """Get maximum_heat_recovery_water_flow_rate

        Returns:
            float: the value of `maximum_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Maximum Heat Recovery Water Flow Rate"]

    @maximum_heat_recovery_water_flow_rate.setter
    def maximum_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `maximum_heat_recovery_water_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_heat_recovery_water_flow_rate`
                Units: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_heat_recovery_water_flow_rate`')

        self._data["Maximum Heat Recovery Water Flow Rate"] = value

    @property
    def maximum_heat_recovery_water_temperature(self):
        """Get maximum_heat_recovery_water_temperature

        Returns:
            float: the value of `maximum_heat_recovery_water_temperature` or None if not set
        """
        return self._data["Maximum Heat Recovery Water Temperature"]

    @maximum_heat_recovery_water_temperature.setter
    def maximum_heat_recovery_water_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_heat_recovery_water_temperature`

        Args:
            value (float): value for IDD Field `maximum_heat_recovery_water_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heat_recovery_water_temperature`'.format(value))

        self._data["Maximum Heat Recovery Water Temperature"] = value

    @property
    def combustion_air_inlet_node_name(self):
        """Get combustion_air_inlet_node_name

        Returns:
            str: the value of `combustion_air_inlet_node_name` or None if not set
        """
        return self._data["Combustion Air Inlet Node Name"]

    @combustion_air_inlet_node_name.setter
    def combustion_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `combustion_air_inlet_node_name`
        Must be an outdoor air node.

        Args:
            value (str): value for IDD Field `combustion_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `combustion_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `combustion_air_inlet_node_name`')

        self._data["Combustion Air Inlet Node Name"] = value

    @property
    def combustion_air_outlet_node_name(self):
        """Get combustion_air_outlet_node_name

        Returns:
            str: the value of `combustion_air_outlet_node_name` or None if not set
        """
        return self._data["Combustion Air Outlet Node Name"]

    @combustion_air_outlet_node_name.setter
    def combustion_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `combustion_air_outlet_node_name`

        Args:
            value (str): value for IDD Field `combustion_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `combustion_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `combustion_air_outlet_node_name`')

        self._data["Combustion Air Outlet Node Name"] = value

    @property
    def reference_exhaust_air_mass_flow_rate(self):
        """Get reference_exhaust_air_mass_flow_rate

        Returns:
            float: the value of `reference_exhaust_air_mass_flow_rate` or None if not set
        """
        return self._data["Reference Exhaust Air Mass Flow Rate"]

    @reference_exhaust_air_mass_flow_rate.setter
    def reference_exhaust_air_mass_flow_rate(self, value=None):
        """  Corresponds to IDD Field `reference_exhaust_air_mass_flow_rate`

        Args:
            value (float): value for IDD Field `reference_exhaust_air_mass_flow_rate`
                Units: kg/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_exhaust_air_mass_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_exhaust_air_mass_flow_rate`')

        self._data["Reference Exhaust Air Mass Flow Rate"] = value

    @property
    def exhaust_air_flow_rate_function_of_temperature_curve_name(self):
        """Get exhaust_air_flow_rate_function_of_temperature_curve_name

        Returns:
            str: the value of `exhaust_air_flow_rate_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"]

    @exhaust_air_flow_rate_function_of_temperature_curve_name.setter
    def exhaust_air_flow_rate_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_flow_rate_function_of_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `exhaust_air_flow_rate_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_flow_rate_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_flow_rate_function_of_temperature_curve_name`')

        self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"] = value

    @property
    def exhaust_air_flow_rate_function_of_part_load_ratio_curve_name(self):
        """Get exhaust_air_flow_rate_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"]

    @exhaust_air_flow_rate_function_of_part_load_ratio_curve_name.setter
    def exhaust_air_flow_rate_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions.
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`')

        self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"] = value

    @property
    def nominal_exhaust_air_outlet_temperature(self):
        """Get nominal_exhaust_air_outlet_temperature

        Returns:
            float: the value of `nominal_exhaust_air_outlet_temperature` or None if not set
        """
        return self._data["Nominal Exhaust Air Outlet Temperature"]

    @nominal_exhaust_air_outlet_temperature.setter
    def nominal_exhaust_air_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `nominal_exhaust_air_outlet_temperature`
        Exhaust air outlet temperature at reference conditions.

        Args:
            value (float): value for IDD Field `nominal_exhaust_air_outlet_temperature`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_exhaust_air_outlet_temperature`'.format(value))

        self._data["Nominal Exhaust Air Outlet Temperature"] = value

    @property
    def exhaust_air_temperature_function_of_temperature_curve_name(self):
        """Get exhaust_air_temperature_function_of_temperature_curve_name

        Returns:
            str: the value of `exhaust_air_temperature_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Air Temperature Function of Temperature Curve Name"]

    @exhaust_air_temperature_function_of_temperature_curve_name.setter
    def exhaust_air_temperature_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_temperature_function_of_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `exhaust_air_temperature_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_temperature_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_temperature_function_of_temperature_curve_name`')

        self._data["Exhaust Air Temperature Function of Temperature Curve Name"] = value

    @property
    def exhaust_air_temperature_function_of_part_load_ratio_curve_name(self):
        """Get exhaust_air_temperature_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `exhaust_air_temperature_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"]

    @exhaust_air_temperature_function_of_part_load_ratio_curve_name.setter
    def exhaust_air_temperature_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions.
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`')

        self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reference_electrical_power_output))
        out.append(self._to_str(self.minimum_full_load_electrical_power_output))
        out.append(self._to_str(self.maximum_full_load_electrical_power_output))
        out.append(self._to_str(self.reference_electrical_efficiency_using_lower_heating_value))
        out.append(self._to_str(self.reference_combustion_air_inlet_temperature))
        out.append(self._to_str(self.reference_combustion_air_inlet_humidity_ratio))
        out.append(self._to_str(self.reference_elevation))
        out.append(self._to_str(self.electrical_power_function_of_temperature_and_elevation_curve_name))
        out.append(self._to_str(self.electrical_efficiency_function_of_temperature_curve_name))
        out.append(self._to_str(self.electrical_efficiency_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.fuel_lower_heating_value))
        out.append(self._to_str(self.standby_power))
        out.append(self._to_str(self.ancillary_power))
        out.append(self._to_str(self.ancillary_power_function_of_fuel_input_curve_name))
        out.append(self._to_str(self.heat_recovery_water_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_outlet_node_name))
        out.append(self._to_str(self.reference_thermal_efficiency_using_lower_heat_value))
        out.append(self._to_str(self.reference_inlet_water_temperature))
        out.append(self._to_str(self.heat_recovery_water_flow_operating_mode))
        out.append(self._to_str(self.reference_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name))
        out.append(self._to_str(self.thermal_efficiency_function_of_temperature_and_elevation_curve_name))
        out.append(self._to_str(self.heat_recovery_rate_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.heat_recovery_rate_function_of_inlet_water_temperature_curve_name))
        out.append(self._to_str(self.heat_recovery_rate_function_of_water_flow_rate_curve_name))
        out.append(self._to_str(self.minimum_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.maximum_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.maximum_heat_recovery_water_temperature))
        out.append(self._to_str(self.combustion_air_inlet_node_name))
        out.append(self._to_str(self.combustion_air_outlet_node_name))
        out.append(self._to_str(self.reference_exhaust_air_mass_flow_rate))
        out.append(self._to_str(self.exhaust_air_flow_rate_function_of_temperature_curve_name))
        out.append(self._to_str(self.exhaust_air_flow_rate_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.nominal_exhaust_air_outlet_temperature))
        out.append(self._to_str(self.exhaust_air_temperature_function_of_temperature_curve_name))
        out.append(self._to_str(self.exhaust_air_temperature_function_of_part_load_ratio_curve_name))
        return ",".join(out)

class GeneratorPhotovoltaic(object):
    """ Corresponds to IDD object `Generator:Photovoltaic`
        Describes an array of photovoltaic (PV) modules.  A series of different PV arrays
        can be connected to a single electric load center (and inverter) by listing them all
        in an ElectricLoadCenter:Generator object. PV performance is taken from the
        referenced PhotovoltaicPerformance:* object. Array tilt, azimuth, and gross area
        are taken from the referenced building surface or shading surface. The array
        surface participates normally in all shading calculations.
    
    """
    internal_name = "Generator:Photovoltaic"
    field_count = 7
    required_fields = ["Name", "Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:Photovoltaic`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Surface Name"] = None
        self._data["Photovoltaic Performance Object Type"] = None
        self._data["Module Performance Name"] = None
        self._data["Heat Transfer Integration Mode"] = None
        self._data["Number of Series Strings in Parallel"] = None
        self._data["Number of Modules in Series"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_name = None
        else:
            self.surface_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.photovoltaic_performance_object_type = None
        else:
            self.photovoltaic_performance_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.module_performance_name = None
        else:
            self.module_performance_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_transfer_integration_mode = None
        else:
            self.heat_transfer_integration_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_series_strings_in_parallel = None
        else:
            self.number_of_series_strings_in_parallel = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_modules_in_series = None
        else:
            self.number_of_modules_in_series = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def surface_name(self):
        """Get surface_name

        Returns:
            str: the value of `surface_name` or None if not set
        """
        return self._data["Surface Name"]

    @surface_name.setter
    def surface_name(self, value=None):
        """  Corresponds to IDD Field `surface_name`

        Args:
            value (str): value for IDD Field `surface_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name`')

        self._data["Surface Name"] = value

    @property
    def photovoltaic_performance_object_type(self):
        """Get photovoltaic_performance_object_type

        Returns:
            str: the value of `photovoltaic_performance_object_type` or None if not set
        """
        return self._data["Photovoltaic Performance Object Type"]

    @photovoltaic_performance_object_type.setter
    def photovoltaic_performance_object_type(self, value=None):
        """  Corresponds to IDD Field `photovoltaic_performance_object_type`

        Args:
            value (str): value for IDD Field `photovoltaic_performance_object_type`
                Accepted values are:
                      - PhotovoltaicPerformance:Simple
                      - PhotovoltaicPerformance:EquivalentOne-Diode
                      - PhotovoltaicPerformance:Sandia
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `photovoltaic_performance_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `photovoltaic_performance_object_type`')
            vals = set()
            vals.add("PhotovoltaicPerformance:Simple")
            vals.add("PhotovoltaicPerformance:EquivalentOne-Diode")
            vals.add("PhotovoltaicPerformance:Sandia")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `photovoltaic_performance_object_type`'.format(value))

        self._data["Photovoltaic Performance Object Type"] = value

    @property
    def module_performance_name(self):
        """Get module_performance_name

        Returns:
            str: the value of `module_performance_name` or None if not set
        """
        return self._data["Module Performance Name"]

    @module_performance_name.setter
    def module_performance_name(self, value=None):
        """  Corresponds to IDD Field `module_performance_name`
        PV array modeling details

        Args:
            value (str): value for IDD Field `module_performance_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `module_performance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `module_performance_name`')

        self._data["Module Performance Name"] = value

    @property
    def heat_transfer_integration_mode(self):
        """Get heat_transfer_integration_mode

        Returns:
            str: the value of `heat_transfer_integration_mode` or None if not set
        """
        return self._data["Heat Transfer Integration Mode"]

    @heat_transfer_integration_mode.setter
    def heat_transfer_integration_mode(self, value="Decoupled"):
        """  Corresponds to IDD Field `heat_transfer_integration_mode`

        Args:
            value (str): value for IDD Field `heat_transfer_integration_mode`
                Accepted values are:
                      - Decoupled
                      - DecoupledUllebergDynamic
                      - IntegratedSurfaceOutsideFace
                      - IntegratedTranspiredCollector
                      - IntegratedExteriorVentedCavity
                      - PhotovoltaicThermalSolarCollector
                Default value: Decoupled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_transfer_integration_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_transfer_integration_mode`')
            vals = set()
            vals.add("Decoupled")
            vals.add("DecoupledUllebergDynamic")
            vals.add("IntegratedSurfaceOutsideFace")
            vals.add("IntegratedTranspiredCollector")
            vals.add("IntegratedExteriorVentedCavity")
            vals.add("PhotovoltaicThermalSolarCollector")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_transfer_integration_mode`'.format(value))

        self._data["Heat Transfer Integration Mode"] = value

    @property
    def number_of_series_strings_in_parallel(self):
        """Get number_of_series_strings_in_parallel

        Returns:
            float: the value of `number_of_series_strings_in_parallel` or None if not set
        """
        return self._data["Number of Series Strings in Parallel"]

    @number_of_series_strings_in_parallel.setter
    def number_of_series_strings_in_parallel(self, value=1.0 ):
        """  Corresponds to IDD Field `number_of_series_strings_in_parallel`
        number of series-wired strings of PV modules that are in parallel

        Args:
            value (float): value for IDD Field `number_of_series_strings_in_parallel`
                Units: dimensionless
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_series_strings_in_parallel`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `number_of_series_strings_in_parallel`')

        self._data["Number of Series Strings in Parallel"] = value

    @property
    def number_of_modules_in_series(self):
        """Get number_of_modules_in_series

        Returns:
            float: the value of `number_of_modules_in_series` or None if not set
        """
        return self._data["Number of Modules in Series"]

    @number_of_modules_in_series.setter
    def number_of_modules_in_series(self, value=1.0 ):
        """  Corresponds to IDD Field `number_of_modules_in_series`
        Number of PV modules wired in series for each string.

        Args:
            value (float): value for IDD Field `number_of_modules_in_series`
                Units: dimensionless
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_modules_in_series`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `number_of_modules_in_series`')

        self._data["Number of Modules in Series"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.surface_name))
        out.append(self._to_str(self.photovoltaic_performance_object_type))
        out.append(self._to_str(self.module_performance_name))
        out.append(self._to_str(self.heat_transfer_integration_mode))
        out.append(self._to_str(self.number_of_series_strings_in_parallel))
        out.append(self._to_str(self.number_of_modules_in_series))
        return ",".join(out)

class PhotovoltaicPerformanceSimple(object):
    """ Corresponds to IDD object `PhotovoltaicPerformance:Simple`
        Describes a simple model of photovoltaics that may be useful for early phase
        design analysis. In this model the user has direct access to the efficiency with
        which surfaces convert incident solar radiation to electricity and need not specify
        arrays of specific modules.
    
    """
    internal_name = "PhotovoltaicPerformance:Simple"
    field_count = 5
    required_fields = ["Fraction of Surface Area with Active Solar Cells"]

    def __init__(self):
        """ Init data dictionary object for IDD  `PhotovoltaicPerformance:Simple`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fraction of Surface Area with Active Solar Cells"] = None
        self._data["Conversion Efficiency Input Mode"] = None
        self._data["Value for Cell Efficiency if Fixed"] = None
        self._data["Efficiency Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_surface_area_with_active_solar_cells = None
        else:
            self.fraction_of_surface_area_with_active_solar_cells = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.conversion_efficiency_input_mode = None
        else:
            self.conversion_efficiency_input_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_cell_efficiency_if_fixed = None
        else:
            self.value_for_cell_efficiency_if_fixed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_schedule_name = None
        else:
            self.efficiency_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fraction_of_surface_area_with_active_solar_cells(self):
        """Get fraction_of_surface_area_with_active_solar_cells

        Returns:
            float: the value of `fraction_of_surface_area_with_active_solar_cells` or None if not set
        """
        return self._data["Fraction of Surface Area with Active Solar Cells"]

    @fraction_of_surface_area_with_active_solar_cells.setter
    def fraction_of_surface_area_with_active_solar_cells(self, value=None):
        """  Corresponds to IDD Field `fraction_of_surface_area_with_active_solar_cells`

        Args:
            value (float): value for IDD Field `fraction_of_surface_area_with_active_solar_cells`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_surface_area_with_active_solar_cells`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_surface_area_with_active_solar_cells`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_surface_area_with_active_solar_cells`')

        self._data["Fraction of Surface Area with Active Solar Cells"] = value

    @property
    def conversion_efficiency_input_mode(self):
        """Get conversion_efficiency_input_mode

        Returns:
            str: the value of `conversion_efficiency_input_mode` or None if not set
        """
        return self._data["Conversion Efficiency Input Mode"]

    @conversion_efficiency_input_mode.setter
    def conversion_efficiency_input_mode(self, value=None):
        """  Corresponds to IDD Field `conversion_efficiency_input_mode`

        Args:
            value (str): value for IDD Field `conversion_efficiency_input_mode`
                Accepted values are:
                      - Fixed
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `conversion_efficiency_input_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `conversion_efficiency_input_mode`')
            vals = set()
            vals.add("Fixed")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `conversion_efficiency_input_mode`'.format(value))

        self._data["Conversion Efficiency Input Mode"] = value

    @property
    def value_for_cell_efficiency_if_fixed(self):
        """Get value_for_cell_efficiency_if_fixed

        Returns:
            float: the value of `value_for_cell_efficiency_if_fixed` or None if not set
        """
        return self._data["Value for Cell Efficiency if Fixed"]

    @value_for_cell_efficiency_if_fixed.setter
    def value_for_cell_efficiency_if_fixed(self, value=None):
        """  Corresponds to IDD Field `value_for_cell_efficiency_if_fixed`
        Efficiency = (power generated [W])/(incident solar[W])

        Args:
            value (float): value for IDD Field `value_for_cell_efficiency_if_fixed`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_for_cell_efficiency_if_fixed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `value_for_cell_efficiency_if_fixed`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `value_for_cell_efficiency_if_fixed`')

        self._data["Value for Cell Efficiency if Fixed"] = value

    @property
    def efficiency_schedule_name(self):
        """Get efficiency_schedule_name

        Returns:
            str: the value of `efficiency_schedule_name` or None if not set
        """
        return self._data["Efficiency Schedule Name"]

    @efficiency_schedule_name.setter
    def efficiency_schedule_name(self, value=None):
        """  Corresponds to IDD Field `efficiency_schedule_name`

        Args:
            value (str): value for IDD Field `efficiency_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_schedule_name`')

        self._data["Efficiency Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fraction_of_surface_area_with_active_solar_cells))
        out.append(self._to_str(self.conversion_efficiency_input_mode))
        out.append(self._to_str(self.value_for_cell_efficiency_if_fixed))
        out.append(self._to_str(self.efficiency_schedule_name))
        return ",".join(out)

class PhotovoltaicPerformanceEquivalentOneDiode(object):
    """ Corresponds to IDD object `PhotovoltaicPerformance:EquivalentOne-Diode`
        Describes the performance characteristics of Photovoltaic (PV) modules to be modeled
        using an equivalent one-diode circuit.  This model is also known as
        the 4- or 5-parameter TRNSYS model for photovoltaics.
    
    """
    internal_name = "PhotovoltaicPerformance:EquivalentOne-Diode"
    field_count = 20
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `PhotovoltaicPerformance:EquivalentOne-Diode`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Cell type"] = None
        self._data["Number of Cells in Series"] = None
        self._data["Active Area"] = None
        self._data["Transmittance Absorptance Product"] = None
        self._data["Semiconductor Bandgap"] = None
        self._data["Shunt Resistance"] = None
        self._data["Short Circuit Current"] = None
        self._data["Open Circuit Voltage"] = None
        self._data["Reference Temperature"] = None
        self._data["Reference Insolation"] = None
        self._data["Module Current at Maximum Power"] = None
        self._data["Module Voltage at Maximum Power"] = None
        self._data["Temperature Coefficient of Short Circuit Current"] = None
        self._data["Temperature Coefficient of Open Circuit Voltage"] = None
        self._data["Nominal Operating Cell Temperature Test Ambient Temperature"] = None
        self._data["Nominal Operating Cell Temperature Test Cell Temperature"] = None
        self._data["Nominal Operating Cell Temperature Test Insolation"] = None
        self._data["Module Heat Loss Coefficient"] = None
        self._data["Total Heat Capacity"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cell_type = None
        else:
            self.cell_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_cells_in_series = None
        else:
            self.number_of_cells_in_series = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.active_area = None
        else:
            self.active_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.transmittance_absorptance_product = None
        else:
            self.transmittance_absorptance_product = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.semiconductor_bandgap = None
        else:
            self.semiconductor_bandgap = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shunt_resistance = None
        else:
            self.shunt_resistance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.short_circuit_current = None
        else:
            self.short_circuit_current = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.open_circuit_voltage = None
        else:
            self.open_circuit_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_temperature = None
        else:
            self.reference_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_insolation = None
        else:
            self.reference_insolation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.module_current_at_maximum_power = None
        else:
            self.module_current_at_maximum_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.module_voltage_at_maximum_power = None
        else:
            self.module_voltage_at_maximum_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_coefficient_of_short_circuit_current = None
        else:
            self.temperature_coefficient_of_short_circuit_current = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_coefficient_of_open_circuit_voltage = None
        else:
            self.temperature_coefficient_of_open_circuit_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_operating_cell_temperature_test_ambient_temperature = None
        else:
            self.nominal_operating_cell_temperature_test_ambient_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_operating_cell_temperature_test_cell_temperature = None
        else:
            self.nominal_operating_cell_temperature_test_cell_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_operating_cell_temperature_test_insolation = None
        else:
            self.nominal_operating_cell_temperature_test_insolation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.module_heat_loss_coefficient = None
        else:
            self.module_heat_loss_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_heat_capacity = None
        else:
            self.total_heat_capacity = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def cell_type(self):
        """Get cell_type

        Returns:
            str: the value of `cell_type` or None if not set
        """
        return self._data["Cell type"]

    @cell_type.setter
    def cell_type(self, value=None):
        """  Corresponds to IDD Field `cell_type`

        Args:
            value (str): value for IDD Field `cell_type`
                Accepted values are:
                      - CrystallineSilicon
                      - AmorphousSilicon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cell_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cell_type`')
            vals = set()
            vals.add("CrystallineSilicon")
            vals.add("AmorphousSilicon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cell_type`'.format(value))

        self._data["Cell type"] = value

    @property
    def number_of_cells_in_series(self):
        """Get number_of_cells_in_series

        Returns:
            int: the value of `number_of_cells_in_series` or None if not set
        """
        return self._data["Number of Cells in Series"]

    @number_of_cells_in_series.setter
    def number_of_cells_in_series(self, value=36 ):
        """  Corresponds to IDD Field `number_of_cells_in_series`

        Args:
            value (int): value for IDD Field `number_of_cells_in_series`
                Units: dimensionless
                Default value: 36
                value >= 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_cells_in_series`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `number_of_cells_in_series`')

        self._data["Number of Cells in Series"] = value

    @property
    def active_area(self):
        """Get active_area

        Returns:
            float: the value of `active_area` or None if not set
        """
        return self._data["Active Area"]

    @active_area.setter
    def active_area(self, value=0.89 ):
        """  Corresponds to IDD Field `active_area`
        The total power output of the array is determined by the
        number of modules (see above).  The Active Area is only
        used to calculate the PV Array Efficiency output variable.

        Args:
            value (float): value for IDD Field `active_area`
                Units: m2
                Default value: 0.89
                value >= 0.1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `active_area`'.format(value))
            if value < 0.1:
                raise ValueError('value need to be greater or equal 0.1 '
                                 'for field `active_area`')

        self._data["Active Area"] = value

    @property
    def transmittance_absorptance_product(self):
        """Get transmittance_absorptance_product

        Returns:
            float: the value of `transmittance_absorptance_product` or None if not set
        """
        return self._data["Transmittance Absorptance Product"]

    @transmittance_absorptance_product.setter
    def transmittance_absorptance_product(self, value=0.95 ):
        """  Corresponds to IDD Field `transmittance_absorptance_product`

        Args:
            value (float): value for IDD Field `transmittance_absorptance_product`
                Units: dimensionless
                Default value: 0.95
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `transmittance_absorptance_product`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `transmittance_absorptance_product`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `transmittance_absorptance_product`')

        self._data["Transmittance Absorptance Product"] = value

    @property
    def semiconductor_bandgap(self):
        """Get semiconductor_bandgap

        Returns:
            float: the value of `semiconductor_bandgap` or None if not set
        """
        return self._data["Semiconductor Bandgap"]

    @semiconductor_bandgap.setter
    def semiconductor_bandgap(self, value=1.12 ):
        """  Corresponds to IDD Field `semiconductor_bandgap`

        Args:
            value (float): value for IDD Field `semiconductor_bandgap`
                Units: eV
                Default value: 1.12
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `semiconductor_bandgap`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `semiconductor_bandgap`')

        self._data["Semiconductor Bandgap"] = value

    @property
    def shunt_resistance(self):
        """Get shunt_resistance

        Returns:
            float: the value of `shunt_resistance` or None if not set
        """
        return self._data["Shunt Resistance"]

    @shunt_resistance.setter
    def shunt_resistance(self, value=1000000.0 ):
        """  Corresponds to IDD Field `shunt_resistance`

        Args:
            value (float): value for IDD Field `shunt_resistance`
                Units: ohms
                Default value: 1000000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shunt_resistance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `shunt_resistance`')

        self._data["Shunt Resistance"] = value

    @property
    def short_circuit_current(self):
        """Get short_circuit_current

        Returns:
            float: the value of `short_circuit_current` or None if not set
        """
        return self._data["Short Circuit Current"]

    @short_circuit_current.setter
    def short_circuit_current(self, value=6.5 ):
        """  Corresponds to IDD Field `short_circuit_current`

        Args:
            value (float): value for IDD Field `short_circuit_current`
                Units: A
                Default value: 6.5
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `short_circuit_current`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `short_circuit_current`')

        self._data["Short Circuit Current"] = value

    @property
    def open_circuit_voltage(self):
        """Get open_circuit_voltage

        Returns:
            float: the value of `open_circuit_voltage` or None if not set
        """
        return self._data["Open Circuit Voltage"]

    @open_circuit_voltage.setter
    def open_circuit_voltage(self, value=21.6 ):
        """  Corresponds to IDD Field `open_circuit_voltage`

        Args:
            value (float): value for IDD Field `open_circuit_voltage`
                Units: V
                Default value: 21.6
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `open_circuit_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `open_circuit_voltage`')

        self._data["Open Circuit Voltage"] = value

    @property
    def reference_temperature(self):
        """Get reference_temperature

        Returns:
            float: the value of `reference_temperature` or None if not set
        """
        return self._data["Reference Temperature"]

    @reference_temperature.setter
    def reference_temperature(self, value=25.0 ):
        """  Corresponds to IDD Field `reference_temperature`

        Args:
            value (float): value for IDD Field `reference_temperature`
                Units: C
                Default value: 25.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_temperature`')

        self._data["Reference Temperature"] = value

    @property
    def reference_insolation(self):
        """Get reference_insolation

        Returns:
            float: the value of `reference_insolation` or None if not set
        """
        return self._data["Reference Insolation"]

    @reference_insolation.setter
    def reference_insolation(self, value=1000.0 ):
        """  Corresponds to IDD Field `reference_insolation`

        Args:
            value (float): value for IDD Field `reference_insolation`
                Units: W/m2
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_insolation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_insolation`')

        self._data["Reference Insolation"] = value

    @property
    def module_current_at_maximum_power(self):
        """Get module_current_at_maximum_power

        Returns:
            float: the value of `module_current_at_maximum_power` or None if not set
        """
        return self._data["Module Current at Maximum Power"]

    @module_current_at_maximum_power.setter
    def module_current_at_maximum_power(self, value=5.9 ):
        """  Corresponds to IDD Field `module_current_at_maximum_power`
        Single module current at the maximum power point
        and reference conditions.  Module Current, Module Voltage,
        Number of Modules in Parallel and Number of Modules in Series
        determine the maximum power output of the array.

        Args:
            value (float): value for IDD Field `module_current_at_maximum_power`
                Units: A
                Default value: 5.9
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `module_current_at_maximum_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_current_at_maximum_power`')

        self._data["Module Current at Maximum Power"] = value

    @property
    def module_voltage_at_maximum_power(self):
        """Get module_voltage_at_maximum_power

        Returns:
            float: the value of `module_voltage_at_maximum_power` or None if not set
        """
        return self._data["Module Voltage at Maximum Power"]

    @module_voltage_at_maximum_power.setter
    def module_voltage_at_maximum_power(self, value=17.0 ):
        """  Corresponds to IDD Field `module_voltage_at_maximum_power`
        Single module voltage at the maximum power point
        and reference conditions.  Module Current, Module Voltage,
        Number of Modules in Parallel and Number of Modules in Series
        determine the maximum power output of the array.

        Args:
            value (float): value for IDD Field `module_voltage_at_maximum_power`
                Units: V
                Default value: 17.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `module_voltage_at_maximum_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_voltage_at_maximum_power`')

        self._data["Module Voltage at Maximum Power"] = value

    @property
    def temperature_coefficient_of_short_circuit_current(self):
        """Get temperature_coefficient_of_short_circuit_current

        Returns:
            float: the value of `temperature_coefficient_of_short_circuit_current` or None if not set
        """
        return self._data["Temperature Coefficient of Short Circuit Current"]

    @temperature_coefficient_of_short_circuit_current.setter
    def temperature_coefficient_of_short_circuit_current(self, value=0.02 ):
        """  Corresponds to IDD Field `temperature_coefficient_of_short_circuit_current`

        Args:
            value (float): value for IDD Field `temperature_coefficient_of_short_circuit_current`
                Units: A/K
                Default value: 0.02
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_coefficient_of_short_circuit_current`'.format(value))

        self._data["Temperature Coefficient of Short Circuit Current"] = value

    @property
    def temperature_coefficient_of_open_circuit_voltage(self):
        """Get temperature_coefficient_of_open_circuit_voltage

        Returns:
            float: the value of `temperature_coefficient_of_open_circuit_voltage` or None if not set
        """
        return self._data["Temperature Coefficient of Open Circuit Voltage"]

    @temperature_coefficient_of_open_circuit_voltage.setter
    def temperature_coefficient_of_open_circuit_voltage(self, value=-0.079 ):
        """  Corresponds to IDD Field `temperature_coefficient_of_open_circuit_voltage`

        Args:
            value (float): value for IDD Field `temperature_coefficient_of_open_circuit_voltage`
                Units: V/K
                Default value: -0.079
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_coefficient_of_open_circuit_voltage`'.format(value))

        self._data["Temperature Coefficient of Open Circuit Voltage"] = value

    @property
    def nominal_operating_cell_temperature_test_ambient_temperature(self):
        """Get nominal_operating_cell_temperature_test_ambient_temperature

        Returns:
            float: the value of `nominal_operating_cell_temperature_test_ambient_temperature` or None if not set
        """
        return self._data["Nominal Operating Cell Temperature Test Ambient Temperature"]

    @nominal_operating_cell_temperature_test_ambient_temperature.setter
    def nominal_operating_cell_temperature_test_ambient_temperature(self, value=20.0 ):
        """  Corresponds to IDD Field `nominal_operating_cell_temperature_test_ambient_temperature`

        Args:
            value (float): value for IDD Field `nominal_operating_cell_temperature_test_ambient_temperature`
                Units: C
                Default value: 20.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_operating_cell_temperature_test_ambient_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_operating_cell_temperature_test_ambient_temperature`')

        self._data["Nominal Operating Cell Temperature Test Ambient Temperature"] = value

    @property
    def nominal_operating_cell_temperature_test_cell_temperature(self):
        """Get nominal_operating_cell_temperature_test_cell_temperature

        Returns:
            float: the value of `nominal_operating_cell_temperature_test_cell_temperature` or None if not set
        """
        return self._data["Nominal Operating Cell Temperature Test Cell Temperature"]

    @nominal_operating_cell_temperature_test_cell_temperature.setter
    def nominal_operating_cell_temperature_test_cell_temperature(self, value=40.0 ):
        """  Corresponds to IDD Field `nominal_operating_cell_temperature_test_cell_temperature`

        Args:
            value (float): value for IDD Field `nominal_operating_cell_temperature_test_cell_temperature`
                Units: C
                Default value: 40.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_operating_cell_temperature_test_cell_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_operating_cell_temperature_test_cell_temperature`')

        self._data["Nominal Operating Cell Temperature Test Cell Temperature"] = value

    @property
    def nominal_operating_cell_temperature_test_insolation(self):
        """Get nominal_operating_cell_temperature_test_insolation

        Returns:
            float: the value of `nominal_operating_cell_temperature_test_insolation` or None if not set
        """
        return self._data["Nominal Operating Cell Temperature Test Insolation"]

    @nominal_operating_cell_temperature_test_insolation.setter
    def nominal_operating_cell_temperature_test_insolation(self, value=800.0 ):
        """  Corresponds to IDD Field `nominal_operating_cell_temperature_test_insolation`

        Args:
            value (float): value for IDD Field `nominal_operating_cell_temperature_test_insolation`
                Units: W/m2
                Default value: 800.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_operating_cell_temperature_test_insolation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_operating_cell_temperature_test_insolation`')

        self._data["Nominal Operating Cell Temperature Test Insolation"] = value

    @property
    def module_heat_loss_coefficient(self):
        """Get module_heat_loss_coefficient

        Returns:
            float: the value of `module_heat_loss_coefficient` or None if not set
        """
        return self._data["Module Heat Loss Coefficient"]

    @module_heat_loss_coefficient.setter
    def module_heat_loss_coefficient(self, value=30.0 ):
        """  Corresponds to IDD Field `module_heat_loss_coefficient`

        Args:
            value (float): value for IDD Field `module_heat_loss_coefficient`
                Units: W/m2-K
                Default value: 30.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `module_heat_loss_coefficient`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_heat_loss_coefficient`')

        self._data["Module Heat Loss Coefficient"] = value

    @property
    def total_heat_capacity(self):
        """Get total_heat_capacity

        Returns:
            float: the value of `total_heat_capacity` or None if not set
        """
        return self._data["Total Heat Capacity"]

    @total_heat_capacity.setter
    def total_heat_capacity(self, value=50000.0 ):
        """  Corresponds to IDD Field `total_heat_capacity`

        Args:
            value (float): value for IDD Field `total_heat_capacity`
                Units: J/m2-K
                Default value: 50000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_heat_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `total_heat_capacity`')

        self._data["Total Heat Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.cell_type))
        out.append(self._to_str(self.number_of_cells_in_series))
        out.append(self._to_str(self.active_area))
        out.append(self._to_str(self.transmittance_absorptance_product))
        out.append(self._to_str(self.semiconductor_bandgap))
        out.append(self._to_str(self.shunt_resistance))
        out.append(self._to_str(self.short_circuit_current))
        out.append(self._to_str(self.open_circuit_voltage))
        out.append(self._to_str(self.reference_temperature))
        out.append(self._to_str(self.reference_insolation))
        out.append(self._to_str(self.module_current_at_maximum_power))
        out.append(self._to_str(self.module_voltage_at_maximum_power))
        out.append(self._to_str(self.temperature_coefficient_of_short_circuit_current))
        out.append(self._to_str(self.temperature_coefficient_of_open_circuit_voltage))
        out.append(self._to_str(self.nominal_operating_cell_temperature_test_ambient_temperature))
        out.append(self._to_str(self.nominal_operating_cell_temperature_test_cell_temperature))
        out.append(self._to_str(self.nominal_operating_cell_temperature_test_insolation))
        out.append(self._to_str(self.module_heat_loss_coefficient))
        out.append(self._to_str(self.total_heat_capacity))
        return ",".join(out)

class PhotovoltaicPerformanceSandia(object):
    """ Corresponds to IDD object `PhotovoltaicPerformance:Sandia`
        Describes performance input data needed for specific makes and models of production
        PV panels using the empirical coefficients assembled by Sandia National Laboratory.
    
    """
    internal_name = "PhotovoltaicPerformance:Sandia"
    field_count = 40
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `PhotovoltaicPerformance:Sandia`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Active Area"] = None
        self._data["Number of Cells in Series"] = None
        self._data["Number of Cells in Parallel"] = None
        self._data["Short Circuit Current"] = None
        self._data["Open Circuit Voltage"] = None
        self._data["Current at Maximum Power Point"] = None
        self._data["Voltage at Maximum Power Point"] = None
        self._data["Sandia Database Parameter aIsc"] = None
        self._data["Sandia Database Parameter aImp"] = None
        self._data["Sandia Database Parameter c0"] = None
        self._data["Sandia Database Parameter c1"] = None
        self._data["Sandia Database Parameter BVoc0"] = None
        self._data["Sandia Database Parameter mBVoc"] = None
        self._data["Sandia Database Parameter BVmp0"] = None
        self._data["Sandia Database Parameter mBVmp"] = None
        self._data["Diode Factor"] = None
        self._data["Sandia Database Parameter c2"] = None
        self._data["Sandia Database Parameter c3"] = None
        self._data["Sandia Database Parameter a0"] = None
        self._data["Sandia Database Parameter a1"] = None
        self._data["Sandia Database Parameter a2"] = None
        self._data["Sandia Database Parameter a3"] = None
        self._data["Sandia Database Parameter a4"] = None
        self._data["Sandia Database Parameter b0"] = None
        self._data["Sandia Database Parameter b1"] = None
        self._data["Sandia Database Parameter b2"] = None
        self._data["Sandia Database Parameter b3"] = None
        self._data["Sandia Database Parameter b4"] = None
        self._data["Sandia Database Parameter b5"] = None
        self._data["Sandia Database Parameter Delta(Tc)"] = None
        self._data["Sandia Database Parameter fd"] = None
        self._data["Sandia Database Parameter a"] = None
        self._data["Sandia Database Parameter b"] = None
        self._data["Sandia Database Parameter c4"] = None
        self._data["Sandia Database Parameter c5"] = None
        self._data["Sandia Database Parameter Ix0"] = None
        self._data["Sandia Database Parameter Ixx0"] = None
        self._data["Sandia Database Parameter c6"] = None
        self._data["Sandia Database Parameter c7"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.active_area = None
        else:
            self.active_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_cells_in_series = None
        else:
            self.number_of_cells_in_series = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_cells_in_parallel = None
        else:
            self.number_of_cells_in_parallel = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.short_circuit_current = None
        else:
            self.short_circuit_current = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.open_circuit_voltage = None
        else:
            self.open_circuit_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.current_at_maximum_power_point = None
        else:
            self.current_at_maximum_power_point = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.voltage_at_maximum_power_point = None
        else:
            self.voltage_at_maximum_power_point = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_aisc = None
        else:
            self.sandia_database_parameter_aisc = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_aimp = None
        else:
            self.sandia_database_parameter_aimp = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c0 = None
        else:
            self.sandia_database_parameter_c0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c1 = None
        else:
            self.sandia_database_parameter_c1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_bvoc0 = None
        else:
            self.sandia_database_parameter_bvoc0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_mbvoc = None
        else:
            self.sandia_database_parameter_mbvoc = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_bvmp0 = None
        else:
            self.sandia_database_parameter_bvmp0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_mbvmp = None
        else:
            self.sandia_database_parameter_mbvmp = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.diode_factor = None
        else:
            self.diode_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c2 = None
        else:
            self.sandia_database_parameter_c2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c3 = None
        else:
            self.sandia_database_parameter_c3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a0 = None
        else:
            self.sandia_database_parameter_a0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a1 = None
        else:
            self.sandia_database_parameter_a1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a2 = None
        else:
            self.sandia_database_parameter_a2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a3 = None
        else:
            self.sandia_database_parameter_a3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a4 = None
        else:
            self.sandia_database_parameter_a4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b0 = None
        else:
            self.sandia_database_parameter_b0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b1 = None
        else:
            self.sandia_database_parameter_b1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b2 = None
        else:
            self.sandia_database_parameter_b2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b3 = None
        else:
            self.sandia_database_parameter_b3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b4 = None
        else:
            self.sandia_database_parameter_b4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b5 = None
        else:
            self.sandia_database_parameter_b5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_deltatc = None
        else:
            self.sandia_database_parameter_deltatc = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_fd = None
        else:
            self.sandia_database_parameter_fd = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a = None
        else:
            self.sandia_database_parameter_a = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b = None
        else:
            self.sandia_database_parameter_b = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c4 = None
        else:
            self.sandia_database_parameter_c4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c5 = None
        else:
            self.sandia_database_parameter_c5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_ix0 = None
        else:
            self.sandia_database_parameter_ix0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_ixx0 = None
        else:
            self.sandia_database_parameter_ixx0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c6 = None
        else:
            self.sandia_database_parameter_c6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c7 = None
        else:
            self.sandia_database_parameter_c7 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def active_area(self):
        """Get active_area

        Returns:
            float: the value of `active_area` or None if not set
        """
        return self._data["Active Area"]

    @active_area.setter
    def active_area(self, value=1.0 ):
        """  Corresponds to IDD Field `active_area`
        (m2, single module)

        Args:
            value (float): value for IDD Field `active_area`
                Units: m2
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `active_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `active_area`')

        self._data["Active Area"] = value

    @property
    def number_of_cells_in_series(self):
        """Get number_of_cells_in_series

        Returns:
            int: the value of `number_of_cells_in_series` or None if not set
        """
        return self._data["Number of Cells in Series"]

    @number_of_cells_in_series.setter
    def number_of_cells_in_series(self, value=1 ):
        """  Corresponds to IDD Field `number_of_cells_in_series`

        Args:
            value (int): value for IDD Field `number_of_cells_in_series`
                Units: dimensionless
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_cells_in_series`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_cells_in_series`')

        self._data["Number of Cells in Series"] = value

    @property
    def number_of_cells_in_parallel(self):
        """Get number_of_cells_in_parallel

        Returns:
            int: the value of `number_of_cells_in_parallel` or None if not set
        """
        return self._data["Number of Cells in Parallel"]

    @number_of_cells_in_parallel.setter
    def number_of_cells_in_parallel(self, value=1 ):
        """  Corresponds to IDD Field `number_of_cells_in_parallel`

        Args:
            value (int): value for IDD Field `number_of_cells_in_parallel`
                Units: dimensionless
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_cells_in_parallel`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_cells_in_parallel`')

        self._data["Number of Cells in Parallel"] = value

    @property
    def short_circuit_current(self):
        """Get short_circuit_current

        Returns:
            float: the value of `short_circuit_current` or None if not set
        """
        return self._data["Short Circuit Current"]

    @short_circuit_current.setter
    def short_circuit_current(self, value=None):
        """  Corresponds to IDD Field `short_circuit_current`
        (Amps)

        Args:
            value (float): value for IDD Field `short_circuit_current`
                Units: A
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `short_circuit_current`'.format(value))

        self._data["Short Circuit Current"] = value

    @property
    def open_circuit_voltage(self):
        """Get open_circuit_voltage

        Returns:
            float: the value of `open_circuit_voltage` or None if not set
        """
        return self._data["Open Circuit Voltage"]

    @open_circuit_voltage.setter
    def open_circuit_voltage(self, value=None):
        """  Corresponds to IDD Field `open_circuit_voltage`
        (Volts)

        Args:
            value (float): value for IDD Field `open_circuit_voltage`
                Units: V
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `open_circuit_voltage`'.format(value))

        self._data["Open Circuit Voltage"] = value

    @property
    def current_at_maximum_power_point(self):
        """Get current_at_maximum_power_point

        Returns:
            float: the value of `current_at_maximum_power_point` or None if not set
        """
        return self._data["Current at Maximum Power Point"]

    @current_at_maximum_power_point.setter
    def current_at_maximum_power_point(self, value=None):
        """  Corresponds to IDD Field `current_at_maximum_power_point`
        (Amps)

        Args:
            value (float): value for IDD Field `current_at_maximum_power_point`
                Units: A
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `current_at_maximum_power_point`'.format(value))

        self._data["Current at Maximum Power Point"] = value

    @property
    def voltage_at_maximum_power_point(self):
        """Get voltage_at_maximum_power_point

        Returns:
            float: the value of `voltage_at_maximum_power_point` or None if not set
        """
        return self._data["Voltage at Maximum Power Point"]

    @voltage_at_maximum_power_point.setter
    def voltage_at_maximum_power_point(self, value=None):
        """  Corresponds to IDD Field `voltage_at_maximum_power_point`
        (Volts)

        Args:
            value (float): value for IDD Field `voltage_at_maximum_power_point`
                Units: V
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `voltage_at_maximum_power_point`'.format(value))

        self._data["Voltage at Maximum Power Point"] = value

    @property
    def sandia_database_parameter_aisc(self):
        """Get sandia_database_parameter_aisc

        Returns:
            float: the value of `sandia_database_parameter_aisc` or None if not set
        """
        return self._data["Sandia Database Parameter aIsc"]

    @sandia_database_parameter_aisc.setter
    def sandia_database_parameter_aisc(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_aisc`
        (1/degC)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_aisc`
                Units: 1/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_aisc`'.format(value))

        self._data["Sandia Database Parameter aIsc"] = value

    @property
    def sandia_database_parameter_aimp(self):
        """Get sandia_database_parameter_aimp

        Returns:
            float: the value of `sandia_database_parameter_aimp` or None if not set
        """
        return self._data["Sandia Database Parameter aImp"]

    @sandia_database_parameter_aimp.setter
    def sandia_database_parameter_aimp(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_aimp`
        (1/degC)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_aimp`
                Units: 1/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_aimp`'.format(value))

        self._data["Sandia Database Parameter aImp"] = value

    @property
    def sandia_database_parameter_c0(self):
        """Get sandia_database_parameter_c0

        Returns:
            float: the value of `sandia_database_parameter_c0` or None if not set
        """
        return self._data["Sandia Database Parameter c0"]

    @sandia_database_parameter_c0.setter
    def sandia_database_parameter_c0(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_c0`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_c0`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_c0`'.format(value))

        self._data["Sandia Database Parameter c0"] = value

    @property
    def sandia_database_parameter_c1(self):
        """Get sandia_database_parameter_c1

        Returns:
            float: the value of `sandia_database_parameter_c1` or None if not set
        """
        return self._data["Sandia Database Parameter c1"]

    @sandia_database_parameter_c1.setter
    def sandia_database_parameter_c1(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_c1`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_c1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_c1`'.format(value))

        self._data["Sandia Database Parameter c1"] = value

    @property
    def sandia_database_parameter_bvoc0(self):
        """Get sandia_database_parameter_bvoc0

        Returns:
            float: the value of `sandia_database_parameter_bvoc0` or None if not set
        """
        return self._data["Sandia Database Parameter BVoc0"]

    @sandia_database_parameter_bvoc0.setter
    def sandia_database_parameter_bvoc0(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_bvoc0`
        (Volts/degC)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_bvoc0`
                Units: V/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_bvoc0`'.format(value))

        self._data["Sandia Database Parameter BVoc0"] = value

    @property
    def sandia_database_parameter_mbvoc(self):
        """Get sandia_database_parameter_mbvoc

        Returns:
            float: the value of `sandia_database_parameter_mbvoc` or None if not set
        """
        return self._data["Sandia Database Parameter mBVoc"]

    @sandia_database_parameter_mbvoc.setter
    def sandia_database_parameter_mbvoc(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_mbvoc`
        (Volts/degC)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_mbvoc`
                Units: V/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_mbvoc`'.format(value))

        self._data["Sandia Database Parameter mBVoc"] = value

    @property
    def sandia_database_parameter_bvmp0(self):
        """Get sandia_database_parameter_bvmp0

        Returns:
            float: the value of `sandia_database_parameter_bvmp0` or None if not set
        """
        return self._data["Sandia Database Parameter BVmp0"]

    @sandia_database_parameter_bvmp0.setter
    def sandia_database_parameter_bvmp0(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_bvmp0`
        (Volts/degC)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_bvmp0`
                Units: V/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_bvmp0`'.format(value))

        self._data["Sandia Database Parameter BVmp0"] = value

    @property
    def sandia_database_parameter_mbvmp(self):
        """Get sandia_database_parameter_mbvmp

        Returns:
            float: the value of `sandia_database_parameter_mbvmp` or None if not set
        """
        return self._data["Sandia Database Parameter mBVmp"]

    @sandia_database_parameter_mbvmp.setter
    def sandia_database_parameter_mbvmp(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_mbvmp`
        (Volts/degC)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_mbvmp`
                Units: V/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_mbvmp`'.format(value))

        self._data["Sandia Database Parameter mBVmp"] = value

    @property
    def diode_factor(self):
        """Get diode_factor

        Returns:
            float: the value of `diode_factor` or None if not set
        """
        return self._data["Diode Factor"]

    @diode_factor.setter
    def diode_factor(self, value=None):
        """  Corresponds to IDD Field `diode_factor`
        (nondimensional)

        Args:
            value (float): value for IDD Field `diode_factor`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `diode_factor`'.format(value))

        self._data["Diode Factor"] = value

    @property
    def sandia_database_parameter_c2(self):
        """Get sandia_database_parameter_c2

        Returns:
            float: the value of `sandia_database_parameter_c2` or None if not set
        """
        return self._data["Sandia Database Parameter c2"]

    @sandia_database_parameter_c2.setter
    def sandia_database_parameter_c2(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_c2`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_c2`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_c2`'.format(value))

        self._data["Sandia Database Parameter c2"] = value

    @property
    def sandia_database_parameter_c3(self):
        """Get sandia_database_parameter_c3

        Returns:
            float: the value of `sandia_database_parameter_c3` or None if not set
        """
        return self._data["Sandia Database Parameter c3"]

    @sandia_database_parameter_c3.setter
    def sandia_database_parameter_c3(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_c3`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_c3`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_c3`'.format(value))

        self._data["Sandia Database Parameter c3"] = value

    @property
    def sandia_database_parameter_a0(self):
        """Get sandia_database_parameter_a0

        Returns:
            float: the value of `sandia_database_parameter_a0` or None if not set
        """
        return self._data["Sandia Database Parameter a0"]

    @sandia_database_parameter_a0.setter
    def sandia_database_parameter_a0(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_a0`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_a0`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_a0`'.format(value))

        self._data["Sandia Database Parameter a0"] = value

    @property
    def sandia_database_parameter_a1(self):
        """Get sandia_database_parameter_a1

        Returns:
            float: the value of `sandia_database_parameter_a1` or None if not set
        """
        return self._data["Sandia Database Parameter a1"]

    @sandia_database_parameter_a1.setter
    def sandia_database_parameter_a1(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_a1`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_a1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_a1`'.format(value))

        self._data["Sandia Database Parameter a1"] = value

    @property
    def sandia_database_parameter_a2(self):
        """Get sandia_database_parameter_a2

        Returns:
            float: the value of `sandia_database_parameter_a2` or None if not set
        """
        return self._data["Sandia Database Parameter a2"]

    @sandia_database_parameter_a2.setter
    def sandia_database_parameter_a2(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_a2`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_a2`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_a2`'.format(value))

        self._data["Sandia Database Parameter a2"] = value

    @property
    def sandia_database_parameter_a3(self):
        """Get sandia_database_parameter_a3

        Returns:
            float: the value of `sandia_database_parameter_a3` or None if not set
        """
        return self._data["Sandia Database Parameter a3"]

    @sandia_database_parameter_a3.setter
    def sandia_database_parameter_a3(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_a3`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_a3`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_a3`'.format(value))

        self._data["Sandia Database Parameter a3"] = value

    @property
    def sandia_database_parameter_a4(self):
        """Get sandia_database_parameter_a4

        Returns:
            float: the value of `sandia_database_parameter_a4` or None if not set
        """
        return self._data["Sandia Database Parameter a4"]

    @sandia_database_parameter_a4.setter
    def sandia_database_parameter_a4(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_a4`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_a4`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_a4`'.format(value))

        self._data["Sandia Database Parameter a4"] = value

    @property
    def sandia_database_parameter_b0(self):
        """Get sandia_database_parameter_b0

        Returns:
            float: the value of `sandia_database_parameter_b0` or None if not set
        """
        return self._data["Sandia Database Parameter b0"]

    @sandia_database_parameter_b0.setter
    def sandia_database_parameter_b0(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_b0`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_b0`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_b0`'.format(value))

        self._data["Sandia Database Parameter b0"] = value

    @property
    def sandia_database_parameter_b1(self):
        """Get sandia_database_parameter_b1

        Returns:
            float: the value of `sandia_database_parameter_b1` or None if not set
        """
        return self._data["Sandia Database Parameter b1"]

    @sandia_database_parameter_b1.setter
    def sandia_database_parameter_b1(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_b1`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_b1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_b1`'.format(value))

        self._data["Sandia Database Parameter b1"] = value

    @property
    def sandia_database_parameter_b2(self):
        """Get sandia_database_parameter_b2

        Returns:
            float: the value of `sandia_database_parameter_b2` or None if not set
        """
        return self._data["Sandia Database Parameter b2"]

    @sandia_database_parameter_b2.setter
    def sandia_database_parameter_b2(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_b2`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_b2`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_b2`'.format(value))

        self._data["Sandia Database Parameter b2"] = value

    @property
    def sandia_database_parameter_b3(self):
        """Get sandia_database_parameter_b3

        Returns:
            float: the value of `sandia_database_parameter_b3` or None if not set
        """
        return self._data["Sandia Database Parameter b3"]

    @sandia_database_parameter_b3.setter
    def sandia_database_parameter_b3(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_b3`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_b3`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_b3`'.format(value))

        self._data["Sandia Database Parameter b3"] = value

    @property
    def sandia_database_parameter_b4(self):
        """Get sandia_database_parameter_b4

        Returns:
            float: the value of `sandia_database_parameter_b4` or None if not set
        """
        return self._data["Sandia Database Parameter b4"]

    @sandia_database_parameter_b4.setter
    def sandia_database_parameter_b4(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_b4`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_b4`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_b4`'.format(value))

        self._data["Sandia Database Parameter b4"] = value

    @property
    def sandia_database_parameter_b5(self):
        """Get sandia_database_parameter_b5

        Returns:
            float: the value of `sandia_database_parameter_b5` or None if not set
        """
        return self._data["Sandia Database Parameter b5"]

    @sandia_database_parameter_b5.setter
    def sandia_database_parameter_b5(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_b5`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_b5`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_b5`'.format(value))

        self._data["Sandia Database Parameter b5"] = value

    @property
    def sandia_database_parameter_deltatc(self):
        """Get sandia_database_parameter_deltatc

        Returns:
            float: the value of `sandia_database_parameter_deltatc` or None if not set
        """
        return self._data["Sandia Database Parameter Delta(Tc)"]

    @sandia_database_parameter_deltatc.setter
    def sandia_database_parameter_deltatc(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_deltatc`
        (deg C)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_deltatc`
                Units: deltaC
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_deltatc`'.format(value))

        self._data["Sandia Database Parameter Delta(Tc)"] = value

    @property
    def sandia_database_parameter_fd(self):
        """Get sandia_database_parameter_fd

        Returns:
            float: the value of `sandia_database_parameter_fd` or None if not set
        """
        return self._data["Sandia Database Parameter fd"]

    @sandia_database_parameter_fd.setter
    def sandia_database_parameter_fd(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_fd`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_fd`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_fd`'.format(value))

        self._data["Sandia Database Parameter fd"] = value

    @property
    def sandia_database_parameter_a(self):
        """Get sandia_database_parameter_a

        Returns:
            float: the value of `sandia_database_parameter_a` or None if not set
        """
        return self._data["Sandia Database Parameter a"]

    @sandia_database_parameter_a.setter
    def sandia_database_parameter_a(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_a`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_a`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_a`'.format(value))

        self._data["Sandia Database Parameter a"] = value

    @property
    def sandia_database_parameter_b(self):
        """Get sandia_database_parameter_b

        Returns:
            float: the value of `sandia_database_parameter_b` or None if not set
        """
        return self._data["Sandia Database Parameter b"]

    @sandia_database_parameter_b.setter
    def sandia_database_parameter_b(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_b`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_b`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_b`'.format(value))

        self._data["Sandia Database Parameter b"] = value

    @property
    def sandia_database_parameter_c4(self):
        """Get sandia_database_parameter_c4

        Returns:
            float: the value of `sandia_database_parameter_c4` or None if not set
        """
        return self._data["Sandia Database Parameter c4"]

    @sandia_database_parameter_c4.setter
    def sandia_database_parameter_c4(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_c4`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_c4`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_c4`'.format(value))

        self._data["Sandia Database Parameter c4"] = value

    @property
    def sandia_database_parameter_c5(self):
        """Get sandia_database_parameter_c5

        Returns:
            float: the value of `sandia_database_parameter_c5` or None if not set
        """
        return self._data["Sandia Database Parameter c5"]

    @sandia_database_parameter_c5.setter
    def sandia_database_parameter_c5(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_c5`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_c5`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_c5`'.format(value))

        self._data["Sandia Database Parameter c5"] = value

    @property
    def sandia_database_parameter_ix0(self):
        """Get sandia_database_parameter_ix0

        Returns:
            float: the value of `sandia_database_parameter_ix0` or None if not set
        """
        return self._data["Sandia Database Parameter Ix0"]

    @sandia_database_parameter_ix0.setter
    def sandia_database_parameter_ix0(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_ix0`
        (Amps)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_ix0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_ix0`'.format(value))

        self._data["Sandia Database Parameter Ix0"] = value

    @property
    def sandia_database_parameter_ixx0(self):
        """Get sandia_database_parameter_ixx0

        Returns:
            float: the value of `sandia_database_parameter_ixx0` or None if not set
        """
        return self._data["Sandia Database Parameter Ixx0"]

    @sandia_database_parameter_ixx0.setter
    def sandia_database_parameter_ixx0(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_ixx0`
        (Amps)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_ixx0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_ixx0`'.format(value))

        self._data["Sandia Database Parameter Ixx0"] = value

    @property
    def sandia_database_parameter_c6(self):
        """Get sandia_database_parameter_c6

        Returns:
            float: the value of `sandia_database_parameter_c6` or None if not set
        """
        return self._data["Sandia Database Parameter c6"]

    @sandia_database_parameter_c6.setter
    def sandia_database_parameter_c6(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_c6`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_c6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_c6`'.format(value))

        self._data["Sandia Database Parameter c6"] = value

    @property
    def sandia_database_parameter_c7(self):
        """Get sandia_database_parameter_c7

        Returns:
            float: the value of `sandia_database_parameter_c7` or None if not set
        """
        return self._data["Sandia Database Parameter c7"]

    @sandia_database_parameter_c7.setter
    def sandia_database_parameter_c7(self, value=None):
        """  Corresponds to IDD Field `sandia_database_parameter_c7`
        (nondimensional)

        Args:
            value (float): value for IDD Field `sandia_database_parameter_c7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sandia_database_parameter_c7`'.format(value))

        self._data["Sandia Database Parameter c7"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.active_area))
        out.append(self._to_str(self.number_of_cells_in_series))
        out.append(self._to_str(self.number_of_cells_in_parallel))
        out.append(self._to_str(self.short_circuit_current))
        out.append(self._to_str(self.open_circuit_voltage))
        out.append(self._to_str(self.current_at_maximum_power_point))
        out.append(self._to_str(self.voltage_at_maximum_power_point))
        out.append(self._to_str(self.sandia_database_parameter_aisc))
        out.append(self._to_str(self.sandia_database_parameter_aimp))
        out.append(self._to_str(self.sandia_database_parameter_c0))
        out.append(self._to_str(self.sandia_database_parameter_c1))
        out.append(self._to_str(self.sandia_database_parameter_bvoc0))
        out.append(self._to_str(self.sandia_database_parameter_mbvoc))
        out.append(self._to_str(self.sandia_database_parameter_bvmp0))
        out.append(self._to_str(self.sandia_database_parameter_mbvmp))
        out.append(self._to_str(self.diode_factor))
        out.append(self._to_str(self.sandia_database_parameter_c2))
        out.append(self._to_str(self.sandia_database_parameter_c3))
        out.append(self._to_str(self.sandia_database_parameter_a0))
        out.append(self._to_str(self.sandia_database_parameter_a1))
        out.append(self._to_str(self.sandia_database_parameter_a2))
        out.append(self._to_str(self.sandia_database_parameter_a3))
        out.append(self._to_str(self.sandia_database_parameter_a4))
        out.append(self._to_str(self.sandia_database_parameter_b0))
        out.append(self._to_str(self.sandia_database_parameter_b1))
        out.append(self._to_str(self.sandia_database_parameter_b2))
        out.append(self._to_str(self.sandia_database_parameter_b3))
        out.append(self._to_str(self.sandia_database_parameter_b4))
        out.append(self._to_str(self.sandia_database_parameter_b5))
        out.append(self._to_str(self.sandia_database_parameter_deltatc))
        out.append(self._to_str(self.sandia_database_parameter_fd))
        out.append(self._to_str(self.sandia_database_parameter_a))
        out.append(self._to_str(self.sandia_database_parameter_b))
        out.append(self._to_str(self.sandia_database_parameter_c4))
        out.append(self._to_str(self.sandia_database_parameter_c5))
        out.append(self._to_str(self.sandia_database_parameter_ix0))
        out.append(self._to_str(self.sandia_database_parameter_ixx0))
        out.append(self._to_str(self.sandia_database_parameter_c6))
        out.append(self._to_str(self.sandia_database_parameter_c7))
        return ",".join(out)

class GeneratorFuelCell(object):
    """ Corresponds to IDD object `Generator:FuelCell`
        This generator model is the FC model from IEA Annex 42
    
    """
    internal_name = "Generator:FuelCell"
    field_count = 10
    required_fields = ["Name", "Power Module Name", "Air Supply Name", "Fuel Supply Name", "Water Supply Name", "Auxiliary Heater Name", "Heat Exchanger Name", "Electrical Storage Name", "Inverter Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Power Module Name"] = None
        self._data["Air Supply Name"] = None
        self._data["Fuel Supply Name"] = None
        self._data["Water Supply Name"] = None
        self._data["Auxiliary Heater Name"] = None
        self._data["Heat Exchanger Name"] = None
        self._data["Electrical Storage Name"] = None
        self._data["Inverter Name"] = None
        self._data["Stack Cooler Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_module_name = None
        else:
            self.power_module_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_supply_name = None
        else:
            self.air_supply_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_supply_name = None
        else:
            self.fuel_supply_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_supply_name = None
        else:
            self.water_supply_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.auxiliary_heater_name = None
        else:
            self.auxiliary_heater_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_exchanger_name = None
        else:
            self.heat_exchanger_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_storage_name = None
        else:
            self.electrical_storage_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inverter_name = None
        else:
            self.inverter_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cooler_name = None
        else:
            self.stack_cooler_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def power_module_name(self):
        """Get power_module_name

        Returns:
            str: the value of `power_module_name` or None if not set
        """
        return self._data["Power Module Name"]

    @power_module_name.setter
    def power_module_name(self, value=None):
        """  Corresponds to IDD Field `power_module_name`
        Enter the name of a Generator:FuelCell:PowerModule object.

        Args:
            value (str): value for IDD Field `power_module_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `power_module_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `power_module_name`')

        self._data["Power Module Name"] = value

    @property
    def air_supply_name(self):
        """Get air_supply_name

        Returns:
            str: the value of `air_supply_name` or None if not set
        """
        return self._data["Air Supply Name"]

    @air_supply_name.setter
    def air_supply_name(self, value=None):
        """  Corresponds to IDD Field `air_supply_name`
        Enter the name of a Generator:FuelCell:AirSupply object.

        Args:
            value (str): value for IDD Field `air_supply_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_name`')

        self._data["Air Supply Name"] = value

    @property
    def fuel_supply_name(self):
        """Get fuel_supply_name

        Returns:
            str: the value of `fuel_supply_name` or None if not set
        """
        return self._data["Fuel Supply Name"]

    @fuel_supply_name.setter
    def fuel_supply_name(self, value=None):
        """  Corresponds to IDD Field `fuel_supply_name`
        Enter the name of a Generator:FuelSupply object.

        Args:
            value (str): value for IDD Field `fuel_supply_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_supply_name`')

        self._data["Fuel Supply Name"] = value

    @property
    def water_supply_name(self):
        """Get water_supply_name

        Returns:
            str: the value of `water_supply_name` or None if not set
        """
        return self._data["Water Supply Name"]

    @water_supply_name.setter
    def water_supply_name(self, value=None):
        """  Corresponds to IDD Field `water_supply_name`
        Enter the name of a Generator:FuelCell:WaterSupply object.

        Args:
            value (str): value for IDD Field `water_supply_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_supply_name`')

        self._data["Water Supply Name"] = value

    @property
    def auxiliary_heater_name(self):
        """Get auxiliary_heater_name

        Returns:
            str: the value of `auxiliary_heater_name` or None if not set
        """
        return self._data["Auxiliary Heater Name"]

    @auxiliary_heater_name.setter
    def auxiliary_heater_name(self, value=None):
        """  Corresponds to IDD Field `auxiliary_heater_name`
        Enter the name of a Generator:FuelCell:AuxiliaryHeater object.

        Args:
            value (str): value for IDD Field `auxiliary_heater_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `auxiliary_heater_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `auxiliary_heater_name`')

        self._data["Auxiliary Heater Name"] = value

    @property
    def heat_exchanger_name(self):
        """Get heat_exchanger_name

        Returns:
            str: the value of `heat_exchanger_name` or None if not set
        """
        return self._data["Heat Exchanger Name"]

    @heat_exchanger_name.setter
    def heat_exchanger_name(self, value=None):
        """  Corresponds to IDD Field `heat_exchanger_name`
        Enter the name of a Generator:FuelCell:ExhaustGasToWaterHeatExchanger object.

        Args:
            value (str): value for IDD Field `heat_exchanger_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_name`')

        self._data["Heat Exchanger Name"] = value

    @property
    def electrical_storage_name(self):
        """Get electrical_storage_name

        Returns:
            str: the value of `electrical_storage_name` or None if not set
        """
        return self._data["Electrical Storage Name"]

    @electrical_storage_name.setter
    def electrical_storage_name(self, value=None):
        """  Corresponds to IDD Field `electrical_storage_name`
        Enter the name of a Generator:FuelCell:ElectricalStorage object.

        Args:
            value (str): value for IDD Field `electrical_storage_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_storage_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_storage_name`')

        self._data["Electrical Storage Name"] = value

    @property
    def inverter_name(self):
        """Get inverter_name

        Returns:
            str: the value of `inverter_name` or None if not set
        """
        return self._data["Inverter Name"]

    @inverter_name.setter
    def inverter_name(self, value=None):
        """  Corresponds to IDD Field `inverter_name`
        Enter the name of a Generator:FuelCell:Inverter object.

        Args:
            value (str): value for IDD Field `inverter_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inverter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inverter_name`')

        self._data["Inverter Name"] = value

    @property
    def stack_cooler_name(self):
        """Get stack_cooler_name

        Returns:
            str: the value of `stack_cooler_name` or None if not set
        """
        return self._data["Stack Cooler Name"]

    @stack_cooler_name.setter
    def stack_cooler_name(self, value=None):
        """  Corresponds to IDD Field `stack_cooler_name`
        Enter the name of a Generator:FuelCell:StackCooler object.
        optional, used for PEMFC

        Args:
            value (str): value for IDD Field `stack_cooler_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stack_cooler_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stack_cooler_name`')

        self._data["Stack Cooler Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.power_module_name))
        out.append(self._to_str(self.air_supply_name))
        out.append(self._to_str(self.fuel_supply_name))
        out.append(self._to_str(self.water_supply_name))
        out.append(self._to_str(self.auxiliary_heater_name))
        out.append(self._to_str(self.heat_exchanger_name))
        out.append(self._to_str(self.electrical_storage_name))
        out.append(self._to_str(self.inverter_name))
        out.append(self._to_str(self.stack_cooler_name))
        return ",".join(out)

class GeneratorFuelCellPowerModule(object):
    """ Corresponds to IDD object `Generator:FuelCell:PowerModule`
        Describe the core power module subsystem of a fuel cell power generator. This includes
        the fuel cell stack, fuel reformer, and whatever ancillary devices are included inside.
        If the model has multiple FC generators that are of the exact same type, then only one
        of these objects is needed and all the Generator:FuelCell objects can reference it.
    
    """
    internal_name = "Generator:FuelCell:PowerModule"
    field_count = 33
    required_fields = ["Name", "Efficiency Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:PowerModule`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Efficiency Curve Mode"] = None
        self._data["Efficiency Curve Name"] = None
        self._data["Nominal Efficiency"] = None
        self._data["Nominal Electrical Power"] = None
        self._data["Number of Stops at Start of Simulation"] = None
        self._data["Cycling Performance Degradation Coefficient"] = None
        self._data["Number of Run Hours at Beginning of Simulation"] = None
        self._data["Accumulated Run Time Degradation Coefficient"] = None
        self._data["Run Time Degradation Initiation Time Threshold"] = None
        self._data["Power Up Transient Limit"] = None
        self._data["Power Down Transient Limit"] = None
        self._data["Start Up Time"] = None
        self._data["Start Up Fuel"] = None
        self._data["Start Up Electricity Consumption"] = None
        self._data["Start Up Electricity Produced"] = None
        self._data["Shut Down Time"] = None
        self._data["Shut Down Fuel"] = None
        self._data["Shut Down Electricity Consumption"] = None
        self._data["Ancilliary Electricity Constant Term"] = None
        self._data["Ancilliary Electricity Linear Term"] = None
        self._data["Skin Loss Calculation Mode"] = None
        self._data["Zone Name"] = None
        self._data["Skin Loss Radiative Fraction"] = None
        self._data["Constant Skin Loss Rate"] = None
        self._data["Skin Loss U-Factor Times Area Term"] = None
        self._data["Skin Loss Quadratic Curve Name"] = None
        self._data["Dilution Air Flow Rate"] = None
        self._data["Stack Heat loss to Dilution Air"] = None
        self._data["Dilution Inlet Air Node Name"] = None
        self._data["Dilution Outlet Air Node Name"] = None
        self._data["Minimum Operating Point"] = None
        self._data["Maximum Operating Point"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_curve_mode = None
        else:
            self.efficiency_curve_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_curve_name = None
        else:
            self.efficiency_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_efficiency = None
        else:
            self.nominal_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_electrical_power = None
        else:
            self.nominal_electrical_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_stops_at_start_of_simulation = None
        else:
            self.number_of_stops_at_start_of_simulation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cycling_performance_degradation_coefficient = None
        else:
            self.cycling_performance_degradation_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_run_hours_at_beginning_of_simulation = None
        else:
            self.number_of_run_hours_at_beginning_of_simulation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.accumulated_run_time_degradation_coefficient = None
        else:
            self.accumulated_run_time_degradation_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.run_time_degradation_initiation_time_threshold = None
        else:
            self.run_time_degradation_initiation_time_threshold = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_up_transient_limit = None
        else:
            self.power_up_transient_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_down_transient_limit = None
        else:
            self.power_down_transient_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_up_time = None
        else:
            self.start_up_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_up_fuel = None
        else:
            self.start_up_fuel = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_up_electricity_consumption = None
        else:
            self.start_up_electricity_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_up_electricity_produced = None
        else:
            self.start_up_electricity_produced = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shut_down_time = None
        else:
            self.shut_down_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shut_down_fuel = None
        else:
            self.shut_down_fuel = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shut_down_electricity_consumption = None
        else:
            self.shut_down_electricity_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_electricity_constant_term = None
        else:
            self.ancilliary_electricity_constant_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_electricity_linear_term = None
        else:
            self.ancilliary_electricity_linear_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_calculation_mode = None
        else:
            self.skin_loss_calculation_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_radiative_fraction = None
        else:
            self.skin_loss_radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_skin_loss_rate = None
        else:
            self.constant_skin_loss_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_term = None
        else:
            self.skin_loss_ufactor_times_area_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_quadratic_curve_name = None
        else:
            self.skin_loss_quadratic_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dilution_air_flow_rate = None
        else:
            self.dilution_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_heat_loss_to_dilution_air = None
        else:
            self.stack_heat_loss_to_dilution_air = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dilution_inlet_air_node_name = None
        else:
            self.dilution_inlet_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dilution_outlet_air_node_name = None
        else:
            self.dilution_outlet_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_operating_point = None
        else:
            self.minimum_operating_point = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_operating_point = None
        else:
            self.maximum_operating_point = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def efficiency_curve_mode(self):
        """Get efficiency_curve_mode

        Returns:
            str: the value of `efficiency_curve_mode` or None if not set
        """
        return self._data["Efficiency Curve Mode"]

    @efficiency_curve_mode.setter
    def efficiency_curve_mode(self, value=None):
        """  Corresponds to IDD Field `efficiency_curve_mode`

        Args:
            value (str): value for IDD Field `efficiency_curve_mode`
                Accepted values are:
                      - Annex42
                      - Normalized
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_curve_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_mode`')
            vals = set()
            vals.add("Annex42")
            vals.add("Normalized")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `efficiency_curve_mode`'.format(value))

        self._data["Efficiency Curve Mode"] = value

    @property
    def efficiency_curve_name(self):
        """Get efficiency_curve_name

        Returns:
            str: the value of `efficiency_curve_name` or None if not set
        """
        return self._data["Efficiency Curve Name"]

    @efficiency_curve_name.setter
    def efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `efficiency_curve_name`
        Table:OneIndependentVariable

        Args:
            value (str): value for IDD Field `efficiency_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_name`')

        self._data["Efficiency Curve Name"] = value

    @property
    def nominal_efficiency(self):
        """Get nominal_efficiency

        Returns:
            float: the value of `nominal_efficiency` or None if not set
        """
        return self._data["Nominal Efficiency"]

    @nominal_efficiency.setter
    def nominal_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_efficiency`
        This field is not used.

        Args:
            value (float): value for IDD Field `nominal_efficiency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_efficiency`'.format(value))

        self._data["Nominal Efficiency"] = value

    @property
    def nominal_electrical_power(self):
        """Get nominal_electrical_power

        Returns:
            float: the value of `nominal_electrical_power` or None if not set
        """
        return self._data["Nominal Electrical Power"]

    @nominal_electrical_power.setter
    def nominal_electrical_power(self, value=None):
        """  Corresponds to IDD Field `nominal_electrical_power`
        This field is not used

        Args:
            value (float): value for IDD Field `nominal_electrical_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_electrical_power`'.format(value))

        self._data["Nominal Electrical Power"] = value

    @property
    def number_of_stops_at_start_of_simulation(self):
        """Get number_of_stops_at_start_of_simulation

        Returns:
            float: the value of `number_of_stops_at_start_of_simulation` or None if not set
        """
        return self._data["Number of Stops at Start of Simulation"]

    @number_of_stops_at_start_of_simulation.setter
    def number_of_stops_at_start_of_simulation(self, value=None):
        """  Corresponds to IDD Field `number_of_stops_at_start_of_simulation`
        this is Nstops in SOFC model specification

        Args:
            value (float): value for IDD Field `number_of_stops_at_start_of_simulation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_stops_at_start_of_simulation`'.format(value))

        self._data["Number of Stops at Start of Simulation"] = value

    @property
    def cycling_performance_degradation_coefficient(self):
        """Get cycling_performance_degradation_coefficient

        Returns:
            float: the value of `cycling_performance_degradation_coefficient` or None if not set
        """
        return self._data["Cycling Performance Degradation Coefficient"]

    @cycling_performance_degradation_coefficient.setter
    def cycling_performance_degradation_coefficient(self, value=None):
        """  Corresponds to IDD Field `cycling_performance_degradation_coefficient`
        this is D in SOFC model specification

        Args:
            value (float): value for IDD Field `cycling_performance_degradation_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cycling_performance_degradation_coefficient`'.format(value))

        self._data["Cycling Performance Degradation Coefficient"] = value

    @property
    def number_of_run_hours_at_beginning_of_simulation(self):
        """Get number_of_run_hours_at_beginning_of_simulation

        Returns:
            float: the value of `number_of_run_hours_at_beginning_of_simulation` or None if not set
        """
        return self._data["Number of Run Hours at Beginning of Simulation"]

    @number_of_run_hours_at_beginning_of_simulation.setter
    def number_of_run_hours_at_beginning_of_simulation(self, value=None):
        """  Corresponds to IDD Field `number_of_run_hours_at_beginning_of_simulation`

        Args:
            value (float): value for IDD Field `number_of_run_hours_at_beginning_of_simulation`
                Units: hr
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_run_hours_at_beginning_of_simulation`'.format(value))

        self._data["Number of Run Hours at Beginning of Simulation"] = value

    @property
    def accumulated_run_time_degradation_coefficient(self):
        """Get accumulated_run_time_degradation_coefficient

        Returns:
            float: the value of `accumulated_run_time_degradation_coefficient` or None if not set
        """
        return self._data["Accumulated Run Time Degradation Coefficient"]

    @accumulated_run_time_degradation_coefficient.setter
    def accumulated_run_time_degradation_coefficient(self, value=None):
        """  Corresponds to IDD Field `accumulated_run_time_degradation_coefficient`
        this is L in SOFC model specification

        Args:
            value (float): value for IDD Field `accumulated_run_time_degradation_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `accumulated_run_time_degradation_coefficient`'.format(value))

        self._data["Accumulated Run Time Degradation Coefficient"] = value

    @property
    def run_time_degradation_initiation_time_threshold(self):
        """Get run_time_degradation_initiation_time_threshold

        Returns:
            float: the value of `run_time_degradation_initiation_time_threshold` or None if not set
        """
        return self._data["Run Time Degradation Initiation Time Threshold"]

    @run_time_degradation_initiation_time_threshold.setter
    def run_time_degradation_initiation_time_threshold(self, value=None):
        """  Corresponds to IDD Field `run_time_degradation_initiation_time_threshold`

        Args:
            value (float): value for IDD Field `run_time_degradation_initiation_time_threshold`
                Units: hr
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `run_time_degradation_initiation_time_threshold`'.format(value))

        self._data["Run Time Degradation Initiation Time Threshold"] = value

    @property
    def power_up_transient_limit(self):
        """Get power_up_transient_limit

        Returns:
            float: the value of `power_up_transient_limit` or None if not set
        """
        return self._data["Power Up Transient Limit"]

    @power_up_transient_limit.setter
    def power_up_transient_limit(self, value=None):
        """  Corresponds to IDD Field `power_up_transient_limit`
        Maximum rate of change in elecrical output [power increasing]

        Args:
            value (float): value for IDD Field `power_up_transient_limit`
                Units: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_up_transient_limit`'.format(value))

        self._data["Power Up Transient Limit"] = value

    @property
    def power_down_transient_limit(self):
        """Get power_down_transient_limit

        Returns:
            float: the value of `power_down_transient_limit` or None if not set
        """
        return self._data["Power Down Transient Limit"]

    @power_down_transient_limit.setter
    def power_down_transient_limit(self, value=None):
        """  Corresponds to IDD Field `power_down_transient_limit`
        Maximum rate of change in elecrical output [power decreasing]
        Enter positive value for rate of change

        Args:
            value (float): value for IDD Field `power_down_transient_limit`
                Units: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_down_transient_limit`'.format(value))

        self._data["Power Down Transient Limit"] = value

    @property
    def start_up_time(self):
        """Get start_up_time

        Returns:
            float: the value of `start_up_time` or None if not set
        """
        return self._data["Start Up Time"]

    @start_up_time.setter
    def start_up_time(self, value=None):
        """  Corresponds to IDD Field `start_up_time`
        Time from start up to normal operation

        Args:
            value (float): value for IDD Field `start_up_time`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `start_up_time`'.format(value))

        self._data["Start Up Time"] = value

    @property
    def start_up_fuel(self):
        """Get start_up_fuel

        Returns:
            float: the value of `start_up_fuel` or None if not set
        """
        return self._data["Start Up Fuel"]

    @start_up_fuel.setter
    def start_up_fuel(self, value=None):
        """  Corresponds to IDD Field `start_up_fuel`

        Args:
            value (float): value for IDD Field `start_up_fuel`
                Units: kmol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `start_up_fuel`'.format(value))

        self._data["Start Up Fuel"] = value

    @property
    def start_up_electricity_consumption(self):
        """Get start_up_electricity_consumption

        Returns:
            float: the value of `start_up_electricity_consumption` or None if not set
        """
        return self._data["Start Up Electricity Consumption"]

    @start_up_electricity_consumption.setter
    def start_up_electricity_consumption(self, value=None):
        """  Corresponds to IDD Field `start_up_electricity_consumption`

        Args:
            value (float): value for IDD Field `start_up_electricity_consumption`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `start_up_electricity_consumption`'.format(value))

        self._data["Start Up Electricity Consumption"] = value

    @property
    def start_up_electricity_produced(self):
        """Get start_up_electricity_produced

        Returns:
            float: the value of `start_up_electricity_produced` or None if not set
        """
        return self._data["Start Up Electricity Produced"]

    @start_up_electricity_produced.setter
    def start_up_electricity_produced(self, value=None):
        """  Corresponds to IDD Field `start_up_electricity_produced`

        Args:
            value (float): value for IDD Field `start_up_electricity_produced`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `start_up_electricity_produced`'.format(value))

        self._data["Start Up Electricity Produced"] = value

    @property
    def shut_down_time(self):
        """Get shut_down_time

        Returns:
            float: the value of `shut_down_time` or None if not set
        """
        return self._data["Shut Down Time"]

    @shut_down_time.setter
    def shut_down_time(self, value=None):
        """  Corresponds to IDD Field `shut_down_time`

        Args:
            value (float): value for IDD Field `shut_down_time`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shut_down_time`'.format(value))

        self._data["Shut Down Time"] = value

    @property
    def shut_down_fuel(self):
        """Get shut_down_fuel

        Returns:
            float: the value of `shut_down_fuel` or None if not set
        """
        return self._data["Shut Down Fuel"]

    @shut_down_fuel.setter
    def shut_down_fuel(self, value=None):
        """  Corresponds to IDD Field `shut_down_fuel`

        Args:
            value (float): value for IDD Field `shut_down_fuel`
                Units: kmol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shut_down_fuel`'.format(value))

        self._data["Shut Down Fuel"] = value

    @property
    def shut_down_electricity_consumption(self):
        """Get shut_down_electricity_consumption

        Returns:
            float: the value of `shut_down_electricity_consumption` or None if not set
        """
        return self._data["Shut Down Electricity Consumption"]

    @shut_down_electricity_consumption.setter
    def shut_down_electricity_consumption(self, value=None):
        """  Corresponds to IDD Field `shut_down_electricity_consumption`

        Args:
            value (float): value for IDD Field `shut_down_electricity_consumption`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shut_down_electricity_consumption`'.format(value))

        self._data["Shut Down Electricity Consumption"] = value

    @property
    def ancilliary_electricity_constant_term(self):
        """Get ancilliary_electricity_constant_term

        Returns:
            float: the value of `ancilliary_electricity_constant_term` or None if not set
        """
        return self._data["Ancilliary Electricity Constant Term"]

    @ancilliary_electricity_constant_term.setter
    def ancilliary_electricity_constant_term(self, value=None):
        """  Corresponds to IDD Field `ancilliary_electricity_constant_term`

        Args:
            value (float): value for IDD Field `ancilliary_electricity_constant_term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_electricity_constant_term`'.format(value))

        self._data["Ancilliary Electricity Constant Term"] = value

    @property
    def ancilliary_electricity_linear_term(self):
        """Get ancilliary_electricity_linear_term

        Returns:
            float: the value of `ancilliary_electricity_linear_term` or None if not set
        """
        return self._data["Ancilliary Electricity Linear Term"]

    @ancilliary_electricity_linear_term.setter
    def ancilliary_electricity_linear_term(self, value=None):
        """  Corresponds to IDD Field `ancilliary_electricity_linear_term`

        Args:
            value (float): value for IDD Field `ancilliary_electricity_linear_term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_electricity_linear_term`'.format(value))

        self._data["Ancilliary Electricity Linear Term"] = value

    @property
    def skin_loss_calculation_mode(self):
        """Get skin_loss_calculation_mode

        Returns:
            str: the value of `skin_loss_calculation_mode` or None if not set
        """
        return self._data["Skin Loss Calculation Mode"]

    @skin_loss_calculation_mode.setter
    def skin_loss_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `skin_loss_calculation_mode`

        Args:
            value (str): value for IDD Field `skin_loss_calculation_mode`
                Accepted values are:
                      - ConstantRate
                      - UAForProcessGasTemperature
                      - QuadraticFunctionOfFuelRate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `skin_loss_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_calculation_mode`')
            vals = set()
            vals.add("ConstantRate")
            vals.add("UAForProcessGasTemperature")
            vals.add("QuadraticFunctionOfFuelRate")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `skin_loss_calculation_mode`'.format(value))

        self._data["Skin Loss Calculation Mode"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def skin_loss_radiative_fraction(self):
        """Get skin_loss_radiative_fraction

        Returns:
            float: the value of `skin_loss_radiative_fraction` or None if not set
        """
        return self._data["Skin Loss Radiative Fraction"]

    @skin_loss_radiative_fraction.setter
    def skin_loss_radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `skin_loss_radiative_fraction`

        Args:
            value (float): value for IDD Field `skin_loss_radiative_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `skin_loss_radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `skin_loss_radiative_fraction`')

        self._data["Skin Loss Radiative Fraction"] = value

    @property
    def constant_skin_loss_rate(self):
        """Get constant_skin_loss_rate

        Returns:
            float: the value of `constant_skin_loss_rate` or None if not set
        """
        return self._data["Constant Skin Loss Rate"]

    @constant_skin_loss_rate.setter
    def constant_skin_loss_rate(self, value=None):
        """  Corresponds to IDD Field `constant_skin_loss_rate`

        Args:
            value (float): value for IDD Field `constant_skin_loss_rate`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_skin_loss_rate`'.format(value))

        self._data["Constant Skin Loss Rate"] = value

    @property
    def skin_loss_ufactor_times_area_term(self):
        """Get skin_loss_ufactor_times_area_term

        Returns:
            float: the value of `skin_loss_ufactor_times_area_term` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Term"]

    @skin_loss_ufactor_times_area_term.setter
    def skin_loss_ufactor_times_area_term(self, value=None):
        """  Corresponds to IDD Field `skin_loss_ufactor_times_area_term`

        Args:
            value (float): value for IDD Field `skin_loss_ufactor_times_area_term`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_ufactor_times_area_term`'.format(value))

        self._data["Skin Loss U-Factor Times Area Term"] = value

    @property
    def skin_loss_quadratic_curve_name(self):
        """Get skin_loss_quadratic_curve_name

        Returns:
            str: the value of `skin_loss_quadratic_curve_name` or None if not set
        """
        return self._data["Skin Loss Quadratic Curve Name"]

    @skin_loss_quadratic_curve_name.setter
    def skin_loss_quadratic_curve_name(self, value=None):
        """  Corresponds to IDD Field `skin_loss_quadratic_curve_name`
        Table:OneIndependentVariable object can also be used
        curve is function of fuel use rate

        Args:
            value (str): value for IDD Field `skin_loss_quadratic_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `skin_loss_quadratic_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_quadratic_curve_name`')

        self._data["Skin Loss Quadratic Curve Name"] = value

    @property
    def dilution_air_flow_rate(self):
        """Get dilution_air_flow_rate

        Returns:
            float: the value of `dilution_air_flow_rate` or None if not set
        """
        return self._data["Dilution Air Flow Rate"]

    @dilution_air_flow_rate.setter
    def dilution_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `dilution_air_flow_rate`

        Args:
            value (float): value for IDD Field `dilution_air_flow_rate`
                Units: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dilution_air_flow_rate`'.format(value))

        self._data["Dilution Air Flow Rate"] = value

    @property
    def stack_heat_loss_to_dilution_air(self):
        """Get stack_heat_loss_to_dilution_air

        Returns:
            float: the value of `stack_heat_loss_to_dilution_air` or None if not set
        """
        return self._data["Stack Heat loss to Dilution Air"]

    @stack_heat_loss_to_dilution_air.setter
    def stack_heat_loss_to_dilution_air(self, value=None):
        """  Corresponds to IDD Field `stack_heat_loss_to_dilution_air`

        Args:
            value (float): value for IDD Field `stack_heat_loss_to_dilution_air`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_heat_loss_to_dilution_air`'.format(value))

        self._data["Stack Heat loss to Dilution Air"] = value

    @property
    def dilution_inlet_air_node_name(self):
        """Get dilution_inlet_air_node_name

        Returns:
            str: the value of `dilution_inlet_air_node_name` or None if not set
        """
        return self._data["Dilution Inlet Air Node Name"]

    @dilution_inlet_air_node_name.setter
    def dilution_inlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `dilution_inlet_air_node_name`

        Args:
            value (str): value for IDD Field `dilution_inlet_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dilution_inlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dilution_inlet_air_node_name`')

        self._data["Dilution Inlet Air Node Name"] = value

    @property
    def dilution_outlet_air_node_name(self):
        """Get dilution_outlet_air_node_name

        Returns:
            str: the value of `dilution_outlet_air_node_name` or None if not set
        """
        return self._data["Dilution Outlet Air Node Name"]

    @dilution_outlet_air_node_name.setter
    def dilution_outlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `dilution_outlet_air_node_name`

        Args:
            value (str): value for IDD Field `dilution_outlet_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dilution_outlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dilution_outlet_air_node_name`')

        self._data["Dilution Outlet Air Node Name"] = value

    @property
    def minimum_operating_point(self):
        """Get minimum_operating_point

        Returns:
            float: the value of `minimum_operating_point` or None if not set
        """
        return self._data["Minimum Operating Point"]

    @minimum_operating_point.setter
    def minimum_operating_point(self, value=None):
        """  Corresponds to IDD Field `minimum_operating_point`

        Args:
            value (float): value for IDD Field `minimum_operating_point`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_operating_point`'.format(value))

        self._data["Minimum Operating Point"] = value

    @property
    def maximum_operating_point(self):
        """Get maximum_operating_point

        Returns:
            float: the value of `maximum_operating_point` or None if not set
        """
        return self._data["Maximum Operating Point"]

    @maximum_operating_point.setter
    def maximum_operating_point(self, value=None):
        """  Corresponds to IDD Field `maximum_operating_point`

        Args:
            value (float): value for IDD Field `maximum_operating_point`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_operating_point`'.format(value))

        self._data["Maximum Operating Point"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.efficiency_curve_mode))
        out.append(self._to_str(self.efficiency_curve_name))
        out.append(self._to_str(self.nominal_efficiency))
        out.append(self._to_str(self.nominal_electrical_power))
        out.append(self._to_str(self.number_of_stops_at_start_of_simulation))
        out.append(self._to_str(self.cycling_performance_degradation_coefficient))
        out.append(self._to_str(self.number_of_run_hours_at_beginning_of_simulation))
        out.append(self._to_str(self.accumulated_run_time_degradation_coefficient))
        out.append(self._to_str(self.run_time_degradation_initiation_time_threshold))
        out.append(self._to_str(self.power_up_transient_limit))
        out.append(self._to_str(self.power_down_transient_limit))
        out.append(self._to_str(self.start_up_time))
        out.append(self._to_str(self.start_up_fuel))
        out.append(self._to_str(self.start_up_electricity_consumption))
        out.append(self._to_str(self.start_up_electricity_produced))
        out.append(self._to_str(self.shut_down_time))
        out.append(self._to_str(self.shut_down_fuel))
        out.append(self._to_str(self.shut_down_electricity_consumption))
        out.append(self._to_str(self.ancilliary_electricity_constant_term))
        out.append(self._to_str(self.ancilliary_electricity_linear_term))
        out.append(self._to_str(self.skin_loss_calculation_mode))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.skin_loss_radiative_fraction))
        out.append(self._to_str(self.constant_skin_loss_rate))
        out.append(self._to_str(self.skin_loss_ufactor_times_area_term))
        out.append(self._to_str(self.skin_loss_quadratic_curve_name))
        out.append(self._to_str(self.dilution_air_flow_rate))
        out.append(self._to_str(self.stack_heat_loss_to_dilution_air))
        out.append(self._to_str(self.dilution_inlet_air_node_name))
        out.append(self._to_str(self.dilution_outlet_air_node_name))
        out.append(self._to_str(self.minimum_operating_point))
        out.append(self._to_str(self.maximum_operating_point))
        return ",".join(out)

class GeneratorFuelCellAirSupply(object):
    """ Corresponds to IDD object `Generator:FuelCell:AirSupply`
        Used to define details of the air supply subsystem for a fuel cell power generator.
    
    """
    internal_name = "Generator:FuelCell:AirSupply"
    field_count = 22
    required_fields = ["Name", "Air Supply Rate Calculation Mode", "Air Intake Heat Recovery Mode", "Air Supply Constituent Mode"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:AirSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Blower Power Curve Name"] = None
        self._data["Blower Heat Loss Factor"] = None
        self._data["Air Supply Rate Calculation Mode"] = None
        self._data["Stoichiometric Ratio"] = None
        self._data["Air Rate Function of Electric Power Curve Name"] = None
        self._data["Air Rate Air Temperature Coefficient"] = None
        self._data["Air Rate Function of Fuel Rate Curve Name"] = None
        self._data["Air Intake Heat Recovery Mode"] = None
        self._data["Air Supply Constituent Mode"] = None
        self._data["Number of UserDefined Constituents"] = None
        self._data["Constituent 1 Name"] = None
        self._data["Molar Fraction 1"] = None
        self._data["Constituent 2 Name"] = None
        self._data["Molar Fraction 2"] = None
        self._data["Constituent 3 Name"] = None
        self._data["Molar Fraction 3"] = None
        self._data["Constituent 4 Name"] = None
        self._data["Molar Fraction 4"] = None
        self._data["Constituent 5 Name"] = None
        self._data["Molar Fraction 5"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blower_power_curve_name = None
        else:
            self.blower_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blower_heat_loss_factor = None
        else:
            self.blower_heat_loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_supply_rate_calculation_mode = None
        else:
            self.air_supply_rate_calculation_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stoichiometric_ratio = None
        else:
            self.stoichiometric_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_rate_function_of_electric_power_curve_name = None
        else:
            self.air_rate_function_of_electric_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_rate_air_temperature_coefficient = None
        else:
            self.air_rate_air_temperature_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_rate_function_of_fuel_rate_curve_name = None
        else:
            self.air_rate_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_intake_heat_recovery_mode = None
        else:
            self.air_intake_heat_recovery_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_supply_constituent_mode = None
        else:
            self.air_supply_constituent_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_userdefined_constituents = None
        else:
            self.number_of_userdefined_constituents = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_1_name = None
        else:
            self.constituent_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_1 = None
        else:
            self.molar_fraction_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_2_name = None
        else:
            self.constituent_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_2 = None
        else:
            self.molar_fraction_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_3_name = None
        else:
            self.constituent_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_3 = None
        else:
            self.molar_fraction_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_4_name = None
        else:
            self.constituent_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_4 = None
        else:
            self.molar_fraction_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_5_name = None
        else:
            self.constituent_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_5 = None
        else:
            self.molar_fraction_5 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def blower_power_curve_name(self):
        """Get blower_power_curve_name

        Returns:
            str: the value of `blower_power_curve_name` or None if not set
        """
        return self._data["Blower Power Curve Name"]

    @blower_power_curve_name.setter
    def blower_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `blower_power_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `blower_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `blower_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `blower_power_curve_name`')

        self._data["Blower Power Curve Name"] = value

    @property
    def blower_heat_loss_factor(self):
        """Get blower_heat_loss_factor

        Returns:
            float: the value of `blower_heat_loss_factor` or None if not set
        """
        return self._data["Blower Heat Loss Factor"]

    @blower_heat_loss_factor.setter
    def blower_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `blower_heat_loss_factor`

        Args:
            value (float): value for IDD Field `blower_heat_loss_factor`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `blower_heat_loss_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `blower_heat_loss_factor`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `blower_heat_loss_factor`')

        self._data["Blower Heat Loss Factor"] = value

    @property
    def air_supply_rate_calculation_mode(self):
        """Get air_supply_rate_calculation_mode

        Returns:
            str: the value of `air_supply_rate_calculation_mode` or None if not set
        """
        return self._data["Air Supply Rate Calculation Mode"]

    @air_supply_rate_calculation_mode.setter
    def air_supply_rate_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `air_supply_rate_calculation_mode`

        Args:
            value (str): value for IDD Field `air_supply_rate_calculation_mode`
                Accepted values are:
                      - AirRatiobyStoics
                      - QuadraticFunctionofElectricPower
                      - QuadraticFunctionofFuelRate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_supply_rate_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_rate_calculation_mode`')
            vals = set()
            vals.add("AirRatiobyStoics")
            vals.add("QuadraticFunctionofElectricPower")
            vals.add("QuadraticFunctionofFuelRate")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `air_supply_rate_calculation_mode`'.format(value))

        self._data["Air Supply Rate Calculation Mode"] = value

    @property
    def stoichiometric_ratio(self):
        """Get stoichiometric_ratio

        Returns:
            float: the value of `stoichiometric_ratio` or None if not set
        """
        return self._data["Stoichiometric Ratio"]

    @stoichiometric_ratio.setter
    def stoichiometric_ratio(self, value=None):
        """  Corresponds to IDD Field `stoichiometric_ratio`
        This is the excess air "stoics"
        the value entered is incremented by 1 in the model.

        Args:
            value (float): value for IDD Field `stoichiometric_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stoichiometric_ratio`'.format(value))

        self._data["Stoichiometric Ratio"] = value

    @property
    def air_rate_function_of_electric_power_curve_name(self):
        """Get air_rate_function_of_electric_power_curve_name

        Returns:
            str: the value of `air_rate_function_of_electric_power_curve_name` or None if not set
        """
        return self._data["Air Rate Function of Electric Power Curve Name"]

    @air_rate_function_of_electric_power_curve_name.setter
    def air_rate_function_of_electric_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `air_rate_function_of_electric_power_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `air_rate_function_of_electric_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_rate_function_of_electric_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_rate_function_of_electric_power_curve_name`')

        self._data["Air Rate Function of Electric Power Curve Name"] = value

    @property
    def air_rate_air_temperature_coefficient(self):
        """Get air_rate_air_temperature_coefficient

        Returns:
            float: the value of `air_rate_air_temperature_coefficient` or None if not set
        """
        return self._data["Air Rate Air Temperature Coefficient"]

    @air_rate_air_temperature_coefficient.setter
    def air_rate_air_temperature_coefficient(self, value=None):
        """  Corresponds to IDD Field `air_rate_air_temperature_coefficient`

        Args:
            value (float): value for IDD Field `air_rate_air_temperature_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `air_rate_air_temperature_coefficient`'.format(value))

        self._data["Air Rate Air Temperature Coefficient"] = value

    @property
    def air_rate_function_of_fuel_rate_curve_name(self):
        """Get air_rate_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `air_rate_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Air Rate Function of Fuel Rate Curve Name"]

    @air_rate_function_of_fuel_rate_curve_name.setter
    def air_rate_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `air_rate_function_of_fuel_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `air_rate_function_of_fuel_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_rate_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_rate_function_of_fuel_rate_curve_name`')

        self._data["Air Rate Function of Fuel Rate Curve Name"] = value

    @property
    def air_intake_heat_recovery_mode(self):
        """Get air_intake_heat_recovery_mode

        Returns:
            str: the value of `air_intake_heat_recovery_mode` or None if not set
        """
        return self._data["Air Intake Heat Recovery Mode"]

    @air_intake_heat_recovery_mode.setter
    def air_intake_heat_recovery_mode(self, value=None):
        """  Corresponds to IDD Field `air_intake_heat_recovery_mode`

        Args:
            value (str): value for IDD Field `air_intake_heat_recovery_mode`
                Accepted values are:
                      - NoRecovery
                      - RecoverBurnerInverterStorage
                      - RecoverAuxiliaryBurner
                      - RecoverInverterandStorage
                      - RecoverInverter
                      - RecoverElectricalStorage
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_intake_heat_recovery_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_intake_heat_recovery_mode`')
            vals = set()
            vals.add("NoRecovery")
            vals.add("RecoverBurnerInverterStorage")
            vals.add("RecoverAuxiliaryBurner")
            vals.add("RecoverInverterandStorage")
            vals.add("RecoverInverter")
            vals.add("RecoverElectricalStorage")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `air_intake_heat_recovery_mode`'.format(value))

        self._data["Air Intake Heat Recovery Mode"] = value

    @property
    def air_supply_constituent_mode(self):
        """Get air_supply_constituent_mode

        Returns:
            str: the value of `air_supply_constituent_mode` or None if not set
        """
        return self._data["Air Supply Constituent Mode"]

    @air_supply_constituent_mode.setter
    def air_supply_constituent_mode(self, value=None):
        """  Corresponds to IDD Field `air_supply_constituent_mode`

        Args:
            value (str): value for IDD Field `air_supply_constituent_mode`
                Accepted values are:
                      - AmbientAir
                      - UserDefinedConstituents
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_supply_constituent_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_constituent_mode`')
            vals = set()
            vals.add("AmbientAir")
            vals.add("UserDefinedConstituents")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `air_supply_constituent_mode`'.format(value))

        self._data["Air Supply Constituent Mode"] = value

    @property
    def number_of_userdefined_constituents(self):
        """Get number_of_userdefined_constituents

        Returns:
            float: the value of `number_of_userdefined_constituents` or None if not set
        """
        return self._data["Number of UserDefined Constituents"]

    @number_of_userdefined_constituents.setter
    def number_of_userdefined_constituents(self, value=None):
        """  Corresponds to IDD Field `number_of_userdefined_constituents`

        Args:
            value (float): value for IDD Field `number_of_userdefined_constituents`
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_userdefined_constituents`'.format(value))
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `number_of_userdefined_constituents`')

        self._data["Number of UserDefined Constituents"] = value

    @property
    def constituent_1_name(self):
        """Get constituent_1_name

        Returns:
            str: the value of `constituent_1_name` or None if not set
        """
        return self._data["Constituent 1 Name"]

    @constituent_1_name.setter
    def constituent_1_name(self, value=None):
        """  Corresponds to IDD Field `constituent_1_name`

        Args:
            value (str): value for IDD Field `constituent_1_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_1_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_1_name`'.format(value))

        self._data["Constituent 1 Name"] = value

    @property
    def molar_fraction_1(self):
        """Get molar_fraction_1

        Returns:
            float: the value of `molar_fraction_1` or None if not set
        """
        return self._data["Molar Fraction 1"]

    @molar_fraction_1.setter
    def molar_fraction_1(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_1`

        Args:
            value (float): value for IDD Field `molar_fraction_1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_1`')

        self._data["Molar Fraction 1"] = value

    @property
    def constituent_2_name(self):
        """Get constituent_2_name

        Returns:
            str: the value of `constituent_2_name` or None if not set
        """
        return self._data["Constituent 2 Name"]

    @constituent_2_name.setter
    def constituent_2_name(self, value=None):
        """  Corresponds to IDD Field `constituent_2_name`

        Args:
            value (str): value for IDD Field `constituent_2_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_2_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_2_name`'.format(value))

        self._data["Constituent 2 Name"] = value

    @property
    def molar_fraction_2(self):
        """Get molar_fraction_2

        Returns:
            float: the value of `molar_fraction_2` or None if not set
        """
        return self._data["Molar Fraction 2"]

    @molar_fraction_2.setter
    def molar_fraction_2(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_2`

        Args:
            value (float): value for IDD Field `molar_fraction_2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_2`')

        self._data["Molar Fraction 2"] = value

    @property
    def constituent_3_name(self):
        """Get constituent_3_name

        Returns:
            str: the value of `constituent_3_name` or None if not set
        """
        return self._data["Constituent 3 Name"]

    @constituent_3_name.setter
    def constituent_3_name(self, value=None):
        """  Corresponds to IDD Field `constituent_3_name`

        Args:
            value (str): value for IDD Field `constituent_3_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_3_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_3_name`'.format(value))

        self._data["Constituent 3 Name"] = value

    @property
    def molar_fraction_3(self):
        """Get molar_fraction_3

        Returns:
            float: the value of `molar_fraction_3` or None if not set
        """
        return self._data["Molar Fraction 3"]

    @molar_fraction_3.setter
    def molar_fraction_3(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_3`

        Args:
            value (float): value for IDD Field `molar_fraction_3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_3`')

        self._data["Molar Fraction 3"] = value

    @property
    def constituent_4_name(self):
        """Get constituent_4_name

        Returns:
            str: the value of `constituent_4_name` or None if not set
        """
        return self._data["Constituent 4 Name"]

    @constituent_4_name.setter
    def constituent_4_name(self, value=None):
        """  Corresponds to IDD Field `constituent_4_name`

        Args:
            value (str): value for IDD Field `constituent_4_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_4_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_4_name`'.format(value))

        self._data["Constituent 4 Name"] = value

    @property
    def molar_fraction_4(self):
        """Get molar_fraction_4

        Returns:
            float: the value of `molar_fraction_4` or None if not set
        """
        return self._data["Molar Fraction 4"]

    @molar_fraction_4.setter
    def molar_fraction_4(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_4`

        Args:
            value (float): value for IDD Field `molar_fraction_4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_4`')

        self._data["Molar Fraction 4"] = value

    @property
    def constituent_5_name(self):
        """Get constituent_5_name

        Returns:
            str: the value of `constituent_5_name` or None if not set
        """
        return self._data["Constituent 5 Name"]

    @constituent_5_name.setter
    def constituent_5_name(self, value=None):
        """  Corresponds to IDD Field `constituent_5_name`

        Args:
            value (str): value for IDD Field `constituent_5_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_5_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_5_name`'.format(value))

        self._data["Constituent 5 Name"] = value

    @property
    def molar_fraction_5(self):
        """Get molar_fraction_5

        Returns:
            float: the value of `molar_fraction_5` or None if not set
        """
        return self._data["Molar Fraction 5"]

    @molar_fraction_5.setter
    def molar_fraction_5(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_5`

        Args:
            value (float): value for IDD Field `molar_fraction_5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_5`')

        self._data["Molar Fraction 5"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.blower_power_curve_name))
        out.append(self._to_str(self.blower_heat_loss_factor))
        out.append(self._to_str(self.air_supply_rate_calculation_mode))
        out.append(self._to_str(self.stoichiometric_ratio))
        out.append(self._to_str(self.air_rate_function_of_electric_power_curve_name))
        out.append(self._to_str(self.air_rate_air_temperature_coefficient))
        out.append(self._to_str(self.air_rate_function_of_fuel_rate_curve_name))
        out.append(self._to_str(self.air_intake_heat_recovery_mode))
        out.append(self._to_str(self.air_supply_constituent_mode))
        out.append(self._to_str(self.number_of_userdefined_constituents))
        out.append(self._to_str(self.constituent_1_name))
        out.append(self._to_str(self.molar_fraction_1))
        out.append(self._to_str(self.constituent_2_name))
        out.append(self._to_str(self.molar_fraction_2))
        out.append(self._to_str(self.constituent_3_name))
        out.append(self._to_str(self.molar_fraction_3))
        out.append(self._to_str(self.constituent_4_name))
        out.append(self._to_str(self.molar_fraction_4))
        out.append(self._to_str(self.constituent_5_name))
        out.append(self._to_str(self.molar_fraction_5))
        return ",".join(out)

class GeneratorFuelCellWaterSupply(object):
    """ Corresponds to IDD object `Generator:FuelCell:WaterSupply`
        Used to provide details of the water supply subsystem for a fuel cell power generator.
        This water is used for steam reforming of the fuel and is not the same
        as the water used for thermal heat recovery.
    
    """
    internal_name = "Generator:FuelCell:WaterSupply"
    field_count = 7
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:WaterSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"] = None
        self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"] = None
        self._data["Pump Heat Loss Factor"] = None
        self._data["Water Temperature Modeling Mode"] = None
        self._data["Water Temperature Reference Node Name"] = None
        self._data["Water Temperature Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reformer_water_flow_rate_function_of_fuel_rate_curve_name = None
        else:
            self.reformer_water_flow_rate_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reformer_water_pump_power_function_of_fuel_rate_curve_name = None
        else:
            self.reformer_water_pump_power_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_heat_loss_factor = None
        else:
            self.pump_heat_loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_temperature_modeling_mode = None
        else:
            self.water_temperature_modeling_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_temperature_reference_node_name = None
        else:
            self.water_temperature_reference_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_temperature_schedule_name = None
        else:
            self.water_temperature_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reformer_water_flow_rate_function_of_fuel_rate_curve_name(self):
        """Get reformer_water_flow_rate_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `reformer_water_flow_rate_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"]

    @reformer_water_flow_rate_function_of_fuel_rate_curve_name.setter
    def reformer_water_flow_rate_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`')

        self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"] = value

    @property
    def reformer_water_pump_power_function_of_fuel_rate_curve_name(self):
        """Get reformer_water_pump_power_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `reformer_water_pump_power_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"]

    @reformer_water_pump_power_function_of_fuel_rate_curve_name.setter
    def reformer_water_pump_power_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `reformer_water_pump_power_function_of_fuel_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `reformer_water_pump_power_function_of_fuel_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reformer_water_pump_power_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reformer_water_pump_power_function_of_fuel_rate_curve_name`')

        self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"] = value

    @property
    def pump_heat_loss_factor(self):
        """Get pump_heat_loss_factor

        Returns:
            float: the value of `pump_heat_loss_factor` or None if not set
        """
        return self._data["Pump Heat Loss Factor"]

    @pump_heat_loss_factor.setter
    def pump_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `pump_heat_loss_factor`

        Args:
            value (float): value for IDD Field `pump_heat_loss_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pump_heat_loss_factor`'.format(value))

        self._data["Pump Heat Loss Factor"] = value

    @property
    def water_temperature_modeling_mode(self):
        """Get water_temperature_modeling_mode

        Returns:
            str: the value of `water_temperature_modeling_mode` or None if not set
        """
        return self._data["Water Temperature Modeling Mode"]

    @water_temperature_modeling_mode.setter
    def water_temperature_modeling_mode(self, value=None):
        """  Corresponds to IDD Field `water_temperature_modeling_mode`

        Args:
            value (str): value for IDD Field `water_temperature_modeling_mode`
                Accepted values are:
                      - TemperatureFromAirNode
                      - TemperatureFromWaterNode
                      - TemperatureFromSchedule
                      - MainsWaterTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_temperature_modeling_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_modeling_mode`')
            vals = set()
            vals.add("TemperatureFromAirNode")
            vals.add("TemperatureFromWaterNode")
            vals.add("TemperatureFromSchedule")
            vals.add("MainsWaterTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `water_temperature_modeling_mode`'.format(value))

        self._data["Water Temperature Modeling Mode"] = value

    @property
    def water_temperature_reference_node_name(self):
        """Get water_temperature_reference_node_name

        Returns:
            str: the value of `water_temperature_reference_node_name` or None if not set
        """
        return self._data["Water Temperature Reference Node Name"]

    @water_temperature_reference_node_name.setter
    def water_temperature_reference_node_name(self, value=None):
        """  Corresponds to IDD Field `water_temperature_reference_node_name`

        Args:
            value (str): value for IDD Field `water_temperature_reference_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_temperature_reference_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_reference_node_name`')

        self._data["Water Temperature Reference Node Name"] = value

    @property
    def water_temperature_schedule_name(self):
        """Get water_temperature_schedule_name

        Returns:
            str: the value of `water_temperature_schedule_name` or None if not set
        """
        return self._data["Water Temperature Schedule Name"]

    @water_temperature_schedule_name.setter
    def water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `water_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `water_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_schedule_name`')

        self._data["Water Temperature Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reformer_water_flow_rate_function_of_fuel_rate_curve_name))
        out.append(self._to_str(self.reformer_water_pump_power_function_of_fuel_rate_curve_name))
        out.append(self._to_str(self.pump_heat_loss_factor))
        out.append(self._to_str(self.water_temperature_modeling_mode))
        out.append(self._to_str(self.water_temperature_reference_node_name))
        out.append(self._to_str(self.water_temperature_schedule_name))
        return ",".join(out)

class GeneratorFuelCellAuxiliaryHeater(object):
    """ Corresponds to IDD object `Generator:FuelCell:AuxiliaryHeater`
        Intended for modeling an auxiliary heater for a fuel cell power generator, however this
        portion of the model is not yet available. The program still requires one of these
        objects be included even though the data are not yet used (so that internal data
        structures can be allocated).
    
    """
    internal_name = "Generator:FuelCell:AuxiliaryHeater"
    field_count = 12
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:AuxiliaryHeater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Excess Air Ratio"] = None
        self._data["Ancilliary Power Constant Term"] = None
        self._data["Ancilliary Power Linear Term"] = None
        self._data["Skin Loss U-Factor Times Area Value"] = None
        self._data["Skin Loss Destination"] = None
        self._data["Zone Name to Receive Skin Losses"] = None
        self._data["Heating Capacity Units"] = None
        self._data["Maximum Heating Capacity in Watts"] = None
        self._data["Minimum Heating Capacity in Watts"] = None
        self._data["Maximum Heating Capacity in Kmol per Second"] = None
        self._data["Minimum Heating Capacity in Kmol per Second"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.excess_air_ratio = None
        else:
            self.excess_air_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_power_constant_term = None
        else:
            self.ancilliary_power_constant_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_power_linear_term = None
        else:
            self.ancilliary_power_linear_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_value = None
        else:
            self.skin_loss_ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_destination = None
        else:
            self.skin_loss_destination = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name_to_receive_skin_losses = None
        else:
            self.zone_name_to_receive_skin_losses = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_units = None
        else:
            self.heating_capacity_units = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_capacity_in_watts = None
        else:
            self.maximum_heating_capacity_in_watts = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_heating_capacity_in_watts = None
        else:
            self.minimum_heating_capacity_in_watts = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_capacity_in_kmol_per_second = None
        else:
            self.maximum_heating_capacity_in_kmol_per_second = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_heating_capacity_in_kmol_per_second = None
        else:
            self.minimum_heating_capacity_in_kmol_per_second = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def excess_air_ratio(self):
        """Get excess_air_ratio

        Returns:
            float: the value of `excess_air_ratio` or None if not set
        """
        return self._data["Excess Air Ratio"]

    @excess_air_ratio.setter
    def excess_air_ratio(self, value=None):
        """  Corresponds to IDD Field `excess_air_ratio`

        Args:
            value (float): value for IDD Field `excess_air_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `excess_air_ratio`'.format(value))

        self._data["Excess Air Ratio"] = value

    @property
    def ancilliary_power_constant_term(self):
        """Get ancilliary_power_constant_term

        Returns:
            float: the value of `ancilliary_power_constant_term` or None if not set
        """
        return self._data["Ancilliary Power Constant Term"]

    @ancilliary_power_constant_term.setter
    def ancilliary_power_constant_term(self, value=None):
        """  Corresponds to IDD Field `ancilliary_power_constant_term`

        Args:
            value (float): value for IDD Field `ancilliary_power_constant_term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_power_constant_term`'.format(value))

        self._data["Ancilliary Power Constant Term"] = value

    @property
    def ancilliary_power_linear_term(self):
        """Get ancilliary_power_linear_term

        Returns:
            float: the value of `ancilliary_power_linear_term` or None if not set
        """
        return self._data["Ancilliary Power Linear Term"]

    @ancilliary_power_linear_term.setter
    def ancilliary_power_linear_term(self, value=None):
        """  Corresponds to IDD Field `ancilliary_power_linear_term`

        Args:
            value (float): value for IDD Field `ancilliary_power_linear_term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_power_linear_term`'.format(value))

        self._data["Ancilliary Power Linear Term"] = value

    @property
    def skin_loss_ufactor_times_area_value(self):
        """Get skin_loss_ufactor_times_area_value

        Returns:
            float: the value of `skin_loss_ufactor_times_area_value` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Value"]

    @skin_loss_ufactor_times_area_value.setter
    def skin_loss_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `skin_loss_ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `skin_loss_ufactor_times_area_value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_ufactor_times_area_value`'.format(value))

        self._data["Skin Loss U-Factor Times Area Value"] = value

    @property
    def skin_loss_destination(self):
        """Get skin_loss_destination

        Returns:
            str: the value of `skin_loss_destination` or None if not set
        """
        return self._data["Skin Loss Destination"]

    @skin_loss_destination.setter
    def skin_loss_destination(self, value=None):
        """  Corresponds to IDD Field `skin_loss_destination`

        Args:
            value (str): value for IDD Field `skin_loss_destination`
                Accepted values are:
                      - SurroundingZone
                      - AirInletForFuelCell
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `skin_loss_destination`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_destination`')
            vals = set()
            vals.add("SurroundingZone")
            vals.add("AirInletForFuelCell")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `skin_loss_destination`'.format(value))

        self._data["Skin Loss Destination"] = value

    @property
    def zone_name_to_receive_skin_losses(self):
        """Get zone_name_to_receive_skin_losses

        Returns:
            str: the value of `zone_name_to_receive_skin_losses` or None if not set
        """
        return self._data["Zone Name to Receive Skin Losses"]

    @zone_name_to_receive_skin_losses.setter
    def zone_name_to_receive_skin_losses(self, value=None):
        """  Corresponds to IDD Field `zone_name_to_receive_skin_losses`

        Args:
            value (str): value for IDD Field `zone_name_to_receive_skin_losses`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name_to_receive_skin_losses`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name_to_receive_skin_losses`')

        self._data["Zone Name to Receive Skin Losses"] = value

    @property
    def heating_capacity_units(self):
        """Get heating_capacity_units

        Returns:
            str: the value of `heating_capacity_units` or None if not set
        """
        return self._data["Heating Capacity Units"]

    @heating_capacity_units.setter
    def heating_capacity_units(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_units`

        Args:
            value (str): value for IDD Field `heating_capacity_units`
                Accepted values are:
                      - Watts
                      - kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_units`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_units`')
            vals = set()
            vals.add("Watts")
            vals.add("kmol/s")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_capacity_units`'.format(value))

        self._data["Heating Capacity Units"] = value

    @property
    def maximum_heating_capacity_in_watts(self):
        """Get maximum_heating_capacity_in_watts

        Returns:
            float: the value of `maximum_heating_capacity_in_watts` or None if not set
        """
        return self._data["Maximum Heating Capacity in Watts"]

    @maximum_heating_capacity_in_watts.setter
    def maximum_heating_capacity_in_watts(self, value=None):
        """  Corresponds to IDD Field `maximum_heating_capacity_in_watts`

        Args:
            value (float): value for IDD Field `maximum_heating_capacity_in_watts`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_capacity_in_watts`'.format(value))

        self._data["Maximum Heating Capacity in Watts"] = value

    @property
    def minimum_heating_capacity_in_watts(self):
        """Get minimum_heating_capacity_in_watts

        Returns:
            float: the value of `minimum_heating_capacity_in_watts` or None if not set
        """
        return self._data["Minimum Heating Capacity in Watts"]

    @minimum_heating_capacity_in_watts.setter
    def minimum_heating_capacity_in_watts(self, value=None):
        """  Corresponds to IDD Field `minimum_heating_capacity_in_watts`

        Args:
            value (float): value for IDD Field `minimum_heating_capacity_in_watts`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_heating_capacity_in_watts`'.format(value))

        self._data["Minimum Heating Capacity in Watts"] = value

    @property
    def maximum_heating_capacity_in_kmol_per_second(self):
        """Get maximum_heating_capacity_in_kmol_per_second

        Returns:
            float: the value of `maximum_heating_capacity_in_kmol_per_second` or None if not set
        """
        return self._data["Maximum Heating Capacity in Kmol per Second"]

    @maximum_heating_capacity_in_kmol_per_second.setter
    def maximum_heating_capacity_in_kmol_per_second(self, value=None):
        """  Corresponds to IDD Field `maximum_heating_capacity_in_kmol_per_second`

        Args:
            value (float): value for IDD Field `maximum_heating_capacity_in_kmol_per_second`
                Units: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_capacity_in_kmol_per_second`'.format(value))

        self._data["Maximum Heating Capacity in Kmol per Second"] = value

    @property
    def minimum_heating_capacity_in_kmol_per_second(self):
        """Get minimum_heating_capacity_in_kmol_per_second

        Returns:
            float: the value of `minimum_heating_capacity_in_kmol_per_second` or None if not set
        """
        return self._data["Minimum Heating Capacity in Kmol per Second"]

    @minimum_heating_capacity_in_kmol_per_second.setter
    def minimum_heating_capacity_in_kmol_per_second(self, value=None):
        """  Corresponds to IDD Field `minimum_heating_capacity_in_kmol_per_second`

        Args:
            value (float): value for IDD Field `minimum_heating_capacity_in_kmol_per_second`
                Units: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_heating_capacity_in_kmol_per_second`'.format(value))

        self._data["Minimum Heating Capacity in Kmol per Second"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.excess_air_ratio))
        out.append(self._to_str(self.ancilliary_power_constant_term))
        out.append(self._to_str(self.ancilliary_power_linear_term))
        out.append(self._to_str(self.skin_loss_ufactor_times_area_value))
        out.append(self._to_str(self.skin_loss_destination))
        out.append(self._to_str(self.zone_name_to_receive_skin_losses))
        out.append(self._to_str(self.heating_capacity_units))
        out.append(self._to_str(self.maximum_heating_capacity_in_watts))
        out.append(self._to_str(self.minimum_heating_capacity_in_watts))
        out.append(self._to_str(self.maximum_heating_capacity_in_kmol_per_second))
        out.append(self._to_str(self.minimum_heating_capacity_in_kmol_per_second))
        return ",".join(out)

class GeneratorFuelCellExhaustGasToWaterHeatExchanger(object):
    """ Corresponds to IDD object `Generator:FuelCell:ExhaustGasToWaterHeatExchanger`
        Describes the exhaust gas heat exchanger subsystem of a fuel cell power generator
        used to recovery thermal energy
    
    """
    internal_name = "Generator:FuelCell:ExhaustGasToWaterHeatExchanger"
    field_count = 24
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:ExhaustGasToWaterHeatExchanger`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Heat Recovery Water Maximum Flow Rate"] = None
        self._data["Exhaust Outlet Air Node Name"] = None
        self._data["Heat Exchanger Calculation Method"] = None
        self._data["Method 1 Heat Exchanger Effectiveness"] = None
        self._data["Method 2 Parameter hxs0"] = None
        self._data["Method 2 Parameter hxs1"] = None
        self._data["Method 2 Parameter hxs2"] = None
        self._data["Method 2 Parameter hxs3"] = None
        self._data["Method 2 Parameter hxs4"] = None
        self._data["Method 3 h0Gas Coefficient"] = None
        self._data["Method 3 NdotGasRef Coefficient"] = None
        self._data["Method 3 n Coefficient"] = None
        self._data["Method 3 Gas Area"] = None
        self._data["Method 3 h0 Water Coefficient"] = None
        self._data["Method 3 N dot Water ref Coefficient"] = None
        self._data["Method 3 m Coefficient"] = None
        self._data["Method 3 Water Area"] = None
        self._data["Method 3 F Adjustment Factor"] = None
        self._data["Method 4 hxl1 Coefficient"] = None
        self._data["Method 4 hxl2 Coefficient"] = None
        self._data["Method 4 Condensation Threshold"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_maximum_flow_rate = None
        else:
            self.heat_recovery_water_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_outlet_air_node_name = None
        else:
            self.exhaust_outlet_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_exchanger_calculation_method = None
        else:
            self.heat_exchanger_calculation_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_1_heat_exchanger_effectiveness = None
        else:
            self.method_1_heat_exchanger_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs0 = None
        else:
            self.method_2_parameter_hxs0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs1 = None
        else:
            self.method_2_parameter_hxs1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs2 = None
        else:
            self.method_2_parameter_hxs2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs3 = None
        else:
            self.method_2_parameter_hxs3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs4 = None
        else:
            self.method_2_parameter_hxs4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_h0gas_coefficient = None
        else:
            self.method_3_h0gas_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_ndotgasref_coefficient = None
        else:
            self.method_3_ndotgasref_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_n_coefficient = None
        else:
            self.method_3_n_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_gas_area = None
        else:
            self.method_3_gas_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_h0_water_coefficient = None
        else:
            self.method_3_h0_water_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_n_dot_water_ref_coefficient = None
        else:
            self.method_3_n_dot_water_ref_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_m_coefficient = None
        else:
            self.method_3_m_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_water_area = None
        else:
            self.method_3_water_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_f_adjustment_factor = None
        else:
            self.method_3_f_adjustment_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_4_hxl1_coefficient = None
        else:
            self.method_4_hxl1_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_4_hxl2_coefficient = None
        else:
            self.method_4_hxl2_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_4_condensation_threshold = None
        else:
            self.method_4_condensation_threshold = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')

        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')

        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def heat_recovery_water_maximum_flow_rate(self):
        """Get heat_recovery_water_maximum_flow_rate

        Returns:
            float: the value of `heat_recovery_water_maximum_flow_rate` or None if not set
        """
        return self._data["Heat Recovery Water Maximum Flow Rate"]

    @heat_recovery_water_maximum_flow_rate.setter
    def heat_recovery_water_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_maximum_flow_rate`

        Args:
            value (float): value for IDD Field `heat_recovery_water_maximum_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_water_maximum_flow_rate`'.format(value))

        self._data["Heat Recovery Water Maximum Flow Rate"] = value

    @property
    def exhaust_outlet_air_node_name(self):
        """Get exhaust_outlet_air_node_name

        Returns:
            str: the value of `exhaust_outlet_air_node_name` or None if not set
        """
        return self._data["Exhaust Outlet Air Node Name"]

    @exhaust_outlet_air_node_name.setter
    def exhaust_outlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_outlet_air_node_name`

        Args:
            value (str): value for IDD Field `exhaust_outlet_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_outlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_outlet_air_node_name`')

        self._data["Exhaust Outlet Air Node Name"] = value

    @property
    def heat_exchanger_calculation_method(self):
        """Get heat_exchanger_calculation_method

        Returns:
            str: the value of `heat_exchanger_calculation_method` or None if not set
        """
        return self._data["Heat Exchanger Calculation Method"]

    @heat_exchanger_calculation_method.setter
    def heat_exchanger_calculation_method(self, value=None):
        """  Corresponds to IDD Field `heat_exchanger_calculation_method`

        Args:
            value (str): value for IDD Field `heat_exchanger_calculation_method`
                Accepted values are:
                      - FixedEffectiveness
                      - EmpiricalUAeff
                      - FundementalUAeff
                      - Condensing
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_calculation_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_calculation_method`')
            vals = set()
            vals.add("FixedEffectiveness")
            vals.add("EmpiricalUAeff")
            vals.add("FundementalUAeff")
            vals.add("Condensing")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_exchanger_calculation_method`'.format(value))

        self._data["Heat Exchanger Calculation Method"] = value

    @property
    def method_1_heat_exchanger_effectiveness(self):
        """Get method_1_heat_exchanger_effectiveness

        Returns:
            float: the value of `method_1_heat_exchanger_effectiveness` or None if not set
        """
        return self._data["Method 1 Heat Exchanger Effectiveness"]

    @method_1_heat_exchanger_effectiveness.setter
    def method_1_heat_exchanger_effectiveness(self, value=None):
        """  Corresponds to IDD Field `method_1_heat_exchanger_effectiveness`

        Args:
            value (float): value for IDD Field `method_1_heat_exchanger_effectiveness`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_1_heat_exchanger_effectiveness`'.format(value))

        self._data["Method 1 Heat Exchanger Effectiveness"] = value

    @property
    def method_2_parameter_hxs0(self):
        """Get method_2_parameter_hxs0

        Returns:
            float: the value of `method_2_parameter_hxs0` or None if not set
        """
        return self._data["Method 2 Parameter hxs0"]

    @method_2_parameter_hxs0.setter
    def method_2_parameter_hxs0(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs0`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs0`'.format(value))

        self._data["Method 2 Parameter hxs0"] = value

    @property
    def method_2_parameter_hxs1(self):
        """Get method_2_parameter_hxs1

        Returns:
            float: the value of `method_2_parameter_hxs1` or None if not set
        """
        return self._data["Method 2 Parameter hxs1"]

    @method_2_parameter_hxs1.setter
    def method_2_parameter_hxs1(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs1`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs1`'.format(value))

        self._data["Method 2 Parameter hxs1"] = value

    @property
    def method_2_parameter_hxs2(self):
        """Get method_2_parameter_hxs2

        Returns:
            float: the value of `method_2_parameter_hxs2` or None if not set
        """
        return self._data["Method 2 Parameter hxs2"]

    @method_2_parameter_hxs2.setter
    def method_2_parameter_hxs2(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs2`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs2`'.format(value))

        self._data["Method 2 Parameter hxs2"] = value

    @property
    def method_2_parameter_hxs3(self):
        """Get method_2_parameter_hxs3

        Returns:
            float: the value of `method_2_parameter_hxs3` or None if not set
        """
        return self._data["Method 2 Parameter hxs3"]

    @method_2_parameter_hxs3.setter
    def method_2_parameter_hxs3(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs3`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs3`'.format(value))

        self._data["Method 2 Parameter hxs3"] = value

    @property
    def method_2_parameter_hxs4(self):
        """Get method_2_parameter_hxs4

        Returns:
            float: the value of `method_2_parameter_hxs4` or None if not set
        """
        return self._data["Method 2 Parameter hxs4"]

    @method_2_parameter_hxs4.setter
    def method_2_parameter_hxs4(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs4`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs4`'.format(value))

        self._data["Method 2 Parameter hxs4"] = value

    @property
    def method_3_h0gas_coefficient(self):
        """Get method_3_h0gas_coefficient

        Returns:
            float: the value of `method_3_h0gas_coefficient` or None if not set
        """
        return self._data["Method 3 h0Gas Coefficient"]

    @method_3_h0gas_coefficient.setter
    def method_3_h0gas_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_h0gas_coefficient`

        Args:
            value (float): value for IDD Field `method_3_h0gas_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_h0gas_coefficient`'.format(value))

        self._data["Method 3 h0Gas Coefficient"] = value

    @property
    def method_3_ndotgasref_coefficient(self):
        """Get method_3_ndotgasref_coefficient

        Returns:
            float: the value of `method_3_ndotgasref_coefficient` or None if not set
        """
        return self._data["Method 3 NdotGasRef Coefficient"]

    @method_3_ndotgasref_coefficient.setter
    def method_3_ndotgasref_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_ndotgasref_coefficient`

        Args:
            value (float): value for IDD Field `method_3_ndotgasref_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_ndotgasref_coefficient`'.format(value))

        self._data["Method 3 NdotGasRef Coefficient"] = value

    @property
    def method_3_n_coefficient(self):
        """Get method_3_n_coefficient

        Returns:
            float: the value of `method_3_n_coefficient` or None if not set
        """
        return self._data["Method 3 n Coefficient"]

    @method_3_n_coefficient.setter
    def method_3_n_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_n_coefficient`

        Args:
            value (float): value for IDD Field `method_3_n_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_n_coefficient`'.format(value))

        self._data["Method 3 n Coefficient"] = value

    @property
    def method_3_gas_area(self):
        """Get method_3_gas_area

        Returns:
            float: the value of `method_3_gas_area` or None if not set
        """
        return self._data["Method 3 Gas Area"]

    @method_3_gas_area.setter
    def method_3_gas_area(self, value=None):
        """  Corresponds to IDD Field `method_3_gas_area`

        Args:
            value (float): value for IDD Field `method_3_gas_area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_gas_area`'.format(value))

        self._data["Method 3 Gas Area"] = value

    @property
    def method_3_h0_water_coefficient(self):
        """Get method_3_h0_water_coefficient

        Returns:
            float: the value of `method_3_h0_water_coefficient` or None if not set
        """
        return self._data["Method 3 h0 Water Coefficient"]

    @method_3_h0_water_coefficient.setter
    def method_3_h0_water_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_h0_water_coefficient`

        Args:
            value (float): value for IDD Field `method_3_h0_water_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_h0_water_coefficient`'.format(value))

        self._data["Method 3 h0 Water Coefficient"] = value

    @property
    def method_3_n_dot_water_ref_coefficient(self):
        """Get method_3_n_dot_water_ref_coefficient

        Returns:
            float: the value of `method_3_n_dot_water_ref_coefficient` or None if not set
        """
        return self._data["Method 3 N dot Water ref Coefficient"]

    @method_3_n_dot_water_ref_coefficient.setter
    def method_3_n_dot_water_ref_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_n_dot_water_ref_coefficient`

        Args:
            value (float): value for IDD Field `method_3_n_dot_water_ref_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_n_dot_water_ref_coefficient`'.format(value))

        self._data["Method 3 N dot Water ref Coefficient"] = value

    @property
    def method_3_m_coefficient(self):
        """Get method_3_m_coefficient

        Returns:
            float: the value of `method_3_m_coefficient` or None if not set
        """
        return self._data["Method 3 m Coefficient"]

    @method_3_m_coefficient.setter
    def method_3_m_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_m_coefficient`

        Args:
            value (float): value for IDD Field `method_3_m_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_m_coefficient`'.format(value))

        self._data["Method 3 m Coefficient"] = value

    @property
    def method_3_water_area(self):
        """Get method_3_water_area

        Returns:
            float: the value of `method_3_water_area` or None if not set
        """
        return self._data["Method 3 Water Area"]

    @method_3_water_area.setter
    def method_3_water_area(self, value=None):
        """  Corresponds to IDD Field `method_3_water_area`

        Args:
            value (float): value for IDD Field `method_3_water_area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_water_area`'.format(value))

        self._data["Method 3 Water Area"] = value

    @property
    def method_3_f_adjustment_factor(self):
        """Get method_3_f_adjustment_factor

        Returns:
            float: the value of `method_3_f_adjustment_factor` or None if not set
        """
        return self._data["Method 3 F Adjustment Factor"]

    @method_3_f_adjustment_factor.setter
    def method_3_f_adjustment_factor(self, value=None):
        """  Corresponds to IDD Field `method_3_f_adjustment_factor`

        Args:
            value (float): value for IDD Field `method_3_f_adjustment_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_f_adjustment_factor`'.format(value))

        self._data["Method 3 F Adjustment Factor"] = value

    @property
    def method_4_hxl1_coefficient(self):
        """Get method_4_hxl1_coefficient

        Returns:
            float: the value of `method_4_hxl1_coefficient` or None if not set
        """
        return self._data["Method 4 hxl1 Coefficient"]

    @method_4_hxl1_coefficient.setter
    def method_4_hxl1_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_4_hxl1_coefficient`

        Args:
            value (float): value for IDD Field `method_4_hxl1_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_4_hxl1_coefficient`'.format(value))

        self._data["Method 4 hxl1 Coefficient"] = value

    @property
    def method_4_hxl2_coefficient(self):
        """Get method_4_hxl2_coefficient

        Returns:
            float: the value of `method_4_hxl2_coefficient` or None if not set
        """
        return self._data["Method 4 hxl2 Coefficient"]

    @method_4_hxl2_coefficient.setter
    def method_4_hxl2_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_4_hxl2_coefficient`

        Args:
            value (float): value for IDD Field `method_4_hxl2_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_4_hxl2_coefficient`'.format(value))

        self._data["Method 4 hxl2 Coefficient"] = value

    @property
    def method_4_condensation_threshold(self):
        """Get method_4_condensation_threshold

        Returns:
            float: the value of `method_4_condensation_threshold` or None if not set
        """
        return self._data["Method 4 Condensation Threshold"]

    @method_4_condensation_threshold.setter
    def method_4_condensation_threshold(self, value=None):
        """  Corresponds to IDD Field `method_4_condensation_threshold`

        Args:
            value (float): value for IDD Field `method_4_condensation_threshold`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_4_condensation_threshold`'.format(value))

        self._data["Method 4 Condensation Threshold"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.heat_recovery_water_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_outlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_maximum_flow_rate))
        out.append(self._to_str(self.exhaust_outlet_air_node_name))
        out.append(self._to_str(self.heat_exchanger_calculation_method))
        out.append(self._to_str(self.method_1_heat_exchanger_effectiveness))
        out.append(self._to_str(self.method_2_parameter_hxs0))
        out.append(self._to_str(self.method_2_parameter_hxs1))
        out.append(self._to_str(self.method_2_parameter_hxs2))
        out.append(self._to_str(self.method_2_parameter_hxs3))
        out.append(self._to_str(self.method_2_parameter_hxs4))
        out.append(self._to_str(self.method_3_h0gas_coefficient))
        out.append(self._to_str(self.method_3_ndotgasref_coefficient))
        out.append(self._to_str(self.method_3_n_coefficient))
        out.append(self._to_str(self.method_3_gas_area))
        out.append(self._to_str(self.method_3_h0_water_coefficient))
        out.append(self._to_str(self.method_3_n_dot_water_ref_coefficient))
        out.append(self._to_str(self.method_3_m_coefficient))
        out.append(self._to_str(self.method_3_water_area))
        out.append(self._to_str(self.method_3_f_adjustment_factor))
        out.append(self._to_str(self.method_4_hxl1_coefficient))
        out.append(self._to_str(self.method_4_hxl2_coefficient))
        out.append(self._to_str(self.method_4_condensation_threshold))
        return ",".join(out)

class GeneratorFuelCellElectricalStorage(object):
    """ Corresponds to IDD object `Generator:FuelCell:ElectricalStorage`
        Used to describe the electrical storage subsystem for a fuel cell power generator.
        The electrical storage model is a very simple "constrained bucket" model.
        Note that this electrical storage is embedded within the FC device.
    
    """
    internal_name = "Generator:FuelCell:ElectricalStorage"
    field_count = 8
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:ElectricalStorage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Choice of Model"] = None
        self._data["Nominal Charging Energetic Efficiency"] = None
        self._data["Nominal Discharging Energetic Efficiency"] = None
        self._data["Simple Maximum Capacity"] = None
        self._data["Simple Maximum Power Draw"] = None
        self._data["Simple Maximum Power Store"] = None
        self._data["Initial Charge State"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.choice_of_model = None
        else:
            self.choice_of_model = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_charging_energetic_efficiency = None
        else:
            self.nominal_charging_energetic_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_discharging_energetic_efficiency = None
        else:
            self.nominal_discharging_energetic_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.simple_maximum_capacity = None
        else:
            self.simple_maximum_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.simple_maximum_power_draw = None
        else:
            self.simple_maximum_power_draw = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.simple_maximum_power_store = None
        else:
            self.simple_maximum_power_store = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.initial_charge_state = None
        else:
            self.initial_charge_state = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def choice_of_model(self):
        """Get choice_of_model

        Returns:
            str: the value of `choice_of_model` or None if not set
        """
        return self._data["Choice of Model"]

    @choice_of_model.setter
    def choice_of_model(self, value=None):
        """  Corresponds to IDD Field `choice_of_model`

        Args:
            value (str): value for IDD Field `choice_of_model`
                Accepted values are:
                      - SimpleEfficiencyWithConstraints
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `choice_of_model`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `choice_of_model`')
            vals = set()
            vals.add("SimpleEfficiencyWithConstraints")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `choice_of_model`'.format(value))

        self._data["Choice of Model"] = value

    @property
    def nominal_charging_energetic_efficiency(self):
        """Get nominal_charging_energetic_efficiency

        Returns:
            float: the value of `nominal_charging_energetic_efficiency` or None if not set
        """
        return self._data["Nominal Charging Energetic Efficiency"]

    @nominal_charging_energetic_efficiency.setter
    def nominal_charging_energetic_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_charging_energetic_efficiency`

        Args:
            value (float): value for IDD Field `nominal_charging_energetic_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_charging_energetic_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_charging_energetic_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_charging_energetic_efficiency`')

        self._data["Nominal Charging Energetic Efficiency"] = value

    @property
    def nominal_discharging_energetic_efficiency(self):
        """Get nominal_discharging_energetic_efficiency

        Returns:
            float: the value of `nominal_discharging_energetic_efficiency` or None if not set
        """
        return self._data["Nominal Discharging Energetic Efficiency"]

    @nominal_discharging_energetic_efficiency.setter
    def nominal_discharging_energetic_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_discharging_energetic_efficiency`

        Args:
            value (float): value for IDD Field `nominal_discharging_energetic_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_discharging_energetic_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')

        self._data["Nominal Discharging Energetic Efficiency"] = value

    @property
    def simple_maximum_capacity(self):
        """Get simple_maximum_capacity

        Returns:
            float: the value of `simple_maximum_capacity` or None if not set
        """
        return self._data["Simple Maximum Capacity"]

    @simple_maximum_capacity.setter
    def simple_maximum_capacity(self, value=None):
        """  Corresponds to IDD Field `simple_maximum_capacity`

        Args:
            value (float): value for IDD Field `simple_maximum_capacity`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `simple_maximum_capacity`'.format(value))

        self._data["Simple Maximum Capacity"] = value

    @property
    def simple_maximum_power_draw(self):
        """Get simple_maximum_power_draw

        Returns:
            float: the value of `simple_maximum_power_draw` or None if not set
        """
        return self._data["Simple Maximum Power Draw"]

    @simple_maximum_power_draw.setter
    def simple_maximum_power_draw(self, value=None):
        """  Corresponds to IDD Field `simple_maximum_power_draw`

        Args:
            value (float): value for IDD Field `simple_maximum_power_draw`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `simple_maximum_power_draw`'.format(value))

        self._data["Simple Maximum Power Draw"] = value

    @property
    def simple_maximum_power_store(self):
        """Get simple_maximum_power_store

        Returns:
            float: the value of `simple_maximum_power_store` or None if not set
        """
        return self._data["Simple Maximum Power Store"]

    @simple_maximum_power_store.setter
    def simple_maximum_power_store(self, value=None):
        """  Corresponds to IDD Field `simple_maximum_power_store`

        Args:
            value (float): value for IDD Field `simple_maximum_power_store`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `simple_maximum_power_store`'.format(value))

        self._data["Simple Maximum Power Store"] = value

    @property
    def initial_charge_state(self):
        """Get initial_charge_state

        Returns:
            float: the value of `initial_charge_state` or None if not set
        """
        return self._data["Initial Charge State"]

    @initial_charge_state.setter
    def initial_charge_state(self, value=None):
        """  Corresponds to IDD Field `initial_charge_state`

        Args:
            value (float): value for IDD Field `initial_charge_state`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `initial_charge_state`'.format(value))

        self._data["Initial Charge State"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.choice_of_model))
        out.append(self._to_str(self.nominal_charging_energetic_efficiency))
        out.append(self._to_str(self.nominal_discharging_energetic_efficiency))
        out.append(self._to_str(self.simple_maximum_capacity))
        out.append(self._to_str(self.simple_maximum_power_draw))
        out.append(self._to_str(self.simple_maximum_power_store))
        out.append(self._to_str(self.initial_charge_state))
        return ",".join(out)

class GeneratorFuelCellInverter(object):
    """ Corresponds to IDD object `Generator:FuelCell:Inverter`
        Used to describe the power condition unit subsystem of a fuel cell power generator.
        This object models an inverter system contained within a fuel cell system that
        converts from direct current (DC) to alternating current (AC).
    
    """
    internal_name = "Generator:FuelCell:Inverter"
    field_count = 4
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:Inverter`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inverter Efficiency Calculation Mode"] = None
        self._data["Inverter Efficiency"] = None
        self._data["Efficiency Function of DC Power Curve Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inverter_efficiency_calculation_mode = None
        else:
            self.inverter_efficiency_calculation_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inverter_efficiency = None
        else:
            self.inverter_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_function_of_dc_power_curve_name = None
        else:
            self.efficiency_function_of_dc_power_curve_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def inverter_efficiency_calculation_mode(self):
        """Get inverter_efficiency_calculation_mode

        Returns:
            str: the value of `inverter_efficiency_calculation_mode` or None if not set
        """
        return self._data["Inverter Efficiency Calculation Mode"]

    @inverter_efficiency_calculation_mode.setter
    def inverter_efficiency_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `inverter_efficiency_calculation_mode`

        Args:
            value (str): value for IDD Field `inverter_efficiency_calculation_mode`
                Accepted values are:
                      - Quadratic
                      - Constant
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inverter_efficiency_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inverter_efficiency_calculation_mode`')
            vals = set()
            vals.add("Quadratic")
            vals.add("Constant")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `inverter_efficiency_calculation_mode`'.format(value))

        self._data["Inverter Efficiency Calculation Mode"] = value

    @property
    def inverter_efficiency(self):
        """Get inverter_efficiency

        Returns:
            float: the value of `inverter_efficiency` or None if not set
        """
        return self._data["Inverter Efficiency"]

    @inverter_efficiency.setter
    def inverter_efficiency(self, value=None):
        """  Corresponds to IDD Field `inverter_efficiency`

        Args:
            value (float): value for IDD Field `inverter_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `inverter_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inverter_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `inverter_efficiency`')

        self._data["Inverter Efficiency"] = value

    @property
    def efficiency_function_of_dc_power_curve_name(self):
        """Get efficiency_function_of_dc_power_curve_name

        Returns:
            str: the value of `efficiency_function_of_dc_power_curve_name` or None if not set
        """
        return self._data["Efficiency Function of DC Power Curve Name"]

    @efficiency_function_of_dc_power_curve_name.setter
    def efficiency_function_of_dc_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `efficiency_function_of_dc_power_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `efficiency_function_of_dc_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_function_of_dc_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_function_of_dc_power_curve_name`')

        self._data["Efficiency Function of DC Power Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.inverter_efficiency_calculation_mode))
        out.append(self._to_str(self.inverter_efficiency))
        out.append(self._to_str(self.efficiency_function_of_dc_power_curve_name))
        return ",".join(out)

class GeneratorFuelCellStackCooler(object):
    """ Corresponds to IDD object `Generator:FuelCell:StackCooler`
        This object is optional and is used to define details needed to model the stack cooler
        on PEMFC.
    
    """
    internal_name = "Generator:FuelCell:StackCooler"
    field_count = 21
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:StackCooler`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Nominal Stack Temperature"] = None
        self._data["Actual Stack Temperature"] = None
        self._data["Coefficient r0"] = None
        self._data["Coefficient r1"] = None
        self._data["Coefficient r2"] = None
        self._data["Coefficient r3"] = None
        self._data["Stack Coolant Flow Rate"] = None
        self._data["Stack Cooler U-Factor Times Area Value"] = None
        self._data["Fs-cogen Adjustment Factor"] = None
        self._data["Stack Cogeneration Exchanger Area"] = None
        self._data["Stack Cogeneration Exchanger Nominal Flow Rate"] = None
        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"] = None
        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"] = None
        self._data["Stack Cooler Pump Power"] = None
        self._data["Stack Cooler Pump Heat Loss Fraction"] = None
        self._data["Stack Air Cooler Fan Coefficient f0"] = None
        self._data["Stack Air Cooler Fan Coefficient f1"] = None
        self._data["Stack Air Cooler Fan Coefficient f2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_stack_temperature = None
        else:
            self.nominal_stack_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.actual_stack_temperature = None
        else:
            self.actual_stack_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_r0 = None
        else:
            self.coefficient_r0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_r1 = None
        else:
            self.coefficient_r1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_r2 = None
        else:
            self.coefficient_r2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_r3 = None
        else:
            self.coefficient_r3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_coolant_flow_rate = None
        else:
            self.stack_coolant_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cooler_ufactor_times_area_value = None
        else:
            self.stack_cooler_ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fscogen_adjustment_factor = None
        else:
            self.fscogen_adjustment_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_area = None
        else:
            self.stack_cogeneration_exchanger_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_flow_rate = None
        else:
            self.stack_cogeneration_exchanger_nominal_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient = None
        else:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent = None
        else:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cooler_pump_power = None
        else:
            self.stack_cooler_pump_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cooler_pump_heat_loss_fraction = None
        else:
            self.stack_cooler_pump_heat_loss_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f0 = None
        else:
            self.stack_air_cooler_fan_coefficient_f0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f1 = None
        else:
            self.stack_air_cooler_fan_coefficient_f1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f2 = None
        else:
            self.stack_air_cooler_fan_coefficient_f2 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')

        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')

        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def nominal_stack_temperature(self):
        """Get nominal_stack_temperature

        Returns:
            float: the value of `nominal_stack_temperature` or None if not set
        """
        return self._data["Nominal Stack Temperature"]

    @nominal_stack_temperature.setter
    def nominal_stack_temperature(self, value=None):
        """  Corresponds to IDD Field `nominal_stack_temperature`

        Args:
            value (float): value for IDD Field `nominal_stack_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_stack_temperature`'.format(value))

        self._data["Nominal Stack Temperature"] = value

    @property
    def actual_stack_temperature(self):
        """Get actual_stack_temperature

        Returns:
            float: the value of `actual_stack_temperature` or None if not set
        """
        return self._data["Actual Stack Temperature"]

    @actual_stack_temperature.setter
    def actual_stack_temperature(self, value=None):
        """  Corresponds to IDD Field `actual_stack_temperature`

        Args:
            value (float): value for IDD Field `actual_stack_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `actual_stack_temperature`'.format(value))

        self._data["Actual Stack Temperature"] = value

    @property
    def coefficient_r0(self):
        """Get coefficient_r0

        Returns:
            float: the value of `coefficient_r0` or None if not set
        """
        return self._data["Coefficient r0"]

    @coefficient_r0.setter
    def coefficient_r0(self, value=None):
        """  Corresponds to IDD Field `coefficient_r0`

        Args:
            value (float): value for IDD Field `coefficient_r0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_r0`'.format(value))

        self._data["Coefficient r0"] = value

    @property
    def coefficient_r1(self):
        """Get coefficient_r1

        Returns:
            float: the value of `coefficient_r1` or None if not set
        """
        return self._data["Coefficient r1"]

    @coefficient_r1.setter
    def coefficient_r1(self, value=None):
        """  Corresponds to IDD Field `coefficient_r1`

        Args:
            value (float): value for IDD Field `coefficient_r1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_r1`'.format(value))

        self._data["Coefficient r1"] = value

    @property
    def coefficient_r2(self):
        """Get coefficient_r2

        Returns:
            float: the value of `coefficient_r2` or None if not set
        """
        return self._data["Coefficient r2"]

    @coefficient_r2.setter
    def coefficient_r2(self, value=None):
        """  Corresponds to IDD Field `coefficient_r2`

        Args:
            value (float): value for IDD Field `coefficient_r2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_r2`'.format(value))

        self._data["Coefficient r2"] = value

    @property
    def coefficient_r3(self):
        """Get coefficient_r3

        Returns:
            float: the value of `coefficient_r3` or None if not set
        """
        return self._data["Coefficient r3"]

    @coefficient_r3.setter
    def coefficient_r3(self, value=None):
        """  Corresponds to IDD Field `coefficient_r3`

        Args:
            value (float): value for IDD Field `coefficient_r3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_r3`'.format(value))

        self._data["Coefficient r3"] = value

    @property
    def stack_coolant_flow_rate(self):
        """Get stack_coolant_flow_rate

        Returns:
            float: the value of `stack_coolant_flow_rate` or None if not set
        """
        return self._data["Stack Coolant Flow Rate"]

    @stack_coolant_flow_rate.setter
    def stack_coolant_flow_rate(self, value=None):
        """  Corresponds to IDD Field `stack_coolant_flow_rate`

        Args:
            value (float): value for IDD Field `stack_coolant_flow_rate`
                Units: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_coolant_flow_rate`'.format(value))

        self._data["Stack Coolant Flow Rate"] = value

    @property
    def stack_cooler_ufactor_times_area_value(self):
        """Get stack_cooler_ufactor_times_area_value

        Returns:
            float: the value of `stack_cooler_ufactor_times_area_value` or None if not set
        """
        return self._data["Stack Cooler U-Factor Times Area Value"]

    @stack_cooler_ufactor_times_area_value.setter
    def stack_cooler_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `stack_cooler_ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `stack_cooler_ufactor_times_area_value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cooler_ufactor_times_area_value`'.format(value))

        self._data["Stack Cooler U-Factor Times Area Value"] = value

    @property
    def fscogen_adjustment_factor(self):
        """Get fscogen_adjustment_factor

        Returns:
            float: the value of `fscogen_adjustment_factor` or None if not set
        """
        return self._data["Fs-cogen Adjustment Factor"]

    @fscogen_adjustment_factor.setter
    def fscogen_adjustment_factor(self, value=None):
        """  Corresponds to IDD Field `fscogen_adjustment_factor`

        Args:
            value (float): value for IDD Field `fscogen_adjustment_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fscogen_adjustment_factor`'.format(value))

        self._data["Fs-cogen Adjustment Factor"] = value

    @property
    def stack_cogeneration_exchanger_area(self):
        """Get stack_cogeneration_exchanger_area

        Returns:
            float: the value of `stack_cogeneration_exchanger_area` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Area"]

    @stack_cogeneration_exchanger_area.setter
    def stack_cogeneration_exchanger_area(self, value=None):
        """  Corresponds to IDD Field `stack_cogeneration_exchanger_area`

        Args:
            value (float): value for IDD Field `stack_cogeneration_exchanger_area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cogeneration_exchanger_area`'.format(value))

        self._data["Stack Cogeneration Exchanger Area"] = value

    @property
    def stack_cogeneration_exchanger_nominal_flow_rate(self):
        """Get stack_cogeneration_exchanger_nominal_flow_rate

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_flow_rate` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Flow Rate"]

    @stack_cogeneration_exchanger_nominal_flow_rate.setter
    def stack_cogeneration_exchanger_nominal_flow_rate(self, value=None):
        """  Corresponds to IDD Field `stack_cogeneration_exchanger_nominal_flow_rate`

        Args:
            value (float): value for IDD Field `stack_cogeneration_exchanger_nominal_flow_rate`
                Units: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cogeneration_exchanger_nominal_flow_rate`'.format(value))

        self._data["Stack Cogeneration Exchanger Nominal Flow Rate"] = value

    @property
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient(self):
        """Get stack_cogeneration_exchanger_nominal_heat_transfer_coefficient

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"]

    @stack_cogeneration_exchanger_nominal_heat_transfer_coefficient.setter
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient`

        Args:
            value (float): value for IDD Field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient`
                Units: W/m2-K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient`'.format(value))

        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"] = value

    @property
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent(self):
        """Get stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"]

    @stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent.setter
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent(self, value=None):
        """  Corresponds to IDD Field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent`

        Args:
            value (float): value for IDD Field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent`'.format(value))

        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"] = value

    @property
    def stack_cooler_pump_power(self):
        """Get stack_cooler_pump_power

        Returns:
            float: the value of `stack_cooler_pump_power` or None if not set
        """
        return self._data["Stack Cooler Pump Power"]

    @stack_cooler_pump_power.setter
    def stack_cooler_pump_power(self, value=None):
        """  Corresponds to IDD Field `stack_cooler_pump_power`

        Args:
            value (float): value for IDD Field `stack_cooler_pump_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cooler_pump_power`'.format(value))

        self._data["Stack Cooler Pump Power"] = value

    @property
    def stack_cooler_pump_heat_loss_fraction(self):
        """Get stack_cooler_pump_heat_loss_fraction

        Returns:
            float: the value of `stack_cooler_pump_heat_loss_fraction` or None if not set
        """
        return self._data["Stack Cooler Pump Heat Loss Fraction"]

    @stack_cooler_pump_heat_loss_fraction.setter
    def stack_cooler_pump_heat_loss_fraction(self, value=None):
        """  Corresponds to IDD Field `stack_cooler_pump_heat_loss_fraction`

        Args:
            value (float): value for IDD Field `stack_cooler_pump_heat_loss_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cooler_pump_heat_loss_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `stack_cooler_pump_heat_loss_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `stack_cooler_pump_heat_loss_fraction`')

        self._data["Stack Cooler Pump Heat Loss Fraction"] = value

    @property
    def stack_air_cooler_fan_coefficient_f0(self):
        """Get stack_air_cooler_fan_coefficient_f0

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f0` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f0"]

    @stack_air_cooler_fan_coefficient_f0.setter
    def stack_air_cooler_fan_coefficient_f0(self, value=None):
        """  Corresponds to IDD Field `stack_air_cooler_fan_coefficient_f0`

        Args:
            value (float): value for IDD Field `stack_air_cooler_fan_coefficient_f0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_air_cooler_fan_coefficient_f0`'.format(value))

        self._data["Stack Air Cooler Fan Coefficient f0"] = value

    @property
    def stack_air_cooler_fan_coefficient_f1(self):
        """Get stack_air_cooler_fan_coefficient_f1

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f1` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f1"]

    @stack_air_cooler_fan_coefficient_f1.setter
    def stack_air_cooler_fan_coefficient_f1(self, value=None):
        """  Corresponds to IDD Field `stack_air_cooler_fan_coefficient_f1`

        Args:
            value (float): value for IDD Field `stack_air_cooler_fan_coefficient_f1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_air_cooler_fan_coefficient_f1`'.format(value))

        self._data["Stack Air Cooler Fan Coefficient f1"] = value

    @property
    def stack_air_cooler_fan_coefficient_f2(self):
        """Get stack_air_cooler_fan_coefficient_f2

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f2` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f2"]

    @stack_air_cooler_fan_coefficient_f2.setter
    def stack_air_cooler_fan_coefficient_f2(self, value=None):
        """  Corresponds to IDD Field `stack_air_cooler_fan_coefficient_f2`

        Args:
            value (float): value for IDD Field `stack_air_cooler_fan_coefficient_f2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_air_cooler_fan_coefficient_f2`'.format(value))

        self._data["Stack Air Cooler Fan Coefficient f2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.heat_recovery_water_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_outlet_node_name))
        out.append(self._to_str(self.nominal_stack_temperature))
        out.append(self._to_str(self.actual_stack_temperature))
        out.append(self._to_str(self.coefficient_r0))
        out.append(self._to_str(self.coefficient_r1))
        out.append(self._to_str(self.coefficient_r2))
        out.append(self._to_str(self.coefficient_r3))
        out.append(self._to_str(self.stack_coolant_flow_rate))
        out.append(self._to_str(self.stack_cooler_ufactor_times_area_value))
        out.append(self._to_str(self.fscogen_adjustment_factor))
        out.append(self._to_str(self.stack_cogeneration_exchanger_area))
        out.append(self._to_str(self.stack_cogeneration_exchanger_nominal_flow_rate))
        out.append(self._to_str(self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient))
        out.append(self._to_str(self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent))
        out.append(self._to_str(self.stack_cooler_pump_power))
        out.append(self._to_str(self.stack_cooler_pump_heat_loss_fraction))
        out.append(self._to_str(self.stack_air_cooler_fan_coefficient_f0))
        out.append(self._to_str(self.stack_air_cooler_fan_coefficient_f1))
        out.append(self._to_str(self.stack_air_cooler_fan_coefficient_f2))
        return ",".join(out)

class GeneratorMicroChp(object):
    """ Corresponds to IDD object `Generator:MicroCHP`
        Small-scale combined heat and power (micro CHP) electric generator using the model
        developed by IEA/ECBCS Annex 42  see www.cogen-sim.net. The model was developed
        for both internal combustion and Stirling cycle
        engines, but might be used for other types of residential CHP devices.
    
    """
    internal_name = "Generator:MicroCHP"
    field_count = 9
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:MicroCHP`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Performance Parameters Name"] = None
        self._data["Zone Name"] = None
        self._data["Cooling Water Inlet Node Name"] = None
        self._data["Cooling Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Generator Fuel Supply Name"] = None
        self._data["Availability Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.performance_parameters_name = None
        else:
            self.performance_parameters_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_inlet_node_name = None
        else:
            self.cooling_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_outlet_node_name = None
        else:
            self.cooling_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_fuel_supply_name = None
        else:
            self.generator_fuel_supply_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def performance_parameters_name(self):
        """Get performance_parameters_name

        Returns:
            str: the value of `performance_parameters_name` or None if not set
        """
        return self._data["Performance Parameters Name"]

    @performance_parameters_name.setter
    def performance_parameters_name(self, value=None):
        """  Corresponds to IDD Field `performance_parameters_name`
        Enter the name of a Generator:MicroCHP:NonNormalizedParameters object.

        Args:
            value (str): value for IDD Field `performance_parameters_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `performance_parameters_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `performance_parameters_name`')

        self._data["Performance Parameters Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def cooling_water_inlet_node_name(self):
        """Get cooling_water_inlet_node_name

        Returns:
            str: the value of `cooling_water_inlet_node_name` or None if not set
        """
        return self._data["Cooling Water Inlet Node Name"]

    @cooling_water_inlet_node_name.setter
    def cooling_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_inlet_node_name`')

        self._data["Cooling Water Inlet Node Name"] = value

    @property
    def cooling_water_outlet_node_name(self):
        """Get cooling_water_outlet_node_name

        Returns:
            str: the value of `cooling_water_outlet_node_name` or None if not set
        """
        return self._data["Cooling Water Outlet Node Name"]

    @cooling_water_outlet_node_name.setter
    def cooling_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_outlet_node_name`')

        self._data["Cooling Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def generator_fuel_supply_name(self):
        """Get generator_fuel_supply_name

        Returns:
            str: the value of `generator_fuel_supply_name` or None if not set
        """
        return self._data["Generator Fuel Supply Name"]

    @generator_fuel_supply_name.setter
    def generator_fuel_supply_name(self, value=None):
        """  Corresponds to IDD Field `generator_fuel_supply_name`
        Enter the name of a Generator:FuelSupply object.

        Args:
            value (str): value for IDD Field `generator_fuel_supply_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_fuel_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_fuel_supply_name`')

        self._data["Generator Fuel Supply Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.performance_parameters_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.cooling_water_inlet_node_name))
        out.append(self._to_str(self.cooling_water_outlet_node_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.generator_fuel_supply_name))
        out.append(self._to_str(self.availability_schedule_name))
        return ",".join(out)

class GeneratorMicroChpNonNormalizedParameters(object):
    """ Corresponds to IDD object `Generator:MicroCHP:NonNormalizedParameters`
        This object is referenced by a Generator:MicroCHP object and provides the
        non-normalized parameters for the MicroCHP generator model.
    
    """
    internal_name = "Generator:MicroCHP:NonNormalizedParameters"
    field_count = 27
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:MicroCHP:NonNormalizedParameters`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Maximum Electric Power"] = None
        self._data["Minimum Electric Power"] = None
        self._data["Minimum Cooling Water Flow Rate"] = None
        self._data["Maximum Cooling Water Temperature"] = None
        self._data["Electrical Efficiency Curve Name"] = None
        self._data["Thermal Efficiency Curve Name"] = None
        self._data["Cooling Water Flow Rate Mode"] = None
        self._data["Cooling Water Flow Rate Curve Name"] = None
        self._data["Air Flow Rate Curve Name"] = None
        self._data["Maximum Net Electrical Power Rate of Change"] = None
        self._data["Maximum Fuel Flow Rate of Change"] = None
        self._data["Heat Exchanger U-Factor Times Area Value"] = None
        self._data["Skin Loss U-Factor Times Area Value"] = None
        self._data["Skin Loss Radiative Fraction"] = None
        self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"] = None
        self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"] = None
        self._data["Standby Power"] = None
        self._data["Warm Up Mode"] = None
        self._data["Warm Up Fuel Flow Rate Coefficient"] = None
        self._data["Nominal Engine Operating Temperature"] = None
        self._data["Warm Up Power Coefficient"] = None
        self._data["Warm Up Fuel Flow Rate Limit Ratio"] = None
        self._data["Warm Up Delay Time"] = None
        self._data["Cool Down Power"] = None
        self._data["Cool Down Delay Time"] = None
        self._data["Restart Mode"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_electric_power = None
        else:
            self.maximum_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_electric_power = None
        else:
            self.minimum_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_cooling_water_flow_rate = None
        else:
            self.minimum_cooling_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cooling_water_temperature = None
        else:
            self.maximum_cooling_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_efficiency_curve_name = None
        else:
            self.electrical_efficiency_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_efficiency_curve_name = None
        else:
            self.thermal_efficiency_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_flow_rate_mode = None
        else:
            self.cooling_water_flow_rate_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_flow_rate_curve_name = None
        else:
            self.cooling_water_flow_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_flow_rate_curve_name = None
        else:
            self.air_flow_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_net_electrical_power_rate_of_change = None
        else:
            self.maximum_net_electrical_power_rate_of_change = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_fuel_flow_rate_of_change = None
        else:
            self.maximum_fuel_flow_rate_of_change = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_exchanger_ufactor_times_area_value = None
        else:
            self.heat_exchanger_ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_value = None
        else:
            self.skin_loss_ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_radiative_fraction = None
        else:
            self.skin_loss_radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregated_thermal_mass_of_energy_conversion_portion_of_generator = None
        else:
            self.aggregated_thermal_mass_of_energy_conversion_portion_of_generator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregated_thermal_mass_of_heat_recovery_portion_of_generator = None
        else:
            self.aggregated_thermal_mass_of_heat_recovery_portion_of_generator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.standby_power = None
        else:
            self.standby_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_mode = None
        else:
            self.warm_up_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_fuel_flow_rate_coefficient = None
        else:
            self.warm_up_fuel_flow_rate_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_engine_operating_temperature = None
        else:
            self.nominal_engine_operating_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_power_coefficient = None
        else:
            self.warm_up_power_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_fuel_flow_rate_limit_ratio = None
        else:
            self.warm_up_fuel_flow_rate_limit_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_delay_time = None
        else:
            self.warm_up_delay_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cool_down_power = None
        else:
            self.cool_down_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cool_down_delay_time = None
        else:
            self.cool_down_delay_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.restart_mode = None
        else:
            self.restart_mode = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def maximum_electric_power(self):
        """Get maximum_electric_power

        Returns:
            float: the value of `maximum_electric_power` or None if not set
        """
        return self._data["Maximum Electric Power"]

    @maximum_electric_power.setter
    def maximum_electric_power(self, value=None):
        """  Corresponds to IDD Field `maximum_electric_power`

        Args:
            value (float): value for IDD Field `maximum_electric_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_electric_power`'.format(value))

        self._data["Maximum Electric Power"] = value

    @property
    def minimum_electric_power(self):
        """Get minimum_electric_power

        Returns:
            float: the value of `minimum_electric_power` or None if not set
        """
        return self._data["Minimum Electric Power"]

    @minimum_electric_power.setter
    def minimum_electric_power(self, value=None):
        """  Corresponds to IDD Field `minimum_electric_power`

        Args:
            value (float): value for IDD Field `minimum_electric_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_electric_power`'.format(value))

        self._data["Minimum Electric Power"] = value

    @property
    def minimum_cooling_water_flow_rate(self):
        """Get minimum_cooling_water_flow_rate

        Returns:
            float: the value of `minimum_cooling_water_flow_rate` or None if not set
        """
        return self._data["Minimum Cooling Water Flow Rate"]

    @minimum_cooling_water_flow_rate.setter
    def minimum_cooling_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_cooling_water_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_cooling_water_flow_rate`
                Units: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_cooling_water_flow_rate`'.format(value))

        self._data["Minimum Cooling Water Flow Rate"] = value

    @property
    def maximum_cooling_water_temperature(self):
        """Get maximum_cooling_water_temperature

        Returns:
            float: the value of `maximum_cooling_water_temperature` or None if not set
        """
        return self._data["Maximum Cooling Water Temperature"]

    @maximum_cooling_water_temperature.setter
    def maximum_cooling_water_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_cooling_water_temperature`

        Args:
            value (float): value for IDD Field `maximum_cooling_water_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cooling_water_temperature`'.format(value))

        self._data["Maximum Cooling Water Temperature"] = value

    @property
    def electrical_efficiency_curve_name(self):
        """Get electrical_efficiency_curve_name

        Returns:
            str: the value of `electrical_efficiency_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Curve Name"]

    @electrical_efficiency_curve_name.setter
    def electrical_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `electrical_efficiency_curve_name`
        TriQuadratic
        Table:MultiVariableLookup object can also be used

        Args:
            value (str): value for IDD Field `electrical_efficiency_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_curve_name`')

        self._data["Electrical Efficiency Curve Name"] = value

    @property
    def thermal_efficiency_curve_name(self):
        """Get thermal_efficiency_curve_name

        Returns:
            str: the value of `thermal_efficiency_curve_name` or None if not set
        """
        return self._data["Thermal Efficiency Curve Name"]

    @thermal_efficiency_curve_name.setter
    def thermal_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `thermal_efficiency_curve_name`
        TriQuadratic
        Table:MultiVariableLookup object can also be used

        Args:
            value (str): value for IDD Field `thermal_efficiency_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermal_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermal_efficiency_curve_name`')

        self._data["Thermal Efficiency Curve Name"] = value

    @property
    def cooling_water_flow_rate_mode(self):
        """Get cooling_water_flow_rate_mode

        Returns:
            str: the value of `cooling_water_flow_rate_mode` or None if not set
        """
        return self._data["Cooling Water Flow Rate Mode"]

    @cooling_water_flow_rate_mode.setter
    def cooling_water_flow_rate_mode(self, value=None):
        """  Corresponds to IDD Field `cooling_water_flow_rate_mode`

        Args:
            value (str): value for IDD Field `cooling_water_flow_rate_mode`
                Accepted values are:
                      - PlantControl
                      - InternalControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_flow_rate_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_flow_rate_mode`')
            vals = set()
            vals.add("PlantControl")
            vals.add("InternalControl")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_water_flow_rate_mode`'.format(value))

        self._data["Cooling Water Flow Rate Mode"] = value

    @property
    def cooling_water_flow_rate_curve_name(self):
        """Get cooling_water_flow_rate_curve_name

        Returns:
            str: the value of `cooling_water_flow_rate_curve_name` or None if not set
        """
        return self._data["Cooling Water Flow Rate Curve Name"]

    @cooling_water_flow_rate_curve_name.setter
    def cooling_water_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_flow_rate_curve_name`
        Table:TwoIndependentVariables object can also be used

        Args:
            value (str): value for IDD Field `cooling_water_flow_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_flow_rate_curve_name`')

        self._data["Cooling Water Flow Rate Curve Name"] = value

    @property
    def air_flow_rate_curve_name(self):
        """Get air_flow_rate_curve_name

        Returns:
            str: the value of `air_flow_rate_curve_name` or None if not set
        """
        return self._data["Air Flow Rate Curve Name"]

    @air_flow_rate_curve_name.setter
    def air_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `air_flow_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `air_flow_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_flow_rate_curve_name`')

        self._data["Air Flow Rate Curve Name"] = value

    @property
    def maximum_net_electrical_power_rate_of_change(self):
        """Get maximum_net_electrical_power_rate_of_change

        Returns:
            float: the value of `maximum_net_electrical_power_rate_of_change` or None if not set
        """
        return self._data["Maximum Net Electrical Power Rate of Change"]

    @maximum_net_electrical_power_rate_of_change.setter
    def maximum_net_electrical_power_rate_of_change(self, value=None):
        """  Corresponds to IDD Field `maximum_net_electrical_power_rate_of_change`

        Args:
            value (float): value for IDD Field `maximum_net_electrical_power_rate_of_change`
                Units: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_net_electrical_power_rate_of_change`'.format(value))

        self._data["Maximum Net Electrical Power Rate of Change"] = value

    @property
    def maximum_fuel_flow_rate_of_change(self):
        """Get maximum_fuel_flow_rate_of_change

        Returns:
            float: the value of `maximum_fuel_flow_rate_of_change` or None if not set
        """
        return self._data["Maximum Fuel Flow Rate of Change"]

    @maximum_fuel_flow_rate_of_change.setter
    def maximum_fuel_flow_rate_of_change(self, value=None):
        """  Corresponds to IDD Field `maximum_fuel_flow_rate_of_change`

        Args:
            value (float): value for IDD Field `maximum_fuel_flow_rate_of_change`
                Units: kg/s2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_fuel_flow_rate_of_change`'.format(value))

        self._data["Maximum Fuel Flow Rate of Change"] = value

    @property
    def heat_exchanger_ufactor_times_area_value(self):
        """Get heat_exchanger_ufactor_times_area_value

        Returns:
            float: the value of `heat_exchanger_ufactor_times_area_value` or None if not set
        """
        return self._data["Heat Exchanger U-Factor Times Area Value"]

    @heat_exchanger_ufactor_times_area_value.setter
    def heat_exchanger_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `heat_exchanger_ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `heat_exchanger_ufactor_times_area_value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_exchanger_ufactor_times_area_value`'.format(value))

        self._data["Heat Exchanger U-Factor Times Area Value"] = value

    @property
    def skin_loss_ufactor_times_area_value(self):
        """Get skin_loss_ufactor_times_area_value

        Returns:
            float: the value of `skin_loss_ufactor_times_area_value` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Value"]

    @skin_loss_ufactor_times_area_value.setter
    def skin_loss_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `skin_loss_ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `skin_loss_ufactor_times_area_value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_ufactor_times_area_value`'.format(value))

        self._data["Skin Loss U-Factor Times Area Value"] = value

    @property
    def skin_loss_radiative_fraction(self):
        """Get skin_loss_radiative_fraction

        Returns:
            float: the value of `skin_loss_radiative_fraction` or None if not set
        """
        return self._data["Skin Loss Radiative Fraction"]

    @skin_loss_radiative_fraction.setter
    def skin_loss_radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `skin_loss_radiative_fraction`

        Args:
            value (float): value for IDD Field `skin_loss_radiative_fraction`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_radiative_fraction`'.format(value))

        self._data["Skin Loss Radiative Fraction"] = value

    @property
    def aggregated_thermal_mass_of_energy_conversion_portion_of_generator(self):
        """Get aggregated_thermal_mass_of_energy_conversion_portion_of_generator

        Returns:
            float: the value of `aggregated_thermal_mass_of_energy_conversion_portion_of_generator` or None if not set
        """
        return self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"]

    @aggregated_thermal_mass_of_energy_conversion_portion_of_generator.setter
    def aggregated_thermal_mass_of_energy_conversion_portion_of_generator(self, value=None):
        """  Corresponds to IDD Field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`

        Args:
            value (float): value for IDD Field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`')

        self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"] = value

    @property
    def aggregated_thermal_mass_of_heat_recovery_portion_of_generator(self):
        """Get aggregated_thermal_mass_of_heat_recovery_portion_of_generator

        Returns:
            float: the value of `aggregated_thermal_mass_of_heat_recovery_portion_of_generator` or None if not set
        """
        return self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"]

    @aggregated_thermal_mass_of_heat_recovery_portion_of_generator.setter
    def aggregated_thermal_mass_of_heat_recovery_portion_of_generator(self, value=None):
        """  Corresponds to IDD Field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`

        Args:
            value (float): value for IDD Field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`')

        self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"] = value

    @property
    def standby_power(self):
        """Get standby_power

        Returns:
            float: the value of `standby_power` or None if not set
        """
        return self._data["Standby Power"]

    @standby_power.setter
    def standby_power(self, value=None):
        """  Corresponds to IDD Field `standby_power`

        Args:
            value (float): value for IDD Field `standby_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `standby_power`'.format(value))

        self._data["Standby Power"] = value

    @property
    def warm_up_mode(self):
        """Get warm_up_mode

        Returns:
            str: the value of `warm_up_mode` or None if not set
        """
        return self._data["Warm Up Mode"]

    @warm_up_mode.setter
    def warm_up_mode(self, value=None):
        """  Corresponds to IDD Field `warm_up_mode`
        Stirling engines use Nominal Engine Temperature
        Internal combustion engines use Time Delay

        Args:
            value (str): value for IDD Field `warm_up_mode`
                Accepted values are:
                      - NominalEngineTemperature
                      - TimeDelay
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `warm_up_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `warm_up_mode`')
            vals = set()
            vals.add("NominalEngineTemperature")
            vals.add("TimeDelay")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `warm_up_mode`'.format(value))

        self._data["Warm Up Mode"] = value

    @property
    def warm_up_fuel_flow_rate_coefficient(self):
        """Get warm_up_fuel_flow_rate_coefficient

        Returns:
            float: the value of `warm_up_fuel_flow_rate_coefficient` or None if not set
        """
        return self._data["Warm Up Fuel Flow Rate Coefficient"]

    @warm_up_fuel_flow_rate_coefficient.setter
    def warm_up_fuel_flow_rate_coefficient(self, value=None):
        """  Corresponds to IDD Field `warm_up_fuel_flow_rate_coefficient`

        Args:
            value (float): value for IDD Field `warm_up_fuel_flow_rate_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `warm_up_fuel_flow_rate_coefficient`'.format(value))

        self._data["Warm Up Fuel Flow Rate Coefficient"] = value

    @property
    def nominal_engine_operating_temperature(self):
        """Get nominal_engine_operating_temperature

        Returns:
            float: the value of `nominal_engine_operating_temperature` or None if not set
        """
        return self._data["Nominal Engine Operating Temperature"]

    @nominal_engine_operating_temperature.setter
    def nominal_engine_operating_temperature(self, value=None):
        """  Corresponds to IDD Field `nominal_engine_operating_temperature`

        Args:
            value (float): value for IDD Field `nominal_engine_operating_temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_engine_operating_temperature`'.format(value))

        self._data["Nominal Engine Operating Temperature"] = value

    @property
    def warm_up_power_coefficient(self):
        """Get warm_up_power_coefficient

        Returns:
            float: the value of `warm_up_power_coefficient` or None if not set
        """
        return self._data["Warm Up Power Coefficient"]

    @warm_up_power_coefficient.setter
    def warm_up_power_coefficient(self, value=None):
        """  Corresponds to IDD Field `warm_up_power_coefficient`

        Args:
            value (float): value for IDD Field `warm_up_power_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `warm_up_power_coefficient`'.format(value))

        self._data["Warm Up Power Coefficient"] = value

    @property
    def warm_up_fuel_flow_rate_limit_ratio(self):
        """Get warm_up_fuel_flow_rate_limit_ratio

        Returns:
            float: the value of `warm_up_fuel_flow_rate_limit_ratio` or None if not set
        """
        return self._data["Warm Up Fuel Flow Rate Limit Ratio"]

    @warm_up_fuel_flow_rate_limit_ratio.setter
    def warm_up_fuel_flow_rate_limit_ratio(self, value=None):
        """  Corresponds to IDD Field `warm_up_fuel_flow_rate_limit_ratio`

        Args:
            value (float): value for IDD Field `warm_up_fuel_flow_rate_limit_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `warm_up_fuel_flow_rate_limit_ratio`'.format(value))

        self._data["Warm Up Fuel Flow Rate Limit Ratio"] = value

    @property
    def warm_up_delay_time(self):
        """Get warm_up_delay_time

        Returns:
            float: the value of `warm_up_delay_time` or None if not set
        """
        return self._data["Warm Up Delay Time"]

    @warm_up_delay_time.setter
    def warm_up_delay_time(self, value=None):
        """  Corresponds to IDD Field `warm_up_delay_time`

        Args:
            value (float): value for IDD Field `warm_up_delay_time`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `warm_up_delay_time`'.format(value))

        self._data["Warm Up Delay Time"] = value

    @property
    def cool_down_power(self):
        """Get cool_down_power

        Returns:
            float: the value of `cool_down_power` or None if not set
        """
        return self._data["Cool Down Power"]

    @cool_down_power.setter
    def cool_down_power(self, value=None):
        """  Corresponds to IDD Field `cool_down_power`

        Args:
            value (float): value for IDD Field `cool_down_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cool_down_power`'.format(value))

        self._data["Cool Down Power"] = value

    @property
    def cool_down_delay_time(self):
        """Get cool_down_delay_time

        Returns:
            float: the value of `cool_down_delay_time` or None if not set
        """
        return self._data["Cool Down Delay Time"]

    @cool_down_delay_time.setter
    def cool_down_delay_time(self, value=None):
        """  Corresponds to IDD Field `cool_down_delay_time`

        Args:
            value (float): value for IDD Field `cool_down_delay_time`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cool_down_delay_time`'.format(value))

        self._data["Cool Down Delay Time"] = value

    @property
    def restart_mode(self):
        """Get restart_mode

        Returns:
            str: the value of `restart_mode` or None if not set
        """
        return self._data["Restart Mode"]

    @restart_mode.setter
    def restart_mode(self, value=None):
        """  Corresponds to IDD Field `restart_mode`

        Args:
            value (str): value for IDD Field `restart_mode`
                Accepted values are:
                      - MandatoryCoolDown
                      - OptionalCoolDown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `restart_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `restart_mode`')
            vals = set()
            vals.add("MandatoryCoolDown")
            vals.add("OptionalCoolDown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `restart_mode`'.format(value))

        self._data["Restart Mode"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.maximum_electric_power))
        out.append(self._to_str(self.minimum_electric_power))
        out.append(self._to_str(self.minimum_cooling_water_flow_rate))
        out.append(self._to_str(self.maximum_cooling_water_temperature))
        out.append(self._to_str(self.electrical_efficiency_curve_name))
        out.append(self._to_str(self.thermal_efficiency_curve_name))
        out.append(self._to_str(self.cooling_water_flow_rate_mode))
        out.append(self._to_str(self.cooling_water_flow_rate_curve_name))
        out.append(self._to_str(self.air_flow_rate_curve_name))
        out.append(self._to_str(self.maximum_net_electrical_power_rate_of_change))
        out.append(self._to_str(self.maximum_fuel_flow_rate_of_change))
        out.append(self._to_str(self.heat_exchanger_ufactor_times_area_value))
        out.append(self._to_str(self.skin_loss_ufactor_times_area_value))
        out.append(self._to_str(self.skin_loss_radiative_fraction))
        out.append(self._to_str(self.aggregated_thermal_mass_of_energy_conversion_portion_of_generator))
        out.append(self._to_str(self.aggregated_thermal_mass_of_heat_recovery_portion_of_generator))
        out.append(self._to_str(self.standby_power))
        out.append(self._to_str(self.warm_up_mode))
        out.append(self._to_str(self.warm_up_fuel_flow_rate_coefficient))
        out.append(self._to_str(self.nominal_engine_operating_temperature))
        out.append(self._to_str(self.warm_up_power_coefficient))
        out.append(self._to_str(self.warm_up_fuel_flow_rate_limit_ratio))
        out.append(self._to_str(self.warm_up_delay_time))
        out.append(self._to_str(self.cool_down_power))
        out.append(self._to_str(self.cool_down_delay_time))
        out.append(self._to_str(self.restart_mode))
        return ",".join(out)

class GeneratorFuelSupply(object):
    """ Corresponds to IDD object `Generator:FuelSupply`
        Used only with Generator:FuelCell and Generator:MicroCHP
    
    """
    internal_name = "Generator:FuelSupply"
    field_count = 36
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Temperature Modeling Mode"] = None
        self._data["Fuel Temperature Reference Node Name"] = None
        self._data["Fuel Temperature Schedule Name"] = None
        self._data["Compressor Power Function of Fuel Rate Curve Name"] = None
        self._data["Compressor Heat Loss Factor"] = None
        self._data["Fuel Type"] = None
        self._data["Liquid Generic Fuel Lower Heating Value"] = None
        self._data["Liquid Generic Fuel Higher Heating Value"] = None
        self._data["Liquid Generic Fuel Molecular Weight"] = None
        self._data["Liquid Generic Fuel CO2 Emission Factor"] = None
        self._data["Number of Constituents in Gaseous Constituent Fuel Supply"] = None
        self._data["Constituent 1 Name"] = None
        self._data["Constituent 1 Molar Fraction"] = None
        self._data["Constituent 2 Name"] = None
        self._data["Constituent 2 Molar Fraction"] = None
        self._data["Constituent 3 Name"] = None
        self._data["Constituent 3 Molar Fraction"] = None
        self._data["Constituent 4 Name"] = None
        self._data["Constituent 4 Molar Fraction"] = None
        self._data["Constituent 5 Name"] = None
        self._data["Constituent 5 Molar Fraction"] = None
        self._data["Constituent 6 Name"] = None
        self._data["Constituent 6 Molar Fraction"] = None
        self._data["Constituent 7 Name"] = None
        self._data["Constituent 7 Molar Fraction"] = None
        self._data["Constituent 8 Name"] = None
        self._data["Constituent 8 Molar Fraction"] = None
        self._data["Constituent 9 Name"] = None
        self._data["Constituent 9 Molar Fraction"] = None
        self._data["Constituent 10 Name"] = None
        self._data["Constituent 10 Molar Fraction"] = None
        self._data["Constituent 11 Name"] = None
        self._data["Constituent 11 Molar Fraction"] = None
        self._data["Constituent 12 Name"] = None
        self._data["Constituent 12 Molar Fraction"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_temperature_modeling_mode = None
        else:
            self.fuel_temperature_modeling_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_temperature_reference_node_name = None
        else:
            self.fuel_temperature_reference_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_temperature_schedule_name = None
        else:
            self.fuel_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_power_function_of_fuel_rate_curve_name = None
        else:
            self.compressor_power_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_heat_loss_factor = None
        else:
            self.compressor_heat_loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_lower_heating_value = None
        else:
            self.liquid_generic_fuel_lower_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_higher_heating_value = None
        else:
            self.liquid_generic_fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_molecular_weight = None
        else:
            self.liquid_generic_fuel_molecular_weight = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_co2_emission_factor = None
        else:
            self.liquid_generic_fuel_co2_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_constituents_in_gaseous_constituent_fuel_supply = None
        else:
            self.number_of_constituents_in_gaseous_constituent_fuel_supply = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_1_name = None
        else:
            self.constituent_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_1_molar_fraction = None
        else:
            self.constituent_1_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_2_name = None
        else:
            self.constituent_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_2_molar_fraction = None
        else:
            self.constituent_2_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_3_name = None
        else:
            self.constituent_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_3_molar_fraction = None
        else:
            self.constituent_3_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_4_name = None
        else:
            self.constituent_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_4_molar_fraction = None
        else:
            self.constituent_4_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_5_name = None
        else:
            self.constituent_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_5_molar_fraction = None
        else:
            self.constituent_5_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_6_name = None
        else:
            self.constituent_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_6_molar_fraction = None
        else:
            self.constituent_6_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_7_name = None
        else:
            self.constituent_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_7_molar_fraction = None
        else:
            self.constituent_7_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_8_name = None
        else:
            self.constituent_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_8_molar_fraction = None
        else:
            self.constituent_8_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_9_name = None
        else:
            self.constituent_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_9_molar_fraction = None
        else:
            self.constituent_9_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_10_name = None
        else:
            self.constituent_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_10_molar_fraction = None
        else:
            self.constituent_10_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_11_name = None
        else:
            self.constituent_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_11_molar_fraction = None
        else:
            self.constituent_11_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_12_name = None
        else:
            self.constituent_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_12_molar_fraction = None
        else:
            self.constituent_12_molar_fraction = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_temperature_modeling_mode(self):
        """Get fuel_temperature_modeling_mode

        Returns:
            str: the value of `fuel_temperature_modeling_mode` or None if not set
        """
        return self._data["Fuel Temperature Modeling Mode"]

    @fuel_temperature_modeling_mode.setter
    def fuel_temperature_modeling_mode(self, value=None):
        """  Corresponds to IDD Field `fuel_temperature_modeling_mode`

        Args:
            value (str): value for IDD Field `fuel_temperature_modeling_mode`
                Accepted values are:
                      - TemperatureFromAirNode
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_temperature_modeling_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_modeling_mode`')
            vals = set()
            vals.add("TemperatureFromAirNode")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_temperature_modeling_mode`'.format(value))

        self._data["Fuel Temperature Modeling Mode"] = value

    @property
    def fuel_temperature_reference_node_name(self):
        """Get fuel_temperature_reference_node_name

        Returns:
            str: the value of `fuel_temperature_reference_node_name` or None if not set
        """
        return self._data["Fuel Temperature Reference Node Name"]

    @fuel_temperature_reference_node_name.setter
    def fuel_temperature_reference_node_name(self, value=None):
        """  Corresponds to IDD Field `fuel_temperature_reference_node_name`

        Args:
            value (str): value for IDD Field `fuel_temperature_reference_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_temperature_reference_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_reference_node_name`')

        self._data["Fuel Temperature Reference Node Name"] = value

    @property
    def fuel_temperature_schedule_name(self):
        """Get fuel_temperature_schedule_name

        Returns:
            str: the value of `fuel_temperature_schedule_name` or None if not set
        """
        return self._data["Fuel Temperature Schedule Name"]

    @fuel_temperature_schedule_name.setter
    def fuel_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `fuel_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `fuel_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_schedule_name`')

        self._data["Fuel Temperature Schedule Name"] = value

    @property
    def compressor_power_function_of_fuel_rate_curve_name(self):
        """Get compressor_power_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `compressor_power_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Compressor Power Function of Fuel Rate Curve Name"]

    @compressor_power_function_of_fuel_rate_curve_name.setter
    def compressor_power_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `compressor_power_function_of_fuel_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `compressor_power_function_of_fuel_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compressor_power_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compressor_power_function_of_fuel_rate_curve_name`')

        self._data["Compressor Power Function of Fuel Rate Curve Name"] = value

    @property
    def compressor_heat_loss_factor(self):
        """Get compressor_heat_loss_factor

        Returns:
            float: the value of `compressor_heat_loss_factor` or None if not set
        """
        return self._data["Compressor Heat Loss Factor"]

    @compressor_heat_loss_factor.setter
    def compressor_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `compressor_heat_loss_factor`

        Args:
            value (float): value for IDD Field `compressor_heat_loss_factor`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_heat_loss_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `compressor_heat_loss_factor`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `compressor_heat_loss_factor`')

        self._data["Compressor Heat Loss Factor"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - GaseousConstituents
                      - LiquidGeneric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("GaseousConstituents")
            vals.add("LiquidGeneric")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def liquid_generic_fuel_lower_heating_value(self):
        """Get liquid_generic_fuel_lower_heating_value

        Returns:
            float: the value of `liquid_generic_fuel_lower_heating_value` or None if not set
        """
        return self._data["Liquid Generic Fuel Lower Heating Value"]

    @liquid_generic_fuel_lower_heating_value.setter
    def liquid_generic_fuel_lower_heating_value(self, value=None):
        """  Corresponds to IDD Field `liquid_generic_fuel_lower_heating_value`

        Args:
            value (float): value for IDD Field `liquid_generic_fuel_lower_heating_value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_generic_fuel_lower_heating_value`'.format(value))

        self._data["Liquid Generic Fuel Lower Heating Value"] = value

    @property
    def liquid_generic_fuel_higher_heating_value(self):
        """Get liquid_generic_fuel_higher_heating_value

        Returns:
            float: the value of `liquid_generic_fuel_higher_heating_value` or None if not set
        """
        return self._data["Liquid Generic Fuel Higher Heating Value"]

    @liquid_generic_fuel_higher_heating_value.setter
    def liquid_generic_fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `liquid_generic_fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `liquid_generic_fuel_higher_heating_value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_generic_fuel_higher_heating_value`'.format(value))

        self._data["Liquid Generic Fuel Higher Heating Value"] = value

    @property
    def liquid_generic_fuel_molecular_weight(self):
        """Get liquid_generic_fuel_molecular_weight

        Returns:
            float: the value of `liquid_generic_fuel_molecular_weight` or None if not set
        """
        return self._data["Liquid Generic Fuel Molecular Weight"]

    @liquid_generic_fuel_molecular_weight.setter
    def liquid_generic_fuel_molecular_weight(self, value=None):
        """  Corresponds to IDD Field `liquid_generic_fuel_molecular_weight`

        Args:
            value (float): value for IDD Field `liquid_generic_fuel_molecular_weight`
                Units: g/mol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_generic_fuel_molecular_weight`'.format(value))

        self._data["Liquid Generic Fuel Molecular Weight"] = value

    @property
    def liquid_generic_fuel_co2_emission_factor(self):
        """Get liquid_generic_fuel_co2_emission_factor

        Returns:
            float: the value of `liquid_generic_fuel_co2_emission_factor` or None if not set
        """
        return self._data["Liquid Generic Fuel CO2 Emission Factor"]

    @liquid_generic_fuel_co2_emission_factor.setter
    def liquid_generic_fuel_co2_emission_factor(self, value=None):
        """  Corresponds to IDD Field `liquid_generic_fuel_co2_emission_factor`

        Args:
            value (float): value for IDD Field `liquid_generic_fuel_co2_emission_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_generic_fuel_co2_emission_factor`'.format(value))

        self._data["Liquid Generic Fuel CO2 Emission Factor"] = value

    @property
    def number_of_constituents_in_gaseous_constituent_fuel_supply(self):
        """Get number_of_constituents_in_gaseous_constituent_fuel_supply

        Returns:
            float: the value of `number_of_constituents_in_gaseous_constituent_fuel_supply` or None if not set
        """
        return self._data["Number of Constituents in Gaseous Constituent Fuel Supply"]

    @number_of_constituents_in_gaseous_constituent_fuel_supply.setter
    def number_of_constituents_in_gaseous_constituent_fuel_supply(self, value=None):
        """  Corresponds to IDD Field `number_of_constituents_in_gaseous_constituent_fuel_supply`

        Args:
            value (float): value for IDD Field `number_of_constituents_in_gaseous_constituent_fuel_supply`
                value >= 0.0
                value <= 12.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`')
            if value > 12.0:
                raise ValueError('value need to be smaller 12.0 '
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`')

        self._data["Number of Constituents in Gaseous Constituent Fuel Supply"] = value

    @property
    def constituent_1_name(self):
        """Get constituent_1_name

        Returns:
            str: the value of `constituent_1_name` or None if not set
        """
        return self._data["Constituent 1 Name"]

    @constituent_1_name.setter
    def constituent_1_name(self, value=None):
        """  Corresponds to IDD Field `constituent_1_name`

        Args:
            value (str): value for IDD Field `constituent_1_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_1_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_1_name`'.format(value))

        self._data["Constituent 1 Name"] = value

    @property
    def constituent_1_molar_fraction(self):
        """Get constituent_1_molar_fraction

        Returns:
            float: the value of `constituent_1_molar_fraction` or None if not set
        """
        return self._data["Constituent 1 Molar Fraction"]

    @constituent_1_molar_fraction.setter
    def constituent_1_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_1_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_1_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_1_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_1_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_1_molar_fraction`')

        self._data["Constituent 1 Molar Fraction"] = value

    @property
    def constituent_2_name(self):
        """Get constituent_2_name

        Returns:
            str: the value of `constituent_2_name` or None if not set
        """
        return self._data["Constituent 2 Name"]

    @constituent_2_name.setter
    def constituent_2_name(self, value=None):
        """  Corresponds to IDD Field `constituent_2_name`

        Args:
            value (str): value for IDD Field `constituent_2_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_2_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_2_name`'.format(value))

        self._data["Constituent 2 Name"] = value

    @property
    def constituent_2_molar_fraction(self):
        """Get constituent_2_molar_fraction

        Returns:
            float: the value of `constituent_2_molar_fraction` or None if not set
        """
        return self._data["Constituent 2 Molar Fraction"]

    @constituent_2_molar_fraction.setter
    def constituent_2_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_2_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_2_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_2_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_2_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_2_molar_fraction`')

        self._data["Constituent 2 Molar Fraction"] = value

    @property
    def constituent_3_name(self):
        """Get constituent_3_name

        Returns:
            str: the value of `constituent_3_name` or None if not set
        """
        return self._data["Constituent 3 Name"]

    @constituent_3_name.setter
    def constituent_3_name(self, value=None):
        """  Corresponds to IDD Field `constituent_3_name`

        Args:
            value (str): value for IDD Field `constituent_3_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_3_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_3_name`'.format(value))

        self._data["Constituent 3 Name"] = value

    @property
    def constituent_3_molar_fraction(self):
        """Get constituent_3_molar_fraction

        Returns:
            float: the value of `constituent_3_molar_fraction` or None if not set
        """
        return self._data["Constituent 3 Molar Fraction"]

    @constituent_3_molar_fraction.setter
    def constituent_3_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_3_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_3_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_3_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_3_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_3_molar_fraction`')

        self._data["Constituent 3 Molar Fraction"] = value

    @property
    def constituent_4_name(self):
        """Get constituent_4_name

        Returns:
            str: the value of `constituent_4_name` or None if not set
        """
        return self._data["Constituent 4 Name"]

    @constituent_4_name.setter
    def constituent_4_name(self, value=None):
        """  Corresponds to IDD Field `constituent_4_name`

        Args:
            value (str): value for IDD Field `constituent_4_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_4_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_4_name`'.format(value))

        self._data["Constituent 4 Name"] = value

    @property
    def constituent_4_molar_fraction(self):
        """Get constituent_4_molar_fraction

        Returns:
            float: the value of `constituent_4_molar_fraction` or None if not set
        """
        return self._data["Constituent 4 Molar Fraction"]

    @constituent_4_molar_fraction.setter
    def constituent_4_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_4_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_4_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_4_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_4_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_4_molar_fraction`')

        self._data["Constituent 4 Molar Fraction"] = value

    @property
    def constituent_5_name(self):
        """Get constituent_5_name

        Returns:
            str: the value of `constituent_5_name` or None if not set
        """
        return self._data["Constituent 5 Name"]

    @constituent_5_name.setter
    def constituent_5_name(self, value=None):
        """  Corresponds to IDD Field `constituent_5_name`

        Args:
            value (str): value for IDD Field `constituent_5_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_5_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_5_name`'.format(value))

        self._data["Constituent 5 Name"] = value

    @property
    def constituent_5_molar_fraction(self):
        """Get constituent_5_molar_fraction

        Returns:
            float: the value of `constituent_5_molar_fraction` or None if not set
        """
        return self._data["Constituent 5 Molar Fraction"]

    @constituent_5_molar_fraction.setter
    def constituent_5_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_5_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_5_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_5_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_5_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_5_molar_fraction`')

        self._data["Constituent 5 Molar Fraction"] = value

    @property
    def constituent_6_name(self):
        """Get constituent_6_name

        Returns:
            str: the value of `constituent_6_name` or None if not set
        """
        return self._data["Constituent 6 Name"]

    @constituent_6_name.setter
    def constituent_6_name(self, value=None):
        """  Corresponds to IDD Field `constituent_6_name`

        Args:
            value (str): value for IDD Field `constituent_6_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_6_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_6_name`'.format(value))

        self._data["Constituent 6 Name"] = value

    @property
    def constituent_6_molar_fraction(self):
        """Get constituent_6_molar_fraction

        Returns:
            float: the value of `constituent_6_molar_fraction` or None if not set
        """
        return self._data["Constituent 6 Molar Fraction"]

    @constituent_6_molar_fraction.setter
    def constituent_6_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_6_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_6_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_6_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_6_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_6_molar_fraction`')

        self._data["Constituent 6 Molar Fraction"] = value

    @property
    def constituent_7_name(self):
        """Get constituent_7_name

        Returns:
            str: the value of `constituent_7_name` or None if not set
        """
        return self._data["Constituent 7 Name"]

    @constituent_7_name.setter
    def constituent_7_name(self, value=None):
        """  Corresponds to IDD Field `constituent_7_name`

        Args:
            value (str): value for IDD Field `constituent_7_name`
                Accepted values are:
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_7_name`')
            vals = set()
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_7_name`'.format(value))

        self._data["Constituent 7 Name"] = value

    @property
    def constituent_7_molar_fraction(self):
        """Get constituent_7_molar_fraction

        Returns:
            float: the value of `constituent_7_molar_fraction` or None if not set
        """
        return self._data["Constituent 7 Molar Fraction"]

    @constituent_7_molar_fraction.setter
    def constituent_7_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_7_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_7_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_7_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_7_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_7_molar_fraction`')

        self._data["Constituent 7 Molar Fraction"] = value

    @property
    def constituent_8_name(self):
        """Get constituent_8_name

        Returns:
            str: the value of `constituent_8_name` or None if not set
        """
        return self._data["Constituent 8 Name"]

    @constituent_8_name.setter
    def constituent_8_name(self, value=None):
        """  Corresponds to IDD Field `constituent_8_name`

        Args:
            value (str): value for IDD Field `constituent_8_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_8_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_8_name`'.format(value))

        self._data["Constituent 8 Name"] = value

    @property
    def constituent_8_molar_fraction(self):
        """Get constituent_8_molar_fraction

        Returns:
            float: the value of `constituent_8_molar_fraction` or None if not set
        """
        return self._data["Constituent 8 Molar Fraction"]

    @constituent_8_molar_fraction.setter
    def constituent_8_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_8_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_8_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_8_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_8_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_8_molar_fraction`')

        self._data["Constituent 8 Molar Fraction"] = value

    @property
    def constituent_9_name(self):
        """Get constituent_9_name

        Returns:
            str: the value of `constituent_9_name` or None if not set
        """
        return self._data["Constituent 9 Name"]

    @constituent_9_name.setter
    def constituent_9_name(self, value=None):
        """  Corresponds to IDD Field `constituent_9_name`

        Args:
            value (str): value for IDD Field `constituent_9_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_9_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_9_name`'.format(value))

        self._data["Constituent 9 Name"] = value

    @property
    def constituent_9_molar_fraction(self):
        """Get constituent_9_molar_fraction

        Returns:
            float: the value of `constituent_9_molar_fraction` or None if not set
        """
        return self._data["Constituent 9 Molar Fraction"]

    @constituent_9_molar_fraction.setter
    def constituent_9_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_9_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_9_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_9_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_9_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_9_molar_fraction`')

        self._data["Constituent 9 Molar Fraction"] = value

    @property
    def constituent_10_name(self):
        """Get constituent_10_name

        Returns:
            str: the value of `constituent_10_name` or None if not set
        """
        return self._data["Constituent 10 Name"]

    @constituent_10_name.setter
    def constituent_10_name(self, value=None):
        """  Corresponds to IDD Field `constituent_10_name`

        Args:
            value (str): value for IDD Field `constituent_10_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_10_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_10_name`'.format(value))

        self._data["Constituent 10 Name"] = value

    @property
    def constituent_10_molar_fraction(self):
        """Get constituent_10_molar_fraction

        Returns:
            float: the value of `constituent_10_molar_fraction` or None if not set
        """
        return self._data["Constituent 10 Molar Fraction"]

    @constituent_10_molar_fraction.setter
    def constituent_10_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_10_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_10_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_10_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_10_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_10_molar_fraction`')

        self._data["Constituent 10 Molar Fraction"] = value

    @property
    def constituent_11_name(self):
        """Get constituent_11_name

        Returns:
            str: the value of `constituent_11_name` or None if not set
        """
        return self._data["Constituent 11 Name"]

    @constituent_11_name.setter
    def constituent_11_name(self, value=None):
        """  Corresponds to IDD Field `constituent_11_name`

        Args:
            value (str): value for IDD Field `constituent_11_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_11_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_11_name`'.format(value))

        self._data["Constituent 11 Name"] = value

    @property
    def constituent_11_molar_fraction(self):
        """Get constituent_11_molar_fraction

        Returns:
            float: the value of `constituent_11_molar_fraction` or None if not set
        """
        return self._data["Constituent 11 Molar Fraction"]

    @constituent_11_molar_fraction.setter
    def constituent_11_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_11_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_11_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_11_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_11_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_11_molar_fraction`')

        self._data["Constituent 11 Molar Fraction"] = value

    @property
    def constituent_12_name(self):
        """Get constituent_12_name

        Returns:
            str: the value of `constituent_12_name` or None if not set
        """
        return self._data["Constituent 12 Name"]

    @constituent_12_name.setter
    def constituent_12_name(self, value=None):
        """  Corresponds to IDD Field `constituent_12_name`

        Args:
            value (str): value for IDD Field `constituent_12_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_12_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_12_name`'.format(value))

        self._data["Constituent 12 Name"] = value

    @property
    def constituent_12_molar_fraction(self):
        """Get constituent_12_molar_fraction

        Returns:
            float: the value of `constituent_12_molar_fraction` or None if not set
        """
        return self._data["Constituent 12 Molar Fraction"]

    @constituent_12_molar_fraction.setter
    def constituent_12_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_12_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_12_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_12_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_12_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_12_molar_fraction`')

        self._data["Constituent 12 Molar Fraction"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_temperature_modeling_mode))
        out.append(self._to_str(self.fuel_temperature_reference_node_name))
        out.append(self._to_str(self.fuel_temperature_schedule_name))
        out.append(self._to_str(self.compressor_power_function_of_fuel_rate_curve_name))
        out.append(self._to_str(self.compressor_heat_loss_factor))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.liquid_generic_fuel_lower_heating_value))
        out.append(self._to_str(self.liquid_generic_fuel_higher_heating_value))
        out.append(self._to_str(self.liquid_generic_fuel_molecular_weight))
        out.append(self._to_str(self.liquid_generic_fuel_co2_emission_factor))
        out.append(self._to_str(self.number_of_constituents_in_gaseous_constituent_fuel_supply))
        out.append(self._to_str(self.constituent_1_name))
        out.append(self._to_str(self.constituent_1_molar_fraction))
        out.append(self._to_str(self.constituent_2_name))
        out.append(self._to_str(self.constituent_2_molar_fraction))
        out.append(self._to_str(self.constituent_3_name))
        out.append(self._to_str(self.constituent_3_molar_fraction))
        out.append(self._to_str(self.constituent_4_name))
        out.append(self._to_str(self.constituent_4_molar_fraction))
        out.append(self._to_str(self.constituent_5_name))
        out.append(self._to_str(self.constituent_5_molar_fraction))
        out.append(self._to_str(self.constituent_6_name))
        out.append(self._to_str(self.constituent_6_molar_fraction))
        out.append(self._to_str(self.constituent_7_name))
        out.append(self._to_str(self.constituent_7_molar_fraction))
        out.append(self._to_str(self.constituent_8_name))
        out.append(self._to_str(self.constituent_8_molar_fraction))
        out.append(self._to_str(self.constituent_9_name))
        out.append(self._to_str(self.constituent_9_molar_fraction))
        out.append(self._to_str(self.constituent_10_name))
        out.append(self._to_str(self.constituent_10_molar_fraction))
        out.append(self._to_str(self.constituent_11_name))
        out.append(self._to_str(self.constituent_11_molar_fraction))
        out.append(self._to_str(self.constituent_12_name))
        out.append(self._to_str(self.constituent_12_molar_fraction))
        return ",".join(out)

class GeneratorWindTurbine(object):
    """ Corresponds to IDD object `Generator:WindTurbine`
        Wind turbine generator.
    
    """
    internal_name = "Generator:WindTurbine"
    field_count = 26
    required_fields = ["Name", "Rotor Type", "Power Control", "Rated Rotor Speed", "Rotor Diameter", "Overall Height", "Number of Blades", "Rated Power", "Rated Wind Speed", "Cut In Wind Speed", "Cut Out Wind Speed", "Maximum Tip Speed Ratio"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:WindTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Rotor Type"] = None
        self._data["Power Control"] = None
        self._data["Rated Rotor Speed"] = None
        self._data["Rotor Diameter"] = None
        self._data["Overall Height"] = None
        self._data["Number of Blades"] = None
        self._data["Rated Power"] = None
        self._data["Rated Wind Speed"] = None
        self._data["Cut In Wind Speed"] = None
        self._data["Cut Out Wind Speed"] = None
        self._data["Fraction system Efficiency"] = None
        self._data["Maximum Tip Speed Ratio"] = None
        self._data["Maximum Power Coefficient"] = None
        self._data["Annual Local Average Wind Speed"] = None
        self._data["Height for Local Average Wind Speed"] = None
        self._data["Blade Chord Area"] = None
        self._data["Blade Drag Coefficient"] = None
        self._data["Blade Lift Coefficient"] = None
        self._data["Power Coefficient C1"] = None
        self._data["Power Coefficient C2"] = None
        self._data["Power Coefficient C3"] = None
        self._data["Power Coefficient C4"] = None
        self._data["Power Coefficient C5"] = None
        self._data["Power Coefficient C6"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rotor_type = None
        else:
            self.rotor_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_control = None
        else:
            self.power_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_rotor_speed = None
        else:
            self.rated_rotor_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rotor_diameter = None
        else:
            self.rotor_diameter = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.overall_height = None
        else:
            self.overall_height = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_blades = None
        else:
            self.number_of_blades = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_power = None
        else:
            self.rated_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_wind_speed = None
        else:
            self.rated_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cut_in_wind_speed = None
        else:
            self.cut_in_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cut_out_wind_speed = None
        else:
            self.cut_out_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_system_efficiency = None
        else:
            self.fraction_system_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_tip_speed_ratio = None
        else:
            self.maximum_tip_speed_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_power_coefficient = None
        else:
            self.maximum_power_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.annual_local_average_wind_speed = None
        else:
            self.annual_local_average_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.height_for_local_average_wind_speed = None
        else:
            self.height_for_local_average_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blade_chord_area = None
        else:
            self.blade_chord_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blade_drag_coefficient = None
        else:
            self.blade_drag_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blade_lift_coefficient = None
        else:
            self.blade_lift_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c1 = None
        else:
            self.power_coefficient_c1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c2 = None
        else:
            self.power_coefficient_c2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c3 = None
        else:
            self.power_coefficient_c3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c4 = None
        else:
            self.power_coefficient_c4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c5 = None
        else:
            self.power_coefficient_c5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c6 = None
        else:
            self.power_coefficient_c6 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def rotor_type(self):
        """Get rotor_type

        Returns:
            str: the value of `rotor_type` or None if not set
        """
        return self._data["Rotor Type"]

    @rotor_type.setter
    def rotor_type(self, value="HorizontalAxisWindTurbine"):
        """  Corresponds to IDD Field `rotor_type`
        allowed values are: Horizontal Axis Wind Turbine or Vertical Axis Wind Turbine

        Args:
            value (str): value for IDD Field `rotor_type`
                Accepted values are:
                      - HorizontalAxisWindTurbine
                      - VerticalAxisWindTurbine
                Default value: HorizontalAxisWindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `rotor_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `rotor_type`')
            vals = set()
            vals.add("HorizontalAxisWindTurbine")
            vals.add("VerticalAxisWindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `rotor_type`'.format(value))

        self._data["Rotor Type"] = value

    @property
    def power_control(self):
        """Get power_control

        Returns:
            str: the value of `power_control` or None if not set
        """
        return self._data["Power Control"]

    @power_control.setter
    def power_control(self, value="VariableSpeedVariablePitch"):
        """  Corresponds to IDD Field `power_control`
        Constant power output is obtained in the last three control types
        when the wind speed exceeds the rated wind speed.
        allowd values are: Fixed Speed Fixed Pitch, Fixed Speed Variable Pitch,
        Variable Speed Fixed Pitch or Variable Speed Variable Pitch

        Args:
            value (str): value for IDD Field `power_control`
                Accepted values are:
                      - FixedSpeedFixedPitch
                      - FixedSpeedVariablePitch
                      - VariableSpeedFixedPitch
                      - VariableSpeedVariablePitch
                Default value: VariableSpeedVariablePitch
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `power_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `power_control`')
            vals = set()
            vals.add("FixedSpeedFixedPitch")
            vals.add("FixedSpeedVariablePitch")
            vals.add("VariableSpeedFixedPitch")
            vals.add("VariableSpeedVariablePitch")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `power_control`'.format(value))

        self._data["Power Control"] = value

    @property
    def rated_rotor_speed(self):
        """Get rated_rotor_speed

        Returns:
            float: the value of `rated_rotor_speed` or None if not set
        """
        return self._data["Rated Rotor Speed"]

    @rated_rotor_speed.setter
    def rated_rotor_speed(self, value=None):
        """  Corresponds to IDD Field `rated_rotor_speed`

        Args:
            value (float): value for IDD Field `rated_rotor_speed`
                Units: rev/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_rotor_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_rotor_speed`')

        self._data["Rated Rotor Speed"] = value

    @property
    def rotor_diameter(self):
        """Get rotor_diameter

        Returns:
            float: the value of `rotor_diameter` or None if not set
        """
        return self._data["Rotor Diameter"]

    @rotor_diameter.setter
    def rotor_diameter(self, value=None):
        """  Corresponds to IDD Field `rotor_diameter`
        This field is the diameter of the perpendicular circle of the Vertical Axis Wind Turbine system
        from the upright pole on the ground.

        Args:
            value (float): value for IDD Field `rotor_diameter`
                Units: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rotor_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rotor_diameter`')

        self._data["Rotor Diameter"] = value

    @property
    def overall_height(self):
        """Get overall_height

        Returns:
            float: the value of `overall_height` or None if not set
        """
        return self._data["Overall Height"]

    @overall_height.setter
    def overall_height(self, value=None):
        """  Corresponds to IDD Field `overall_height`
        This field is the height of the hub for the Horizontal Axis Wind Turbines and
        of the pole for the Vertical Axis Wind Turbines.

        Args:
            value (float): value for IDD Field `overall_height`
                Units: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `overall_height`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `overall_height`')

        self._data["Overall Height"] = value

    @property
    def number_of_blades(self):
        """Get number_of_blades

        Returns:
            float: the value of `number_of_blades` or None if not set
        """
        return self._data["Number of Blades"]

    @number_of_blades.setter
    def number_of_blades(self, value=3.0 ):
        """  Corresponds to IDD Field `number_of_blades`

        Args:
            value (float): value for IDD Field `number_of_blades`
                Default value: 3.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_blades`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `number_of_blades`')

        self._data["Number of Blades"] = value

    @property
    def rated_power(self):
        """Get rated_power

        Returns:
            float: the value of `rated_power` or None if not set
        """
        return self._data["Rated Power"]

    @rated_power.setter
    def rated_power(self, value=None):
        """  Corresponds to IDD Field `rated_power`
        This field is the nominal power at the rated wind speed.
        Users should input maximum power in case of Fixed Speed Fixed Pitch control type.

        Args:
            value (float): value for IDD Field `rated_power`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_power`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_power`')

        self._data["Rated Power"] = value

    @property
    def rated_wind_speed(self):
        """Get rated_wind_speed

        Returns:
            float: the value of `rated_wind_speed` or None if not set
        """
        return self._data["Rated Wind Speed"]

    @rated_wind_speed.setter
    def rated_wind_speed(self, value=None):
        """  Corresponds to IDD Field `rated_wind_speed`

        Args:
            value (float): value for IDD Field `rated_wind_speed`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_wind_speed`')

        self._data["Rated Wind Speed"] = value

    @property
    def cut_in_wind_speed(self):
        """Get cut_in_wind_speed

        Returns:
            float: the value of `cut_in_wind_speed` or None if not set
        """
        return self._data["Cut In Wind Speed"]

    @cut_in_wind_speed.setter
    def cut_in_wind_speed(self, value=None):
        """  Corresponds to IDD Field `cut_in_wind_speed`

        Args:
            value (float): value for IDD Field `cut_in_wind_speed`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cut_in_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cut_in_wind_speed`')

        self._data["Cut In Wind Speed"] = value

    @property
    def cut_out_wind_speed(self):
        """Get cut_out_wind_speed

        Returns:
            float: the value of `cut_out_wind_speed` or None if not set
        """
        return self._data["Cut Out Wind Speed"]

    @cut_out_wind_speed.setter
    def cut_out_wind_speed(self, value=None):
        """  Corresponds to IDD Field `cut_out_wind_speed`

        Args:
            value (float): value for IDD Field `cut_out_wind_speed`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cut_out_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cut_out_wind_speed`')

        self._data["Cut Out Wind Speed"] = value

    @property
    def fraction_system_efficiency(self):
        """Get fraction_system_efficiency

        Returns:
            float: the value of `fraction_system_efficiency` or None if not set
        """
        return self._data["Fraction system Efficiency"]

    @fraction_system_efficiency.setter
    def fraction_system_efficiency(self, value=0.835 ):
        """  Corresponds to IDD Field `fraction_system_efficiency`

        Args:
            value (float): value for IDD Field `fraction_system_efficiency`
                Default value: 0.835
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_system_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fraction_system_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_system_efficiency`')

        self._data["Fraction system Efficiency"] = value

    @property
    def maximum_tip_speed_ratio(self):
        """Get maximum_tip_speed_ratio

        Returns:
            float: the value of `maximum_tip_speed_ratio` or None if not set
        """
        return self._data["Maximum Tip Speed Ratio"]

    @maximum_tip_speed_ratio.setter
    def maximum_tip_speed_ratio(self, value=5.0 ):
        """  Corresponds to IDD Field `maximum_tip_speed_ratio`

        Args:
            value (float): value for IDD Field `maximum_tip_speed_ratio`
                Default value: 5.0
                value > 0.0
                value <= 12.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_tip_speed_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_tip_speed_ratio`')
            if value > 12.0:
                raise ValueError('value need to be smaller 12.0 '
                                 'for field `maximum_tip_speed_ratio`')

        self._data["Maximum Tip Speed Ratio"] = value

    @property
    def maximum_power_coefficient(self):
        """Get maximum_power_coefficient

        Returns:
            float: the value of `maximum_power_coefficient` or None if not set
        """
        return self._data["Maximum Power Coefficient"]

    @maximum_power_coefficient.setter
    def maximum_power_coefficient(self, value=0.25 ):
        """  Corresponds to IDD Field `maximum_power_coefficient`
        This field should be input if the rotor type is Horizontal Axis Wind Turbine

        Args:
            value (float): value for IDD Field `maximum_power_coefficient`
                Default value: 0.25
                value > 0.0
                value <= 0.59
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_power_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_power_coefficient`')
            if value > 0.59:
                raise ValueError('value need to be smaller 0.59 '
                                 'for field `maximum_power_coefficient`')

        self._data["Maximum Power Coefficient"] = value

    @property
    def annual_local_average_wind_speed(self):
        """Get annual_local_average_wind_speed

        Returns:
            float: the value of `annual_local_average_wind_speed` or None if not set
        """
        return self._data["Annual Local Average Wind Speed"]

    @annual_local_average_wind_speed.setter
    def annual_local_average_wind_speed(self, value=None):
        """  Corresponds to IDD Field `annual_local_average_wind_speed`

        Args:
            value (float): value for IDD Field `annual_local_average_wind_speed`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `annual_local_average_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `annual_local_average_wind_speed`')

        self._data["Annual Local Average Wind Speed"] = value

    @property
    def height_for_local_average_wind_speed(self):
        """Get height_for_local_average_wind_speed

        Returns:
            float: the value of `height_for_local_average_wind_speed` or None if not set
        """
        return self._data["Height for Local Average Wind Speed"]

    @height_for_local_average_wind_speed.setter
    def height_for_local_average_wind_speed(self, value=50.0 ):
        """  Corresponds to IDD Field `height_for_local_average_wind_speed`

        Args:
            value (float): value for IDD Field `height_for_local_average_wind_speed`
                Units: m
                Default value: 50.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_for_local_average_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `height_for_local_average_wind_speed`')

        self._data["Height for Local Average Wind Speed"] = value

    @property
    def blade_chord_area(self):
        """Get blade_chord_area

        Returns:
            float: the value of `blade_chord_area` or None if not set
        """
        return self._data["Blade Chord Area"]

    @blade_chord_area.setter
    def blade_chord_area(self, value=None):
        """  Corresponds to IDD Field `blade_chord_area`

        Args:
            value (float): value for IDD Field `blade_chord_area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `blade_chord_area`'.format(value))

        self._data["Blade Chord Area"] = value

    @property
    def blade_drag_coefficient(self):
        """Get blade_drag_coefficient

        Returns:
            float: the value of `blade_drag_coefficient` or None if not set
        """
        return self._data["Blade Drag Coefficient"]

    @blade_drag_coefficient.setter
    def blade_drag_coefficient(self, value=0.9 ):
        """  Corresponds to IDD Field `blade_drag_coefficient`
        This field is only for Vertical Axis Wind Turbine..
        The user must input this field if the rotor type is Vertical Axis Wind Turbine.

        Args:
            value (float): value for IDD Field `blade_drag_coefficient`
                Default value: 0.9
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `blade_drag_coefficient`'.format(value))

        self._data["Blade Drag Coefficient"] = value

    @property
    def blade_lift_coefficient(self):
        """Get blade_lift_coefficient

        Returns:
            float: the value of `blade_lift_coefficient` or None if not set
        """
        return self._data["Blade Lift Coefficient"]

    @blade_lift_coefficient.setter
    def blade_lift_coefficient(self, value=0.05 ):
        """  Corresponds to IDD Field `blade_lift_coefficient`
        This field is only for Vertical Axis Wind Turbine..
        The user must input this field if the rotor type is Vertical Axis Wind Turbine.

        Args:
            value (float): value for IDD Field `blade_lift_coefficient`
                Default value: 0.05
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `blade_lift_coefficient`'.format(value))

        self._data["Blade Lift Coefficient"] = value

    @property
    def power_coefficient_c1(self):
        """Get power_coefficient_c1

        Returns:
            float: the value of `power_coefficient_c1` or None if not set
        """
        return self._data["Power Coefficient C1"]

    @power_coefficient_c1.setter
    def power_coefficient_c1(self, value=0.5176 ):
        """  Corresponds to IDD Field `power_coefficient_c1`
        This field is only available for Horizontal Axis Wind Turbine.
        The user should input all six parameters
        so that the analytic approximation is assumed.
        The simple approximation will be assumed,
        if any field C1 through C6 is not input.
        Leave this field blank, if the manufacturers's data is unavailable
        so that the simple approximation will be assumed.

        Args:
            value (float): value for IDD Field `power_coefficient_c1`
                Default value: 0.5176
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c1`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c1`')

        self._data["Power Coefficient C1"] = value

    @property
    def power_coefficient_c2(self):
        """Get power_coefficient_c2

        Returns:
            float: the value of `power_coefficient_c2` or None if not set
        """
        return self._data["Power Coefficient C2"]

    @power_coefficient_c2.setter
    def power_coefficient_c2(self, value=116.0 ):
        """  Corresponds to IDD Field `power_coefficient_c2`

        Args:
            value (float): value for IDD Field `power_coefficient_c2`
                Default value: 116.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c2`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c2`')

        self._data["Power Coefficient C2"] = value

    @property
    def power_coefficient_c3(self):
        """Get power_coefficient_c3

        Returns:
            float: the value of `power_coefficient_c3` or None if not set
        """
        return self._data["Power Coefficient C3"]

    @power_coefficient_c3.setter
    def power_coefficient_c3(self, value=0.4 ):
        """  Corresponds to IDD Field `power_coefficient_c3`

        Args:
            value (float): value for IDD Field `power_coefficient_c3`
                Default value: 0.4
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c3`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c3`')

        self._data["Power Coefficient C3"] = value

    @property
    def power_coefficient_c4(self):
        """Get power_coefficient_c4

        Returns:
            float: the value of `power_coefficient_c4` or None if not set
        """
        return self._data["Power Coefficient C4"]

    @power_coefficient_c4.setter
    def power_coefficient_c4(self, value=0.0 ):
        """  Corresponds to IDD Field `power_coefficient_c4`

        Args:
            value (float): value for IDD Field `power_coefficient_c4`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `power_coefficient_c4`')

        self._data["Power Coefficient C4"] = value

    @property
    def power_coefficient_c5(self):
        """Get power_coefficient_c5

        Returns:
            float: the value of `power_coefficient_c5` or None if not set
        """
        return self._data["Power Coefficient C5"]

    @power_coefficient_c5.setter
    def power_coefficient_c5(self, value=5.0 ):
        """  Corresponds to IDD Field `power_coefficient_c5`

        Args:
            value (float): value for IDD Field `power_coefficient_c5`
                Default value: 5.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c5`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c5`')

        self._data["Power Coefficient C5"] = value

    @property
    def power_coefficient_c6(self):
        """Get power_coefficient_c6

        Returns:
            float: the value of `power_coefficient_c6` or None if not set
        """
        return self._data["Power Coefficient C6"]

    @power_coefficient_c6.setter
    def power_coefficient_c6(self, value=21.0 ):
        """  Corresponds to IDD Field `power_coefficient_c6`

        Args:
            value (float): value for IDD Field `power_coefficient_c6`
                Default value: 21.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c6`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c6`')

        self._data["Power Coefficient C6"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.rotor_type))
        out.append(self._to_str(self.power_control))
        out.append(self._to_str(self.rated_rotor_speed))
        out.append(self._to_str(self.rotor_diameter))
        out.append(self._to_str(self.overall_height))
        out.append(self._to_str(self.number_of_blades))
        out.append(self._to_str(self.rated_power))
        out.append(self._to_str(self.rated_wind_speed))
        out.append(self._to_str(self.cut_in_wind_speed))
        out.append(self._to_str(self.cut_out_wind_speed))
        out.append(self._to_str(self.fraction_system_efficiency))
        out.append(self._to_str(self.maximum_tip_speed_ratio))
        out.append(self._to_str(self.maximum_power_coefficient))
        out.append(self._to_str(self.annual_local_average_wind_speed))
        out.append(self._to_str(self.height_for_local_average_wind_speed))
        out.append(self._to_str(self.blade_chord_area))
        out.append(self._to_str(self.blade_drag_coefficient))
        out.append(self._to_str(self.blade_lift_coefficient))
        out.append(self._to_str(self.power_coefficient_c1))
        out.append(self._to_str(self.power_coefficient_c2))
        out.append(self._to_str(self.power_coefficient_c3))
        out.append(self._to_str(self.power_coefficient_c4))
        out.append(self._to_str(self.power_coefficient_c5))
        out.append(self._to_str(self.power_coefficient_c6))
        return ",".join(out)

class ElectricLoadCenterGenerators(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Generators`
        List of electric power generators to include in the simulation including the name and
        type of each generators along with availability schedule, rated power output,
        and thermal-to-electrical power ratio.
    
    """
    internal_name = "ElectricLoadCenter:Generators"
    field_count = 151
    required_fields = ["Name", "Generator 1 Name", "Generator 1 Object Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Generators`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Generator 1 Name"] = None
        self._data["Generator 1 Object Type"] = None
        self._data["Generator 1 Rated Electric Power Output"] = None
        self._data["Generator 1 Availability Schedule Name"] = None
        self._data["Generator 1 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 2 Name"] = None
        self._data["Generator 2 Object Type"] = None
        self._data["Generator 2 Rated Electric Power Output"] = None
        self._data["Generator 2 Availability Schedule Name"] = None
        self._data["Generator 2 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 3 Name"] = None
        self._data["Generator 3 Object Type"] = None
        self._data["Generator 3 Rated Electric Power Output"] = None
        self._data["Generator 3 Availability Schedule Name"] = None
        self._data["Generator 3 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 4 Name"] = None
        self._data["Generator 4 Object Type"] = None
        self._data["Generator 4 Rated Electric Power Output"] = None
        self._data["Generator 4 Availability Schedule Name"] = None
        self._data["Generator 4 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 5 Name"] = None
        self._data["Generator 5 Object Type"] = None
        self._data["Generator 5 Rated Electric Power Output"] = None
        self._data["Generator 5 Availability Schedule Name"] = None
        self._data["Generator 5 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 6 Name"] = None
        self._data["Generator 6 Object Type"] = None
        self._data["Generator 6 Rated Electric Power Output"] = None
        self._data["Generator 6 Availability Schedule Name"] = None
        self._data["Generator 6 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 7 Name"] = None
        self._data["Generator 7 Object Type"] = None
        self._data["Generator 7 Rated Electric Power Output"] = None
        self._data["Generator 7 Availability Schedule Name"] = None
        self._data["Generator 7 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 8 Name"] = None
        self._data["Generator 8 Object Type"] = None
        self._data["Generator 8 Rated Electric Power Output"] = None
        self._data["Generator 8 Availability Schedule Name"] = None
        self._data["Generator 8 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 9 Name"] = None
        self._data["Generator 9 Object Type"] = None
        self._data["Generator 9 Rated Electric Power Output"] = None
        self._data["Generator 9 Availability Schedule Name"] = None
        self._data["Generator 9 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 10 Name"] = None
        self._data["Generator 10 Object Type"] = None
        self._data["Generator 10 Rated Electric Power Output"] = None
        self._data["Generator 10 Availability Schedule Name"] = None
        self._data["Generator 10 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 11 Name"] = None
        self._data["Generator 11 Object Type"] = None
        self._data["Generator 11 Rated Electric Power Output"] = None
        self._data["Generator 11 Availability Schedule Name"] = None
        self._data["Generator 11 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 12 Name"] = None
        self._data["Generator 12 Object Type"] = None
        self._data["Generator 12 Rated Electric Power Output"] = None
        self._data["Generator 12 Availability Schedule Name"] = None
        self._data["Generator 12 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 13 Name"] = None
        self._data["Generator 13 Object Type"] = None
        self._data["Generator 13 Rated Electric Power Output"] = None
        self._data["Generator 13 Availability Schedule Name"] = None
        self._data["Generator 13 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 14 Name"] = None
        self._data["Generator 14 Object Type"] = None
        self._data["Generator 14 Rated Electric Power Output"] = None
        self._data["Generator 14 Availability Schedule Name"] = None
        self._data["Generator 14 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 15 Name"] = None
        self._data["Generator 15 Object Type"] = None
        self._data["Generator 15 Rated Electric Power Output"] = None
        self._data["Generator 15 Availability Schedule Name"] = None
        self._data["Generator 15 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 16 Name"] = None
        self._data["Generator 16 Object Type"] = None
        self._data["Generator 16 Rated Electric Power Output"] = None
        self._data["Generator 16 Availability Schedule Name"] = None
        self._data["Generator 16 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 17 Name"] = None
        self._data["Generator 17 Object Type"] = None
        self._data["Generator 17 Rated Electric Power Output"] = None
        self._data["Generator 17 Availability Schedule Name"] = None
        self._data["Generator 17 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 18 Name"] = None
        self._data["Generator 18 Object Type"] = None
        self._data["Generator 18 Rated Electric Power Output"] = None
        self._data["Generator 18 Availability Schedule Name"] = None
        self._data["Generator 18 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 19 Name"] = None
        self._data["Generator 19 Object Type"] = None
        self._data["Generator 19 Rated Electric Power Output"] = None
        self._data["Generator 19 Availability Schedule Name"] = None
        self._data["Generator 19 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 20 Name"] = None
        self._data["Generator 20 Object Type"] = None
        self._data["Generator 20 Rated Electric Power Output"] = None
        self._data["Generator 20 Availability Schedule Name"] = None
        self._data["Generator 20 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 21 Name"] = None
        self._data["Generator 21 Object Type"] = None
        self._data["Generator 21 Rated Electric Power Output"] = None
        self._data["Generator 21 Availability Schedule Name"] = None
        self._data["Generator 21 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 22 Name"] = None
        self._data["Generator 22 Object Type"] = None
        self._data["Generator 22 Rated Electric Power Output"] = None
        self._data["Generator 22 Availability Schedule Name"] = None
        self._data["Generator 22 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 23 Name"] = None
        self._data["Generator 23 Object Type"] = None
        self._data["Generator 23 Rated Electric Power Output"] = None
        self._data["Generator 23 Availability Schedule Name"] = None
        self._data["Generator 23 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 24 Name"] = None
        self._data["Generator 24 Object Type"] = None
        self._data["Generator 24 Rated Electric Power Output"] = None
        self._data["Generator 24 Availability Schedule Name"] = None
        self._data["Generator 24 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 25 Name"] = None
        self._data["Generator 25 Object Type"] = None
        self._data["Generator 25 Rated Electric Power Output"] = None
        self._data["Generator 25 Availability Schedule Name"] = None
        self._data["Generator 25 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 26 Name"] = None
        self._data["Generator 26 Object Type"] = None
        self._data["Generator 26 Rated Electric Power Output"] = None
        self._data["Generator 26 Availability Schedule Name"] = None
        self._data["Generator 26 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 27 Name"] = None
        self._data["Generator 27 Object Type"] = None
        self._data["Generator 27 Rated Electric Power Output"] = None
        self._data["Generator 27 Availability Schedule Name"] = None
        self._data["Generator 27 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 28 Name"] = None
        self._data["Generator 28 Object Type"] = None
        self._data["Generator 28 Rated Electric Power Output"] = None
        self._data["Generator 28 Availability Schedule Name"] = None
        self._data["Generator 28 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 29 Name"] = None
        self._data["Generator 29 Object Type"] = None
        self._data["Generator 29 Rated Electric Power Output"] = None
        self._data["Generator 29 Availability Schedule Name"] = None
        self._data["Generator 29 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 30 Name"] = None
        self._data["Generator 30 Object Type"] = None
        self._data["Generator 30 Rated Electric Power Output"] = None
        self._data["Generator 30 Availability Schedule Name"] = None
        self._data["Generator 30 Rated Thermal to Electrical Power Ratio"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_1_name = None
        else:
            self.generator_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_1_object_type = None
        else:
            self.generator_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_1_rated_electric_power_output = None
        else:
            self.generator_1_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_1_availability_schedule_name = None
        else:
            self.generator_1_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_1_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_1_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_2_name = None
        else:
            self.generator_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_2_object_type = None
        else:
            self.generator_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_2_rated_electric_power_output = None
        else:
            self.generator_2_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_2_availability_schedule_name = None
        else:
            self.generator_2_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_2_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_2_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_3_name = None
        else:
            self.generator_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_3_object_type = None
        else:
            self.generator_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_3_rated_electric_power_output = None
        else:
            self.generator_3_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_3_availability_schedule_name = None
        else:
            self.generator_3_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_3_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_3_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_4_name = None
        else:
            self.generator_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_4_object_type = None
        else:
            self.generator_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_4_rated_electric_power_output = None
        else:
            self.generator_4_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_4_availability_schedule_name = None
        else:
            self.generator_4_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_4_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_4_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_5_name = None
        else:
            self.generator_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_5_object_type = None
        else:
            self.generator_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_5_rated_electric_power_output = None
        else:
            self.generator_5_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_5_availability_schedule_name = None
        else:
            self.generator_5_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_5_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_5_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_6_name = None
        else:
            self.generator_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_6_object_type = None
        else:
            self.generator_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_6_rated_electric_power_output = None
        else:
            self.generator_6_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_6_availability_schedule_name = None
        else:
            self.generator_6_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_6_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_6_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_7_name = None
        else:
            self.generator_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_7_object_type = None
        else:
            self.generator_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_7_rated_electric_power_output = None
        else:
            self.generator_7_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_7_availability_schedule_name = None
        else:
            self.generator_7_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_7_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_7_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_8_name = None
        else:
            self.generator_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_8_object_type = None
        else:
            self.generator_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_8_rated_electric_power_output = None
        else:
            self.generator_8_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_8_availability_schedule_name = None
        else:
            self.generator_8_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_8_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_8_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_9_name = None
        else:
            self.generator_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_9_object_type = None
        else:
            self.generator_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_9_rated_electric_power_output = None
        else:
            self.generator_9_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_9_availability_schedule_name = None
        else:
            self.generator_9_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_9_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_9_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_10_name = None
        else:
            self.generator_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_10_object_type = None
        else:
            self.generator_10_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_10_rated_electric_power_output = None
        else:
            self.generator_10_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_10_availability_schedule_name = None
        else:
            self.generator_10_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_10_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_10_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_11_name = None
        else:
            self.generator_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_11_object_type = None
        else:
            self.generator_11_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_11_rated_electric_power_output = None
        else:
            self.generator_11_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_11_availability_schedule_name = None
        else:
            self.generator_11_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_11_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_11_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_12_name = None
        else:
            self.generator_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_12_object_type = None
        else:
            self.generator_12_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_12_rated_electric_power_output = None
        else:
            self.generator_12_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_12_availability_schedule_name = None
        else:
            self.generator_12_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_12_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_12_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_13_name = None
        else:
            self.generator_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_13_object_type = None
        else:
            self.generator_13_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_13_rated_electric_power_output = None
        else:
            self.generator_13_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_13_availability_schedule_name = None
        else:
            self.generator_13_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_13_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_13_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_14_name = None
        else:
            self.generator_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_14_object_type = None
        else:
            self.generator_14_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_14_rated_electric_power_output = None
        else:
            self.generator_14_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_14_availability_schedule_name = None
        else:
            self.generator_14_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_14_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_14_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_15_name = None
        else:
            self.generator_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_15_object_type = None
        else:
            self.generator_15_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_15_rated_electric_power_output = None
        else:
            self.generator_15_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_15_availability_schedule_name = None
        else:
            self.generator_15_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_15_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_15_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_16_name = None
        else:
            self.generator_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_16_object_type = None
        else:
            self.generator_16_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_16_rated_electric_power_output = None
        else:
            self.generator_16_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_16_availability_schedule_name = None
        else:
            self.generator_16_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_16_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_16_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_17_name = None
        else:
            self.generator_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_17_object_type = None
        else:
            self.generator_17_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_17_rated_electric_power_output = None
        else:
            self.generator_17_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_17_availability_schedule_name = None
        else:
            self.generator_17_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_17_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_17_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_18_name = None
        else:
            self.generator_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_18_object_type = None
        else:
            self.generator_18_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_18_rated_electric_power_output = None
        else:
            self.generator_18_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_18_availability_schedule_name = None
        else:
            self.generator_18_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_18_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_18_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_19_name = None
        else:
            self.generator_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_19_object_type = None
        else:
            self.generator_19_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_19_rated_electric_power_output = None
        else:
            self.generator_19_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_19_availability_schedule_name = None
        else:
            self.generator_19_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_19_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_19_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_20_name = None
        else:
            self.generator_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_20_object_type = None
        else:
            self.generator_20_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_20_rated_electric_power_output = None
        else:
            self.generator_20_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_20_availability_schedule_name = None
        else:
            self.generator_20_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_20_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_20_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_21_name = None
        else:
            self.generator_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_21_object_type = None
        else:
            self.generator_21_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_21_rated_electric_power_output = None
        else:
            self.generator_21_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_21_availability_schedule_name = None
        else:
            self.generator_21_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_21_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_21_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_22_name = None
        else:
            self.generator_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_22_object_type = None
        else:
            self.generator_22_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_22_rated_electric_power_output = None
        else:
            self.generator_22_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_22_availability_schedule_name = None
        else:
            self.generator_22_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_22_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_22_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_23_name = None
        else:
            self.generator_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_23_object_type = None
        else:
            self.generator_23_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_23_rated_electric_power_output = None
        else:
            self.generator_23_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_23_availability_schedule_name = None
        else:
            self.generator_23_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_23_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_23_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_24_name = None
        else:
            self.generator_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_24_object_type = None
        else:
            self.generator_24_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_24_rated_electric_power_output = None
        else:
            self.generator_24_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_24_availability_schedule_name = None
        else:
            self.generator_24_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_24_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_24_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_25_name = None
        else:
            self.generator_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_25_object_type = None
        else:
            self.generator_25_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_25_rated_electric_power_output = None
        else:
            self.generator_25_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_25_availability_schedule_name = None
        else:
            self.generator_25_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_25_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_25_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_26_name = None
        else:
            self.generator_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_26_object_type = None
        else:
            self.generator_26_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_26_rated_electric_power_output = None
        else:
            self.generator_26_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_26_availability_schedule_name = None
        else:
            self.generator_26_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_26_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_26_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_27_name = None
        else:
            self.generator_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_27_object_type = None
        else:
            self.generator_27_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_27_rated_electric_power_output = None
        else:
            self.generator_27_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_27_availability_schedule_name = None
        else:
            self.generator_27_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_27_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_27_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_28_name = None
        else:
            self.generator_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_28_object_type = None
        else:
            self.generator_28_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_28_rated_electric_power_output = None
        else:
            self.generator_28_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_28_availability_schedule_name = None
        else:
            self.generator_28_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_28_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_28_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_29_name = None
        else:
            self.generator_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_29_object_type = None
        else:
            self.generator_29_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_29_rated_electric_power_output = None
        else:
            self.generator_29_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_29_availability_schedule_name = None
        else:
            self.generator_29_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_29_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_29_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_30_name = None
        else:
            self.generator_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_30_object_type = None
        else:
            self.generator_30_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_30_rated_electric_power_output = None
        else:
            self.generator_30_rated_electric_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_30_availability_schedule_name = None
        else:
            self.generator_30_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_30_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_30_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def generator_1_name(self):
        """Get generator_1_name

        Returns:
            str: the value of `generator_1_name` or None if not set
        """
        return self._data["Generator 1 Name"]

    @generator_1_name.setter
    def generator_1_name(self, value=None):
        """  Corresponds to IDD Field `generator_1_name`

        Args:
            value (str): value for IDD Field `generator_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_1_name`')

        self._data["Generator 1 Name"] = value

    @property
    def generator_1_object_type(self):
        """Get generator_1_object_type

        Returns:
            str: the value of `generator_1_object_type` or None if not set
        """
        return self._data["Generator 1 Object Type"]

    @generator_1_object_type.setter
    def generator_1_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_1_object_type`

        Args:
            value (str): value for IDD Field `generator_1_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_1_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_1_object_type`'.format(value))

        self._data["Generator 1 Object Type"] = value

    @property
    def generator_1_rated_electric_power_output(self):
        """Get generator_1_rated_electric_power_output

        Returns:
            float: the value of `generator_1_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 1 Rated Electric Power Output"]

    @generator_1_rated_electric_power_output.setter
    def generator_1_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_1_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_1_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_1_rated_electric_power_output`'.format(value))

        self._data["Generator 1 Rated Electric Power Output"] = value

    @property
    def generator_1_availability_schedule_name(self):
        """Get generator_1_availability_schedule_name

        Returns:
            str: the value of `generator_1_availability_schedule_name` or None if not set
        """
        return self._data["Generator 1 Availability Schedule Name"]

    @generator_1_availability_schedule_name.setter
    def generator_1_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_1_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_1_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_1_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_1_availability_schedule_name`')

        self._data["Generator 1 Availability Schedule Name"] = value

    @property
    def generator_1_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_1_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_1_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 1 Rated Thermal to Electrical Power Ratio"]

    @generator_1_rated_thermal_to_electrical_power_ratio.setter
    def generator_1_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_1_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_1_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_1_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 1 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_2_name(self):
        """Get generator_2_name

        Returns:
            str: the value of `generator_2_name` or None if not set
        """
        return self._data["Generator 2 Name"]

    @generator_2_name.setter
    def generator_2_name(self, value=None):
        """  Corresponds to IDD Field `generator_2_name`

        Args:
            value (str): value for IDD Field `generator_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_2_name`')

        self._data["Generator 2 Name"] = value

    @property
    def generator_2_object_type(self):
        """Get generator_2_object_type

        Returns:
            str: the value of `generator_2_object_type` or None if not set
        """
        return self._data["Generator 2 Object Type"]

    @generator_2_object_type.setter
    def generator_2_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_2_object_type`

        Args:
            value (str): value for IDD Field `generator_2_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_2_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_2_object_type`'.format(value))

        self._data["Generator 2 Object Type"] = value

    @property
    def generator_2_rated_electric_power_output(self):
        """Get generator_2_rated_electric_power_output

        Returns:
            float: the value of `generator_2_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 2 Rated Electric Power Output"]

    @generator_2_rated_electric_power_output.setter
    def generator_2_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_2_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_2_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_2_rated_electric_power_output`'.format(value))

        self._data["Generator 2 Rated Electric Power Output"] = value

    @property
    def generator_2_availability_schedule_name(self):
        """Get generator_2_availability_schedule_name

        Returns:
            str: the value of `generator_2_availability_schedule_name` or None if not set
        """
        return self._data["Generator 2 Availability Schedule Name"]

    @generator_2_availability_schedule_name.setter
    def generator_2_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_2_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_2_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_2_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_2_availability_schedule_name`')

        self._data["Generator 2 Availability Schedule Name"] = value

    @property
    def generator_2_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_2_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_2_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 2 Rated Thermal to Electrical Power Ratio"]

    @generator_2_rated_thermal_to_electrical_power_ratio.setter
    def generator_2_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_2_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_2_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_2_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 2 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_3_name(self):
        """Get generator_3_name

        Returns:
            str: the value of `generator_3_name` or None if not set
        """
        return self._data["Generator 3 Name"]

    @generator_3_name.setter
    def generator_3_name(self, value=None):
        """  Corresponds to IDD Field `generator_3_name`

        Args:
            value (str): value for IDD Field `generator_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_3_name`')

        self._data["Generator 3 Name"] = value

    @property
    def generator_3_object_type(self):
        """Get generator_3_object_type

        Returns:
            str: the value of `generator_3_object_type` or None if not set
        """
        return self._data["Generator 3 Object Type"]

    @generator_3_object_type.setter
    def generator_3_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_3_object_type`

        Args:
            value (str): value for IDD Field `generator_3_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_3_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_3_object_type`'.format(value))

        self._data["Generator 3 Object Type"] = value

    @property
    def generator_3_rated_electric_power_output(self):
        """Get generator_3_rated_electric_power_output

        Returns:
            float: the value of `generator_3_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 3 Rated Electric Power Output"]

    @generator_3_rated_electric_power_output.setter
    def generator_3_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_3_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_3_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_3_rated_electric_power_output`'.format(value))

        self._data["Generator 3 Rated Electric Power Output"] = value

    @property
    def generator_3_availability_schedule_name(self):
        """Get generator_3_availability_schedule_name

        Returns:
            str: the value of `generator_3_availability_schedule_name` or None if not set
        """
        return self._data["Generator 3 Availability Schedule Name"]

    @generator_3_availability_schedule_name.setter
    def generator_3_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_3_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_3_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_3_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_3_availability_schedule_name`')

        self._data["Generator 3 Availability Schedule Name"] = value

    @property
    def generator_3_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_3_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_3_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 3 Rated Thermal to Electrical Power Ratio"]

    @generator_3_rated_thermal_to_electrical_power_ratio.setter
    def generator_3_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_3_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_3_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_3_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 3 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_4_name(self):
        """Get generator_4_name

        Returns:
            str: the value of `generator_4_name` or None if not set
        """
        return self._data["Generator 4 Name"]

    @generator_4_name.setter
    def generator_4_name(self, value=None):
        """  Corresponds to IDD Field `generator_4_name`

        Args:
            value (str): value for IDD Field `generator_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_4_name`')

        self._data["Generator 4 Name"] = value

    @property
    def generator_4_object_type(self):
        """Get generator_4_object_type

        Returns:
            str: the value of `generator_4_object_type` or None if not set
        """
        return self._data["Generator 4 Object Type"]

    @generator_4_object_type.setter
    def generator_4_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_4_object_type`

        Args:
            value (str): value for IDD Field `generator_4_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_4_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_4_object_type`'.format(value))

        self._data["Generator 4 Object Type"] = value

    @property
    def generator_4_rated_electric_power_output(self):
        """Get generator_4_rated_electric_power_output

        Returns:
            float: the value of `generator_4_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 4 Rated Electric Power Output"]

    @generator_4_rated_electric_power_output.setter
    def generator_4_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_4_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_4_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_4_rated_electric_power_output`'.format(value))

        self._data["Generator 4 Rated Electric Power Output"] = value

    @property
    def generator_4_availability_schedule_name(self):
        """Get generator_4_availability_schedule_name

        Returns:
            str: the value of `generator_4_availability_schedule_name` or None if not set
        """
        return self._data["Generator 4 Availability Schedule Name"]

    @generator_4_availability_schedule_name.setter
    def generator_4_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_4_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_4_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_4_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_4_availability_schedule_name`')

        self._data["Generator 4 Availability Schedule Name"] = value

    @property
    def generator_4_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_4_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_4_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 4 Rated Thermal to Electrical Power Ratio"]

    @generator_4_rated_thermal_to_electrical_power_ratio.setter
    def generator_4_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_4_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_4_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_4_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 4 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_5_name(self):
        """Get generator_5_name

        Returns:
            str: the value of `generator_5_name` or None if not set
        """
        return self._data["Generator 5 Name"]

    @generator_5_name.setter
    def generator_5_name(self, value=None):
        """  Corresponds to IDD Field `generator_5_name`

        Args:
            value (str): value for IDD Field `generator_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_5_name`')

        self._data["Generator 5 Name"] = value

    @property
    def generator_5_object_type(self):
        """Get generator_5_object_type

        Returns:
            str: the value of `generator_5_object_type` or None if not set
        """
        return self._data["Generator 5 Object Type"]

    @generator_5_object_type.setter
    def generator_5_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_5_object_type`

        Args:
            value (str): value for IDD Field `generator_5_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_5_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_5_object_type`'.format(value))

        self._data["Generator 5 Object Type"] = value

    @property
    def generator_5_rated_electric_power_output(self):
        """Get generator_5_rated_electric_power_output

        Returns:
            float: the value of `generator_5_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 5 Rated Electric Power Output"]

    @generator_5_rated_electric_power_output.setter
    def generator_5_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_5_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_5_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_5_rated_electric_power_output`'.format(value))

        self._data["Generator 5 Rated Electric Power Output"] = value

    @property
    def generator_5_availability_schedule_name(self):
        """Get generator_5_availability_schedule_name

        Returns:
            str: the value of `generator_5_availability_schedule_name` or None if not set
        """
        return self._data["Generator 5 Availability Schedule Name"]

    @generator_5_availability_schedule_name.setter
    def generator_5_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_5_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_5_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_5_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_5_availability_schedule_name`')

        self._data["Generator 5 Availability Schedule Name"] = value

    @property
    def generator_5_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_5_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_5_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 5 Rated Thermal to Electrical Power Ratio"]

    @generator_5_rated_thermal_to_electrical_power_ratio.setter
    def generator_5_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_5_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_5_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_5_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 5 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_6_name(self):
        """Get generator_6_name

        Returns:
            str: the value of `generator_6_name` or None if not set
        """
        return self._data["Generator 6 Name"]

    @generator_6_name.setter
    def generator_6_name(self, value=None):
        """  Corresponds to IDD Field `generator_6_name`

        Args:
            value (str): value for IDD Field `generator_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_6_name`')

        self._data["Generator 6 Name"] = value

    @property
    def generator_6_object_type(self):
        """Get generator_6_object_type

        Returns:
            str: the value of `generator_6_object_type` or None if not set
        """
        return self._data["Generator 6 Object Type"]

    @generator_6_object_type.setter
    def generator_6_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_6_object_type`

        Args:
            value (str): value for IDD Field `generator_6_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_6_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_6_object_type`'.format(value))

        self._data["Generator 6 Object Type"] = value

    @property
    def generator_6_rated_electric_power_output(self):
        """Get generator_6_rated_electric_power_output

        Returns:
            float: the value of `generator_6_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 6 Rated Electric Power Output"]

    @generator_6_rated_electric_power_output.setter
    def generator_6_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_6_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_6_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_6_rated_electric_power_output`'.format(value))

        self._data["Generator 6 Rated Electric Power Output"] = value

    @property
    def generator_6_availability_schedule_name(self):
        """Get generator_6_availability_schedule_name

        Returns:
            str: the value of `generator_6_availability_schedule_name` or None if not set
        """
        return self._data["Generator 6 Availability Schedule Name"]

    @generator_6_availability_schedule_name.setter
    def generator_6_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_6_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_6_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_6_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_6_availability_schedule_name`')

        self._data["Generator 6 Availability Schedule Name"] = value

    @property
    def generator_6_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_6_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_6_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 6 Rated Thermal to Electrical Power Ratio"]

    @generator_6_rated_thermal_to_electrical_power_ratio.setter
    def generator_6_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_6_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_6_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_6_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 6 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_7_name(self):
        """Get generator_7_name

        Returns:
            str: the value of `generator_7_name` or None if not set
        """
        return self._data["Generator 7 Name"]

    @generator_7_name.setter
    def generator_7_name(self, value=None):
        """  Corresponds to IDD Field `generator_7_name`

        Args:
            value (str): value for IDD Field `generator_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_7_name`')

        self._data["Generator 7 Name"] = value

    @property
    def generator_7_object_type(self):
        """Get generator_7_object_type

        Returns:
            str: the value of `generator_7_object_type` or None if not set
        """
        return self._data["Generator 7 Object Type"]

    @generator_7_object_type.setter
    def generator_7_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_7_object_type`

        Args:
            value (str): value for IDD Field `generator_7_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_7_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_7_object_type`'.format(value))

        self._data["Generator 7 Object Type"] = value

    @property
    def generator_7_rated_electric_power_output(self):
        """Get generator_7_rated_electric_power_output

        Returns:
            float: the value of `generator_7_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 7 Rated Electric Power Output"]

    @generator_7_rated_electric_power_output.setter
    def generator_7_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_7_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_7_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_7_rated_electric_power_output`'.format(value))

        self._data["Generator 7 Rated Electric Power Output"] = value

    @property
    def generator_7_availability_schedule_name(self):
        """Get generator_7_availability_schedule_name

        Returns:
            str: the value of `generator_7_availability_schedule_name` or None if not set
        """
        return self._data["Generator 7 Availability Schedule Name"]

    @generator_7_availability_schedule_name.setter
    def generator_7_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_7_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_7_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_7_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_7_availability_schedule_name`')

        self._data["Generator 7 Availability Schedule Name"] = value

    @property
    def generator_7_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_7_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_7_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 7 Rated Thermal to Electrical Power Ratio"]

    @generator_7_rated_thermal_to_electrical_power_ratio.setter
    def generator_7_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_7_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_7_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_7_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 7 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_8_name(self):
        """Get generator_8_name

        Returns:
            str: the value of `generator_8_name` or None if not set
        """
        return self._data["Generator 8 Name"]

    @generator_8_name.setter
    def generator_8_name(self, value=None):
        """  Corresponds to IDD Field `generator_8_name`

        Args:
            value (str): value for IDD Field `generator_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_8_name`')

        self._data["Generator 8 Name"] = value

    @property
    def generator_8_object_type(self):
        """Get generator_8_object_type

        Returns:
            str: the value of `generator_8_object_type` or None if not set
        """
        return self._data["Generator 8 Object Type"]

    @generator_8_object_type.setter
    def generator_8_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_8_object_type`

        Args:
            value (str): value for IDD Field `generator_8_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_8_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_8_object_type`'.format(value))

        self._data["Generator 8 Object Type"] = value

    @property
    def generator_8_rated_electric_power_output(self):
        """Get generator_8_rated_electric_power_output

        Returns:
            float: the value of `generator_8_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 8 Rated Electric Power Output"]

    @generator_8_rated_electric_power_output.setter
    def generator_8_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_8_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_8_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_8_rated_electric_power_output`'.format(value))

        self._data["Generator 8 Rated Electric Power Output"] = value

    @property
    def generator_8_availability_schedule_name(self):
        """Get generator_8_availability_schedule_name

        Returns:
            str: the value of `generator_8_availability_schedule_name` or None if not set
        """
        return self._data["Generator 8 Availability Schedule Name"]

    @generator_8_availability_schedule_name.setter
    def generator_8_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_8_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_8_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_8_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_8_availability_schedule_name`')

        self._data["Generator 8 Availability Schedule Name"] = value

    @property
    def generator_8_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_8_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_8_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 8 Rated Thermal to Electrical Power Ratio"]

    @generator_8_rated_thermal_to_electrical_power_ratio.setter
    def generator_8_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_8_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_8_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_8_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 8 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_9_name(self):
        """Get generator_9_name

        Returns:
            str: the value of `generator_9_name` or None if not set
        """
        return self._data["Generator 9 Name"]

    @generator_9_name.setter
    def generator_9_name(self, value=None):
        """  Corresponds to IDD Field `generator_9_name`

        Args:
            value (str): value for IDD Field `generator_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_9_name`')

        self._data["Generator 9 Name"] = value

    @property
    def generator_9_object_type(self):
        """Get generator_9_object_type

        Returns:
            str: the value of `generator_9_object_type` or None if not set
        """
        return self._data["Generator 9 Object Type"]

    @generator_9_object_type.setter
    def generator_9_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_9_object_type`

        Args:
            value (str): value for IDD Field `generator_9_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_9_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_9_object_type`'.format(value))

        self._data["Generator 9 Object Type"] = value

    @property
    def generator_9_rated_electric_power_output(self):
        """Get generator_9_rated_electric_power_output

        Returns:
            float: the value of `generator_9_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 9 Rated Electric Power Output"]

    @generator_9_rated_electric_power_output.setter
    def generator_9_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_9_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_9_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_9_rated_electric_power_output`'.format(value))

        self._data["Generator 9 Rated Electric Power Output"] = value

    @property
    def generator_9_availability_schedule_name(self):
        """Get generator_9_availability_schedule_name

        Returns:
            str: the value of `generator_9_availability_schedule_name` or None if not set
        """
        return self._data["Generator 9 Availability Schedule Name"]

    @generator_9_availability_schedule_name.setter
    def generator_9_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_9_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_9_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_9_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_9_availability_schedule_name`')

        self._data["Generator 9 Availability Schedule Name"] = value

    @property
    def generator_9_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_9_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_9_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 9 Rated Thermal to Electrical Power Ratio"]

    @generator_9_rated_thermal_to_electrical_power_ratio.setter
    def generator_9_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_9_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_9_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_9_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 9 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_10_name(self):
        """Get generator_10_name

        Returns:
            str: the value of `generator_10_name` or None if not set
        """
        return self._data["Generator 10 Name"]

    @generator_10_name.setter
    def generator_10_name(self, value=None):
        """  Corresponds to IDD Field `generator_10_name`

        Args:
            value (str): value for IDD Field `generator_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_10_name`')

        self._data["Generator 10 Name"] = value

    @property
    def generator_10_object_type(self):
        """Get generator_10_object_type

        Returns:
            str: the value of `generator_10_object_type` or None if not set
        """
        return self._data["Generator 10 Object Type"]

    @generator_10_object_type.setter
    def generator_10_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_10_object_type`

        Args:
            value (str): value for IDD Field `generator_10_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_10_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_10_object_type`'.format(value))

        self._data["Generator 10 Object Type"] = value

    @property
    def generator_10_rated_electric_power_output(self):
        """Get generator_10_rated_electric_power_output

        Returns:
            float: the value of `generator_10_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 10 Rated Electric Power Output"]

    @generator_10_rated_electric_power_output.setter
    def generator_10_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_10_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_10_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_10_rated_electric_power_output`'.format(value))

        self._data["Generator 10 Rated Electric Power Output"] = value

    @property
    def generator_10_availability_schedule_name(self):
        """Get generator_10_availability_schedule_name

        Returns:
            str: the value of `generator_10_availability_schedule_name` or None if not set
        """
        return self._data["Generator 10 Availability Schedule Name"]

    @generator_10_availability_schedule_name.setter
    def generator_10_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_10_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_10_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_10_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_10_availability_schedule_name`')

        self._data["Generator 10 Availability Schedule Name"] = value

    @property
    def generator_10_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_10_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_10_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 10 Rated Thermal to Electrical Power Ratio"]

    @generator_10_rated_thermal_to_electrical_power_ratio.setter
    def generator_10_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_10_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_10_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_10_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 10 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_11_name(self):
        """Get generator_11_name

        Returns:
            str: the value of `generator_11_name` or None if not set
        """
        return self._data["Generator 11 Name"]

    @generator_11_name.setter
    def generator_11_name(self, value=None):
        """  Corresponds to IDD Field `generator_11_name`

        Args:
            value (str): value for IDD Field `generator_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_11_name`')

        self._data["Generator 11 Name"] = value

    @property
    def generator_11_object_type(self):
        """Get generator_11_object_type

        Returns:
            str: the value of `generator_11_object_type` or None if not set
        """
        return self._data["Generator 11 Object Type"]

    @generator_11_object_type.setter
    def generator_11_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_11_object_type`

        Args:
            value (str): value for IDD Field `generator_11_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_11_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_11_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_11_object_type`'.format(value))

        self._data["Generator 11 Object Type"] = value

    @property
    def generator_11_rated_electric_power_output(self):
        """Get generator_11_rated_electric_power_output

        Returns:
            float: the value of `generator_11_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 11 Rated Electric Power Output"]

    @generator_11_rated_electric_power_output.setter
    def generator_11_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_11_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_11_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_11_rated_electric_power_output`'.format(value))

        self._data["Generator 11 Rated Electric Power Output"] = value

    @property
    def generator_11_availability_schedule_name(self):
        """Get generator_11_availability_schedule_name

        Returns:
            str: the value of `generator_11_availability_schedule_name` or None if not set
        """
        return self._data["Generator 11 Availability Schedule Name"]

    @generator_11_availability_schedule_name.setter
    def generator_11_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_11_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_11_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_11_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_11_availability_schedule_name`')

        self._data["Generator 11 Availability Schedule Name"] = value

    @property
    def generator_11_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_11_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_11_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 11 Rated Thermal to Electrical Power Ratio"]

    @generator_11_rated_thermal_to_electrical_power_ratio.setter
    def generator_11_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_11_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_11_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_11_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 11 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_12_name(self):
        """Get generator_12_name

        Returns:
            str: the value of `generator_12_name` or None if not set
        """
        return self._data["Generator 12 Name"]

    @generator_12_name.setter
    def generator_12_name(self, value=None):
        """  Corresponds to IDD Field `generator_12_name`

        Args:
            value (str): value for IDD Field `generator_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_12_name`')

        self._data["Generator 12 Name"] = value

    @property
    def generator_12_object_type(self):
        """Get generator_12_object_type

        Returns:
            str: the value of `generator_12_object_type` or None if not set
        """
        return self._data["Generator 12 Object Type"]

    @generator_12_object_type.setter
    def generator_12_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_12_object_type`

        Args:
            value (str): value for IDD Field `generator_12_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_12_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_12_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_12_object_type`'.format(value))

        self._data["Generator 12 Object Type"] = value

    @property
    def generator_12_rated_electric_power_output(self):
        """Get generator_12_rated_electric_power_output

        Returns:
            float: the value of `generator_12_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 12 Rated Electric Power Output"]

    @generator_12_rated_electric_power_output.setter
    def generator_12_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_12_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_12_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_12_rated_electric_power_output`'.format(value))

        self._data["Generator 12 Rated Electric Power Output"] = value

    @property
    def generator_12_availability_schedule_name(self):
        """Get generator_12_availability_schedule_name

        Returns:
            str: the value of `generator_12_availability_schedule_name` or None if not set
        """
        return self._data["Generator 12 Availability Schedule Name"]

    @generator_12_availability_schedule_name.setter
    def generator_12_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_12_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_12_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_12_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_12_availability_schedule_name`')

        self._data["Generator 12 Availability Schedule Name"] = value

    @property
    def generator_12_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_12_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_12_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 12 Rated Thermal to Electrical Power Ratio"]

    @generator_12_rated_thermal_to_electrical_power_ratio.setter
    def generator_12_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_12_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_12_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_12_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 12 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_13_name(self):
        """Get generator_13_name

        Returns:
            str: the value of `generator_13_name` or None if not set
        """
        return self._data["Generator 13 Name"]

    @generator_13_name.setter
    def generator_13_name(self, value=None):
        """  Corresponds to IDD Field `generator_13_name`

        Args:
            value (str): value for IDD Field `generator_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_13_name`')

        self._data["Generator 13 Name"] = value

    @property
    def generator_13_object_type(self):
        """Get generator_13_object_type

        Returns:
            str: the value of `generator_13_object_type` or None if not set
        """
        return self._data["Generator 13 Object Type"]

    @generator_13_object_type.setter
    def generator_13_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_13_object_type`

        Args:
            value (str): value for IDD Field `generator_13_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_13_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_13_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_13_object_type`'.format(value))

        self._data["Generator 13 Object Type"] = value

    @property
    def generator_13_rated_electric_power_output(self):
        """Get generator_13_rated_electric_power_output

        Returns:
            float: the value of `generator_13_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 13 Rated Electric Power Output"]

    @generator_13_rated_electric_power_output.setter
    def generator_13_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_13_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_13_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_13_rated_electric_power_output`'.format(value))

        self._data["Generator 13 Rated Electric Power Output"] = value

    @property
    def generator_13_availability_schedule_name(self):
        """Get generator_13_availability_schedule_name

        Returns:
            str: the value of `generator_13_availability_schedule_name` or None if not set
        """
        return self._data["Generator 13 Availability Schedule Name"]

    @generator_13_availability_schedule_name.setter
    def generator_13_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_13_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_13_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_13_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_13_availability_schedule_name`')

        self._data["Generator 13 Availability Schedule Name"] = value

    @property
    def generator_13_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_13_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_13_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 13 Rated Thermal to Electrical Power Ratio"]

    @generator_13_rated_thermal_to_electrical_power_ratio.setter
    def generator_13_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_13_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_13_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_13_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 13 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_14_name(self):
        """Get generator_14_name

        Returns:
            str: the value of `generator_14_name` or None if not set
        """
        return self._data["Generator 14 Name"]

    @generator_14_name.setter
    def generator_14_name(self, value=None):
        """  Corresponds to IDD Field `generator_14_name`

        Args:
            value (str): value for IDD Field `generator_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_14_name`')

        self._data["Generator 14 Name"] = value

    @property
    def generator_14_object_type(self):
        """Get generator_14_object_type

        Returns:
            str: the value of `generator_14_object_type` or None if not set
        """
        return self._data["Generator 14 Object Type"]

    @generator_14_object_type.setter
    def generator_14_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_14_object_type`

        Args:
            value (str): value for IDD Field `generator_14_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_14_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_14_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_14_object_type`'.format(value))

        self._data["Generator 14 Object Type"] = value

    @property
    def generator_14_rated_electric_power_output(self):
        """Get generator_14_rated_electric_power_output

        Returns:
            float: the value of `generator_14_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 14 Rated Electric Power Output"]

    @generator_14_rated_electric_power_output.setter
    def generator_14_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_14_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_14_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_14_rated_electric_power_output`'.format(value))

        self._data["Generator 14 Rated Electric Power Output"] = value

    @property
    def generator_14_availability_schedule_name(self):
        """Get generator_14_availability_schedule_name

        Returns:
            str: the value of `generator_14_availability_schedule_name` or None if not set
        """
        return self._data["Generator 14 Availability Schedule Name"]

    @generator_14_availability_schedule_name.setter
    def generator_14_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_14_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_14_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_14_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_14_availability_schedule_name`')

        self._data["Generator 14 Availability Schedule Name"] = value

    @property
    def generator_14_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_14_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_14_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 14 Rated Thermal to Electrical Power Ratio"]

    @generator_14_rated_thermal_to_electrical_power_ratio.setter
    def generator_14_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_14_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_14_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_14_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 14 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_15_name(self):
        """Get generator_15_name

        Returns:
            str: the value of `generator_15_name` or None if not set
        """
        return self._data["Generator 15 Name"]

    @generator_15_name.setter
    def generator_15_name(self, value=None):
        """  Corresponds to IDD Field `generator_15_name`

        Args:
            value (str): value for IDD Field `generator_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_15_name`')

        self._data["Generator 15 Name"] = value

    @property
    def generator_15_object_type(self):
        """Get generator_15_object_type

        Returns:
            str: the value of `generator_15_object_type` or None if not set
        """
        return self._data["Generator 15 Object Type"]

    @generator_15_object_type.setter
    def generator_15_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_15_object_type`

        Args:
            value (str): value for IDD Field `generator_15_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_15_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_15_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_15_object_type`'.format(value))

        self._data["Generator 15 Object Type"] = value

    @property
    def generator_15_rated_electric_power_output(self):
        """Get generator_15_rated_electric_power_output

        Returns:
            float: the value of `generator_15_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 15 Rated Electric Power Output"]

    @generator_15_rated_electric_power_output.setter
    def generator_15_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_15_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_15_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_15_rated_electric_power_output`'.format(value))

        self._data["Generator 15 Rated Electric Power Output"] = value

    @property
    def generator_15_availability_schedule_name(self):
        """Get generator_15_availability_schedule_name

        Returns:
            str: the value of `generator_15_availability_schedule_name` or None if not set
        """
        return self._data["Generator 15 Availability Schedule Name"]

    @generator_15_availability_schedule_name.setter
    def generator_15_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_15_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_15_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_15_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_15_availability_schedule_name`')

        self._data["Generator 15 Availability Schedule Name"] = value

    @property
    def generator_15_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_15_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_15_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 15 Rated Thermal to Electrical Power Ratio"]

    @generator_15_rated_thermal_to_electrical_power_ratio.setter
    def generator_15_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_15_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_15_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_15_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 15 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_16_name(self):
        """Get generator_16_name

        Returns:
            str: the value of `generator_16_name` or None if not set
        """
        return self._data["Generator 16 Name"]

    @generator_16_name.setter
    def generator_16_name(self, value=None):
        """  Corresponds to IDD Field `generator_16_name`

        Args:
            value (str): value for IDD Field `generator_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_16_name`')

        self._data["Generator 16 Name"] = value

    @property
    def generator_16_object_type(self):
        """Get generator_16_object_type

        Returns:
            str: the value of `generator_16_object_type` or None if not set
        """
        return self._data["Generator 16 Object Type"]

    @generator_16_object_type.setter
    def generator_16_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_16_object_type`

        Args:
            value (str): value for IDD Field `generator_16_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_16_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_16_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_16_object_type`'.format(value))

        self._data["Generator 16 Object Type"] = value

    @property
    def generator_16_rated_electric_power_output(self):
        """Get generator_16_rated_electric_power_output

        Returns:
            float: the value of `generator_16_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 16 Rated Electric Power Output"]

    @generator_16_rated_electric_power_output.setter
    def generator_16_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_16_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_16_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_16_rated_electric_power_output`'.format(value))

        self._data["Generator 16 Rated Electric Power Output"] = value

    @property
    def generator_16_availability_schedule_name(self):
        """Get generator_16_availability_schedule_name

        Returns:
            str: the value of `generator_16_availability_schedule_name` or None if not set
        """
        return self._data["Generator 16 Availability Schedule Name"]

    @generator_16_availability_schedule_name.setter
    def generator_16_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_16_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_16_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_16_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_16_availability_schedule_name`')

        self._data["Generator 16 Availability Schedule Name"] = value

    @property
    def generator_16_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_16_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_16_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 16 Rated Thermal to Electrical Power Ratio"]

    @generator_16_rated_thermal_to_electrical_power_ratio.setter
    def generator_16_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_16_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_16_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_16_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 16 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_17_name(self):
        """Get generator_17_name

        Returns:
            str: the value of `generator_17_name` or None if not set
        """
        return self._data["Generator 17 Name"]

    @generator_17_name.setter
    def generator_17_name(self, value=None):
        """  Corresponds to IDD Field `generator_17_name`

        Args:
            value (str): value for IDD Field `generator_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_17_name`')

        self._data["Generator 17 Name"] = value

    @property
    def generator_17_object_type(self):
        """Get generator_17_object_type

        Returns:
            str: the value of `generator_17_object_type` or None if not set
        """
        return self._data["Generator 17 Object Type"]

    @generator_17_object_type.setter
    def generator_17_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_17_object_type`

        Args:
            value (str): value for IDD Field `generator_17_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_17_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_17_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_17_object_type`'.format(value))

        self._data["Generator 17 Object Type"] = value

    @property
    def generator_17_rated_electric_power_output(self):
        """Get generator_17_rated_electric_power_output

        Returns:
            float: the value of `generator_17_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 17 Rated Electric Power Output"]

    @generator_17_rated_electric_power_output.setter
    def generator_17_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_17_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_17_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_17_rated_electric_power_output`'.format(value))

        self._data["Generator 17 Rated Electric Power Output"] = value

    @property
    def generator_17_availability_schedule_name(self):
        """Get generator_17_availability_schedule_name

        Returns:
            str: the value of `generator_17_availability_schedule_name` or None if not set
        """
        return self._data["Generator 17 Availability Schedule Name"]

    @generator_17_availability_schedule_name.setter
    def generator_17_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_17_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_17_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_17_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_17_availability_schedule_name`')

        self._data["Generator 17 Availability Schedule Name"] = value

    @property
    def generator_17_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_17_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_17_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 17 Rated Thermal to Electrical Power Ratio"]

    @generator_17_rated_thermal_to_electrical_power_ratio.setter
    def generator_17_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_17_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_17_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_17_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 17 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_18_name(self):
        """Get generator_18_name

        Returns:
            str: the value of `generator_18_name` or None if not set
        """
        return self._data["Generator 18 Name"]

    @generator_18_name.setter
    def generator_18_name(self, value=None):
        """  Corresponds to IDD Field `generator_18_name`

        Args:
            value (str): value for IDD Field `generator_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_18_name`')

        self._data["Generator 18 Name"] = value

    @property
    def generator_18_object_type(self):
        """Get generator_18_object_type

        Returns:
            str: the value of `generator_18_object_type` or None if not set
        """
        return self._data["Generator 18 Object Type"]

    @generator_18_object_type.setter
    def generator_18_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_18_object_type`

        Args:
            value (str): value for IDD Field `generator_18_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_18_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_18_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_18_object_type`'.format(value))

        self._data["Generator 18 Object Type"] = value

    @property
    def generator_18_rated_electric_power_output(self):
        """Get generator_18_rated_electric_power_output

        Returns:
            float: the value of `generator_18_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 18 Rated Electric Power Output"]

    @generator_18_rated_electric_power_output.setter
    def generator_18_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_18_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_18_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_18_rated_electric_power_output`'.format(value))

        self._data["Generator 18 Rated Electric Power Output"] = value

    @property
    def generator_18_availability_schedule_name(self):
        """Get generator_18_availability_schedule_name

        Returns:
            str: the value of `generator_18_availability_schedule_name` or None if not set
        """
        return self._data["Generator 18 Availability Schedule Name"]

    @generator_18_availability_schedule_name.setter
    def generator_18_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_18_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_18_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_18_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_18_availability_schedule_name`')

        self._data["Generator 18 Availability Schedule Name"] = value

    @property
    def generator_18_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_18_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_18_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 18 Rated Thermal to Electrical Power Ratio"]

    @generator_18_rated_thermal_to_electrical_power_ratio.setter
    def generator_18_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_18_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_18_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_18_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 18 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_19_name(self):
        """Get generator_19_name

        Returns:
            str: the value of `generator_19_name` or None if not set
        """
        return self._data["Generator 19 Name"]

    @generator_19_name.setter
    def generator_19_name(self, value=None):
        """  Corresponds to IDD Field `generator_19_name`

        Args:
            value (str): value for IDD Field `generator_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_19_name`')

        self._data["Generator 19 Name"] = value

    @property
    def generator_19_object_type(self):
        """Get generator_19_object_type

        Returns:
            str: the value of `generator_19_object_type` or None if not set
        """
        return self._data["Generator 19 Object Type"]

    @generator_19_object_type.setter
    def generator_19_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_19_object_type`

        Args:
            value (str): value for IDD Field `generator_19_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_19_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_19_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_19_object_type`'.format(value))

        self._data["Generator 19 Object Type"] = value

    @property
    def generator_19_rated_electric_power_output(self):
        """Get generator_19_rated_electric_power_output

        Returns:
            float: the value of `generator_19_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 19 Rated Electric Power Output"]

    @generator_19_rated_electric_power_output.setter
    def generator_19_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_19_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_19_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_19_rated_electric_power_output`'.format(value))

        self._data["Generator 19 Rated Electric Power Output"] = value

    @property
    def generator_19_availability_schedule_name(self):
        """Get generator_19_availability_schedule_name

        Returns:
            str: the value of `generator_19_availability_schedule_name` or None if not set
        """
        return self._data["Generator 19 Availability Schedule Name"]

    @generator_19_availability_schedule_name.setter
    def generator_19_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_19_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_19_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_19_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_19_availability_schedule_name`')

        self._data["Generator 19 Availability Schedule Name"] = value

    @property
    def generator_19_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_19_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_19_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 19 Rated Thermal to Electrical Power Ratio"]

    @generator_19_rated_thermal_to_electrical_power_ratio.setter
    def generator_19_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_19_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_19_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_19_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 19 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_20_name(self):
        """Get generator_20_name

        Returns:
            str: the value of `generator_20_name` or None if not set
        """
        return self._data["Generator 20 Name"]

    @generator_20_name.setter
    def generator_20_name(self, value=None):
        """  Corresponds to IDD Field `generator_20_name`

        Args:
            value (str): value for IDD Field `generator_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_20_name`')

        self._data["Generator 20 Name"] = value

    @property
    def generator_20_object_type(self):
        """Get generator_20_object_type

        Returns:
            str: the value of `generator_20_object_type` or None if not set
        """
        return self._data["Generator 20 Object Type"]

    @generator_20_object_type.setter
    def generator_20_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_20_object_type`

        Args:
            value (str): value for IDD Field `generator_20_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_20_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_20_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_20_object_type`'.format(value))

        self._data["Generator 20 Object Type"] = value

    @property
    def generator_20_rated_electric_power_output(self):
        """Get generator_20_rated_electric_power_output

        Returns:
            float: the value of `generator_20_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 20 Rated Electric Power Output"]

    @generator_20_rated_electric_power_output.setter
    def generator_20_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_20_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_20_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_20_rated_electric_power_output`'.format(value))

        self._data["Generator 20 Rated Electric Power Output"] = value

    @property
    def generator_20_availability_schedule_name(self):
        """Get generator_20_availability_schedule_name

        Returns:
            str: the value of `generator_20_availability_schedule_name` or None if not set
        """
        return self._data["Generator 20 Availability Schedule Name"]

    @generator_20_availability_schedule_name.setter
    def generator_20_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_20_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_20_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_20_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_20_availability_schedule_name`')

        self._data["Generator 20 Availability Schedule Name"] = value

    @property
    def generator_20_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_20_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_20_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 20 Rated Thermal to Electrical Power Ratio"]

    @generator_20_rated_thermal_to_electrical_power_ratio.setter
    def generator_20_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_20_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_20_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_20_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 20 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_21_name(self):
        """Get generator_21_name

        Returns:
            str: the value of `generator_21_name` or None if not set
        """
        return self._data["Generator 21 Name"]

    @generator_21_name.setter
    def generator_21_name(self, value=None):
        """  Corresponds to IDD Field `generator_21_name`

        Args:
            value (str): value for IDD Field `generator_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_21_name`')

        self._data["Generator 21 Name"] = value

    @property
    def generator_21_object_type(self):
        """Get generator_21_object_type

        Returns:
            str: the value of `generator_21_object_type` or None if not set
        """
        return self._data["Generator 21 Object Type"]

    @generator_21_object_type.setter
    def generator_21_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_21_object_type`

        Args:
            value (str): value for IDD Field `generator_21_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_21_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_21_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_21_object_type`'.format(value))

        self._data["Generator 21 Object Type"] = value

    @property
    def generator_21_rated_electric_power_output(self):
        """Get generator_21_rated_electric_power_output

        Returns:
            float: the value of `generator_21_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 21 Rated Electric Power Output"]

    @generator_21_rated_electric_power_output.setter
    def generator_21_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_21_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_21_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_21_rated_electric_power_output`'.format(value))

        self._data["Generator 21 Rated Electric Power Output"] = value

    @property
    def generator_21_availability_schedule_name(self):
        """Get generator_21_availability_schedule_name

        Returns:
            str: the value of `generator_21_availability_schedule_name` or None if not set
        """
        return self._data["Generator 21 Availability Schedule Name"]

    @generator_21_availability_schedule_name.setter
    def generator_21_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_21_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_21_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_21_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_21_availability_schedule_name`')

        self._data["Generator 21 Availability Schedule Name"] = value

    @property
    def generator_21_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_21_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_21_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 21 Rated Thermal to Electrical Power Ratio"]

    @generator_21_rated_thermal_to_electrical_power_ratio.setter
    def generator_21_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_21_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_21_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_21_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 21 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_22_name(self):
        """Get generator_22_name

        Returns:
            str: the value of `generator_22_name` or None if not set
        """
        return self._data["Generator 22 Name"]

    @generator_22_name.setter
    def generator_22_name(self, value=None):
        """  Corresponds to IDD Field `generator_22_name`

        Args:
            value (str): value for IDD Field `generator_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_22_name`')

        self._data["Generator 22 Name"] = value

    @property
    def generator_22_object_type(self):
        """Get generator_22_object_type

        Returns:
            str: the value of `generator_22_object_type` or None if not set
        """
        return self._data["Generator 22 Object Type"]

    @generator_22_object_type.setter
    def generator_22_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_22_object_type`

        Args:
            value (str): value for IDD Field `generator_22_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_22_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_22_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_22_object_type`'.format(value))

        self._data["Generator 22 Object Type"] = value

    @property
    def generator_22_rated_electric_power_output(self):
        """Get generator_22_rated_electric_power_output

        Returns:
            float: the value of `generator_22_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 22 Rated Electric Power Output"]

    @generator_22_rated_electric_power_output.setter
    def generator_22_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_22_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_22_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_22_rated_electric_power_output`'.format(value))

        self._data["Generator 22 Rated Electric Power Output"] = value

    @property
    def generator_22_availability_schedule_name(self):
        """Get generator_22_availability_schedule_name

        Returns:
            str: the value of `generator_22_availability_schedule_name` or None if not set
        """
        return self._data["Generator 22 Availability Schedule Name"]

    @generator_22_availability_schedule_name.setter
    def generator_22_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_22_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_22_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_22_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_22_availability_schedule_name`')

        self._data["Generator 22 Availability Schedule Name"] = value

    @property
    def generator_22_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_22_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_22_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 22 Rated Thermal to Electrical Power Ratio"]

    @generator_22_rated_thermal_to_electrical_power_ratio.setter
    def generator_22_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_22_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_22_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_22_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 22 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_23_name(self):
        """Get generator_23_name

        Returns:
            str: the value of `generator_23_name` or None if not set
        """
        return self._data["Generator 23 Name"]

    @generator_23_name.setter
    def generator_23_name(self, value=None):
        """  Corresponds to IDD Field `generator_23_name`

        Args:
            value (str): value for IDD Field `generator_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_23_name`')

        self._data["Generator 23 Name"] = value

    @property
    def generator_23_object_type(self):
        """Get generator_23_object_type

        Returns:
            str: the value of `generator_23_object_type` or None if not set
        """
        return self._data["Generator 23 Object Type"]

    @generator_23_object_type.setter
    def generator_23_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_23_object_type`

        Args:
            value (str): value for IDD Field `generator_23_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_23_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_23_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_23_object_type`'.format(value))

        self._data["Generator 23 Object Type"] = value

    @property
    def generator_23_rated_electric_power_output(self):
        """Get generator_23_rated_electric_power_output

        Returns:
            float: the value of `generator_23_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 23 Rated Electric Power Output"]

    @generator_23_rated_electric_power_output.setter
    def generator_23_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_23_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_23_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_23_rated_electric_power_output`'.format(value))

        self._data["Generator 23 Rated Electric Power Output"] = value

    @property
    def generator_23_availability_schedule_name(self):
        """Get generator_23_availability_schedule_name

        Returns:
            str: the value of `generator_23_availability_schedule_name` or None if not set
        """
        return self._data["Generator 23 Availability Schedule Name"]

    @generator_23_availability_schedule_name.setter
    def generator_23_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_23_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_23_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_23_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_23_availability_schedule_name`')

        self._data["Generator 23 Availability Schedule Name"] = value

    @property
    def generator_23_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_23_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_23_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 23 Rated Thermal to Electrical Power Ratio"]

    @generator_23_rated_thermal_to_electrical_power_ratio.setter
    def generator_23_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_23_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_23_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_23_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 23 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_24_name(self):
        """Get generator_24_name

        Returns:
            str: the value of `generator_24_name` or None if not set
        """
        return self._data["Generator 24 Name"]

    @generator_24_name.setter
    def generator_24_name(self, value=None):
        """  Corresponds to IDD Field `generator_24_name`

        Args:
            value (str): value for IDD Field `generator_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_24_name`')

        self._data["Generator 24 Name"] = value

    @property
    def generator_24_object_type(self):
        """Get generator_24_object_type

        Returns:
            str: the value of `generator_24_object_type` or None if not set
        """
        return self._data["Generator 24 Object Type"]

    @generator_24_object_type.setter
    def generator_24_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_24_object_type`

        Args:
            value (str): value for IDD Field `generator_24_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_24_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_24_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_24_object_type`'.format(value))

        self._data["Generator 24 Object Type"] = value

    @property
    def generator_24_rated_electric_power_output(self):
        """Get generator_24_rated_electric_power_output

        Returns:
            float: the value of `generator_24_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 24 Rated Electric Power Output"]

    @generator_24_rated_electric_power_output.setter
    def generator_24_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_24_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_24_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_24_rated_electric_power_output`'.format(value))

        self._data["Generator 24 Rated Electric Power Output"] = value

    @property
    def generator_24_availability_schedule_name(self):
        """Get generator_24_availability_schedule_name

        Returns:
            str: the value of `generator_24_availability_schedule_name` or None if not set
        """
        return self._data["Generator 24 Availability Schedule Name"]

    @generator_24_availability_schedule_name.setter
    def generator_24_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_24_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_24_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_24_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_24_availability_schedule_name`')

        self._data["Generator 24 Availability Schedule Name"] = value

    @property
    def generator_24_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_24_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_24_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 24 Rated Thermal to Electrical Power Ratio"]

    @generator_24_rated_thermal_to_electrical_power_ratio.setter
    def generator_24_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_24_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_24_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_24_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 24 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_25_name(self):
        """Get generator_25_name

        Returns:
            str: the value of `generator_25_name` or None if not set
        """
        return self._data["Generator 25 Name"]

    @generator_25_name.setter
    def generator_25_name(self, value=None):
        """  Corresponds to IDD Field `generator_25_name`

        Args:
            value (str): value for IDD Field `generator_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_25_name`')

        self._data["Generator 25 Name"] = value

    @property
    def generator_25_object_type(self):
        """Get generator_25_object_type

        Returns:
            str: the value of `generator_25_object_type` or None if not set
        """
        return self._data["Generator 25 Object Type"]

    @generator_25_object_type.setter
    def generator_25_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_25_object_type`

        Args:
            value (str): value for IDD Field `generator_25_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_25_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_25_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_25_object_type`'.format(value))

        self._data["Generator 25 Object Type"] = value

    @property
    def generator_25_rated_electric_power_output(self):
        """Get generator_25_rated_electric_power_output

        Returns:
            float: the value of `generator_25_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 25 Rated Electric Power Output"]

    @generator_25_rated_electric_power_output.setter
    def generator_25_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_25_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_25_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_25_rated_electric_power_output`'.format(value))

        self._data["Generator 25 Rated Electric Power Output"] = value

    @property
    def generator_25_availability_schedule_name(self):
        """Get generator_25_availability_schedule_name

        Returns:
            str: the value of `generator_25_availability_schedule_name` or None if not set
        """
        return self._data["Generator 25 Availability Schedule Name"]

    @generator_25_availability_schedule_name.setter
    def generator_25_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_25_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_25_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_25_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_25_availability_schedule_name`')

        self._data["Generator 25 Availability Schedule Name"] = value

    @property
    def generator_25_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_25_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_25_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 25 Rated Thermal to Electrical Power Ratio"]

    @generator_25_rated_thermal_to_electrical_power_ratio.setter
    def generator_25_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_25_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_25_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_25_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 25 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_26_name(self):
        """Get generator_26_name

        Returns:
            str: the value of `generator_26_name` or None if not set
        """
        return self._data["Generator 26 Name"]

    @generator_26_name.setter
    def generator_26_name(self, value=None):
        """  Corresponds to IDD Field `generator_26_name`

        Args:
            value (str): value for IDD Field `generator_26_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_26_name`')

        self._data["Generator 26 Name"] = value

    @property
    def generator_26_object_type(self):
        """Get generator_26_object_type

        Returns:
            str: the value of `generator_26_object_type` or None if not set
        """
        return self._data["Generator 26 Object Type"]

    @generator_26_object_type.setter
    def generator_26_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_26_object_type`

        Args:
            value (str): value for IDD Field `generator_26_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_26_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_26_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_26_object_type`'.format(value))

        self._data["Generator 26 Object Type"] = value

    @property
    def generator_26_rated_electric_power_output(self):
        """Get generator_26_rated_electric_power_output

        Returns:
            float: the value of `generator_26_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 26 Rated Electric Power Output"]

    @generator_26_rated_electric_power_output.setter
    def generator_26_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_26_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_26_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_26_rated_electric_power_output`'.format(value))

        self._data["Generator 26 Rated Electric Power Output"] = value

    @property
    def generator_26_availability_schedule_name(self):
        """Get generator_26_availability_schedule_name

        Returns:
            str: the value of `generator_26_availability_schedule_name` or None if not set
        """
        return self._data["Generator 26 Availability Schedule Name"]

    @generator_26_availability_schedule_name.setter
    def generator_26_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_26_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_26_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_26_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_26_availability_schedule_name`')

        self._data["Generator 26 Availability Schedule Name"] = value

    @property
    def generator_26_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_26_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_26_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 26 Rated Thermal to Electrical Power Ratio"]

    @generator_26_rated_thermal_to_electrical_power_ratio.setter
    def generator_26_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_26_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_26_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_26_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 26 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_27_name(self):
        """Get generator_27_name

        Returns:
            str: the value of `generator_27_name` or None if not set
        """
        return self._data["Generator 27 Name"]

    @generator_27_name.setter
    def generator_27_name(self, value=None):
        """  Corresponds to IDD Field `generator_27_name`

        Args:
            value (str): value for IDD Field `generator_27_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_27_name`')

        self._data["Generator 27 Name"] = value

    @property
    def generator_27_object_type(self):
        """Get generator_27_object_type

        Returns:
            str: the value of `generator_27_object_type` or None if not set
        """
        return self._data["Generator 27 Object Type"]

    @generator_27_object_type.setter
    def generator_27_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_27_object_type`

        Args:
            value (str): value for IDD Field `generator_27_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_27_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_27_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_27_object_type`'.format(value))

        self._data["Generator 27 Object Type"] = value

    @property
    def generator_27_rated_electric_power_output(self):
        """Get generator_27_rated_electric_power_output

        Returns:
            float: the value of `generator_27_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 27 Rated Electric Power Output"]

    @generator_27_rated_electric_power_output.setter
    def generator_27_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_27_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_27_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_27_rated_electric_power_output`'.format(value))

        self._data["Generator 27 Rated Electric Power Output"] = value

    @property
    def generator_27_availability_schedule_name(self):
        """Get generator_27_availability_schedule_name

        Returns:
            str: the value of `generator_27_availability_schedule_name` or None if not set
        """
        return self._data["Generator 27 Availability Schedule Name"]

    @generator_27_availability_schedule_name.setter
    def generator_27_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_27_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_27_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_27_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_27_availability_schedule_name`')

        self._data["Generator 27 Availability Schedule Name"] = value

    @property
    def generator_27_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_27_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_27_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 27 Rated Thermal to Electrical Power Ratio"]

    @generator_27_rated_thermal_to_electrical_power_ratio.setter
    def generator_27_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_27_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_27_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_27_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 27 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_28_name(self):
        """Get generator_28_name

        Returns:
            str: the value of `generator_28_name` or None if not set
        """
        return self._data["Generator 28 Name"]

    @generator_28_name.setter
    def generator_28_name(self, value=None):
        """  Corresponds to IDD Field `generator_28_name`

        Args:
            value (str): value for IDD Field `generator_28_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_28_name`')

        self._data["Generator 28 Name"] = value

    @property
    def generator_28_object_type(self):
        """Get generator_28_object_type

        Returns:
            str: the value of `generator_28_object_type` or None if not set
        """
        return self._data["Generator 28 Object Type"]

    @generator_28_object_type.setter
    def generator_28_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_28_object_type`

        Args:
            value (str): value for IDD Field `generator_28_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_28_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_28_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_28_object_type`'.format(value))

        self._data["Generator 28 Object Type"] = value

    @property
    def generator_28_rated_electric_power_output(self):
        """Get generator_28_rated_electric_power_output

        Returns:
            float: the value of `generator_28_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 28 Rated Electric Power Output"]

    @generator_28_rated_electric_power_output.setter
    def generator_28_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_28_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_28_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_28_rated_electric_power_output`'.format(value))

        self._data["Generator 28 Rated Electric Power Output"] = value

    @property
    def generator_28_availability_schedule_name(self):
        """Get generator_28_availability_schedule_name

        Returns:
            str: the value of `generator_28_availability_schedule_name` or None if not set
        """
        return self._data["Generator 28 Availability Schedule Name"]

    @generator_28_availability_schedule_name.setter
    def generator_28_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_28_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_28_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_28_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_28_availability_schedule_name`')

        self._data["Generator 28 Availability Schedule Name"] = value

    @property
    def generator_28_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_28_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_28_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 28 Rated Thermal to Electrical Power Ratio"]

    @generator_28_rated_thermal_to_electrical_power_ratio.setter
    def generator_28_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_28_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_28_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_28_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 28 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_29_name(self):
        """Get generator_29_name

        Returns:
            str: the value of `generator_29_name` or None if not set
        """
        return self._data["Generator 29 Name"]

    @generator_29_name.setter
    def generator_29_name(self, value=None):
        """  Corresponds to IDD Field `generator_29_name`

        Args:
            value (str): value for IDD Field `generator_29_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_29_name`')

        self._data["Generator 29 Name"] = value

    @property
    def generator_29_object_type(self):
        """Get generator_29_object_type

        Returns:
            str: the value of `generator_29_object_type` or None if not set
        """
        return self._data["Generator 29 Object Type"]

    @generator_29_object_type.setter
    def generator_29_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_29_object_type`

        Args:
            value (str): value for IDD Field `generator_29_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_29_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_29_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_29_object_type`'.format(value))

        self._data["Generator 29 Object Type"] = value

    @property
    def generator_29_rated_electric_power_output(self):
        """Get generator_29_rated_electric_power_output

        Returns:
            float: the value of `generator_29_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 29 Rated Electric Power Output"]

    @generator_29_rated_electric_power_output.setter
    def generator_29_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_29_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_29_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_29_rated_electric_power_output`'.format(value))

        self._data["Generator 29 Rated Electric Power Output"] = value

    @property
    def generator_29_availability_schedule_name(self):
        """Get generator_29_availability_schedule_name

        Returns:
            str: the value of `generator_29_availability_schedule_name` or None if not set
        """
        return self._data["Generator 29 Availability Schedule Name"]

    @generator_29_availability_schedule_name.setter
    def generator_29_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_29_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_29_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_29_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_29_availability_schedule_name`')

        self._data["Generator 29 Availability Schedule Name"] = value

    @property
    def generator_29_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_29_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_29_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 29 Rated Thermal to Electrical Power Ratio"]

    @generator_29_rated_thermal_to_electrical_power_ratio.setter
    def generator_29_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_29_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_29_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_29_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 29 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_30_name(self):
        """Get generator_30_name

        Returns:
            str: the value of `generator_30_name` or None if not set
        """
        return self._data["Generator 30 Name"]

    @generator_30_name.setter
    def generator_30_name(self, value=None):
        """  Corresponds to IDD Field `generator_30_name`

        Args:
            value (str): value for IDD Field `generator_30_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_30_name`')

        self._data["Generator 30 Name"] = value

    @property
    def generator_30_object_type(self):
        """Get generator_30_object_type

        Returns:
            str: the value of `generator_30_object_type` or None if not set
        """
        return self._data["Generator 30 Object Type"]

    @generator_30_object_type.setter
    def generator_30_object_type(self, value=None):
        """  Corresponds to IDD Field `generator_30_object_type`

        Args:
            value (str): value for IDD Field `generator_30_object_type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_30_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_30_object_type`')
            vals = set()
            vals.add("Generator:InternalCombustionEngine")
            vals.add("Generator:CombustionTurbine")
            vals.add("Generator:Photovoltaic")
            vals.add("Generator:FuelCell")
            vals.add("Generator:MicroCHP")
            vals.add("Generator:MicroTurbine")
            vals.add("Generator:WindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_30_object_type`'.format(value))

        self._data["Generator 30 Object Type"] = value

    @property
    def generator_30_rated_electric_power_output(self):
        """Get generator_30_rated_electric_power_output

        Returns:
            float: the value of `generator_30_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 30 Rated Electric Power Output"]

    @generator_30_rated_electric_power_output.setter
    def generator_30_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `generator_30_rated_electric_power_output`

        Args:
            value (float): value for IDD Field `generator_30_rated_electric_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_30_rated_electric_power_output`'.format(value))

        self._data["Generator 30 Rated Electric Power Output"] = value

    @property
    def generator_30_availability_schedule_name(self):
        """Get generator_30_availability_schedule_name

        Returns:
            str: the value of `generator_30_availability_schedule_name` or None if not set
        """
        return self._data["Generator 30 Availability Schedule Name"]

    @generator_30_availability_schedule_name.setter
    def generator_30_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `generator_30_availability_schedule_name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `generator_30_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_30_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_30_availability_schedule_name`')

        self._data["Generator 30 Availability Schedule Name"] = value

    @property
    def generator_30_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_30_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_30_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 30 Rated Thermal to Electrical Power Ratio"]

    @generator_30_rated_thermal_to_electrical_power_ratio.setter
    def generator_30_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `generator_30_rated_thermal_to_electrical_power_ratio`

        Args:
            value (float): value for IDD Field `generator_30_rated_thermal_to_electrical_power_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `generator_30_rated_thermal_to_electrical_power_ratio`'.format(value))

        self._data["Generator 30 Rated Thermal to Electrical Power Ratio"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.generator_1_name))
        out.append(self._to_str(self.generator_1_object_type))
        out.append(self._to_str(self.generator_1_rated_electric_power_output))
        out.append(self._to_str(self.generator_1_availability_schedule_name))
        out.append(self._to_str(self.generator_1_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_2_name))
        out.append(self._to_str(self.generator_2_object_type))
        out.append(self._to_str(self.generator_2_rated_electric_power_output))
        out.append(self._to_str(self.generator_2_availability_schedule_name))
        out.append(self._to_str(self.generator_2_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_3_name))
        out.append(self._to_str(self.generator_3_object_type))
        out.append(self._to_str(self.generator_3_rated_electric_power_output))
        out.append(self._to_str(self.generator_3_availability_schedule_name))
        out.append(self._to_str(self.generator_3_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_4_name))
        out.append(self._to_str(self.generator_4_object_type))
        out.append(self._to_str(self.generator_4_rated_electric_power_output))
        out.append(self._to_str(self.generator_4_availability_schedule_name))
        out.append(self._to_str(self.generator_4_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_5_name))
        out.append(self._to_str(self.generator_5_object_type))
        out.append(self._to_str(self.generator_5_rated_electric_power_output))
        out.append(self._to_str(self.generator_5_availability_schedule_name))
        out.append(self._to_str(self.generator_5_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_6_name))
        out.append(self._to_str(self.generator_6_object_type))
        out.append(self._to_str(self.generator_6_rated_electric_power_output))
        out.append(self._to_str(self.generator_6_availability_schedule_name))
        out.append(self._to_str(self.generator_6_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_7_name))
        out.append(self._to_str(self.generator_7_object_type))
        out.append(self._to_str(self.generator_7_rated_electric_power_output))
        out.append(self._to_str(self.generator_7_availability_schedule_name))
        out.append(self._to_str(self.generator_7_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_8_name))
        out.append(self._to_str(self.generator_8_object_type))
        out.append(self._to_str(self.generator_8_rated_electric_power_output))
        out.append(self._to_str(self.generator_8_availability_schedule_name))
        out.append(self._to_str(self.generator_8_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_9_name))
        out.append(self._to_str(self.generator_9_object_type))
        out.append(self._to_str(self.generator_9_rated_electric_power_output))
        out.append(self._to_str(self.generator_9_availability_schedule_name))
        out.append(self._to_str(self.generator_9_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_10_name))
        out.append(self._to_str(self.generator_10_object_type))
        out.append(self._to_str(self.generator_10_rated_electric_power_output))
        out.append(self._to_str(self.generator_10_availability_schedule_name))
        out.append(self._to_str(self.generator_10_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_11_name))
        out.append(self._to_str(self.generator_11_object_type))
        out.append(self._to_str(self.generator_11_rated_electric_power_output))
        out.append(self._to_str(self.generator_11_availability_schedule_name))
        out.append(self._to_str(self.generator_11_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_12_name))
        out.append(self._to_str(self.generator_12_object_type))
        out.append(self._to_str(self.generator_12_rated_electric_power_output))
        out.append(self._to_str(self.generator_12_availability_schedule_name))
        out.append(self._to_str(self.generator_12_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_13_name))
        out.append(self._to_str(self.generator_13_object_type))
        out.append(self._to_str(self.generator_13_rated_electric_power_output))
        out.append(self._to_str(self.generator_13_availability_schedule_name))
        out.append(self._to_str(self.generator_13_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_14_name))
        out.append(self._to_str(self.generator_14_object_type))
        out.append(self._to_str(self.generator_14_rated_electric_power_output))
        out.append(self._to_str(self.generator_14_availability_schedule_name))
        out.append(self._to_str(self.generator_14_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_15_name))
        out.append(self._to_str(self.generator_15_object_type))
        out.append(self._to_str(self.generator_15_rated_electric_power_output))
        out.append(self._to_str(self.generator_15_availability_schedule_name))
        out.append(self._to_str(self.generator_15_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_16_name))
        out.append(self._to_str(self.generator_16_object_type))
        out.append(self._to_str(self.generator_16_rated_electric_power_output))
        out.append(self._to_str(self.generator_16_availability_schedule_name))
        out.append(self._to_str(self.generator_16_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_17_name))
        out.append(self._to_str(self.generator_17_object_type))
        out.append(self._to_str(self.generator_17_rated_electric_power_output))
        out.append(self._to_str(self.generator_17_availability_schedule_name))
        out.append(self._to_str(self.generator_17_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_18_name))
        out.append(self._to_str(self.generator_18_object_type))
        out.append(self._to_str(self.generator_18_rated_electric_power_output))
        out.append(self._to_str(self.generator_18_availability_schedule_name))
        out.append(self._to_str(self.generator_18_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_19_name))
        out.append(self._to_str(self.generator_19_object_type))
        out.append(self._to_str(self.generator_19_rated_electric_power_output))
        out.append(self._to_str(self.generator_19_availability_schedule_name))
        out.append(self._to_str(self.generator_19_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_20_name))
        out.append(self._to_str(self.generator_20_object_type))
        out.append(self._to_str(self.generator_20_rated_electric_power_output))
        out.append(self._to_str(self.generator_20_availability_schedule_name))
        out.append(self._to_str(self.generator_20_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_21_name))
        out.append(self._to_str(self.generator_21_object_type))
        out.append(self._to_str(self.generator_21_rated_electric_power_output))
        out.append(self._to_str(self.generator_21_availability_schedule_name))
        out.append(self._to_str(self.generator_21_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_22_name))
        out.append(self._to_str(self.generator_22_object_type))
        out.append(self._to_str(self.generator_22_rated_electric_power_output))
        out.append(self._to_str(self.generator_22_availability_schedule_name))
        out.append(self._to_str(self.generator_22_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_23_name))
        out.append(self._to_str(self.generator_23_object_type))
        out.append(self._to_str(self.generator_23_rated_electric_power_output))
        out.append(self._to_str(self.generator_23_availability_schedule_name))
        out.append(self._to_str(self.generator_23_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_24_name))
        out.append(self._to_str(self.generator_24_object_type))
        out.append(self._to_str(self.generator_24_rated_electric_power_output))
        out.append(self._to_str(self.generator_24_availability_schedule_name))
        out.append(self._to_str(self.generator_24_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_25_name))
        out.append(self._to_str(self.generator_25_object_type))
        out.append(self._to_str(self.generator_25_rated_electric_power_output))
        out.append(self._to_str(self.generator_25_availability_schedule_name))
        out.append(self._to_str(self.generator_25_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_26_name))
        out.append(self._to_str(self.generator_26_object_type))
        out.append(self._to_str(self.generator_26_rated_electric_power_output))
        out.append(self._to_str(self.generator_26_availability_schedule_name))
        out.append(self._to_str(self.generator_26_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_27_name))
        out.append(self._to_str(self.generator_27_object_type))
        out.append(self._to_str(self.generator_27_rated_electric_power_output))
        out.append(self._to_str(self.generator_27_availability_schedule_name))
        out.append(self._to_str(self.generator_27_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_28_name))
        out.append(self._to_str(self.generator_28_object_type))
        out.append(self._to_str(self.generator_28_rated_electric_power_output))
        out.append(self._to_str(self.generator_28_availability_schedule_name))
        out.append(self._to_str(self.generator_28_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_29_name))
        out.append(self._to_str(self.generator_29_object_type))
        out.append(self._to_str(self.generator_29_rated_electric_power_output))
        out.append(self._to_str(self.generator_29_availability_schedule_name))
        out.append(self._to_str(self.generator_29_rated_thermal_to_electrical_power_ratio))
        out.append(self._to_str(self.generator_30_name))
        out.append(self._to_str(self.generator_30_object_type))
        out.append(self._to_str(self.generator_30_rated_electric_power_output))
        out.append(self._to_str(self.generator_30_availability_schedule_name))
        out.append(self._to_str(self.generator_30_rated_thermal_to_electrical_power_ratio))
        return ",".join(out)

class ElectricLoadCenterInverterSimple(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Inverter:Simple`
        Electric power inverter to convert from direct current (DC) to alternating current
        (AC) in an electric load center that contains photovoltaic modules. This input
        object is for the simplest inverter model and uses a fixed efficiency.
    
    """
    internal_name = "ElectricLoadCenter:Inverter:Simple"
    field_count = 5
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Inverter:Simple`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Inverter Efficiency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inverter_efficiency = None
        else:
            self.inverter_efficiency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        enter name of zone to receive inverter losses as heat
        if blank then inverter is assumed to be outdoors

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `radiative_fraction`

        Args:
            value (float): value for IDD Field `radiative_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction`')

        self._data["Radiative Fraction"] = value

    @property
    def inverter_efficiency(self):
        """Get inverter_efficiency

        Returns:
            float: the value of `inverter_efficiency` or None if not set
        """
        return self._data["Inverter Efficiency"]

    @inverter_efficiency.setter
    def inverter_efficiency(self, value=None):
        """  Corresponds to IDD Field `inverter_efficiency`

        Args:
            value (float): value for IDD Field `inverter_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `inverter_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inverter_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `inverter_efficiency`')

        self._data["Inverter Efficiency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.radiative_fraction))
        out.append(self._to_str(self.inverter_efficiency))
        return ",".join(out)

class ElectricLoadCenterInverterFunctionOfPower(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Inverter:FunctionOfPower`
        Electric power inverter to convert from direct current (DC) to alternating current
        (AC) in an electric load center that contains photovoltaic modules. This input
        object is for an inverter model where efficiency is a function of normalized
        power.
    
    """
    internal_name = "ElectricLoadCenter:Inverter:FunctionOfPower"
    field_count = 11
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Inverter:FunctionOfPower`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Efficiency Function of Power Curve Name"] = None
        self._data["Rated Maximum Continuous Input Power"] = None
        self._data["Minimum Efficiency"] = None
        self._data["Maximum Efficiency"] = None
        self._data["Minimum Power Output"] = None
        self._data["Maximum Power Output"] = None
        self._data["Ancillary Power Consumed In Standby"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_function_of_power_curve_name = None
        else:
            self.efficiency_function_of_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_maximum_continuous_input_power = None
        else:
            self.rated_maximum_continuous_input_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_efficiency = None
        else:
            self.minimum_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_efficiency = None
        else:
            self.maximum_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_power_output = None
        else:
            self.minimum_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_power_output = None
        else:
            self.maximum_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancillary_power_consumed_in_standby = None
        else:
            self.ancillary_power_consumed_in_standby = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Enter name of zone to receive inverter losses as heat
        if blank then inverter is assumed to be outdoors

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `radiative_fraction`

        Args:
            value (float): value for IDD Field `radiative_fraction`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `radiative_fraction`'.format(value))

        self._data["Radiative Fraction"] = value

    @property
    def efficiency_function_of_power_curve_name(self):
        """Get efficiency_function_of_power_curve_name

        Returns:
            str: the value of `efficiency_function_of_power_curve_name` or None if not set
        """
        return self._data["Efficiency Function of Power Curve Name"]

    @efficiency_function_of_power_curve_name.setter
    def efficiency_function_of_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `efficiency_function_of_power_curve_name`
        curve describes efficiency as a function of power
        curve is normalized relative to rated power in next field
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `efficiency_function_of_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_function_of_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_function_of_power_curve_name`')

        self._data["Efficiency Function of Power Curve Name"] = value

    @property
    def rated_maximum_continuous_input_power(self):
        """Get rated_maximum_continuous_input_power

        Returns:
            float: the value of `rated_maximum_continuous_input_power` or None if not set
        """
        return self._data["Rated Maximum Continuous Input Power"]

    @rated_maximum_continuous_input_power.setter
    def rated_maximum_continuous_input_power(self, value=None):
        """  Corresponds to IDD Field `rated_maximum_continuous_input_power`

        Args:
            value (float): value for IDD Field `rated_maximum_continuous_input_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_maximum_continuous_input_power`'.format(value))

        self._data["Rated Maximum Continuous Input Power"] = value

    @property
    def minimum_efficiency(self):
        """Get minimum_efficiency

        Returns:
            float: the value of `minimum_efficiency` or None if not set
        """
        return self._data["Minimum Efficiency"]

    @minimum_efficiency.setter
    def minimum_efficiency(self, value=None):
        """  Corresponds to IDD Field `minimum_efficiency`

        Args:
            value (float): value for IDD Field `minimum_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_efficiency`')

        self._data["Minimum Efficiency"] = value

    @property
    def maximum_efficiency(self):
        """Get maximum_efficiency

        Returns:
            float: the value of `maximum_efficiency` or None if not set
        """
        return self._data["Maximum Efficiency"]

    @maximum_efficiency.setter
    def maximum_efficiency(self, value=None):
        """  Corresponds to IDD Field `maximum_efficiency`

        Args:
            value (float): value for IDD Field `maximum_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_efficiency`')

        self._data["Maximum Efficiency"] = value

    @property
    def minimum_power_output(self):
        """Get minimum_power_output

        Returns:
            float: the value of `minimum_power_output` or None if not set
        """
        return self._data["Minimum Power Output"]

    @minimum_power_output.setter
    def minimum_power_output(self, value=None):
        """  Corresponds to IDD Field `minimum_power_output`

        Args:
            value (float): value for IDD Field `minimum_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_power_output`'.format(value))

        self._data["Minimum Power Output"] = value

    @property
    def maximum_power_output(self):
        """Get maximum_power_output

        Returns:
            float: the value of `maximum_power_output` or None if not set
        """
        return self._data["Maximum Power Output"]

    @maximum_power_output.setter
    def maximum_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_power_output`

        Args:
            value (float): value for IDD Field `maximum_power_output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_power_output`'.format(value))

        self._data["Maximum Power Output"] = value

    @property
    def ancillary_power_consumed_in_standby(self):
        """Get ancillary_power_consumed_in_standby

        Returns:
            float: the value of `ancillary_power_consumed_in_standby` or None if not set
        """
        return self._data["Ancillary Power Consumed In Standby"]

    @ancillary_power_consumed_in_standby.setter
    def ancillary_power_consumed_in_standby(self, value=None):
        """  Corresponds to IDD Field `ancillary_power_consumed_in_standby`

        Args:
            value (float): value for IDD Field `ancillary_power_consumed_in_standby`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancillary_power_consumed_in_standby`'.format(value))

        self._data["Ancillary Power Consumed In Standby"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.radiative_fraction))
        out.append(self._to_str(self.efficiency_function_of_power_curve_name))
        out.append(self._to_str(self.rated_maximum_continuous_input_power))
        out.append(self._to_str(self.minimum_efficiency))
        out.append(self._to_str(self.maximum_efficiency))
        out.append(self._to_str(self.minimum_power_output))
        out.append(self._to_str(self.maximum_power_output))
        out.append(self._to_str(self.ancillary_power_consumed_in_standby))
        return ",".join(out)

class ElectricLoadCenterInverterLookUpTable(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Inverter:LookUpTable`
        California Energy Commission tests and publishs data on inverters
        This inverter model interpolates using CEC test data
        Input data are at http://www.gosolarcalifornia.org/equipment/inverter_tests/summaries
    
    """
    internal_name = "ElectricLoadCenter:Inverter:LookUpTable"
    field_count = 13
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Inverter:LookUpTable`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Rated Maximum Continuous Output Power"] = None
        self._data["Night Tare Loss Power"] = None
        self._data["Nominal Voltage Input"] = None
        self._data["Efficiency at 10% Power and Nominal Voltage"] = None
        self._data["Efficiency at 20% Power and Nominal Voltage"] = None
        self._data["Efficiency at 30% Power and Nominal Voltage"] = None
        self._data["Efficiency at 50% Power and Nominal Voltage"] = None
        self._data["Efficiency at 75% Power and Nominal Voltage"] = None
        self._data["Efficiency at 100% Power and Nominal Voltage"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_maximum_continuous_output_power = None
        else:
            self.rated_maximum_continuous_output_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.night_tare_loss_power = None
        else:
            self.night_tare_loss_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_voltage_input = None
        else:
            self.nominal_voltage_input = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_at_10_power_and_nominal_voltage = None
        else:
            self.efficiency_at_10_power_and_nominal_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_at_20_power_and_nominal_voltage = None
        else:
            self.efficiency_at_20_power_and_nominal_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_at_30_power_and_nominal_voltage = None
        else:
            self.efficiency_at_30_power_and_nominal_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_at_50_power_and_nominal_voltage = None
        else:
            self.efficiency_at_50_power_and_nominal_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_at_75_power_and_nominal_voltage = None
        else:
            self.efficiency_at_75_power_and_nominal_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_at_100_power_and_nominal_voltage = None
        else:
            self.efficiency_at_100_power_and_nominal_voltage = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Enter name of zone to receive inverter losses as heat
        if blank then inverter is assumed to be outdoors

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `radiative_fraction`

        Args:
            value (float): value for IDD Field `radiative_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction`')

        self._data["Radiative Fraction"] = value

    @property
    def rated_maximum_continuous_output_power(self):
        """Get rated_maximum_continuous_output_power

        Returns:
            float: the value of `rated_maximum_continuous_output_power` or None if not set
        """
        return self._data["Rated Maximum Continuous Output Power"]

    @rated_maximum_continuous_output_power.setter
    def rated_maximum_continuous_output_power(self, value=None):
        """  Corresponds to IDD Field `rated_maximum_continuous_output_power`

        Args:
            value (float): value for IDD Field `rated_maximum_continuous_output_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_maximum_continuous_output_power`'.format(value))

        self._data["Rated Maximum Continuous Output Power"] = value

    @property
    def night_tare_loss_power(self):
        """Get night_tare_loss_power

        Returns:
            float: the value of `night_tare_loss_power` or None if not set
        """
        return self._data["Night Tare Loss Power"]

    @night_tare_loss_power.setter
    def night_tare_loss_power(self, value=None):
        """  Corresponds to IDD Field `night_tare_loss_power`

        Args:
            value (float): value for IDD Field `night_tare_loss_power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `night_tare_loss_power`'.format(value))

        self._data["Night Tare Loss Power"] = value

    @property
    def nominal_voltage_input(self):
        """Get nominal_voltage_input

        Returns:
            float: the value of `nominal_voltage_input` or None if not set
        """
        return self._data["Nominal Voltage Input"]

    @nominal_voltage_input.setter
    def nominal_voltage_input(self, value=None):
        """  Corresponds to IDD Field `nominal_voltage_input`

        Args:
            value (float): value for IDD Field `nominal_voltage_input`
                Units: V
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_voltage_input`'.format(value))

        self._data["Nominal Voltage Input"] = value

    @property
    def efficiency_at_10_power_and_nominal_voltage(self):
        """Get efficiency_at_10_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_10_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 10% Power and Nominal Voltage"]

    @efficiency_at_10_power_and_nominal_voltage.setter
    def efficiency_at_10_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `efficiency_at_10_power_and_nominal_voltage`

        Args:
            value (float): value for IDD Field `efficiency_at_10_power_and_nominal_voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency_at_10_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_10_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_10_power_and_nominal_voltage`')

        self._data["Efficiency at 10% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_20_power_and_nominal_voltage(self):
        """Get efficiency_at_20_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_20_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 20% Power and Nominal Voltage"]

    @efficiency_at_20_power_and_nominal_voltage.setter
    def efficiency_at_20_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `efficiency_at_20_power_and_nominal_voltage`

        Args:
            value (float): value for IDD Field `efficiency_at_20_power_and_nominal_voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency_at_20_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_20_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_20_power_and_nominal_voltage`')

        self._data["Efficiency at 20% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_30_power_and_nominal_voltage(self):
        """Get efficiency_at_30_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_30_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 30% Power and Nominal Voltage"]

    @efficiency_at_30_power_and_nominal_voltage.setter
    def efficiency_at_30_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `efficiency_at_30_power_and_nominal_voltage`

        Args:
            value (float): value for IDD Field `efficiency_at_30_power_and_nominal_voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency_at_30_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_30_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_30_power_and_nominal_voltage`')

        self._data["Efficiency at 30% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_50_power_and_nominal_voltage(self):
        """Get efficiency_at_50_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_50_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 50% Power and Nominal Voltage"]

    @efficiency_at_50_power_and_nominal_voltage.setter
    def efficiency_at_50_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `efficiency_at_50_power_and_nominal_voltage`

        Args:
            value (float): value for IDD Field `efficiency_at_50_power_and_nominal_voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency_at_50_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_50_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_50_power_and_nominal_voltage`')

        self._data["Efficiency at 50% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_75_power_and_nominal_voltage(self):
        """Get efficiency_at_75_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_75_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 75% Power and Nominal Voltage"]

    @efficiency_at_75_power_and_nominal_voltage.setter
    def efficiency_at_75_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `efficiency_at_75_power_and_nominal_voltage`

        Args:
            value (float): value for IDD Field `efficiency_at_75_power_and_nominal_voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency_at_75_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_75_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_75_power_and_nominal_voltage`')

        self._data["Efficiency at 75% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_100_power_and_nominal_voltage(self):
        """Get efficiency_at_100_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_100_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 100% Power and Nominal Voltage"]

    @efficiency_at_100_power_and_nominal_voltage.setter
    def efficiency_at_100_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `efficiency_at_100_power_and_nominal_voltage`

        Args:
            value (float): value for IDD Field `efficiency_at_100_power_and_nominal_voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency_at_100_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_100_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_100_power_and_nominal_voltage`')

        self._data["Efficiency at 100% Power and Nominal Voltage"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.radiative_fraction))
        out.append(self._to_str(self.rated_maximum_continuous_output_power))
        out.append(self._to_str(self.night_tare_loss_power))
        out.append(self._to_str(self.nominal_voltage_input))
        out.append(self._to_str(self.efficiency_at_10_power_and_nominal_voltage))
        out.append(self._to_str(self.efficiency_at_20_power_and_nominal_voltage))
        out.append(self._to_str(self.efficiency_at_30_power_and_nominal_voltage))
        out.append(self._to_str(self.efficiency_at_50_power_and_nominal_voltage))
        out.append(self._to_str(self.efficiency_at_75_power_and_nominal_voltage))
        out.append(self._to_str(self.efficiency_at_100_power_and_nominal_voltage))
        return ",".join(out)

class ElectricLoadCenterStorageSimple(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Storage:Simple`
        Used to model storage of electricity in an electric load center.  This is a simple
        model that does not attempt to represent any of the characteristics of a real
        storage device such as a battery.  The type of power, AC or DC, depends on
        the configuration chosen as the Electrical Buss Type in the
        ElectricLoadCenter:Distribution object.
    
    """
    internal_name = "ElectricLoadCenter:Storage:Simple"
    field_count = 10
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Storage:Simple`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction for Zone Heat Gains"] = None
        self._data["Nominal Energetic Efficiency for Charging"] = None
        self._data["Nominal Discharging Energetic Efficiency"] = None
        self._data["Maximum Storage Capacity"] = None
        self._data["Maximum Power for Discharging"] = None
        self._data["Maximum Power for Charging"] = None
        self._data["Initial State of Charge"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.radiative_fraction_for_zone_heat_gains = None
        else:
            self.radiative_fraction_for_zone_heat_gains = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_energetic_efficiency_for_charging = None
        else:
            self.nominal_energetic_efficiency_for_charging = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_discharging_energetic_efficiency = None
        else:
            self.nominal_discharging_energetic_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_storage_capacity = None
        else:
            self.maximum_storage_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_power_for_discharging = None
        else:
            self.maximum_power_for_discharging = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_power_for_charging = None
        else:
            self.maximum_power_for_charging = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.initial_state_of_charge = None
        else:
            self.initial_state_of_charge = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Enter name of zone to receive storage losses as heat
        if blank then storage is assumed to be outdoors

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def radiative_fraction_for_zone_heat_gains(self):
        """Get radiative_fraction_for_zone_heat_gains

        Returns:
            float: the value of `radiative_fraction_for_zone_heat_gains` or None if not set
        """
        return self._data["Radiative Fraction for Zone Heat Gains"]

    @radiative_fraction_for_zone_heat_gains.setter
    def radiative_fraction_for_zone_heat_gains(self, value=None):
        """  Corresponds to IDD Field `radiative_fraction_for_zone_heat_gains`

        Args:
            value (float): value for IDD Field `radiative_fraction_for_zone_heat_gains`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `radiative_fraction_for_zone_heat_gains`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction_for_zone_heat_gains`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction_for_zone_heat_gains`')

        self._data["Radiative Fraction for Zone Heat Gains"] = value

    @property
    def nominal_energetic_efficiency_for_charging(self):
        """Get nominal_energetic_efficiency_for_charging

        Returns:
            float: the value of `nominal_energetic_efficiency_for_charging` or None if not set
        """
        return self._data["Nominal Energetic Efficiency for Charging"]

    @nominal_energetic_efficiency_for_charging.setter
    def nominal_energetic_efficiency_for_charging(self, value=None):
        """  Corresponds to IDD Field `nominal_energetic_efficiency_for_charging`

        Args:
            value (float): value for IDD Field `nominal_energetic_efficiency_for_charging`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_energetic_efficiency_for_charging`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_energetic_efficiency_for_charging`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_energetic_efficiency_for_charging`')

        self._data["Nominal Energetic Efficiency for Charging"] = value

    @property
    def nominal_discharging_energetic_efficiency(self):
        """Get nominal_discharging_energetic_efficiency

        Returns:
            float: the value of `nominal_discharging_energetic_efficiency` or None if not set
        """
        return self._data["Nominal Discharging Energetic Efficiency"]

    @nominal_discharging_energetic_efficiency.setter
    def nominal_discharging_energetic_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_discharging_energetic_efficiency`

        Args:
            value (float): value for IDD Field `nominal_discharging_energetic_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_discharging_energetic_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')

        self._data["Nominal Discharging Energetic Efficiency"] = value

    @property
    def maximum_storage_capacity(self):
        """Get maximum_storage_capacity

        Returns:
            float: the value of `maximum_storage_capacity` or None if not set
        """
        return self._data["Maximum Storage Capacity"]

    @maximum_storage_capacity.setter
    def maximum_storage_capacity(self, value=None):
        """  Corresponds to IDD Field `maximum_storage_capacity`

        Args:
            value (float): value for IDD Field `maximum_storage_capacity`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_storage_capacity`'.format(value))

        self._data["Maximum Storage Capacity"] = value

    @property
    def maximum_power_for_discharging(self):
        """Get maximum_power_for_discharging

        Returns:
            float: the value of `maximum_power_for_discharging` or None if not set
        """
        return self._data["Maximum Power for Discharging"]

    @maximum_power_for_discharging.setter
    def maximum_power_for_discharging(self, value=None):
        """  Corresponds to IDD Field `maximum_power_for_discharging`

        Args:
            value (float): value for IDD Field `maximum_power_for_discharging`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_power_for_discharging`'.format(value))

        self._data["Maximum Power for Discharging"] = value

    @property
    def maximum_power_for_charging(self):
        """Get maximum_power_for_charging

        Returns:
            float: the value of `maximum_power_for_charging` or None if not set
        """
        return self._data["Maximum Power for Charging"]

    @maximum_power_for_charging.setter
    def maximum_power_for_charging(self, value=None):
        """  Corresponds to IDD Field `maximum_power_for_charging`

        Args:
            value (float): value for IDD Field `maximum_power_for_charging`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_power_for_charging`'.format(value))

        self._data["Maximum Power for Charging"] = value

    @property
    def initial_state_of_charge(self):
        """Get initial_state_of_charge

        Returns:
            float: the value of `initial_state_of_charge` or None if not set
        """
        return self._data["Initial State of Charge"]

    @initial_state_of_charge.setter
    def initial_state_of_charge(self, value=None):
        """  Corresponds to IDD Field `initial_state_of_charge`

        Args:
            value (float): value for IDD Field `initial_state_of_charge`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `initial_state_of_charge`'.format(value))

        self._data["Initial State of Charge"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.radiative_fraction_for_zone_heat_gains))
        out.append(self._to_str(self.nominal_energetic_efficiency_for_charging))
        out.append(self._to_str(self.nominal_discharging_energetic_efficiency))
        out.append(self._to_str(self.maximum_storage_capacity))
        out.append(self._to_str(self.maximum_power_for_discharging))
        out.append(self._to_str(self.maximum_power_for_charging))
        out.append(self._to_str(self.initial_state_of_charge))
        return ",".join(out)

class ElectricLoadCenterStorageBattery(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Storage:Battery`
        Uses the kinetic battery model (KiBaM) to simulate rechargeable battery banks in an
        electrical load center. The battery bank is a collection of one or more individual
        battery modules. Given the surplus or deficit power from the electrical system and
        the state of charge from the previous time step, this object can model the voltage,
        current, and energy losses with charging and discharging during each time step.
        The cumulative battery damage can be also modeled and reported at the end of
        each simulation run.
    
    """
    internal_name = "ElectricLoadCenter:Storage:Battery"
    field_count = 21
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Storage:Battery`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Number of Battery Modules in Parallel"] = None
        self._data["Number of Battery Modules in Series"] = None
        self._data["Maximum Module Capacity"] = None
        self._data["Initial Fractional State of Charge"] = None
        self._data["Fraction of Available Charge Capacity"] = None
        self._data["Change Rate from Bound Charge to Available Charge"] = None
        self._data["Fully Charged Module Open Circuit Voltage"] = None
        self._data["Fully Discharged Module Open Circuit Voltage"] = None
        self._data["Voltage Change Curve Name for Charging"] = None
        self._data["Voltage Change Curve Name for Discharging"] = None
        self._data["Module Internal Electrical Resistance"] = None
        self._data["Maximum Module Discharging Current"] = None
        self._data["Module Cut-off Voltage"] = None
        self._data["Module Charge Rate Limit"] = None
        self._data["Battery Life Calculation"] = None
        self._data["Number of Cycle Bins"] = None
        self._data["Battery Life Curve Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_battery_modules_in_parallel = None
        else:
            self.number_of_battery_modules_in_parallel = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_battery_modules_in_series = None
        else:
            self.number_of_battery_modules_in_series = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_module_capacity = None
        else:
            self.maximum_module_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.initial_fractional_state_of_charge = None
        else:
            self.initial_fractional_state_of_charge = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_available_charge_capacity = None
        else:
            self.fraction_of_available_charge_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.change_rate_from_bound_charge_to_available_charge = None
        else:
            self.change_rate_from_bound_charge_to_available_charge = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fully_charged_module_open_circuit_voltage = None
        else:
            self.fully_charged_module_open_circuit_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fully_discharged_module_open_circuit_voltage = None
        else:
            self.fully_discharged_module_open_circuit_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.voltage_change_curve_name_for_charging = None
        else:
            self.voltage_change_curve_name_for_charging = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.voltage_change_curve_name_for_discharging = None
        else:
            self.voltage_change_curve_name_for_discharging = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.module_internal_electrical_resistance = None
        else:
            self.module_internal_electrical_resistance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_module_discharging_current = None
        else:
            self.maximum_module_discharging_current = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.module_cutoff_voltage = None
        else:
            self.module_cutoff_voltage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.module_charge_rate_limit = None
        else:
            self.module_charge_rate_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.battery_life_calculation = None
        else:
            self.battery_life_calculation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_cycle_bins = None
        else:
            self.number_of_cycle_bins = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.battery_life_curve_name = None
        else:
            self.battery_life_curve_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Enter name of zone to receive electrical storage losses as heat
        if blank then electrical storage losses are dissipated to outdoors

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=0.0 ):
        """  Corresponds to IDD Field `radiative_fraction`

        Args:
            value (float): value for IDD Field `radiative_fraction`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction`')

        self._data["Radiative Fraction"] = value

    @property
    def number_of_battery_modules_in_parallel(self):
        """Get number_of_battery_modules_in_parallel

        Returns:
            int: the value of `number_of_battery_modules_in_parallel` or None if not set
        """
        return self._data["Number of Battery Modules in Parallel"]

    @number_of_battery_modules_in_parallel.setter
    def number_of_battery_modules_in_parallel(self, value=1 ):
        """  Corresponds to IDD Field `number_of_battery_modules_in_parallel`
        A module usually consists of several cells.
        The total number of modules in the battery bank
        is equal to number of modules in parallel times
        number of modules in series.

        Args:
            value (int): value for IDD Field `number_of_battery_modules_in_parallel`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_battery_modules_in_parallel`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_battery_modules_in_parallel`')

        self._data["Number of Battery Modules in Parallel"] = value

    @property
    def number_of_battery_modules_in_series(self):
        """Get number_of_battery_modules_in_series

        Returns:
            int: the value of `number_of_battery_modules_in_series` or None if not set
        """
        return self._data["Number of Battery Modules in Series"]

    @number_of_battery_modules_in_series.setter
    def number_of_battery_modules_in_series(self, value=1 ):
        """  Corresponds to IDD Field `number_of_battery_modules_in_series`
        A module usually consists of several cells.
        The total number of modules in the battery bank
        is equal to number of modules in parallel times
        number of modules in series.

        Args:
            value (int): value for IDD Field `number_of_battery_modules_in_series`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_battery_modules_in_series`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_battery_modules_in_series`')

        self._data["Number of Battery Modules in Series"] = value

    @property
    def maximum_module_capacity(self):
        """Get maximum_module_capacity

        Returns:
            float: the value of `maximum_module_capacity` or None if not set
        """
        return self._data["Maximum Module Capacity"]

    @maximum_module_capacity.setter
    def maximum_module_capacity(self, value=None):
        """  Corresponds to IDD Field `maximum_module_capacity`
        The capacity is for each module.
        A model parameter from manufactures data or test data.

        Args:
            value (float): value for IDD Field `maximum_module_capacity`
                Units: Ah
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_module_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_module_capacity`')

        self._data["Maximum Module Capacity"] = value

    @property
    def initial_fractional_state_of_charge(self):
        """Get initial_fractional_state_of_charge

        Returns:
            float: the value of `initial_fractional_state_of_charge` or None if not set
        """
        return self._data["Initial Fractional State of Charge"]

    @initial_fractional_state_of_charge.setter
    def initial_fractional_state_of_charge(self, value=1.0 ):
        """  Corresponds to IDD Field `initial_fractional_state_of_charge`
        The state of charge is evaluated based on the
        maximum capacity defined in the next field.

        Args:
            value (float): value for IDD Field `initial_fractional_state_of_charge`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `initial_fractional_state_of_charge`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `initial_fractional_state_of_charge`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `initial_fractional_state_of_charge`')

        self._data["Initial Fractional State of Charge"] = value

    @property
    def fraction_of_available_charge_capacity(self):
        """Get fraction_of_available_charge_capacity

        Returns:
            float: the value of `fraction_of_available_charge_capacity` or None if not set
        """
        return self._data["Fraction of Available Charge Capacity"]

    @fraction_of_available_charge_capacity.setter
    def fraction_of_available_charge_capacity(self, value=None):
        """  Corresponds to IDD Field `fraction_of_available_charge_capacity`
        A model parameter usually derived from test data by curve fitting.

        Args:
            value (float): value for IDD Field `fraction_of_available_charge_capacity`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_available_charge_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_available_charge_capacity`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_available_charge_capacity`')

        self._data["Fraction of Available Charge Capacity"] = value

    @property
    def change_rate_from_bound_charge_to_available_charge(self):
        """Get change_rate_from_bound_charge_to_available_charge

        Returns:
            float: the value of `change_rate_from_bound_charge_to_available_charge` or None if not set
        """
        return self._data["Change Rate from Bound Charge to Available Charge"]

    @change_rate_from_bound_charge_to_available_charge.setter
    def change_rate_from_bound_charge_to_available_charge(self, value=None):
        """  Corresponds to IDD Field `change_rate_from_bound_charge_to_available_charge`
        A model parameter usually derived from test data by curve fitting.

        Args:
            value (float): value for IDD Field `change_rate_from_bound_charge_to_available_charge`
                Units: 1/hr
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `change_rate_from_bound_charge_to_available_charge`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `change_rate_from_bound_charge_to_available_charge`')

        self._data["Change Rate from Bound Charge to Available Charge"] = value

    @property
    def fully_charged_module_open_circuit_voltage(self):
        """Get fully_charged_module_open_circuit_voltage

        Returns:
            float: the value of `fully_charged_module_open_circuit_voltage` or None if not set
        """
        return self._data["Fully Charged Module Open Circuit Voltage"]

    @fully_charged_module_open_circuit_voltage.setter
    def fully_charged_module_open_circuit_voltage(self, value=None):
        """  Corresponds to IDD Field `fully_charged_module_open_circuit_voltage`
        The voltage is for each battery module.

        Args:
            value (float): value for IDD Field `fully_charged_module_open_circuit_voltage`
                Units: V
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fully_charged_module_open_circuit_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fully_charged_module_open_circuit_voltage`')

        self._data["Fully Charged Module Open Circuit Voltage"] = value

    @property
    def fully_discharged_module_open_circuit_voltage(self):
        """Get fully_discharged_module_open_circuit_voltage

        Returns:
            float: the value of `fully_discharged_module_open_circuit_voltage` or None if not set
        """
        return self._data["Fully Discharged Module Open Circuit Voltage"]

    @fully_discharged_module_open_circuit_voltage.setter
    def fully_discharged_module_open_circuit_voltage(self, value=None):
        """  Corresponds to IDD Field `fully_discharged_module_open_circuit_voltage`
        The voltage is for each battery module.

        Args:
            value (float): value for IDD Field `fully_discharged_module_open_circuit_voltage`
                Units: V
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fully_discharged_module_open_circuit_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fully_discharged_module_open_circuit_voltage`')

        self._data["Fully Discharged Module Open Circuit Voltage"] = value

    @property
    def voltage_change_curve_name_for_charging(self):
        """Get voltage_change_curve_name_for_charging

        Returns:
            str: the value of `voltage_change_curve_name_for_charging` or None if not set
        """
        return self._data["Voltage Change Curve Name for Charging"]

    @voltage_change_curve_name_for_charging.setter
    def voltage_change_curve_name_for_charging(self, value=None):
        """  Corresponds to IDD Field `voltage_change_curve_name_for_charging`
        Table:OneIndependentVariable object can also be used
        Determines how the open circuit voltage change with state of charge relative to the fully discharged state.

        Args:
            value (str): value for IDD Field `voltage_change_curve_name_for_charging`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `voltage_change_curve_name_for_charging`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `voltage_change_curve_name_for_charging`')

        self._data["Voltage Change Curve Name for Charging"] = value

    @property
    def voltage_change_curve_name_for_discharging(self):
        """Get voltage_change_curve_name_for_discharging

        Returns:
            str: the value of `voltage_change_curve_name_for_discharging` or None if not set
        """
        return self._data["Voltage Change Curve Name for Discharging"]

    @voltage_change_curve_name_for_discharging.setter
    def voltage_change_curve_name_for_discharging(self, value=None):
        """  Corresponds to IDD Field `voltage_change_curve_name_for_discharging`
        Table:OneIndependentVariable object can also be used
        Determines how the open circuit voltage change with state of charge relative to the fully charged state.

        Args:
            value (str): value for IDD Field `voltage_change_curve_name_for_discharging`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `voltage_change_curve_name_for_discharging`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `voltage_change_curve_name_for_discharging`')

        self._data["Voltage Change Curve Name for Discharging"] = value

    @property
    def module_internal_electrical_resistance(self):
        """Get module_internal_electrical_resistance

        Returns:
            float: the value of `module_internal_electrical_resistance` or None if not set
        """
        return self._data["Module Internal Electrical Resistance"]

    @module_internal_electrical_resistance.setter
    def module_internal_electrical_resistance(self, value=None):
        """  Corresponds to IDD Field `module_internal_electrical_resistance`
        A model parameter from manufacture or derived from test data.
        Internal resistance is assumed to be constant.
        The internal resistance is for each battery module.

        Args:
            value (float): value for IDD Field `module_internal_electrical_resistance`
                Units: ohms
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `module_internal_electrical_resistance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_internal_electrical_resistance`')

        self._data["Module Internal Electrical Resistance"] = value

    @property
    def maximum_module_discharging_current(self):
        """Get maximum_module_discharging_current

        Returns:
            float: the value of `maximum_module_discharging_current` or None if not set
        """
        return self._data["Maximum Module Discharging Current"]

    @maximum_module_discharging_current.setter
    def maximum_module_discharging_current(self, value=None):
        """  Corresponds to IDD Field `maximum_module_discharging_current`
        The constraint on discharging current is for each battery module.

        Args:
            value (float): value for IDD Field `maximum_module_discharging_current`
                Units: A
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_module_discharging_current`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_module_discharging_current`')

        self._data["Maximum Module Discharging Current"] = value

    @property
    def module_cutoff_voltage(self):
        """Get module_cutoff_voltage

        Returns:
            float: the value of `module_cutoff_voltage` or None if not set
        """
        return self._data["Module Cut-off Voltage"]

    @module_cutoff_voltage.setter
    def module_cutoff_voltage(self, value=None):
        """  Corresponds to IDD Field `module_cutoff_voltage`
        The voltage constraint is for each battery module.

        Args:
            value (float): value for IDD Field `module_cutoff_voltage`
                Units: V
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `module_cutoff_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_cutoff_voltage`')

        self._data["Module Cut-off Voltage"] = value

    @property
    def module_charge_rate_limit(self):
        """Get module_charge_rate_limit

        Returns:
            float: the value of `module_charge_rate_limit` or None if not set
        """
        return self._data["Module Charge Rate Limit"]

    @module_charge_rate_limit.setter
    def module_charge_rate_limit(self, value=1.0 ):
        """  Corresponds to IDD Field `module_charge_rate_limit`
        units 1/hr
        Charge rate limit is the division between charging current the remaining capacity.
        The constraint on charging current is for each module.

        Args:
            value (float): value for IDD Field `module_charge_rate_limit`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `module_charge_rate_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_charge_rate_limit`')

        self._data["Module Charge Rate Limit"] = value

    @property
    def battery_life_calculation(self):
        """Get battery_life_calculation

        Returns:
            str: the value of `battery_life_calculation` or None if not set
        """
        return self._data["Battery Life Calculation"]

    @battery_life_calculation.setter
    def battery_life_calculation(self, value="No"):
        """  Corresponds to IDD Field `battery_life_calculation`

        Args:
            value (str): value for IDD Field `battery_life_calculation`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `battery_life_calculation`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `battery_life_calculation`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `battery_life_calculation`'.format(value))

        self._data["Battery Life Calculation"] = value

    @property
    def number_of_cycle_bins(self):
        """Get number_of_cycle_bins

        Returns:
            int: the value of `number_of_cycle_bins` or None if not set
        """
        return self._data["Number of Cycle Bins"]

    @number_of_cycle_bins.setter
    def number_of_cycle_bins(self, value=10 ):
        """  Corresponds to IDD Field `number_of_cycle_bins`
        Only required when battery life calculation is activated

        Args:
            value (int): value for IDD Field `number_of_cycle_bins`
                Default value: 10
                value >= 5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_cycle_bins`'.format(value))
            if value < 5:
                raise ValueError('value need to be greater or equal 5 '
                                 'for field `number_of_cycle_bins`')

        self._data["Number of Cycle Bins"] = value

    @property
    def battery_life_curve_name(self):
        """Get battery_life_curve_name

        Returns:
            str: the value of `battery_life_curve_name` or None if not set
        """
        return self._data["Battery Life Curve Name"]

    @battery_life_curve_name.setter
    def battery_life_curve_name(self, value=None):
        """  Corresponds to IDD Field `battery_life_curve_name`
        Table:OneIndependentVariable object can also be used
        Determines the number of cycles to failure in relation to cycle range.
        Only required when battery life calculation is activated.

        Args:
            value (str): value for IDD Field `battery_life_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `battery_life_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `battery_life_curve_name`')

        self._data["Battery Life Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.radiative_fraction))
        out.append(self._to_str(self.number_of_battery_modules_in_parallel))
        out.append(self._to_str(self.number_of_battery_modules_in_series))
        out.append(self._to_str(self.maximum_module_capacity))
        out.append(self._to_str(self.initial_fractional_state_of_charge))
        out.append(self._to_str(self.fraction_of_available_charge_capacity))
        out.append(self._to_str(self.change_rate_from_bound_charge_to_available_charge))
        out.append(self._to_str(self.fully_charged_module_open_circuit_voltage))
        out.append(self._to_str(self.fully_discharged_module_open_circuit_voltage))
        out.append(self._to_str(self.voltage_change_curve_name_for_charging))
        out.append(self._to_str(self.voltage_change_curve_name_for_discharging))
        out.append(self._to_str(self.module_internal_electrical_resistance))
        out.append(self._to_str(self.maximum_module_discharging_current))
        out.append(self._to_str(self.module_cutoff_voltage))
        out.append(self._to_str(self.module_charge_rate_limit))
        out.append(self._to_str(self.battery_life_calculation))
        out.append(self._to_str(self.number_of_cycle_bins))
        out.append(self._to_str(self.battery_life_curve_name))
        return ",".join(out)

class ElectricLoadCenterTransformer(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Transformer`
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "ElectricLoadCenter:Transformer"
    field_count = 28
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Transformer`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Transformer Usage"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Rated Capacity"] = None
        self._data["Phase"] = None
        self._data["Conductor Material"] = None
        self._data["Full Load Temperature Rise"] = None
        self._data["Fraction of Eddy Current Losses"] = None
        self._data["Performance Input Method"] = None
        self._data["Rated No Load Loss"] = None
        self._data["Rated Load Loss"] = None
        self._data["Nameplate Efficiency"] = None
        self._data["Per Unit Load for Nameplate Efficiency"] = None
        self._data["Reference Temperature for Nameplate Efficiency"] = None
        self._data["Per Unit Load for Maximum Efficiency"] = None
        self._data["Consider Transformer Loss for Utility Cost"] = None
        self._data["Meter 1 Name"] = None
        self._data["Meter 2 Name"] = None
        self._data["Meter 3 Name"] = None
        self._data["Meter 4 Name"] = None
        self._data["Meter 5 Name"] = None
        self._data["Meter 6 Name"] = None
        self._data["Meter 7 Name"] = None
        self._data["Meter 8 Name"] = None
        self._data["Meter 9 Name"] = None
        self._data["Meter 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.transformer_usage = None
        else:
            self.transformer_usage = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_capacity = None
        else:
            self.rated_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.phase = None
        else:
            self.phase = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.conductor_material = None
        else:
            self.conductor_material = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.full_load_temperature_rise = None
        else:
            self.full_load_temperature_rise = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_eddy_current_losses = None
        else:
            self.fraction_of_eddy_current_losses = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.performance_input_method = None
        else:
            self.performance_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_no_load_loss = None
        else:
            self.rated_no_load_loss = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_load_loss = None
        else:
            self.rated_load_loss = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nameplate_efficiency = None
        else:
            self.nameplate_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.per_unit_load_for_nameplate_efficiency = None
        else:
            self.per_unit_load_for_nameplate_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_temperature_for_nameplate_efficiency = None
        else:
            self.reference_temperature_for_nameplate_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.per_unit_load_for_maximum_efficiency = None
        else:
            self.per_unit_load_for_maximum_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.consider_transformer_loss_for_utility_cost = None
        else:
            self.consider_transformer_loss_for_utility_cost = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_1_name = None
        else:
            self.meter_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_2_name = None
        else:
            self.meter_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_3_name = None
        else:
            self.meter_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_4_name = None
        else:
            self.meter_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_5_name = None
        else:
            self.meter_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_6_name = None
        else:
            self.meter_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_7_name = None
        else:
            self.meter_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_8_name = None
        else:
            self.meter_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_9_name = None
        else:
            self.meter_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.meter_10_name = None
        else:
            self.meter_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def transformer_usage(self):
        """Get transformer_usage

        Returns:
            str: the value of `transformer_usage` or None if not set
        """
        return self._data["Transformer Usage"]

    @transformer_usage.setter
    def transformer_usage(self, value="PowerInFromGrid"):
        """  Corresponds to IDD Field `transformer_usage`
        A transformer can be used to transfer electric energy from utility grid to
        building (PowerInFromGrid)or from building onsite generation to
        the grid (PowerOutFromOnsiteGeneration)

        Args:
            value (str): value for IDD Field `transformer_usage`
                Accepted values are:
                      - PowerInFromGrid
                      - PowerOutFromOnsiteGeneration
                Default value: PowerInFromGrid
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `transformer_usage`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transformer_usage`')
            vals = set()
            vals.add("PowerInFromGrid")
            vals.add("PowerOutFromOnsiteGeneration")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `transformer_usage`'.format(value))

        self._data["Transformer Usage"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Enter name of zone to receive transformer losses as heat
        if blank then transformer losses are dissipated to outdoors

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=0.0 ):
        """  Corresponds to IDD Field `radiative_fraction`

        Args:
            value (float): value for IDD Field `radiative_fraction`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction`')

        self._data["Radiative Fraction"] = value

    @property
    def rated_capacity(self):
        """Get rated_capacity

        Returns:
            float: the value of `rated_capacity` or None if not set
        """
        return self._data["Rated Capacity"]

    @rated_capacity.setter
    def rated_capacity(self, value=None):
        """  Corresponds to IDD Field `rated_capacity`
        the unit is VA, instead of kVA as usually shown on transformer nameplates.

        Args:
            value (float): value for IDD Field `rated_capacity`
                Units: VA
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_capacity`')

        self._data["Rated Capacity"] = value

    @property
    def phase(self):
        """Get phase

        Returns:
            str: the value of `phase` or None if not set
        """
        return self._data["Phase"]

    @phase.setter
    def phase(self, value="3"):
        """  Corresponds to IDD Field `phase`
        Must be single or three phase transformer.
        NOT used in the current model.

        Args:
            value (str): value for IDD Field `phase`
                Accepted values are:
                      - 1
                      - 3
                Default value: 3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `phase`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `phase`')
            vals = set()
            vals.add("1")
            vals.add("3")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `phase`'.format(value))

        self._data["Phase"] = value

    @property
    def conductor_material(self):
        """Get conductor_material

        Returns:
            str: the value of `conductor_material` or None if not set
        """
        return self._data["Conductor Material"]

    @conductor_material.setter
    def conductor_material(self, value="Aluminum"):
        """  Corresponds to IDD Field `conductor_material`
        Winding material used by the transformer.

        Args:
            value (str): value for IDD Field `conductor_material`
                Accepted values are:
                      - Copper
                      - Aluminum
                Default value: Aluminum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `conductor_material`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `conductor_material`')
            vals = set()
            vals.add("Copper")
            vals.add("Aluminum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `conductor_material`'.format(value))

        self._data["Conductor Material"] = value

    @property
    def full_load_temperature_rise(self):
        """Get full_load_temperature_rise

        Returns:
            float: the value of `full_load_temperature_rise` or None if not set
        """
        return self._data["Full Load Temperature Rise"]

    @full_load_temperature_rise.setter
    def full_load_temperature_rise(self, value=150.0 ):
        """  Corresponds to IDD Field `full_load_temperature_rise`

        Args:
            value (float): value for IDD Field `full_load_temperature_rise`
                Units: C
                Default value: 150.0
                value >= 50.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `full_load_temperature_rise`'.format(value))
            if value < 50.0:
                raise ValueError('value need to be greater or equal 50.0 '
                                 'for field `full_load_temperature_rise`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `full_load_temperature_rise`')

        self._data["Full Load Temperature Rise"] = value

    @property
    def fraction_of_eddy_current_losses(self):
        """Get fraction_of_eddy_current_losses

        Returns:
            float: the value of `fraction_of_eddy_current_losses` or None if not set
        """
        return self._data["Fraction of Eddy Current Losses"]

    @fraction_of_eddy_current_losses.setter
    def fraction_of_eddy_current_losses(self, value=0.1 ):
        """  Corresponds to IDD Field `fraction_of_eddy_current_losses`

        Args:
            value (float): value for IDD Field `fraction_of_eddy_current_losses`
                Default value: 0.1
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_eddy_current_losses`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_eddy_current_losses`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_eddy_current_losses`')

        self._data["Fraction of Eddy Current Losses"] = value

    @property
    def performance_input_method(self):
        """Get performance_input_method

        Returns:
            str: the value of `performance_input_method` or None if not set
        """
        return self._data["Performance Input Method"]

    @performance_input_method.setter
    def performance_input_method(self, value="RatedLosses"):
        """  Corresponds to IDD Field `performance_input_method`
        User can define transformer performance by specifying
        load and no load losses at rated conditions or
        nameplate efficiency and maximum efficiency

        Args:
            value (str): value for IDD Field `performance_input_method`
                Accepted values are:
                      - RatedLosses
                      - NominalEfficiency
                Default value: RatedLosses
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `performance_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `performance_input_method`')
            vals = set()
            vals.add("RatedLosses")
            vals.add("NominalEfficiency")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `performance_input_method`'.format(value))

        self._data["Performance Input Method"] = value

    @property
    def rated_no_load_loss(self):
        """Get rated_no_load_loss

        Returns:
            float: the value of `rated_no_load_loss` or None if not set
        """
        return self._data["Rated No Load Loss"]

    @rated_no_load_loss.setter
    def rated_no_load_loss(self, value=None):
        """  Corresponds to IDD Field `rated_no_load_loss`
        Only required when RatedLosses is the performance input method

        Args:
            value (float): value for IDD Field `rated_no_load_loss`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_no_load_loss`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_no_load_loss`')

        self._data["Rated No Load Loss"] = value

    @property
    def rated_load_loss(self):
        """Get rated_load_loss

        Returns:
            float: the value of `rated_load_loss` or None if not set
        """
        return self._data["Rated Load Loss"]

    @rated_load_loss.setter
    def rated_load_loss(self, value=None):
        """  Corresponds to IDD Field `rated_load_loss`
        Only required when RatedLosses is the performance input method

        Args:
            value (float): value for IDD Field `rated_load_loss`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_load_loss`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_load_loss`')

        self._data["Rated Load Loss"] = value

    @property
    def nameplate_efficiency(self):
        """Get nameplate_efficiency

        Returns:
            float: the value of `nameplate_efficiency` or None if not set
        """
        return self._data["Nameplate Efficiency"]

    @nameplate_efficiency.setter
    def nameplate_efficiency(self, value=0.98 ):
        """  Corresponds to IDD Field `nameplate_efficiency`
        Only required when NominalEfficiency is the performance input method

        Args:
            value (float): value for IDD Field `nameplate_efficiency`
                Default value: 0.98
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nameplate_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nameplate_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nameplate_efficiency`')

        self._data["Nameplate Efficiency"] = value

    @property
    def per_unit_load_for_nameplate_efficiency(self):
        """Get per_unit_load_for_nameplate_efficiency

        Returns:
            float: the value of `per_unit_load_for_nameplate_efficiency` or None if not set
        """
        return self._data["Per Unit Load for Nameplate Efficiency"]

    @per_unit_load_for_nameplate_efficiency.setter
    def per_unit_load_for_nameplate_efficiency(self, value=0.35 ):
        """  Corresponds to IDD Field `per_unit_load_for_nameplate_efficiency`
        Percentage of the rated capacity at which the nameplate efficiency is defined
        Only required when NominalEfficiency is the performance input method

        Args:
            value (float): value for IDD Field `per_unit_load_for_nameplate_efficiency`
                Default value: 0.35
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `per_unit_load_for_nameplate_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `per_unit_load_for_nameplate_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `per_unit_load_for_nameplate_efficiency`')

        self._data["Per Unit Load for Nameplate Efficiency"] = value

    @property
    def reference_temperature_for_nameplate_efficiency(self):
        """Get reference_temperature_for_nameplate_efficiency

        Returns:
            float: the value of `reference_temperature_for_nameplate_efficiency` or None if not set
        """
        return self._data["Reference Temperature for Nameplate Efficiency"]

    @reference_temperature_for_nameplate_efficiency.setter
    def reference_temperature_for_nameplate_efficiency(self, value=75.0 ):
        """  Corresponds to IDD Field `reference_temperature_for_nameplate_efficiency`
        Conductor operating temperature at which the nameplate efficiency is defined
        Only required when NominalEfficiency is the performance input method

        Args:
            value (float): value for IDD Field `reference_temperature_for_nameplate_efficiency`
                Units: C
                Default value: 75.0
                value >= 20.0
                value <= 150.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_temperature_for_nameplate_efficiency`'.format(value))
            if value < 20.0:
                raise ValueError('value need to be greater or equal 20.0 '
                                 'for field `reference_temperature_for_nameplate_efficiency`')
            if value > 150.0:
                raise ValueError('value need to be smaller 150.0 '
                                 'for field `reference_temperature_for_nameplate_efficiency`')

        self._data["Reference Temperature for Nameplate Efficiency"] = value

    @property
    def per_unit_load_for_maximum_efficiency(self):
        """Get per_unit_load_for_maximum_efficiency

        Returns:
            float: the value of `per_unit_load_for_maximum_efficiency` or None if not set
        """
        return self._data["Per Unit Load for Maximum Efficiency"]

    @per_unit_load_for_maximum_efficiency.setter
    def per_unit_load_for_maximum_efficiency(self, value=None):
        """  Corresponds to IDD Field `per_unit_load_for_maximum_efficiency`
        Percentage of the rate capacity at which the maximum efficiency is obtained
        Only required when NominalEfficiency is the performance input method

        Args:
            value (float): value for IDD Field `per_unit_load_for_maximum_efficiency`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `per_unit_load_for_maximum_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `per_unit_load_for_maximum_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `per_unit_load_for_maximum_efficiency`')

        self._data["Per Unit Load for Maximum Efficiency"] = value

    @property
    def consider_transformer_loss_for_utility_cost(self):
        """Get consider_transformer_loss_for_utility_cost

        Returns:
            str: the value of `consider_transformer_loss_for_utility_cost` or None if not set
        """
        return self._data["Consider Transformer Loss for Utility Cost"]

    @consider_transformer_loss_for_utility_cost.setter
    def consider_transformer_loss_for_utility_cost(self, value="Yes"):
        """  Corresponds to IDD Field `consider_transformer_loss_for_utility_cost`
        Only required when the transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `consider_transformer_loss_for_utility_cost`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `consider_transformer_loss_for_utility_cost`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `consider_transformer_loss_for_utility_cost`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `consider_transformer_loss_for_utility_cost`'.format(value))

        self._data["Consider Transformer Loss for Utility Cost"] = value

    @property
    def meter_1_name(self):
        """Get meter_1_name

        Returns:
            str: the value of `meter_1_name` or None if not set
        """
        return self._data["Meter 1 Name"]

    @meter_1_name.setter
    def meter_1_name(self, value=None):
        """  Corresponds to IDD Field `meter_1_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_1_name`')

        self._data["Meter 1 Name"] = value

    @property
    def meter_2_name(self):
        """Get meter_2_name

        Returns:
            str: the value of `meter_2_name` or None if not set
        """
        return self._data["Meter 2 Name"]

    @meter_2_name.setter
    def meter_2_name(self, value=None):
        """  Corresponds to IDD Field `meter_2_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_2_name`')

        self._data["Meter 2 Name"] = value

    @property
    def meter_3_name(self):
        """Get meter_3_name

        Returns:
            str: the value of `meter_3_name` or None if not set
        """
        return self._data["Meter 3 Name"]

    @meter_3_name.setter
    def meter_3_name(self, value=None):
        """  Corresponds to IDD Field `meter_3_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_3_name`')

        self._data["Meter 3 Name"] = value

    @property
    def meter_4_name(self):
        """Get meter_4_name

        Returns:
            str: the value of `meter_4_name` or None if not set
        """
        return self._data["Meter 4 Name"]

    @meter_4_name.setter
    def meter_4_name(self, value=None):
        """  Corresponds to IDD Field `meter_4_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_4_name`')

        self._data["Meter 4 Name"] = value

    @property
    def meter_5_name(self):
        """Get meter_5_name

        Returns:
            str: the value of `meter_5_name` or None if not set
        """
        return self._data["Meter 5 Name"]

    @meter_5_name.setter
    def meter_5_name(self, value=None):
        """  Corresponds to IDD Field `meter_5_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_5_name`')

        self._data["Meter 5 Name"] = value

    @property
    def meter_6_name(self):
        """Get meter_6_name

        Returns:
            str: the value of `meter_6_name` or None if not set
        """
        return self._data["Meter 6 Name"]

    @meter_6_name.setter
    def meter_6_name(self, value=None):
        """  Corresponds to IDD Field `meter_6_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_6_name`')

        self._data["Meter 6 Name"] = value

    @property
    def meter_7_name(self):
        """Get meter_7_name

        Returns:
            str: the value of `meter_7_name` or None if not set
        """
        return self._data["Meter 7 Name"]

    @meter_7_name.setter
    def meter_7_name(self, value=None):
        """  Corresponds to IDD Field `meter_7_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_7_name`')

        self._data["Meter 7 Name"] = value

    @property
    def meter_8_name(self):
        """Get meter_8_name

        Returns:
            str: the value of `meter_8_name` or None if not set
        """
        return self._data["Meter 8 Name"]

    @meter_8_name.setter
    def meter_8_name(self, value=None):
        """  Corresponds to IDD Field `meter_8_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_8_name`')

        self._data["Meter 8 Name"] = value

    @property
    def meter_9_name(self):
        """Get meter_9_name

        Returns:
            str: the value of `meter_9_name` or None if not set
        """
        return self._data["Meter 9 Name"]

    @meter_9_name.setter
    def meter_9_name(self, value=None):
        """  Corresponds to IDD Field `meter_9_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_9_name`')

        self._data["Meter 9 Name"] = value

    @property
    def meter_10_name(self):
        """Get meter_10_name

        Returns:
            str: the value of `meter_10_name` or None if not set
        """
        return self._data["Meter 10 Name"]

    @meter_10_name.setter
    def meter_10_name(self, value=None):
        """  Corresponds to IDD Field `meter_10_name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `meter_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `meter_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_10_name`')

        self._data["Meter 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.transformer_usage))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.radiative_fraction))
        out.append(self._to_str(self.rated_capacity))
        out.append(self._to_str(self.phase))
        out.append(self._to_str(self.conductor_material))
        out.append(self._to_str(self.full_load_temperature_rise))
        out.append(self._to_str(self.fraction_of_eddy_current_losses))
        out.append(self._to_str(self.performance_input_method))
        out.append(self._to_str(self.rated_no_load_loss))
        out.append(self._to_str(self.rated_load_loss))
        out.append(self._to_str(self.nameplate_efficiency))
        out.append(self._to_str(self.per_unit_load_for_nameplate_efficiency))
        out.append(self._to_str(self.reference_temperature_for_nameplate_efficiency))
        out.append(self._to_str(self.per_unit_load_for_maximum_efficiency))
        out.append(self._to_str(self.consider_transformer_loss_for_utility_cost))
        out.append(self._to_str(self.meter_1_name))
        out.append(self._to_str(self.meter_2_name))
        out.append(self._to_str(self.meter_3_name))
        out.append(self._to_str(self.meter_4_name))
        out.append(self._to_str(self.meter_5_name))
        out.append(self._to_str(self.meter_6_name))
        out.append(self._to_str(self.meter_7_name))
        out.append(self._to_str(self.meter_8_name))
        out.append(self._to_str(self.meter_9_name))
        out.append(self._to_str(self.meter_10_name))
        return ",".join(out)

class ElectricLoadCenterDistribution(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Distribution`
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "ElectricLoadCenter:Distribution"
    field_count = 10
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Distribution`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Generator List Name"] = None
        self._data["Generator Operation Scheme Type"] = None
        self._data["Demand Limit Scheme Purchased Electric Demand Limit"] = None
        self._data["Track Schedule Name Scheme Schedule Name"] = None
        self._data["Track Meter Scheme Meter Name"] = None
        self._data["Electrical Buss Type"] = None
        self._data["Inverter Object Name"] = None
        self._data["Electrical Storage Object Name"] = None
        self._data["Transformer Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_list_name = None
        else:
            self.generator_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_operation_scheme_type = None
        else:
            self.generator_operation_scheme_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_limit_scheme_purchased_electric_demand_limit = None
        else:
            self.demand_limit_scheme_purchased_electric_demand_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.track_schedule_name_scheme_schedule_name = None
        else:
            self.track_schedule_name_scheme_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.track_meter_scheme_meter_name = None
        else:
            self.track_meter_scheme_meter_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_buss_type = None
        else:
            self.electrical_buss_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inverter_object_name = None
        else:
            self.inverter_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_storage_object_name = None
        else:
            self.electrical_storage_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.transformer_object_name = None
        else:
            self.transformer_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def generator_list_name(self):
        """Get generator_list_name

        Returns:
            str: the value of `generator_list_name` or None if not set
        """
        return self._data["Generator List Name"]

    @generator_list_name.setter
    def generator_list_name(self, value=None):
        """  Corresponds to IDD Field `generator_list_name`

        Args:
            value (str): value for IDD Field `generator_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_list_name`')

        self._data["Generator List Name"] = value

    @property
    def generator_operation_scheme_type(self):
        """Get generator_operation_scheme_type

        Returns:
            str: the value of `generator_operation_scheme_type` or None if not set
        """
        return self._data["Generator Operation Scheme Type"]

    @generator_operation_scheme_type.setter
    def generator_operation_scheme_type(self, value=None):
        """  Corresponds to IDD Field `generator_operation_scheme_type`
        required if Generator List is entered.

        Args:
            value (str): value for IDD Field `generator_operation_scheme_type`
                Accepted values are:
                      - Baseload
                      - DemandLimit
                      - TrackElectrical
                      - TrackSchedule
                      - TrackMeter
                      - FollowThermal
                      - FollowThermalLimitElectrical
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_operation_scheme_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_operation_scheme_type`')
            vals = set()
            vals.add("Baseload")
            vals.add("DemandLimit")
            vals.add("TrackElectrical")
            vals.add("TrackSchedule")
            vals.add("TrackMeter")
            vals.add("FollowThermal")
            vals.add("FollowThermalLimitElectrical")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `generator_operation_scheme_type`'.format(value))

        self._data["Generator Operation Scheme Type"] = value

    @property
    def demand_limit_scheme_purchased_electric_demand_limit(self):
        """Get demand_limit_scheme_purchased_electric_demand_limit

        Returns:
            float: the value of `demand_limit_scheme_purchased_electric_demand_limit` or None if not set
        """
        return self._data["Demand Limit Scheme Purchased Electric Demand Limit"]

    @demand_limit_scheme_purchased_electric_demand_limit.setter
    def demand_limit_scheme_purchased_electric_demand_limit(self, value=None):
        """  Corresponds to IDD Field `demand_limit_scheme_purchased_electric_demand_limit`

        Args:
            value (float): value for IDD Field `demand_limit_scheme_purchased_electric_demand_limit`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `demand_limit_scheme_purchased_electric_demand_limit`'.format(value))

        self._data["Demand Limit Scheme Purchased Electric Demand Limit"] = value

    @property
    def track_schedule_name_scheme_schedule_name(self):
        """Get track_schedule_name_scheme_schedule_name

        Returns:
            str: the value of `track_schedule_name_scheme_schedule_name` or None if not set
        """
        return self._data["Track Schedule Name Scheme Schedule Name"]

    @track_schedule_name_scheme_schedule_name.setter
    def track_schedule_name_scheme_schedule_name(self, value=None):
        """  Corresponds to IDD Field `track_schedule_name_scheme_schedule_name`
        required when Generator Operation Scheme Type=TrackSchedule

        Args:
            value (str): value for IDD Field `track_schedule_name_scheme_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `track_schedule_name_scheme_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `track_schedule_name_scheme_schedule_name`')

        self._data["Track Schedule Name Scheme Schedule Name"] = value

    @property
    def track_meter_scheme_meter_name(self):
        """Get track_meter_scheme_meter_name

        Returns:
            str: the value of `track_meter_scheme_meter_name` or None if not set
        """
        return self._data["Track Meter Scheme Meter Name"]

    @track_meter_scheme_meter_name.setter
    def track_meter_scheme_meter_name(self, value=None):
        """  Corresponds to IDD Field `track_meter_scheme_meter_name`
        required when Generator Operation Scheme Type=TrackMeter

        Args:
            value (str): value for IDD Field `track_meter_scheme_meter_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `track_meter_scheme_meter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `track_meter_scheme_meter_name`')

        self._data["Track Meter Scheme Meter Name"] = value

    @property
    def electrical_buss_type(self):
        """Get electrical_buss_type

        Returns:
            str: the value of `electrical_buss_type` or None if not set
        """
        return self._data["Electrical Buss Type"]

    @electrical_buss_type.setter
    def electrical_buss_type(self, value="AlternatingCurrent"):
        """  Corresponds to IDD Field `electrical_buss_type`

        Args:
            value (str): value for IDD Field `electrical_buss_type`
                Accepted values are:
                      - AlternatingCurrent
                      - AlternatingCurrentWithStorage
                      - DirectCurrentWithInverter
                      - DirectCurrentWithInverterDCStorage
                      - DirectCurrentWithInverterACStorage
                Default value: AlternatingCurrent
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_buss_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_buss_type`')
            vals = set()
            vals.add("AlternatingCurrent")
            vals.add("AlternatingCurrentWithStorage")
            vals.add("DirectCurrentWithInverter")
            vals.add("DirectCurrentWithInverterDCStorage")
            vals.add("DirectCurrentWithInverterACStorage")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `electrical_buss_type`'.format(value))

        self._data["Electrical Buss Type"] = value

    @property
    def inverter_object_name(self):
        """Get inverter_object_name

        Returns:
            str: the value of `inverter_object_name` or None if not set
        """
        return self._data["Inverter Object Name"]

    @inverter_object_name.setter
    def inverter_object_name(self, value=None):
        """  Corresponds to IDD Field `inverter_object_name`
        required when Electrical Buss Type=DirectCurrentWithInverter, DirectCurrentWithInverterDCStorage,
        or DirectCurrentWithInverterACStorage

        Args:
            value (str): value for IDD Field `inverter_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inverter_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inverter_object_name`')

        self._data["Inverter Object Name"] = value

    @property
    def electrical_storage_object_name(self):
        """Get electrical_storage_object_name

        Returns:
            str: the value of `electrical_storage_object_name` or None if not set
        """
        return self._data["Electrical Storage Object Name"]

    @electrical_storage_object_name.setter
    def electrical_storage_object_name(self, value=None):
        """  Corresponds to IDD Field `electrical_storage_object_name`
        required when Electrical Buss Type=AlternatingCurrentWithStorage, DirectCurrentWithInverterDCStorage,
        or DirectCurrentWithInverterACStorage

        Args:
            value (str): value for IDD Field `electrical_storage_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_storage_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_storage_object_name`')

        self._data["Electrical Storage Object Name"] = value

    @property
    def transformer_object_name(self):
        """Get transformer_object_name

        Returns:
            str: the value of `transformer_object_name` or None if not set
        """
        return self._data["Transformer Object Name"]

    @transformer_object_name.setter
    def transformer_object_name(self, value=None):
        """  Corresponds to IDD Field `transformer_object_name`
        required when power needs to be output from onsite generation to the grid via transformer

        Args:
            value (str): value for IDD Field `transformer_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `transformer_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transformer_object_name`')

        self._data["Transformer Object Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.generator_list_name))
        out.append(self._to_str(self.generator_operation_scheme_type))
        out.append(self._to_str(self.demand_limit_scheme_purchased_electric_demand_limit))
        out.append(self._to_str(self.track_schedule_name_scheme_schedule_name))
        out.append(self._to_str(self.track_meter_scheme_meter_name))
        out.append(self._to_str(self.electrical_buss_type))
        out.append(self._to_str(self.inverter_object_name))
        out.append(self._to_str(self.electrical_storage_object_name))
        out.append(self._to_str(self.transformer_object_name))
        return ",".join(out)

class WaterUseEquipment(object):
    """ Corresponds to IDD object `WaterUse:Equipment`
        A generalized object for simulating all water end uses. Hot and cold water uses are
        included, as well as controlled mixing of hot and cold water at the tap. The
        WaterUse:Equipment object can be used stand-alone, or coupled into a plant loop using
        the WaterUse:Connections object (see below). The WaterUse:Connections object allows
        water uses to be linked to WaterUse:Storage objects to store and draw reclaimed water.
        The object can also simulate drainwater heat recovery.
    
    """
    internal_name = "WaterUse:Equipment"
    field_count = 10
    required_fields = ["Name", "Peak Flow Rate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WaterUse:Equipment`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Peak Flow Rate"] = None
        self._data["Flow Rate Fraction Schedule Name"] = None
        self._data["Target Temperature Schedule Name"] = None
        self._data["Hot Water Supply Temperature Schedule Name"] = None
        self._data["Cold Water Supply Temperature Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Sensible Fraction Schedule Name"] = None
        self._data["Latent Fraction Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.peak_flow_rate = None
        else:
            self.peak_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_rate_fraction_schedule_name = None
        else:
            self.flow_rate_fraction_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.target_temperature_schedule_name = None
        else:
            self.target_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_supply_temperature_schedule_name = None
        else:
            self.hot_water_supply_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_water_supply_temperature_schedule_name = None
        else:
            self.cold_water_supply_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_fraction_schedule_name = None
        else:
            self.sensible_fraction_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_fraction_schedule_name = None
        else:
            self.latent_fraction_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `enduse_subcategory`

        Args:
            value (str): value for IDD Field `enduse_subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')

        self._data["End-Use Subcategory"] = value

    @property
    def peak_flow_rate(self):
        """Get peak_flow_rate

        Returns:
            float: the value of `peak_flow_rate` or None if not set
        """
        return self._data["Peak Flow Rate"]

    @peak_flow_rate.setter
    def peak_flow_rate(self, value=None):
        """  Corresponds to IDD Field `peak_flow_rate`

        Args:
            value (float): value for IDD Field `peak_flow_rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `peak_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `peak_flow_rate`')

        self._data["Peak Flow Rate"] = value

    @property
    def flow_rate_fraction_schedule_name(self):
        """Get flow_rate_fraction_schedule_name

        Returns:
            str: the value of `flow_rate_fraction_schedule_name` or None if not set
        """
        return self._data["Flow Rate Fraction Schedule Name"]

    @flow_rate_fraction_schedule_name.setter
    def flow_rate_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `flow_rate_fraction_schedule_name`
        Defaults to 1.0 at all times

        Args:
            value (str): value for IDD Field `flow_rate_fraction_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `flow_rate_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `flow_rate_fraction_schedule_name`')

        self._data["Flow Rate Fraction Schedule Name"] = value

    @property
    def target_temperature_schedule_name(self):
        """Get target_temperature_schedule_name

        Returns:
            str: the value of `target_temperature_schedule_name` or None if not set
        """
        return self._data["Target Temperature Schedule Name"]

    @target_temperature_schedule_name.setter
    def target_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `target_temperature_schedule_name`
        Defaults to hot water supply temperature

        Args:
            value (str): value for IDD Field `target_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `target_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `target_temperature_schedule_name`')

        self._data["Target Temperature Schedule Name"] = value

    @property
    def hot_water_supply_temperature_schedule_name(self):
        """Get hot_water_supply_temperature_schedule_name

        Returns:
            str: the value of `hot_water_supply_temperature_schedule_name` or None if not set
        """
        return self._data["Hot Water Supply Temperature Schedule Name"]

    @hot_water_supply_temperature_schedule_name.setter
    def hot_water_supply_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_supply_temperature_schedule_name`
        Defaults to cold water supply temperature

        Args:
            value (str): value for IDD Field `hot_water_supply_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_supply_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_supply_temperature_schedule_name`')

        self._data["Hot Water Supply Temperature Schedule Name"] = value

    @property
    def cold_water_supply_temperature_schedule_name(self):
        """Get cold_water_supply_temperature_schedule_name

        Returns:
            str: the value of `cold_water_supply_temperature_schedule_name` or None if not set
        """
        return self._data["Cold Water Supply Temperature Schedule Name"]

    @cold_water_supply_temperature_schedule_name.setter
    def cold_water_supply_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cold_water_supply_temperature_schedule_name`
        Defaults to water temperatures calculated by Site:WaterMainsTemperature object

        Args:
            value (str): value for IDD Field `cold_water_supply_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cold_water_supply_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cold_water_supply_temperature_schedule_name`')

        self._data["Cold Water Supply Temperature Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def sensible_fraction_schedule_name(self):
        """Get sensible_fraction_schedule_name

        Returns:
            str: the value of `sensible_fraction_schedule_name` or None if not set
        """
        return self._data["Sensible Fraction Schedule Name"]

    @sensible_fraction_schedule_name.setter
    def sensible_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `sensible_fraction_schedule_name`
        Defaults to 0.0 at all times

        Args:
            value (str): value for IDD Field `sensible_fraction_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `sensible_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sensible_fraction_schedule_name`')

        self._data["Sensible Fraction Schedule Name"] = value

    @property
    def latent_fraction_schedule_name(self):
        """Get latent_fraction_schedule_name

        Returns:
            str: the value of `latent_fraction_schedule_name` or None if not set
        """
        return self._data["Latent Fraction Schedule Name"]

    @latent_fraction_schedule_name.setter
    def latent_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `latent_fraction_schedule_name`
        Defaults to 0.0 at all times

        Args:
            value (str): value for IDD Field `latent_fraction_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `latent_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `latent_fraction_schedule_name`')

        self._data["Latent Fraction Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.enduse_subcategory))
        out.append(self._to_str(self.peak_flow_rate))
        out.append(self._to_str(self.flow_rate_fraction_schedule_name))
        out.append(self._to_str(self.target_temperature_schedule_name))
        out.append(self._to_str(self.hot_water_supply_temperature_schedule_name))
        out.append(self._to_str(self.cold_water_supply_temperature_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.sensible_fraction_schedule_name))
        out.append(self._to_str(self.latent_fraction_schedule_name))
        return ",".join(out)

class WaterUseConnections(object):
    """ Corresponds to IDD object `WaterUse:Connections`
        A subsystem that groups together multiple WaterUse:Equipment components.
        As its name suggests, the object provides connections that are shared by these
        components, including: 1. Inlet node and outlet node connections to a plant loop
        2. Connections to WaterUse:Storage objects to store and draw reclaimed water
        3. Internal connections to simulate drainwater heat recovery.
    
    """
    internal_name = "WaterUse:Connections"
    field_count = 20
    required_fields = ["Name", "Water Use Equipment 1 Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WaterUse:Connections`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Supply Water Storage Tank Name"] = None
        self._data["Reclamation Water Storage Tank Name"] = None
        self._data["Hot Water Supply Temperature Schedule Name"] = None
        self._data["Cold Water Supply Temperature Schedule Name"] = None
        self._data["Drain Water Heat Exchanger Type"] = None
        self._data["Drain Water Heat Exchanger Destination"] = None
        self._data["Drain Water Heat Exchanger U-Factor Times Area"] = None
        self._data["Water Use Equipment 1 Name"] = None
        self._data["Water Use Equipment 2 Name"] = None
        self._data["Water Use Equipment 3 Name"] = None
        self._data["Water Use Equipment 4 Name"] = None
        self._data["Water Use Equipment 5 Name"] = None
        self._data["Water Use Equipment 6 Name"] = None
        self._data["Water Use Equipment 7 Name"] = None
        self._data["Water Use Equipment 8 Name"] = None
        self._data["Water Use Equipment 9 Name"] = None
        self._data["Water Use Equipment 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_water_storage_tank_name = None
        else:
            self.supply_water_storage_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reclamation_water_storage_tank_name = None
        else:
            self.reclamation_water_storage_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_supply_temperature_schedule_name = None
        else:
            self.hot_water_supply_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_water_supply_temperature_schedule_name = None
        else:
            self.cold_water_supply_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drain_water_heat_exchanger_type = None
        else:
            self.drain_water_heat_exchanger_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drain_water_heat_exchanger_destination = None
        else:
            self.drain_water_heat_exchanger_destination = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drain_water_heat_exchanger_ufactor_times_area = None
        else:
            self.drain_water_heat_exchanger_ufactor_times_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_1_name = None
        else:
            self.water_use_equipment_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_2_name = None
        else:
            self.water_use_equipment_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_3_name = None
        else:
            self.water_use_equipment_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_4_name = None
        else:
            self.water_use_equipment_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_5_name = None
        else:
            self.water_use_equipment_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_6_name = None
        else:
            self.water_use_equipment_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_7_name = None
        else:
            self.water_use_equipment_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_8_name = None
        else:
            self.water_use_equipment_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_9_name = None
        else:
            self.water_use_equipment_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_use_equipment_10_name = None
        else:
            self.water_use_equipment_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set
        """
        return self._data["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `supply_water_storage_tank_name`
        If blank, or tank is empty, defaults to fresh water from the mains

        Args:
            value (str): value for IDD Field `supply_water_storage_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_water_storage_tank_name`')

        self._data["Supply Water Storage Tank Name"] = value

    @property
    def reclamation_water_storage_tank_name(self):
        """Get reclamation_water_storage_tank_name

        Returns:
            str: the value of `reclamation_water_storage_tank_name` or None if not set
        """
        return self._data["Reclamation Water Storage Tank Name"]

    @reclamation_water_storage_tank_name.setter
    def reclamation_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `reclamation_water_storage_tank_name`

        Args:
            value (str): value for IDD Field `reclamation_water_storage_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reclamation_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reclamation_water_storage_tank_name`')

        self._data["Reclamation Water Storage Tank Name"] = value

    @property
    def hot_water_supply_temperature_schedule_name(self):
        """Get hot_water_supply_temperature_schedule_name

        Returns:
            str: the value of `hot_water_supply_temperature_schedule_name` or None if not set
        """
        return self._data["Hot Water Supply Temperature Schedule Name"]

    @hot_water_supply_temperature_schedule_name.setter
    def hot_water_supply_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_supply_temperature_schedule_name`
        Defaults to cold water supply temperature

        Args:
            value (str): value for IDD Field `hot_water_supply_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_supply_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_supply_temperature_schedule_name`')

        self._data["Hot Water Supply Temperature Schedule Name"] = value

    @property
    def cold_water_supply_temperature_schedule_name(self):
        """Get cold_water_supply_temperature_schedule_name

        Returns:
            str: the value of `cold_water_supply_temperature_schedule_name` or None if not set
        """
        return self._data["Cold Water Supply Temperature Schedule Name"]

    @cold_water_supply_temperature_schedule_name.setter
    def cold_water_supply_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cold_water_supply_temperature_schedule_name`
        Defaults to water temperatures calculated by Site:WaterMainsTemperature object

        Args:
            value (str): value for IDD Field `cold_water_supply_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cold_water_supply_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cold_water_supply_temperature_schedule_name`')

        self._data["Cold Water Supply Temperature Schedule Name"] = value

    @property
    def drain_water_heat_exchanger_type(self):
        """Get drain_water_heat_exchanger_type

        Returns:
            str: the value of `drain_water_heat_exchanger_type` or None if not set
        """
        return self._data["Drain Water Heat Exchanger Type"]

    @drain_water_heat_exchanger_type.setter
    def drain_water_heat_exchanger_type(self, value="None"):
        """  Corresponds to IDD Field `drain_water_heat_exchanger_type`

        Args:
            value (str): value for IDD Field `drain_water_heat_exchanger_type`
                Accepted values are:
                      - None
                      - Ideal
                      - CounterFlow
                      - CrossFlow
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drain_water_heat_exchanger_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drain_water_heat_exchanger_type`')
            vals = set()
            vals.add("None")
            vals.add("Ideal")
            vals.add("CounterFlow")
            vals.add("CrossFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drain_water_heat_exchanger_type`'.format(value))

        self._data["Drain Water Heat Exchanger Type"] = value

    @property
    def drain_water_heat_exchanger_destination(self):
        """Get drain_water_heat_exchanger_destination

        Returns:
            str: the value of `drain_water_heat_exchanger_destination` or None if not set
        """
        return self._data["Drain Water Heat Exchanger Destination"]

    @drain_water_heat_exchanger_destination.setter
    def drain_water_heat_exchanger_destination(self, value="Plant"):
        """  Corresponds to IDD Field `drain_water_heat_exchanger_destination`

        Args:
            value (str): value for IDD Field `drain_water_heat_exchanger_destination`
                Accepted values are:
                      - Plant
                      - Equipment
                      - PlantAndEquipment
                Default value: Plant
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drain_water_heat_exchanger_destination`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drain_water_heat_exchanger_destination`')
            vals = set()
            vals.add("Plant")
            vals.add("Equipment")
            vals.add("PlantAndEquipment")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drain_water_heat_exchanger_destination`'.format(value))

        self._data["Drain Water Heat Exchanger Destination"] = value

    @property
    def drain_water_heat_exchanger_ufactor_times_area(self):
        """Get drain_water_heat_exchanger_ufactor_times_area

        Returns:
            float: the value of `drain_water_heat_exchanger_ufactor_times_area` or None if not set
        """
        return self._data["Drain Water Heat Exchanger U-Factor Times Area"]

    @drain_water_heat_exchanger_ufactor_times_area.setter
    def drain_water_heat_exchanger_ufactor_times_area(self, value=None):
        """  Corresponds to IDD Field `drain_water_heat_exchanger_ufactor_times_area`

        Args:
            value (float): value for IDD Field `drain_water_heat_exchanger_ufactor_times_area`
                Units: W/K
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `drain_water_heat_exchanger_ufactor_times_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `drain_water_heat_exchanger_ufactor_times_area`')

        self._data["Drain Water Heat Exchanger U-Factor Times Area"] = value

    @property
    def water_use_equipment_1_name(self):
        """Get water_use_equipment_1_name

        Returns:
            str: the value of `water_use_equipment_1_name` or None if not set
        """
        return self._data["Water Use Equipment 1 Name"]

    @water_use_equipment_1_name.setter
    def water_use_equipment_1_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_1_name`
        Enter the name of a WaterUse:Equipment object.

        Args:
            value (str): value for IDD Field `water_use_equipment_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_1_name`')

        self._data["Water Use Equipment 1 Name"] = value

    @property
    def water_use_equipment_2_name(self):
        """Get water_use_equipment_2_name

        Returns:
            str: the value of `water_use_equipment_2_name` or None if not set
        """
        return self._data["Water Use Equipment 2 Name"]

    @water_use_equipment_2_name.setter
    def water_use_equipment_2_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_2_name`
        Enter the name of a WaterUse:Equipment object.

        Args:
            value (str): value for IDD Field `water_use_equipment_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_2_name`')

        self._data["Water Use Equipment 2 Name"] = value

    @property
    def water_use_equipment_3_name(self):
        """Get water_use_equipment_3_name

        Returns:
            str: the value of `water_use_equipment_3_name` or None if not set
        """
        return self._data["Water Use Equipment 3 Name"]

    @water_use_equipment_3_name.setter
    def water_use_equipment_3_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_3_name`
        Enter the name of a WaterUse:Equipment object.

        Args:
            value (str): value for IDD Field `water_use_equipment_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_3_name`')

        self._data["Water Use Equipment 3 Name"] = value

    @property
    def water_use_equipment_4_name(self):
        """Get water_use_equipment_4_name

        Returns:
            str: the value of `water_use_equipment_4_name` or None if not set
        """
        return self._data["Water Use Equipment 4 Name"]

    @water_use_equipment_4_name.setter
    def water_use_equipment_4_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_4_name`
        Enter the name of a WaterUse:Equipment object.

        Args:
            value (str): value for IDD Field `water_use_equipment_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_4_name`')

        self._data["Water Use Equipment 4 Name"] = value

    @property
    def water_use_equipment_5_name(self):
        """Get water_use_equipment_5_name

        Returns:
            str: the value of `water_use_equipment_5_name` or None if not set
        """
        return self._data["Water Use Equipment 5 Name"]

    @water_use_equipment_5_name.setter
    def water_use_equipment_5_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_5_name`
        Enter the name of a WaterUse:Equipment object.

        Args:
            value (str): value for IDD Field `water_use_equipment_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_5_name`')

        self._data["Water Use Equipment 5 Name"] = value

    @property
    def water_use_equipment_6_name(self):
        """Get water_use_equipment_6_name

        Returns:
            str: the value of `water_use_equipment_6_name` or None if not set
        """
        return self._data["Water Use Equipment 6 Name"]

    @water_use_equipment_6_name.setter
    def water_use_equipment_6_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_6_name`

        Args:
            value (str): value for IDD Field `water_use_equipment_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_6_name`')

        self._data["Water Use Equipment 6 Name"] = value

    @property
    def water_use_equipment_7_name(self):
        """Get water_use_equipment_7_name

        Returns:
            str: the value of `water_use_equipment_7_name` or None if not set
        """
        return self._data["Water Use Equipment 7 Name"]

    @water_use_equipment_7_name.setter
    def water_use_equipment_7_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_7_name`

        Args:
            value (str): value for IDD Field `water_use_equipment_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_7_name`')

        self._data["Water Use Equipment 7 Name"] = value

    @property
    def water_use_equipment_8_name(self):
        """Get water_use_equipment_8_name

        Returns:
            str: the value of `water_use_equipment_8_name` or None if not set
        """
        return self._data["Water Use Equipment 8 Name"]

    @water_use_equipment_8_name.setter
    def water_use_equipment_8_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_8_name`

        Args:
            value (str): value for IDD Field `water_use_equipment_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_8_name`')

        self._data["Water Use Equipment 8 Name"] = value

    @property
    def water_use_equipment_9_name(self):
        """Get water_use_equipment_9_name

        Returns:
            str: the value of `water_use_equipment_9_name` or None if not set
        """
        return self._data["Water Use Equipment 9 Name"]

    @water_use_equipment_9_name.setter
    def water_use_equipment_9_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_9_name`

        Args:
            value (str): value for IDD Field `water_use_equipment_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_9_name`')

        self._data["Water Use Equipment 9 Name"] = value

    @property
    def water_use_equipment_10_name(self):
        """Get water_use_equipment_10_name

        Returns:
            str: the value of `water_use_equipment_10_name` or None if not set
        """
        return self._data["Water Use Equipment 10 Name"]

    @water_use_equipment_10_name.setter
    def water_use_equipment_10_name(self, value=None):
        """  Corresponds to IDD Field `water_use_equipment_10_name`

        Args:
            value (str): value for IDD Field `water_use_equipment_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_use_equipment_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_use_equipment_10_name`')

        self._data["Water Use Equipment 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.supply_water_storage_tank_name))
        out.append(self._to_str(self.reclamation_water_storage_tank_name))
        out.append(self._to_str(self.hot_water_supply_temperature_schedule_name))
        out.append(self._to_str(self.cold_water_supply_temperature_schedule_name))
        out.append(self._to_str(self.drain_water_heat_exchanger_type))
        out.append(self._to_str(self.drain_water_heat_exchanger_destination))
        out.append(self._to_str(self.drain_water_heat_exchanger_ufactor_times_area))
        out.append(self._to_str(self.water_use_equipment_1_name))
        out.append(self._to_str(self.water_use_equipment_2_name))
        out.append(self._to_str(self.water_use_equipment_3_name))
        out.append(self._to_str(self.water_use_equipment_4_name))
        out.append(self._to_str(self.water_use_equipment_5_name))
        out.append(self._to_str(self.water_use_equipment_6_name))
        out.append(self._to_str(self.water_use_equipment_7_name))
        out.append(self._to_str(self.water_use_equipment_8_name))
        out.append(self._to_str(self.water_use_equipment_9_name))
        out.append(self._to_str(self.water_use_equipment_10_name))
        return ",".join(out)

class WaterUseStorage(object):
    """ Corresponds to IDD object `WaterUse:Storage`
        A water storage tank. If the building model is to include any on-site
        water collection, wells, or storing and reuse of graywater, then a WaterUse:Storage
        object is needed. Each WaterUse:Storage can serve as a central node and make
        connections to numerous sources of supply or numerous components with demand. If a
        maximum capacity is not specified, the tank is assumed to have unlimited capacity.
    
    """
    internal_name = "WaterUse:Storage"
    field_count = 20
    required_fields = ["Name", "Water Temperature Schedule Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WaterUse:Storage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Water Quality Subcategory"] = None
        self._data["Maximum Capacity"] = None
        self._data["Initial Volume"] = None
        self._data["Design In Flow Rate"] = None
        self._data["Design Out Flow Rate"] = None
        self._data["Overflow Destination"] = None
        self._data["Type of Supply Controlled by Float Valve"] = None
        self._data["Float Valve On Capacity"] = None
        self._data["Float Valve Off Capacity"] = None
        self._data["Backup Mains Capacity"] = None
        self._data["Other Tank Name"] = None
        self._data["Water Thermal Mode"] = None
        self._data["Water Temperature Schedule Name"] = None
        self._data["Ambient Temperature Indicator"] = None
        self._data["Ambient Temperature Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Tank Surface Area"] = None
        self._data["Tank U Value"] = None
        self._data["Tank Outside Surface Material Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_quality_subcategory = None
        else:
            self.water_quality_subcategory = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_capacity = None
        else:
            self.maximum_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.initial_volume = None
        else:
            self.initial_volume = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_in_flow_rate = None
        else:
            self.design_in_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_out_flow_rate = None
        else:
            self.design_out_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.overflow_destination = None
        else:
            self.overflow_destination = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.type_of_supply_controlled_by_float_valve = None
        else:
            self.type_of_supply_controlled_by_float_valve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.float_valve_on_capacity = None
        else:
            self.float_valve_on_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.float_valve_off_capacity = None
        else:
            self.float_valve_off_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.backup_mains_capacity = None
        else:
            self.backup_mains_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.other_tank_name = None
        else:
            self.other_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_thermal_mode = None
        else:
            self.water_thermal_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_temperature_schedule_name = None
        else:
            self.water_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ambient_temperature_indicator = None
        else:
            self.ambient_temperature_indicator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ambient_temperature_schedule_name = None
        else:
            self.ambient_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tank_surface_area = None
        else:
            self.tank_surface_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tank_u_value = None
        else:
            self.tank_u_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tank_outside_surface_material_name = None
        else:
            self.tank_outside_surface_material_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def water_quality_subcategory(self):
        """Get water_quality_subcategory

        Returns:
            str: the value of `water_quality_subcategory` or None if not set
        """
        return self._data["Water Quality Subcategory"]

    @water_quality_subcategory.setter
    def water_quality_subcategory(self, value=None):
        """  Corresponds to IDD Field `water_quality_subcategory`

        Args:
            value (str): value for IDD Field `water_quality_subcategory`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_quality_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_quality_subcategory`')

        self._data["Water Quality Subcategory"] = value

    @property
    def maximum_capacity(self):
        """Get maximum_capacity

        Returns:
            float: the value of `maximum_capacity` or None if not set
        """
        return self._data["Maximum Capacity"]

    @maximum_capacity.setter
    def maximum_capacity(self, value=None):
        """  Corresponds to IDD Field `maximum_capacity`
        Defaults to unlimited capacity.

        Args:
            value (float): value for IDD Field `maximum_capacity`
                Units: m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_capacity`'.format(value))

        self._data["Maximum Capacity"] = value

    @property
    def initial_volume(self):
        """Get initial_volume

        Returns:
            float: the value of `initial_volume` or None if not set
        """
        return self._data["Initial Volume"]

    @initial_volume.setter
    def initial_volume(self, value=None):
        """  Corresponds to IDD Field `initial_volume`

        Args:
            value (float): value for IDD Field `initial_volume`
                Units: m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `initial_volume`'.format(value))

        self._data["Initial Volume"] = value

    @property
    def design_in_flow_rate(self):
        """Get design_in_flow_rate

        Returns:
            float: the value of `design_in_flow_rate` or None if not set
        """
        return self._data["Design In Flow Rate"]

    @design_in_flow_rate.setter
    def design_in_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_in_flow_rate`
        Defaults to unlimited flow.

        Args:
            value (float): value for IDD Field `design_in_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_in_flow_rate`'.format(value))

        self._data["Design In Flow Rate"] = value

    @property
    def design_out_flow_rate(self):
        """Get design_out_flow_rate

        Returns:
            float: the value of `design_out_flow_rate` or None if not set
        """
        return self._data["Design Out Flow Rate"]

    @design_out_flow_rate.setter
    def design_out_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_out_flow_rate`
        Defaults to unlimited flow.

        Args:
            value (float): value for IDD Field `design_out_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_out_flow_rate`'.format(value))

        self._data["Design Out Flow Rate"] = value

    @property
    def overflow_destination(self):
        """Get overflow_destination

        Returns:
            str: the value of `overflow_destination` or None if not set
        """
        return self._data["Overflow Destination"]

    @overflow_destination.setter
    def overflow_destination(self, value=None):
        """  Corresponds to IDD Field `overflow_destination`
        If blank, overflow is discarded

        Args:
            value (str): value for IDD Field `overflow_destination`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `overflow_destination`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `overflow_destination`')

        self._data["Overflow Destination"] = value

    @property
    def type_of_supply_controlled_by_float_valve(self):
        """Get type_of_supply_controlled_by_float_valve

        Returns:
            str: the value of `type_of_supply_controlled_by_float_valve` or None if not set
        """
        return self._data["Type of Supply Controlled by Float Valve"]

    @type_of_supply_controlled_by_float_valve.setter
    def type_of_supply_controlled_by_float_valve(self, value=None):
        """  Corresponds to IDD Field `type_of_supply_controlled_by_float_valve`

        Args:
            value (str): value for IDD Field `type_of_supply_controlled_by_float_valve`
                Accepted values are:
                      - None
                      - Mains
                      - GroundwaterWell
                      - OtherTank
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `type_of_supply_controlled_by_float_valve`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `type_of_supply_controlled_by_float_valve`')
            vals = set()
            vals.add("None")
            vals.add("Mains")
            vals.add("GroundwaterWell")
            vals.add("OtherTank")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `type_of_supply_controlled_by_float_valve`'.format(value))

        self._data["Type of Supply Controlled by Float Valve"] = value

    @property
    def float_valve_on_capacity(self):
        """Get float_valve_on_capacity

        Returns:
            float: the value of `float_valve_on_capacity` or None if not set
        """
        return self._data["Float Valve On Capacity"]

    @float_valve_on_capacity.setter
    def float_valve_on_capacity(self, value=None):
        """  Corresponds to IDD Field `float_valve_on_capacity`
        Lower range of target storage level e.g. float valve kicks on

        Args:
            value (float): value for IDD Field `float_valve_on_capacity`
                Units: m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `float_valve_on_capacity`'.format(value))

        self._data["Float Valve On Capacity"] = value

    @property
    def float_valve_off_capacity(self):
        """Get float_valve_off_capacity

        Returns:
            float: the value of `float_valve_off_capacity` or None if not set
        """
        return self._data["Float Valve Off Capacity"]

    @float_valve_off_capacity.setter
    def float_valve_off_capacity(self, value=None):
        """  Corresponds to IDD Field `float_valve_off_capacity`
        Upper range of target storage level e.g. float valve kicks off

        Args:
            value (float): value for IDD Field `float_valve_off_capacity`
                Units: m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `float_valve_off_capacity`'.format(value))

        self._data["Float Valve Off Capacity"] = value

    @property
    def backup_mains_capacity(self):
        """Get backup_mains_capacity

        Returns:
            float: the value of `backup_mains_capacity` or None if not set
        """
        return self._data["Backup Mains Capacity"]

    @backup_mains_capacity.setter
    def backup_mains_capacity(self, value=None):
        """  Corresponds to IDD Field `backup_mains_capacity`
        Lower range of secondary target storage level
        used to keep tanks at a minimum level using
        mains water if well can't keep up

        Args:
            value (float): value for IDD Field `backup_mains_capacity`
                Units: m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `backup_mains_capacity`'.format(value))

        self._data["Backup Mains Capacity"] = value

    @property
    def other_tank_name(self):
        """Get other_tank_name

        Returns:
            str: the value of `other_tank_name` or None if not set
        """
        return self._data["Other Tank Name"]

    @other_tank_name.setter
    def other_tank_name(self, value=None):
        """  Corresponds to IDD Field `other_tank_name`

        Args:
            value (str): value for IDD Field `other_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `other_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `other_tank_name`')

        self._data["Other Tank Name"] = value

    @property
    def water_thermal_mode(self):
        """Get water_thermal_mode

        Returns:
            str: the value of `water_thermal_mode` or None if not set
        """
        return self._data["Water Thermal Mode"]

    @water_thermal_mode.setter
    def water_thermal_mode(self, value=None):
        """  Corresponds to IDD Field `water_thermal_mode`

        Args:
            value (str): value for IDD Field `water_thermal_mode`
                Accepted values are:
                      - ScheduledTemperature
                      - ThermalModel
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_thermal_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_thermal_mode`')
            vals = set()
            vals.add("ScheduledTemperature")
            vals.add("ThermalModel")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `water_thermal_mode`'.format(value))

        self._data["Water Thermal Mode"] = value

    @property
    def water_temperature_schedule_name(self):
        """Get water_temperature_schedule_name

        Returns:
            str: the value of `water_temperature_schedule_name` or None if not set
        """
        return self._data["Water Temperature Schedule Name"]

    @water_temperature_schedule_name.setter
    def water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `water_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `water_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_schedule_name`')

        self._data["Water Temperature Schedule Name"] = value

    @property
    def ambient_temperature_indicator(self):
        """Get ambient_temperature_indicator

        Returns:
            str: the value of `ambient_temperature_indicator` or None if not set
        """
        return self._data["Ambient Temperature Indicator"]

    @ambient_temperature_indicator.setter
    def ambient_temperature_indicator(self, value=None):
        """  Corresponds to IDD Field `ambient_temperature_indicator`

        Args:
            value (str): value for IDD Field `ambient_temperature_indicator`
                Accepted values are:
                      - Schedule
                      - Zone
                      - Outdoors
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ambient_temperature_indicator`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ambient_temperature_indicator`')
            vals = set()
            vals.add("Schedule")
            vals.add("Zone")
            vals.add("Outdoors")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `ambient_temperature_indicator`'.format(value))

        self._data["Ambient Temperature Indicator"] = value

    @property
    def ambient_temperature_schedule_name(self):
        """Get ambient_temperature_schedule_name

        Returns:
            str: the value of `ambient_temperature_schedule_name` or None if not set
        """
        return self._data["Ambient Temperature Schedule Name"]

    @ambient_temperature_schedule_name.setter
    def ambient_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `ambient_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `ambient_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ambient_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ambient_temperature_schedule_name`')

        self._data["Ambient Temperature Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def tank_surface_area(self):
        """Get tank_surface_area

        Returns:
            float: the value of `tank_surface_area` or None if not set
        """
        return self._data["Tank Surface Area"]

    @tank_surface_area.setter
    def tank_surface_area(self, value=None):
        """  Corresponds to IDD Field `tank_surface_area`

        Args:
            value (float): value for IDD Field `tank_surface_area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `tank_surface_area`'.format(value))

        self._data["Tank Surface Area"] = value

    @property
    def tank_u_value(self):
        """Get tank_u_value

        Returns:
            float: the value of `tank_u_value` or None if not set
        """
        return self._data["Tank U Value"]

    @tank_u_value.setter
    def tank_u_value(self, value=None):
        """  Corresponds to IDD Field `tank_u_value`

        Args:
            value (float): value for IDD Field `tank_u_value`
                Units: W/m2-K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `tank_u_value`'.format(value))

        self._data["Tank U Value"] = value

    @property
    def tank_outside_surface_material_name(self):
        """Get tank_outside_surface_material_name

        Returns:
            str: the value of `tank_outside_surface_material_name` or None if not set
        """
        return self._data["Tank Outside Surface Material Name"]

    @tank_outside_surface_material_name.setter
    def tank_outside_surface_material_name(self, value=None):
        """  Corresponds to IDD Field `tank_outside_surface_material_name`

        Args:
            value (str): value for IDD Field `tank_outside_surface_material_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tank_outside_surface_material_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tank_outside_surface_material_name`')

        self._data["Tank Outside Surface Material Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.water_quality_subcategory))
        out.append(self._to_str(self.maximum_capacity))
        out.append(self._to_str(self.initial_volume))
        out.append(self._to_str(self.design_in_flow_rate))
        out.append(self._to_str(self.design_out_flow_rate))
        out.append(self._to_str(self.overflow_destination))
        out.append(self._to_str(self.type_of_supply_controlled_by_float_valve))
        out.append(self._to_str(self.float_valve_on_capacity))
        out.append(self._to_str(self.float_valve_off_capacity))
        out.append(self._to_str(self.backup_mains_capacity))
        out.append(self._to_str(self.other_tank_name))
        out.append(self._to_str(self.water_thermal_mode))
        out.append(self._to_str(self.water_temperature_schedule_name))
        out.append(self._to_str(self.ambient_temperature_indicator))
        out.append(self._to_str(self.ambient_temperature_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.tank_surface_area))
        out.append(self._to_str(self.tank_u_value))
        out.append(self._to_str(self.tank_outside_surface_material_name))
        return ",".join(out)

class WaterUseWell(object):
    """ Corresponds to IDD object `WaterUse:Well`
        Simulates on-site water supply from a well. Well water is pumped out of the ground
        into a WaterUse:Storage. The operation of the ground water well is controlled by the
        associated WaterUse:Storage which is assumed to be operated as a vented cistern with
        no pressure tank.
    
    """
    internal_name = "WaterUse:Well"
    field_count = 12
    required_fields = ["Name", "Storage Tank Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WaterUse:Well`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Storage Tank Name"] = None
        self._data["Pump Depth"] = None
        self._data["Pump Rated Flow Rate"] = None
        self._data["Pump Rated Head"] = None
        self._data["Pump Rated Power Consumption"] = None
        self._data["Pump Efficiency"] = None
        self._data["Well Recovery Rate"] = None
        self._data["Nominal Well Storage Volume"] = None
        self._data["Water Table Depth Mode"] = None
        self._data["Water Table Depth"] = None
        self._data["Water Table Depth Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.storage_tank_name = None
        else:
            self.storage_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_depth = None
        else:
            self.pump_depth = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_rated_flow_rate = None
        else:
            self.pump_rated_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_rated_head = None
        else:
            self.pump_rated_head = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_rated_power_consumption = None
        else:
            self.pump_rated_power_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_efficiency = None
        else:
            self.pump_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.well_recovery_rate = None
        else:
            self.well_recovery_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_well_storage_volume = None
        else:
            self.nominal_well_storage_volume = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_table_depth_mode = None
        else:
            self.water_table_depth_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_table_depth = None
        else:
            self.water_table_depth = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_table_depth_schedule_name = None
        else:
            self.water_table_depth_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def storage_tank_name(self):
        """Get storage_tank_name

        Returns:
            str: the value of `storage_tank_name` or None if not set
        """
        return self._data["Storage Tank Name"]

    @storage_tank_name.setter
    def storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `storage_tank_name`

        Args:
            value (str): value for IDD Field `storage_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `storage_tank_name`')

        self._data["Storage Tank Name"] = value

    @property
    def pump_depth(self):
        """Get pump_depth

        Returns:
            float: the value of `pump_depth` or None if not set
        """
        return self._data["Pump Depth"]

    @pump_depth.setter
    def pump_depth(self, value=None):
        """  Corresponds to IDD Field `pump_depth`

        Args:
            value (float): value for IDD Field `pump_depth`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pump_depth`'.format(value))

        self._data["Pump Depth"] = value

    @property
    def pump_rated_flow_rate(self):
        """Get pump_rated_flow_rate

        Returns:
            float: the value of `pump_rated_flow_rate` or None if not set
        """
        return self._data["Pump Rated Flow Rate"]

    @pump_rated_flow_rate.setter
    def pump_rated_flow_rate(self, value=None):
        """  Corresponds to IDD Field `pump_rated_flow_rate`

        Args:
            value (float): value for IDD Field `pump_rated_flow_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pump_rated_flow_rate`'.format(value))

        self._data["Pump Rated Flow Rate"] = value

    @property
    def pump_rated_head(self):
        """Get pump_rated_head

        Returns:
            float: the value of `pump_rated_head` or None if not set
        """
        return self._data["Pump Rated Head"]

    @pump_rated_head.setter
    def pump_rated_head(self, value=None):
        """  Corresponds to IDD Field `pump_rated_head`

        Args:
            value (float): value for IDD Field `pump_rated_head`
                Units: Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pump_rated_head`'.format(value))

        self._data["Pump Rated Head"] = value

    @property
    def pump_rated_power_consumption(self):
        """Get pump_rated_power_consumption

        Returns:
            float: the value of `pump_rated_power_consumption` or None if not set
        """
        return self._data["Pump Rated Power Consumption"]

    @pump_rated_power_consumption.setter
    def pump_rated_power_consumption(self, value=None):
        """  Corresponds to IDD Field `pump_rated_power_consumption`

        Args:
            value (float): value for IDD Field `pump_rated_power_consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pump_rated_power_consumption`'.format(value))

        self._data["Pump Rated Power Consumption"] = value

    @property
    def pump_efficiency(self):
        """Get pump_efficiency

        Returns:
            float: the value of `pump_efficiency` or None if not set
        """
        return self._data["Pump Efficiency"]

    @pump_efficiency.setter
    def pump_efficiency(self, value=None):
        """  Corresponds to IDD Field `pump_efficiency`

        Args:
            value (float): value for IDD Field `pump_efficiency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pump_efficiency`'.format(value))

        self._data["Pump Efficiency"] = value

    @property
    def well_recovery_rate(self):
        """Get well_recovery_rate

        Returns:
            float: the value of `well_recovery_rate` or None if not set
        """
        return self._data["Well Recovery Rate"]

    @well_recovery_rate.setter
    def well_recovery_rate(self, value=None):
        """  Corresponds to IDD Field `well_recovery_rate`

        Args:
            value (float): value for IDD Field `well_recovery_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `well_recovery_rate`'.format(value))

        self._data["Well Recovery Rate"] = value

    @property
    def nominal_well_storage_volume(self):
        """Get nominal_well_storage_volume

        Returns:
            float: the value of `nominal_well_storage_volume` or None if not set
        """
        return self._data["Nominal Well Storage Volume"]

    @nominal_well_storage_volume.setter
    def nominal_well_storage_volume(self, value=None):
        """  Corresponds to IDD Field `nominal_well_storage_volume`

        Args:
            value (float): value for IDD Field `nominal_well_storage_volume`
                Units: m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_well_storage_volume`'.format(value))

        self._data["Nominal Well Storage Volume"] = value

    @property
    def water_table_depth_mode(self):
        """Get water_table_depth_mode

        Returns:
            str: the value of `water_table_depth_mode` or None if not set
        """
        return self._data["Water Table Depth Mode"]

    @water_table_depth_mode.setter
    def water_table_depth_mode(self, value=None):
        """  Corresponds to IDD Field `water_table_depth_mode`

        Args:
            value (str): value for IDD Field `water_table_depth_mode`
                Accepted values are:
                      - Constant
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_table_depth_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_table_depth_mode`')
            vals = set()
            vals.add("Constant")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `water_table_depth_mode`'.format(value))

        self._data["Water Table Depth Mode"] = value

    @property
    def water_table_depth(self):
        """Get water_table_depth

        Returns:
            float: the value of `water_table_depth` or None if not set
        """
        return self._data["Water Table Depth"]

    @water_table_depth.setter
    def water_table_depth(self, value=None):
        """  Corresponds to IDD Field `water_table_depth`

        Args:
            value (float): value for IDD Field `water_table_depth`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_table_depth`'.format(value))

        self._data["Water Table Depth"] = value

    @property
    def water_table_depth_schedule_name(self):
        """Get water_table_depth_schedule_name

        Returns:
            str: the value of `water_table_depth_schedule_name` or None if not set
        """
        return self._data["Water Table Depth Schedule Name"]

    @water_table_depth_schedule_name.setter
    def water_table_depth_schedule_name(self, value=None):
        """  Corresponds to IDD Field `water_table_depth_schedule_name`

        Args:
            value (str): value for IDD Field `water_table_depth_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_table_depth_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_table_depth_schedule_name`')

        self._data["Water Table Depth Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.storage_tank_name))
        out.append(self._to_str(self.pump_depth))
        out.append(self._to_str(self.pump_rated_flow_rate))
        out.append(self._to_str(self.pump_rated_head))
        out.append(self._to_str(self.pump_rated_power_consumption))
        out.append(self._to_str(self.pump_efficiency))
        out.append(self._to_str(self.well_recovery_rate))
        out.append(self._to_str(self.nominal_well_storage_volume))
        out.append(self._to_str(self.water_table_depth_mode))
        out.append(self._to_str(self.water_table_depth))
        out.append(self._to_str(self.water_table_depth_schedule_name))
        return ",".join(out)

class WaterUseRainCollector(object):
    """ Corresponds to IDD object `WaterUse:RainCollector`
        Used for harvesting rainwater falling on building surfaces. The rainwater is sent to a
        WaterUse:Storage object. In order to use this object it is necessary to also include
        a Site:Precipitation object to describe the rates of rainfall.
    
    """
    internal_name = "WaterUse:RainCollector"
    field_count = 16
    required_fields = ["Name", "Storage Tank Name", "Collection Surface 1 Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WaterUse:RainCollector`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Storage Tank Name"] = None
        self._data["Loss Factor Mode"] = None
        self._data["Collection Loss Factor"] = None
        self._data["Collection Loss Factor Schedule Name"] = None
        self._data["Maximum Collection Rate"] = None
        self._data["Collection Surface 1 Name"] = None
        self._data["Collection Surface 2 Name"] = None
        self._data["Collection Surface 3 Name"] = None
        self._data["Collection Surface 4 Name"] = None
        self._data["Collection Surface 5 Name"] = None
        self._data["Collection Surface 6 Name"] = None
        self._data["Collection Surface 7 Name"] = None
        self._data["Collection Surface 8 Name"] = None
        self._data["Collection Surface 9 Name"] = None
        self._data["Collection Surface 10 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.storage_tank_name = None
        else:
            self.storage_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.loss_factor_mode = None
        else:
            self.loss_factor_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_loss_factor = None
        else:
            self.collection_loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_loss_factor_schedule_name = None
        else:
            self.collection_loss_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_collection_rate = None
        else:
            self.maximum_collection_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_1_name = None
        else:
            self.collection_surface_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_2_name = None
        else:
            self.collection_surface_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_3_name = None
        else:
            self.collection_surface_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_4_name = None
        else:
            self.collection_surface_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_5_name = None
        else:
            self.collection_surface_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_6_name = None
        else:
            self.collection_surface_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_7_name = None
        else:
            self.collection_surface_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_8_name = None
        else:
            self.collection_surface_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_9_name = None
        else:
            self.collection_surface_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_surface_10_name = None
        else:
            self.collection_surface_10_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def storage_tank_name(self):
        """Get storage_tank_name

        Returns:
            str: the value of `storage_tank_name` or None if not set
        """
        return self._data["Storage Tank Name"]

    @storage_tank_name.setter
    def storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `storage_tank_name`

        Args:
            value (str): value for IDD Field `storage_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `storage_tank_name`')

        self._data["Storage Tank Name"] = value

    @property
    def loss_factor_mode(self):
        """Get loss_factor_mode

        Returns:
            str: the value of `loss_factor_mode` or None if not set
        """
        return self._data["Loss Factor Mode"]

    @loss_factor_mode.setter
    def loss_factor_mode(self, value=None):
        """  Corresponds to IDD Field `loss_factor_mode`

        Args:
            value (str): value for IDD Field `loss_factor_mode`
                Accepted values are:
                      - Constant
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `loss_factor_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `loss_factor_mode`')
            vals = set()
            vals.add("Constant")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `loss_factor_mode`'.format(value))

        self._data["Loss Factor Mode"] = value

    @property
    def collection_loss_factor(self):
        """Get collection_loss_factor

        Returns:
            float: the value of `collection_loss_factor` or None if not set
        """
        return self._data["Collection Loss Factor"]

    @collection_loss_factor.setter
    def collection_loss_factor(self, value=None):
        """  Corresponds to IDD Field `collection_loss_factor`
        this is the portion of rain
        that is lost in the process of collecting it
        the rain collected is one minus this factor

        Args:
            value (float): value for IDD Field `collection_loss_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `collection_loss_factor`'.format(value))

        self._data["Collection Loss Factor"] = value

    @property
    def collection_loss_factor_schedule_name(self):
        """Get collection_loss_factor_schedule_name

        Returns:
            str: the value of `collection_loss_factor_schedule_name` or None if not set
        """
        return self._data["Collection Loss Factor Schedule Name"]

    @collection_loss_factor_schedule_name.setter
    def collection_loss_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `collection_loss_factor_schedule_name`

        Args:
            value (str): value for IDD Field `collection_loss_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_loss_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_loss_factor_schedule_name`')

        self._data["Collection Loss Factor Schedule Name"] = value

    @property
    def maximum_collection_rate(self):
        """Get maximum_collection_rate

        Returns:
            float: the value of `maximum_collection_rate` or None if not set
        """
        return self._data["Maximum Collection Rate"]

    @maximum_collection_rate.setter
    def maximum_collection_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_collection_rate`
        Defaults to unlimited flow.

        Args:
            value (float): value for IDD Field `maximum_collection_rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_collection_rate`'.format(value))

        self._data["Maximum Collection Rate"] = value

    @property
    def collection_surface_1_name(self):
        """Get collection_surface_1_name

        Returns:
            str: the value of `collection_surface_1_name` or None if not set
        """
        return self._data["Collection Surface 1 Name"]

    @collection_surface_1_name.setter
    def collection_surface_1_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_1_name`

        Args:
            value (str): value for IDD Field `collection_surface_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_1_name`')

        self._data["Collection Surface 1 Name"] = value

    @property
    def collection_surface_2_name(self):
        """Get collection_surface_2_name

        Returns:
            str: the value of `collection_surface_2_name` or None if not set
        """
        return self._data["Collection Surface 2 Name"]

    @collection_surface_2_name.setter
    def collection_surface_2_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_2_name`

        Args:
            value (str): value for IDD Field `collection_surface_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_2_name`')

        self._data["Collection Surface 2 Name"] = value

    @property
    def collection_surface_3_name(self):
        """Get collection_surface_3_name

        Returns:
            str: the value of `collection_surface_3_name` or None if not set
        """
        return self._data["Collection Surface 3 Name"]

    @collection_surface_3_name.setter
    def collection_surface_3_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_3_name`

        Args:
            value (str): value for IDD Field `collection_surface_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_3_name`')

        self._data["Collection Surface 3 Name"] = value

    @property
    def collection_surface_4_name(self):
        """Get collection_surface_4_name

        Returns:
            str: the value of `collection_surface_4_name` or None if not set
        """
        return self._data["Collection Surface 4 Name"]

    @collection_surface_4_name.setter
    def collection_surface_4_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_4_name`

        Args:
            value (str): value for IDD Field `collection_surface_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_4_name`')

        self._data["Collection Surface 4 Name"] = value

    @property
    def collection_surface_5_name(self):
        """Get collection_surface_5_name

        Returns:
            str: the value of `collection_surface_5_name` or None if not set
        """
        return self._data["Collection Surface 5 Name"]

    @collection_surface_5_name.setter
    def collection_surface_5_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_5_name`

        Args:
            value (str): value for IDD Field `collection_surface_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_5_name`')

        self._data["Collection Surface 5 Name"] = value

    @property
    def collection_surface_6_name(self):
        """Get collection_surface_6_name

        Returns:
            str: the value of `collection_surface_6_name` or None if not set
        """
        return self._data["Collection Surface 6 Name"]

    @collection_surface_6_name.setter
    def collection_surface_6_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_6_name`

        Args:
            value (str): value for IDD Field `collection_surface_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_6_name`')

        self._data["Collection Surface 6 Name"] = value

    @property
    def collection_surface_7_name(self):
        """Get collection_surface_7_name

        Returns:
            str: the value of `collection_surface_7_name` or None if not set
        """
        return self._data["Collection Surface 7 Name"]

    @collection_surface_7_name.setter
    def collection_surface_7_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_7_name`

        Args:
            value (str): value for IDD Field `collection_surface_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_7_name`')

        self._data["Collection Surface 7 Name"] = value

    @property
    def collection_surface_8_name(self):
        """Get collection_surface_8_name

        Returns:
            str: the value of `collection_surface_8_name` or None if not set
        """
        return self._data["Collection Surface 8 Name"]

    @collection_surface_8_name.setter
    def collection_surface_8_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_8_name`

        Args:
            value (str): value for IDD Field `collection_surface_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_8_name`')

        self._data["Collection Surface 8 Name"] = value

    @property
    def collection_surface_9_name(self):
        """Get collection_surface_9_name

        Returns:
            str: the value of `collection_surface_9_name` or None if not set
        """
        return self._data["Collection Surface 9 Name"]

    @collection_surface_9_name.setter
    def collection_surface_9_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_9_name`

        Args:
            value (str): value for IDD Field `collection_surface_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_9_name`')

        self._data["Collection Surface 9 Name"] = value

    @property
    def collection_surface_10_name(self):
        """Get collection_surface_10_name

        Returns:
            str: the value of `collection_surface_10_name` or None if not set
        """
        return self._data["Collection Surface 10 Name"]

    @collection_surface_10_name.setter
    def collection_surface_10_name(self, value=None):
        """  Corresponds to IDD Field `collection_surface_10_name`

        Args:
            value (str): value for IDD Field `collection_surface_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_surface_10_name`')

        self._data["Collection Surface 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.storage_tank_name))
        out.append(self._to_str(self.loss_factor_mode))
        out.append(self._to_str(self.collection_loss_factor))
        out.append(self._to_str(self.collection_loss_factor_schedule_name))
        out.append(self._to_str(self.maximum_collection_rate))
        out.append(self._to_str(self.collection_surface_1_name))
        out.append(self._to_str(self.collection_surface_2_name))
        out.append(self._to_str(self.collection_surface_3_name))
        out.append(self._to_str(self.collection_surface_4_name))
        out.append(self._to_str(self.collection_surface_5_name))
        out.append(self._to_str(self.collection_surface_6_name))
        out.append(self._to_str(self.collection_surface_7_name))
        out.append(self._to_str(self.collection_surface_8_name))
        out.append(self._to_str(self.collection_surface_9_name))
        out.append(self._to_str(self.collection_surface_10_name))
        return ",".join(out)

class FaultModelTemperatureSensorOffsetOutdoorAir(object):
    """ Corresponds to IDD object `FaultModel:TemperatureSensorOffset:OutdoorAir`
        This object describes outdoor air temperature sensor offset
    
    """
    internal_name = "FaultModel:TemperatureSensorOffset:OutdoorAir"
    field_count = 6
    required_fields = ["Controller Object Type", "Controller Object Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FaultModel:TemperatureSensorOffset:OutdoorAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Severity Schedule Name"] = None
        self._data["Controller Object Type"] = None
        self._data["Controller Object Name"] = None
        self._data["Temperature Sensor Offset"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.severity_schedule_name = None
        else:
            self.severity_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_type = None
        else:
            self.controller_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_name = None
        else:
            self.controller_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_sensor_offset = None
        else:
            self.temperature_sensor_offset = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def severity_schedule_name(self):
        """Get severity_schedule_name

        Returns:
            str: the value of `severity_schedule_name` or None if not set
        """
        return self._data["Severity Schedule Name"]

    @severity_schedule_name.setter
    def severity_schedule_name(self, value=None):
        """  Corresponds to IDD Field `severity_schedule_name`

        Args:
            value (str): value for IDD Field `severity_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `severity_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `severity_schedule_name`')

        self._data["Severity Schedule Name"] = value

    @property
    def controller_object_type(self):
        """Get controller_object_type

        Returns:
            str: the value of `controller_object_type` or None if not set
        """
        return self._data["Controller Object Type"]

    @controller_object_type.setter
    def controller_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_object_type`

        Args:
            value (str): value for IDD Field `controller_object_type`
                Accepted values are:
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_type`')
            vals = set()
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_object_type`'.format(value))

        self._data["Controller Object Type"] = value

    @property
    def controller_object_name(self):
        """Get controller_object_name

        Returns:
            str: the value of `controller_object_name` or None if not set
        """
        return self._data["Controller Object Name"]

    @controller_object_name.setter
    def controller_object_name(self, value=None):
        """  Corresponds to IDD Field `controller_object_name`

        Args:
            value (str): value for IDD Field `controller_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_name`')

        self._data["Controller Object Name"] = value

    @property
    def temperature_sensor_offset(self):
        """Get temperature_sensor_offset

        Returns:
            float: the value of `temperature_sensor_offset` or None if not set
        """
        return self._data["Temperature Sensor Offset"]

    @temperature_sensor_offset.setter
    def temperature_sensor_offset(self, value=0.0 ):
        """  Corresponds to IDD Field `temperature_sensor_offset`

        Args:
            value (float): value for IDD Field `temperature_sensor_offset`
                Units: deltaC
                Default value: 0.0
                value > -10.0
                value < 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_sensor_offset`'.format(value))
            if value <= -10.0:
                raise ValueError('value need to be greater -10.0 '
                                 'for field `temperature_sensor_offset`')
            if value >= 10.0:
                raise ValueError('value need to be smaller 10.0 '
                                 'for field `temperature_sensor_offset`')

        self._data["Temperature Sensor Offset"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.severity_schedule_name))
        out.append(self._to_str(self.controller_object_type))
        out.append(self._to_str(self.controller_object_name))
        out.append(self._to_str(self.temperature_sensor_offset))
        return ",".join(out)

class FaultModelHumiditySensorOffsetOutdoorAir(object):
    """ Corresponds to IDD object `FaultModel:HumiditySensorOffset:OutdoorAir`
        This object describes outdoor air humidity sensor offset
    
    """
    internal_name = "FaultModel:HumiditySensorOffset:OutdoorAir"
    field_count = 6
    required_fields = ["Name", "Controller Object Type", "Controller Object Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FaultModel:HumiditySensorOffset:OutdoorAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Severity Schedule Name"] = None
        self._data["Controller Object Type"] = None
        self._data["Controller Object Name"] = None
        self._data["Humidity Sensor Offset"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.severity_schedule_name = None
        else:
            self.severity_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_type = None
        else:
            self.controller_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_name = None
        else:
            self.controller_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidity_sensor_offset = None
        else:
            self.humidity_sensor_offset = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def severity_schedule_name(self):
        """Get severity_schedule_name

        Returns:
            str: the value of `severity_schedule_name` or None if not set
        """
        return self._data["Severity Schedule Name"]

    @severity_schedule_name.setter
    def severity_schedule_name(self, value=None):
        """  Corresponds to IDD Field `severity_schedule_name`

        Args:
            value (str): value for IDD Field `severity_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `severity_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `severity_schedule_name`')

        self._data["Severity Schedule Name"] = value

    @property
    def controller_object_type(self):
        """Get controller_object_type

        Returns:
            str: the value of `controller_object_type` or None if not set
        """
        return self._data["Controller Object Type"]

    @controller_object_type.setter
    def controller_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_object_type`

        Args:
            value (str): value for IDD Field `controller_object_type`
                Accepted values are:
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_type`')
            vals = set()
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_object_type`'.format(value))

        self._data["Controller Object Type"] = value

    @property
    def controller_object_name(self):
        """Get controller_object_name

        Returns:
            str: the value of `controller_object_name` or None if not set
        """
        return self._data["Controller Object Name"]

    @controller_object_name.setter
    def controller_object_name(self, value=None):
        """  Corresponds to IDD Field `controller_object_name`

        Args:
            value (str): value for IDD Field `controller_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_name`')

        self._data["Controller Object Name"] = value

    @property
    def humidity_sensor_offset(self):
        """Get humidity_sensor_offset

        Returns:
            float: the value of `humidity_sensor_offset` or None if not set
        """
        return self._data["Humidity Sensor Offset"]

    @humidity_sensor_offset.setter
    def humidity_sensor_offset(self, value=0.0 ):
        """  Corresponds to IDD Field `humidity_sensor_offset`

        Args:
            value (float): value for IDD Field `humidity_sensor_offset`
                Units: kgWater/kgDryAir
                Default value: 0.0
                value > -0.02
                value < 0.02
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_sensor_offset`'.format(value))
            if value <= -0.02:
                raise ValueError('value need to be greater -0.02 '
                                 'for field `humidity_sensor_offset`')
            if value >= 0.02:
                raise ValueError('value need to be smaller 0.02 '
                                 'for field `humidity_sensor_offset`')

        self._data["Humidity Sensor Offset"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.severity_schedule_name))
        out.append(self._to_str(self.controller_object_type))
        out.append(self._to_str(self.controller_object_name))
        out.append(self._to_str(self.humidity_sensor_offset))
        return ",".join(out)

class FaultModelEnthalpySensorOffsetOutdoorAir(object):
    """ Corresponds to IDD object `FaultModel:EnthalpySensorOffset:OutdoorAir`
        This object describes outdoor air enthalpy sensor offset
    
    """
    internal_name = "FaultModel:EnthalpySensorOffset:OutdoorAir"
    field_count = 6
    required_fields = ["Name", "Controller Object Type", "Controller Object Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FaultModel:EnthalpySensorOffset:OutdoorAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Severity Schedule Name"] = None
        self._data["Controller Object Type"] = None
        self._data["Controller Object Name"] = None
        self._data["Enthalpy Sensor Offset"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.severity_schedule_name = None
        else:
            self.severity_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_type = None
        else:
            self.controller_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_name = None
        else:
            self.controller_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enthalpy_sensor_offset = None
        else:
            self.enthalpy_sensor_offset = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def severity_schedule_name(self):
        """Get severity_schedule_name

        Returns:
            str: the value of `severity_schedule_name` or None if not set
        """
        return self._data["Severity Schedule Name"]

    @severity_schedule_name.setter
    def severity_schedule_name(self, value=None):
        """  Corresponds to IDD Field `severity_schedule_name`

        Args:
            value (str): value for IDD Field `severity_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `severity_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `severity_schedule_name`')

        self._data["Severity Schedule Name"] = value

    @property
    def controller_object_type(self):
        """Get controller_object_type

        Returns:
            str: the value of `controller_object_type` or None if not set
        """
        return self._data["Controller Object Type"]

    @controller_object_type.setter
    def controller_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_object_type`

        Args:
            value (str): value for IDD Field `controller_object_type`
                Accepted values are:
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_type`')
            vals = set()
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_object_type`'.format(value))

        self._data["Controller Object Type"] = value

    @property
    def controller_object_name(self):
        """Get controller_object_name

        Returns:
            str: the value of `controller_object_name` or None if not set
        """
        return self._data["Controller Object Name"]

    @controller_object_name.setter
    def controller_object_name(self, value=None):
        """  Corresponds to IDD Field `controller_object_name`

        Args:
            value (str): value for IDD Field `controller_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_name`')

        self._data["Controller Object Name"] = value

    @property
    def enthalpy_sensor_offset(self):
        """Get enthalpy_sensor_offset

        Returns:
            float: the value of `enthalpy_sensor_offset` or None if not set
        """
        return self._data["Enthalpy Sensor Offset"]

    @enthalpy_sensor_offset.setter
    def enthalpy_sensor_offset(self, value=0.0 ):
        """  Corresponds to IDD Field `enthalpy_sensor_offset`

        Args:
            value (float): value for IDD Field `enthalpy_sensor_offset`
                Units: J/kg
                Default value: 0.0
                value > -20000.0
                value < 20000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `enthalpy_sensor_offset`'.format(value))
            if value <= -20000.0:
                raise ValueError('value need to be greater -20000.0 '
                                 'for field `enthalpy_sensor_offset`')
            if value >= 20000.0:
                raise ValueError('value need to be smaller 20000.0 '
                                 'for field `enthalpy_sensor_offset`')

        self._data["Enthalpy Sensor Offset"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.severity_schedule_name))
        out.append(self._to_str(self.controller_object_type))
        out.append(self._to_str(self.controller_object_name))
        out.append(self._to_str(self.enthalpy_sensor_offset))
        return ",".join(out)

class FaultModelPressureSensorOffsetOutdoorAir(object):
    """ Corresponds to IDD object `FaultModel:PressureSensorOffset:OutdoorAir`
        This object describes outdoor air pressure sensor offset
    
    """
    internal_name = "FaultModel:PressureSensorOffset:OutdoorAir"
    field_count = 6
    required_fields = ["Name", "Controller Object Type", "Controller Object Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FaultModel:PressureSensorOffset:OutdoorAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Severity Schedule Name"] = None
        self._data["Controller Object Type"] = None
        self._data["Controller Object Name"] = None
        self._data["Pressure Sensor Offset"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.severity_schedule_name = None
        else:
            self.severity_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_type = None
        else:
            self.controller_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_name = None
        else:
            self.controller_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pressure_sensor_offset = None
        else:
            self.pressure_sensor_offset = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def severity_schedule_name(self):
        """Get severity_schedule_name

        Returns:
            str: the value of `severity_schedule_name` or None if not set
        """
        return self._data["Severity Schedule Name"]

    @severity_schedule_name.setter
    def severity_schedule_name(self, value=None):
        """  Corresponds to IDD Field `severity_schedule_name`

        Args:
            value (str): value for IDD Field `severity_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `severity_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `severity_schedule_name`')

        self._data["Severity Schedule Name"] = value

    @property
    def controller_object_type(self):
        """Get controller_object_type

        Returns:
            str: the value of `controller_object_type` or None if not set
        """
        return self._data["Controller Object Type"]

    @controller_object_type.setter
    def controller_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_object_type`

        Args:
            value (str): value for IDD Field `controller_object_type`
                Accepted values are:
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_type`')
            vals = set()
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_object_type`'.format(value))

        self._data["Controller Object Type"] = value

    @property
    def controller_object_name(self):
        """Get controller_object_name

        Returns:
            str: the value of `controller_object_name` or None if not set
        """
        return self._data["Controller Object Name"]

    @controller_object_name.setter
    def controller_object_name(self, value=None):
        """  Corresponds to IDD Field `controller_object_name`

        Args:
            value (str): value for IDD Field `controller_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_name`')

        self._data["Controller Object Name"] = value

    @property
    def pressure_sensor_offset(self):
        """Get pressure_sensor_offset

        Returns:
            float: the value of `pressure_sensor_offset` or None if not set
        """
        return self._data["Pressure Sensor Offset"]

    @pressure_sensor_offset.setter
    def pressure_sensor_offset(self, value=0.0 ):
        """  Corresponds to IDD Field `pressure_sensor_offset`

        Args:
            value (float): value for IDD Field `pressure_sensor_offset`
                Units: Pa
                Default value: 0.0
                value > -10000.0
                value < 10000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pressure_sensor_offset`'.format(value))
            if value <= -10000.0:
                raise ValueError('value need to be greater -10000.0 '
                                 'for field `pressure_sensor_offset`')
            if value >= 10000.0:
                raise ValueError('value need to be smaller 10000.0 '
                                 'for field `pressure_sensor_offset`')

        self._data["Pressure Sensor Offset"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.severity_schedule_name))
        out.append(self._to_str(self.controller_object_type))
        out.append(self._to_str(self.controller_object_name))
        out.append(self._to_str(self.pressure_sensor_offset))
        return ",".join(out)

class FaultModelTemperatureSensorOffsetReturnAir(object):
    """ Corresponds to IDD object `FaultModel:TemperatureSensorOffset:ReturnAir`
        This object describes return air temperature sensor offset
    
    """
    internal_name = "FaultModel:TemperatureSensorOffset:ReturnAir"
    field_count = 6
    required_fields = ["Name", "Controller Object Type", "Controller Object Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FaultModel:TemperatureSensorOffset:ReturnAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Severity Schedule Name"] = None
        self._data["Controller Object Type"] = None
        self._data["Controller Object Name"] = None
        self._data["Temperature Sensor Offset"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.severity_schedule_name = None
        else:
            self.severity_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_type = None
        else:
            self.controller_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_name = None
        else:
            self.controller_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_sensor_offset = None
        else:
            self.temperature_sensor_offset = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def severity_schedule_name(self):
        """Get severity_schedule_name

        Returns:
            str: the value of `severity_schedule_name` or None if not set
        """
        return self._data["Severity Schedule Name"]

    @severity_schedule_name.setter
    def severity_schedule_name(self, value=None):
        """  Corresponds to IDD Field `severity_schedule_name`

        Args:
            value (str): value for IDD Field `severity_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `severity_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `severity_schedule_name`')

        self._data["Severity Schedule Name"] = value

    @property
    def controller_object_type(self):
        """Get controller_object_type

        Returns:
            str: the value of `controller_object_type` or None if not set
        """
        return self._data["Controller Object Type"]

    @controller_object_type.setter
    def controller_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_object_type`

        Args:
            value (str): value for IDD Field `controller_object_type`
                Accepted values are:
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_type`')
            vals = set()
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_object_type`'.format(value))

        self._data["Controller Object Type"] = value

    @property
    def controller_object_name(self):
        """Get controller_object_name

        Returns:
            str: the value of `controller_object_name` or None if not set
        """
        return self._data["Controller Object Name"]

    @controller_object_name.setter
    def controller_object_name(self, value=None):
        """  Corresponds to IDD Field `controller_object_name`

        Args:
            value (str): value for IDD Field `controller_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_name`')

        self._data["Controller Object Name"] = value

    @property
    def temperature_sensor_offset(self):
        """Get temperature_sensor_offset

        Returns:
            float: the value of `temperature_sensor_offset` or None if not set
        """
        return self._data["Temperature Sensor Offset"]

    @temperature_sensor_offset.setter
    def temperature_sensor_offset(self, value=0.0 ):
        """  Corresponds to IDD Field `temperature_sensor_offset`

        Args:
            value (float): value for IDD Field `temperature_sensor_offset`
                Units: deltaC
                Default value: 0.0
                value > -10.0
                value < 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_sensor_offset`'.format(value))
            if value <= -10.0:
                raise ValueError('value need to be greater -10.0 '
                                 'for field `temperature_sensor_offset`')
            if value >= 10.0:
                raise ValueError('value need to be smaller 10.0 '
                                 'for field `temperature_sensor_offset`')

        self._data["Temperature Sensor Offset"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.severity_schedule_name))
        out.append(self._to_str(self.controller_object_type))
        out.append(self._to_str(self.controller_object_name))
        out.append(self._to_str(self.temperature_sensor_offset))
        return ",".join(out)

class FaultModelEnthalpySensorOffsetReturnAir(object):
    """ Corresponds to IDD object `FaultModel:EnthalpySensorOffset:ReturnAir`
        This object describes return air enthalpy sensor offset
    
    """
    internal_name = "FaultModel:EnthalpySensorOffset:ReturnAir"
    field_count = 6
    required_fields = ["Name", "Controller Object Type", "Controller Object Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FaultModel:EnthalpySensorOffset:ReturnAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Severity Schedule Name"] = None
        self._data["Controller Object Type"] = None
        self._data["Controller Object Name"] = None
        self._data["Enthalpy Sensor Offset"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.severity_schedule_name = None
        else:
            self.severity_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_type = None
        else:
            self.controller_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_object_name = None
        else:
            self.controller_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enthalpy_sensor_offset = None
        else:
            self.enthalpy_sensor_offset = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def severity_schedule_name(self):
        """Get severity_schedule_name

        Returns:
            str: the value of `severity_schedule_name` or None if not set
        """
        return self._data["Severity Schedule Name"]

    @severity_schedule_name.setter
    def severity_schedule_name(self, value=None):
        """  Corresponds to IDD Field `severity_schedule_name`

        Args:
            value (str): value for IDD Field `severity_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `severity_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `severity_schedule_name`')

        self._data["Severity Schedule Name"] = value

    @property
    def controller_object_type(self):
        """Get controller_object_type

        Returns:
            str: the value of `controller_object_type` or None if not set
        """
        return self._data["Controller Object Type"]

    @controller_object_type.setter
    def controller_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_object_type`

        Args:
            value (str): value for IDD Field `controller_object_type`
                Accepted values are:
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_type`')
            vals = set()
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_object_type`'.format(value))

        self._data["Controller Object Type"] = value

    @property
    def controller_object_name(self):
        """Get controller_object_name

        Returns:
            str: the value of `controller_object_name` or None if not set
        """
        return self._data["Controller Object Name"]

    @controller_object_name.setter
    def controller_object_name(self, value=None):
        """  Corresponds to IDD Field `controller_object_name`

        Args:
            value (str): value for IDD Field `controller_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_object_name`')

        self._data["Controller Object Name"] = value

    @property
    def enthalpy_sensor_offset(self):
        """Get enthalpy_sensor_offset

        Returns:
            float: the value of `enthalpy_sensor_offset` or None if not set
        """
        return self._data["Enthalpy Sensor Offset"]

    @enthalpy_sensor_offset.setter
    def enthalpy_sensor_offset(self, value=0.0 ):
        """  Corresponds to IDD Field `enthalpy_sensor_offset`

        Args:
            value (float): value for IDD Field `enthalpy_sensor_offset`
                Units: J/kg
                Default value: 0.0
                value > -20000.0
                value < 20000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `enthalpy_sensor_offset`'.format(value))
            if value <= -20000.0:
                raise ValueError('value need to be greater -20000.0 '
                                 'for field `enthalpy_sensor_offset`')
            if value >= 20000.0:
                raise ValueError('value need to be smaller 20000.0 '
                                 'for field `enthalpy_sensor_offset`')

        self._data["Enthalpy Sensor Offset"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.severity_schedule_name))
        out.append(self._to_str(self.controller_object_type))
        out.append(self._to_str(self.controller_object_name))
        out.append(self._to_str(self.enthalpy_sensor_offset))
        return ",".join(out)

class FaultModelFoulingCoil(object):
    """ Corresponds to IDD object `FaultModel:Fouling:Coil`
        This object describes fouling water heating or cooling coils
    
    """
    internal_name = "FaultModel:Fouling:Coil"
    field_count = 10
    required_fields = ["Name", "Coil Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FaultModel:Fouling:Coil`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Coil Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Severity Schedule Name"] = None
        self._data["Fouling Input Method"] = None
        self._data["UAFouled"] = None
        self._data["Water Side Fouling Factor"] = None
        self._data["Air Side Fouling Factor"] = None
        self._data["Outside Coil Surface Area"] = None
        self._data["Inside to Outside Coil Surface Area Ratio"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coil_name = None
        else:
            self.coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.severity_schedule_name = None
        else:
            self.severity_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fouling_input_method = None
        else:
            self.fouling_input_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.uafouled = None
        else:
            self.uafouled = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_side_fouling_factor = None
        else:
            self.water_side_fouling_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_side_fouling_factor = None
        else:
            self.air_side_fouling_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outside_coil_surface_area = None
        else:
            self.outside_coil_surface_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inside_to_outside_coil_surface_area_ratio = None
        else:
            self.inside_to_outside_coil_surface_area_ratio = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def coil_name(self):
        """Get coil_name

        Returns:
            str: the value of `coil_name` or None if not set
        """
        return self._data["Coil Name"]

    @coil_name.setter
    def coil_name(self, value=None):
        """  Corresponds to IDD Field `coil_name`

        Args:
            value (str): value for IDD Field `coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_name`')

        self._data["Coil Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def severity_schedule_name(self):
        """Get severity_schedule_name

        Returns:
            str: the value of `severity_schedule_name` or None if not set
        """
        return self._data["Severity Schedule Name"]

    @severity_schedule_name.setter
    def severity_schedule_name(self, value=None):
        """  Corresponds to IDD Field `severity_schedule_name`

        Args:
            value (str): value for IDD Field `severity_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `severity_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `severity_schedule_name`')

        self._data["Severity Schedule Name"] = value

    @property
    def fouling_input_method(self):
        """Get fouling_input_method

        Returns:
            str: the value of `fouling_input_method` or None if not set
        """
        return self._data["Fouling Input Method"]

    @fouling_input_method.setter
    def fouling_input_method(self, value="FouledUARated"):
        """  Corresponds to IDD Field `fouling_input_method`

        Args:
            value (str): value for IDD Field `fouling_input_method`
                Accepted values are:
                      - FouledUARated
                      - FoulingFactor
                Default value: FouledUARated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fouling_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fouling_input_method`')
            vals = set()
            vals.add("FouledUARated")
            vals.add("FoulingFactor")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fouling_input_method`'.format(value))

        self._data["Fouling Input Method"] = value

    @property
    def uafouled(self):
        """Get uafouled

        Returns:
            float: the value of `uafouled` or None if not set
        """
        return self._data["UAFouled"]

    @uafouled.setter
    def uafouled(self, value=None):
        """  Corresponds to IDD Field `uafouled`
        Fouling coil UA value under rating conditions
        For Fouling Input Method: FouledUARated

        Args:
            value (float): value for IDD Field `uafouled`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `uafouled`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `uafouled`')

        self._data["UAFouled"] = value

    @property
    def water_side_fouling_factor(self):
        """Get water_side_fouling_factor

        Returns:
            float: the value of `water_side_fouling_factor` or None if not set
        """
        return self._data["Water Side Fouling Factor"]

    @water_side_fouling_factor.setter
    def water_side_fouling_factor(self, value=0.0 ):
        """  Corresponds to IDD Field `water_side_fouling_factor`
        For Fouling Input Method: FoulingFactor

        Args:
            value (float): value for IDD Field `water_side_fouling_factor`
                Units: m2-K/W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_side_fouling_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `water_side_fouling_factor`')

        self._data["Water Side Fouling Factor"] = value

    @property
    def air_side_fouling_factor(self):
        """Get air_side_fouling_factor

        Returns:
            float: the value of `air_side_fouling_factor` or None if not set
        """
        return self._data["Air Side Fouling Factor"]

    @air_side_fouling_factor.setter
    def air_side_fouling_factor(self, value=0.0 ):
        """  Corresponds to IDD Field `air_side_fouling_factor`
        For Fouling Input Method: FoulingFactor

        Args:
            value (float): value for IDD Field `air_side_fouling_factor`
                Units: m2-K/W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `air_side_fouling_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `air_side_fouling_factor`')

        self._data["Air Side Fouling Factor"] = value

    @property
    def outside_coil_surface_area(self):
        """Get outside_coil_surface_area

        Returns:
            float: the value of `outside_coil_surface_area` or None if not set
        """
        return self._data["Outside Coil Surface Area"]

    @outside_coil_surface_area.setter
    def outside_coil_surface_area(self, value=None):
        """  Corresponds to IDD Field `outside_coil_surface_area`
        For Fouling Input Method: FoulingFactor

        Args:
            value (float): value for IDD Field `outside_coil_surface_area`
                Units: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outside_coil_surface_area`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `outside_coil_surface_area`')

        self._data["Outside Coil Surface Area"] = value

    @property
    def inside_to_outside_coil_surface_area_ratio(self):
        """Get inside_to_outside_coil_surface_area_ratio

        Returns:
            float: the value of `inside_to_outside_coil_surface_area_ratio` or None if not set
        """
        return self._data["Inside to Outside Coil Surface Area Ratio"]

    @inside_to_outside_coil_surface_area_ratio.setter
    def inside_to_outside_coil_surface_area_ratio(self, value=0.07 ):
        """  Corresponds to IDD Field `inside_to_outside_coil_surface_area_ratio`
        For Fouling Input Method: FoulingFactor

        Args:
            value (float): value for IDD Field `inside_to_outside_coil_surface_area_ratio`
                Units: dimensionless
                Default value: 0.07
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `inside_to_outside_coil_surface_area_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `inside_to_outside_coil_surface_area_ratio`')

        self._data["Inside to Outside Coil Surface Area Ratio"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.coil_name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.severity_schedule_name))
        out.append(self._to_str(self.fouling_input_method))
        out.append(self._to_str(self.uafouled))
        out.append(self._to_str(self.water_side_fouling_factor))
        out.append(self._to_str(self.air_side_fouling_factor))
        out.append(self._to_str(self.outside_coil_surface_area))
        out.append(self._to_str(self.inside_to_outside_coil_surface_area_ratio))
        return ",".join(out)