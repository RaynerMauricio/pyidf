from collections import OrderedDict

class GeneratorInternalCombustionEngine(object):
    """ Corresponds to IDD object `Generator:InternalCombustionEngine`
        This generator model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Engine performance
        curves are generated by fitting catalog data to second order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Generator:InternalCombustionEngine"
    field_count = 21

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:InternalCombustionEngine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Power Output"] = None
        self._data["Electric Circuit Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Shaft Power Curve Name"] = None
        self._data["Jacket Heat Recovery Curve Name"] = None
        self._data["Lube Heat Recovery Curve Name"] = None
        self._data["Total Exhaust Energy Curve Name"] = None
        self._data["Exhaust Temperature Curve Name"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Minimum Exhaust Temperature"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Fuel Type"] = None
        self._data["Heat Recovery Maximum Temperature"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_power_output = None
        else:
            self.rated_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_circuit_node_name = None
        else:
            self.electric_circuit_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shaft_power_curve_name = None
        else:
            self.shaft_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.jacket_heat_recovery_curve_name = None
        else:
            self.jacket_heat_recovery_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.lube_heat_recovery_curve_name = None
        else:
            self.lube_heat_recovery_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_exhaust_energy_curve_name = None
        else:
            self.total_exhaust_energy_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_temperature_curve_name = None
        else:
            self.exhaust_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_minimum_exhaust_temperature = None
        else:
            self.design_minimum_exhaust_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_maximum_temperature = None
        else:
            self.heat_recovery_maximum_temperature = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_power_output(self):
        """Get rated_power_output

        Returns:
            float: the value of `rated_power_output` or None if not set
        """
        return self._data["Rated Power Output"]

    @rated_power_output.setter
    def rated_power_output(self, value=None):
        """  Corresponds to IDD Field `rated_power_output`

        Args:
            value (float): value for IDD Field `rated_power_output`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_power_output`'.format(value))

        self._data["Rated Power Output"] = value

    @property
    def electric_circuit_node_name(self):
        """Get electric_circuit_node_name

        Returns:
            str: the value of `electric_circuit_node_name` or None if not set
        """
        return self._data["Electric Circuit Node Name"]

    @electric_circuit_node_name.setter
    def electric_circuit_node_name(self, value=None):
        """  Corresponds to IDD Field `electric_circuit_node_name`

        Args:
            value (str): value for IDD Field `electric_circuit_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_circuit_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_circuit_node_name`')

        self._data["Electric Circuit Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))

        self._data["Optimum Part Load Ratio"] = value

    @property
    def shaft_power_curve_name(self):
        """Get shaft_power_curve_name

        Returns:
            str: the value of `shaft_power_curve_name` or None if not set
        """
        return self._data["Shaft Power Curve Name"]

    @shaft_power_curve_name.setter
    def shaft_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `shaft_power_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `shaft_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `shaft_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shaft_power_curve_name`')

        self._data["Shaft Power Curve Name"] = value

    @property
    def jacket_heat_recovery_curve_name(self):
        """Get jacket_heat_recovery_curve_name

        Returns:
            str: the value of `jacket_heat_recovery_curve_name` or None if not set
        """
        return self._data["Jacket Heat Recovery Curve Name"]

    @jacket_heat_recovery_curve_name.setter
    def jacket_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `jacket_heat_recovery_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `jacket_heat_recovery_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `jacket_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `jacket_heat_recovery_curve_name`')

        self._data["Jacket Heat Recovery Curve Name"] = value

    @property
    def lube_heat_recovery_curve_name(self):
        """Get lube_heat_recovery_curve_name

        Returns:
            str: the value of `lube_heat_recovery_curve_name` or None if not set
        """
        return self._data["Lube Heat Recovery Curve Name"]

    @lube_heat_recovery_curve_name.setter
    def lube_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `lube_heat_recovery_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `lube_heat_recovery_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `lube_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lube_heat_recovery_curve_name`')

        self._data["Lube Heat Recovery Curve Name"] = value

    @property
    def total_exhaust_energy_curve_name(self):
        """Get total_exhaust_energy_curve_name

        Returns:
            str: the value of `total_exhaust_energy_curve_name` or None if not set
        """
        return self._data["Total Exhaust Energy Curve Name"]

    @total_exhaust_energy_curve_name.setter
    def total_exhaust_energy_curve_name(self, value=None):
        """  Corresponds to IDD Field `total_exhaust_energy_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `total_exhaust_energy_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_exhaust_energy_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_exhaust_energy_curve_name`')

        self._data["Total Exhaust Energy Curve Name"] = value

    @property
    def exhaust_temperature_curve_name(self):
        """Get exhaust_temperature_curve_name

        Returns:
            str: the value of `exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Temperature Curve Name"]

    @exhaust_temperature_curve_name.setter
    def exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `exhaust_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_temperature_curve_name`')

        self._data["Exhaust Temperature Curve Name"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_ufactor_times_area_curve`
        curve = C1 * Generator Rated Power Output**C2

        Args:
            value (float): value for IDD Field `coefficient_1_of_ufactor_times_area_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))

        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_ufactor_times_area_curve`
        curve = C1 * Generator Rated Power Output**C2
        typical value .9

        Args:
            value (float): value for IDD Field `coefficient_2_of_ufactor_times_area_curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')

        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_exhaust_flow_per_unit_of_power_output`

        Args:
            value (float): value for IDD Field `maximum_exhaust_flow_per_unit_of_power_output`
                Unit: (kg/s)/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))

        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_minimum_exhaust_temperature(self):
        """Get design_minimum_exhaust_temperature

        Returns:
            float: the value of `design_minimum_exhaust_temperature` or None if not set
        """
        return self._data["Design Minimum Exhaust Temperature"]

    @design_minimum_exhaust_temperature.setter
    def design_minimum_exhaust_temperature(self, value=None):
        """  Corresponds to IDD Field `design_minimum_exhaust_temperature`

        Args:
            value (float): value for IDD Field `design_minimum_exhaust_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_minimum_exhaust_temperature`'.format(value))

        self._data["Design Minimum Exhaust Temperature"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Unit: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))

        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        if non-zero, then inlet, outlet nodes must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="Diesel"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: Diesel
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def heat_recovery_maximum_temperature(self):
        """Get heat_recovery_maximum_temperature

        Returns:
            float: the value of `heat_recovery_maximum_temperature` or None if not set
        """
        return self._data["Heat Recovery Maximum Temperature"]

    @heat_recovery_maximum_temperature.setter
    def heat_recovery_maximum_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `heat_recovery_maximum_temperature`

        Args:
            value (float): value for IDD Field `heat_recovery_maximum_temperature`
                Unit: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_maximum_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_maximum_temperature`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `heat_recovery_maximum_temperature`')

        self._data["Heat Recovery Maximum Temperature"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_power_output))
        out.append(self._to_str(self.electric_circuit_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.shaft_power_curve_name))
        out.append(self._to_str(self.jacket_heat_recovery_curve_name))
        out.append(self._to_str(self.lube_heat_recovery_curve_name))
        out.append(self._to_str(self.total_exhaust_energy_curve_name))
        out.append(self._to_str(self.exhaust_temperature_curve_name))
        out.append(self._to_str(self.coefficient_1_of_ufactor_times_area_curve))
        out.append(self._to_str(self.coefficient_2_of_ufactor_times_area_curve))
        out.append(self._to_str(self.maximum_exhaust_flow_per_unit_of_power_output))
        out.append(self._to_str(self.design_minimum_exhaust_temperature))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.heat_recovery_maximum_temperature))
        return ",".join(out)

class GeneratorCombustionTurbine(object):
    """ Corresponds to IDD object `Generator:CombustionTurbine`
        This generator model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Generator performance
        curves are generated by fitting catalog data to second order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Generator:CombustionTurbine"
    field_count = 24

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:CombustionTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Power Output"] = None
        self._data["Electric Circuit Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Part Load Based Fuel Input Curve Name"] = None
        self._data["Temperature Based Fuel Input Curve Name"] = None
        self._data["Exhaust Flow Curve Name"] = None
        self._data["Part Load Based Exhaust Temperature Curve Name"] = None
        self._data["Temperature Based Exhaust Temperature Curve Name"] = None
        self._data["Heat Recovery Lube Energy Curve Name"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Minimum Exhaust Temperature"] = None
        self._data["Design Air Inlet Temperature"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Fuel Type"] = None
        self._data["Heat Recovery Maximum Temperature"] = None
        self._data["Outdoor Air Inlet Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_power_output = None
        else:
            self.rated_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electric_circuit_node_name = None
        else:
            self.electric_circuit_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.part_load_based_fuel_input_curve_name = None
        else:
            self.part_load_based_fuel_input_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_based_fuel_input_curve_name = None
        else:
            self.temperature_based_fuel_input_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_flow_curve_name = None
        else:
            self.exhaust_flow_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.part_load_based_exhaust_temperature_curve_name = None
        else:
            self.part_load_based_exhaust_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_based_exhaust_temperature_curve_name = None
        else:
            self.temperature_based_exhaust_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_lube_energy_curve_name = None
        else:
            self.heat_recovery_lube_energy_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_minimum_exhaust_temperature = None
        else:
            self.design_minimum_exhaust_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_air_inlet_temperature = None
        else:
            self.design_air_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_maximum_temperature = None
        else:
            self.heat_recovery_maximum_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_inlet_node_name = None
        else:
            self.outdoor_air_inlet_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def rated_power_output(self):
        """Get rated_power_output

        Returns:
            float: the value of `rated_power_output` or None if not set
        """
        return self._data["Rated Power Output"]

    @rated_power_output.setter
    def rated_power_output(self, value=None):
        """  Corresponds to IDD Field `rated_power_output`

        Args:
            value (float): value for IDD Field `rated_power_output`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_power_output`'.format(value))

        self._data["Rated Power Output"] = value

    @property
    def electric_circuit_node_name(self):
        """Get electric_circuit_node_name

        Returns:
            str: the value of `electric_circuit_node_name` or None if not set
        """
        return self._data["Electric Circuit Node Name"]

    @electric_circuit_node_name.setter
    def electric_circuit_node_name(self, value=None):
        """  Corresponds to IDD Field `electric_circuit_node_name`

        Args:
            value (str): value for IDD Field `electric_circuit_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electric_circuit_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_circuit_node_name`')

        self._data["Electric Circuit Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `minimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `minimum_part_load_ratio`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_part_load_ratio`')

        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `maximum_part_load_ratio`

        Args:
            value (float): value for IDD Field `maximum_part_load_ratio`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_part_load_ratio`')

        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `optimum_part_load_ratio`

        Args:
            value (float): value for IDD Field `optimum_part_load_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `optimum_part_load_ratio`'.format(value))

        self._data["Optimum Part Load Ratio"] = value

    @property
    def part_load_based_fuel_input_curve_name(self):
        """Get part_load_based_fuel_input_curve_name

        Returns:
            str: the value of `part_load_based_fuel_input_curve_name` or None if not set
        """
        return self._data["Part Load Based Fuel Input Curve Name"]

    @part_load_based_fuel_input_curve_name.setter
    def part_load_based_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `part_load_based_fuel_input_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output
        this curve is multiplied to the Temperature Based Fuel Input Curve
        to determine Fuel Energy In

        Args:
            value (str): value for IDD Field `part_load_based_fuel_input_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_based_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_based_fuel_input_curve_name`')

        self._data["Part Load Based Fuel Input Curve Name"] = value

    @property
    def temperature_based_fuel_input_curve_name(self):
        """Get temperature_based_fuel_input_curve_name

        Returns:
            str: the value of `temperature_based_fuel_input_curve_name` or None if not set
        """
        return self._data["Temperature Based Fuel Input Curve Name"]

    @temperature_based_fuel_input_curve_name.setter
    def temperature_based_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `temperature_based_fuel_input_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T
        this curve is multiplied to the Part Load Based Fuel Input Curve
        to determine Fuel Energy In

        Args:
            value (str): value for IDD Field `temperature_based_fuel_input_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_based_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_based_fuel_input_curve_name`')

        self._data["Temperature Based Fuel Input Curve Name"] = value

    @property
    def exhaust_flow_curve_name(self):
        """Get exhaust_flow_curve_name

        Returns:
            str: the value of `exhaust_flow_curve_name` or None if not set
        """
        return self._data["Exhaust Flow Curve Name"]

    @exhaust_flow_curve_name.setter
    def exhaust_flow_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_flow_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T

        Args:
            value (str): value for IDD Field `exhaust_flow_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_flow_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_flow_curve_name`')

        self._data["Exhaust Flow Curve Name"] = value

    @property
    def part_load_based_exhaust_temperature_curve_name(self):
        """Get part_load_based_exhaust_temperature_curve_name

        Returns:
            str: the value of `part_load_based_exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Part Load Based Exhaust Temperature Curve Name"]

    @part_load_based_exhaust_temperature_curve_name.setter
    def part_load_based_exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `part_load_based_exhaust_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output
        this curve is multiplied to the Temperature Based Exhaust Temperature Curve
        to determine Exhaust Temperature

        Args:
            value (str): value for IDD Field `part_load_based_exhaust_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_based_exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_based_exhaust_temperature_curve_name`')

        self._data["Part Load Based Exhaust Temperature Curve Name"] = value

    @property
    def temperature_based_exhaust_temperature_curve_name(self):
        """Get temperature_based_exhaust_temperature_curve_name

        Returns:
            str: the value of `temperature_based_exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Temperature Based Exhaust Temperature Curve Name"]

    @temperature_based_exhaust_temperature_curve_name.setter
    def temperature_based_exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `temperature_based_exhaust_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T
        this curve is multiplied to the Part Load Based Exhaust Temperatuer Curve
        to determine Exhaust Temperature

        Args:
            value (str): value for IDD Field `temperature_based_exhaust_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_based_exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_based_exhaust_temperature_curve_name`')

        self._data["Temperature Based Exhaust Temperature Curve Name"] = value

    @property
    def heat_recovery_lube_energy_curve_name(self):
        """Get heat_recovery_lube_energy_curve_name

        Returns:
            str: the value of `heat_recovery_lube_energy_curve_name` or None if not set
        """
        return self._data["Heat Recovery Lube Energy Curve Name"]

    @heat_recovery_lube_energy_curve_name.setter
    def heat_recovery_lube_energy_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_lube_energy_curve_name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `heat_recovery_lube_energy_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_lube_energy_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_lube_energy_curve_name`')

        self._data["Heat Recovery Lube Energy Curve Name"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_1_of_ufactor_times_area_curve`
        curve = C1 * Rated Power Output**C2

        Args:
            value (float): value for IDD Field `coefficient_1_of_ufactor_times_area_curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))

        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `coefficient_2_of_ufactor_times_area_curve`
        curve = C1 * Rated Power Output**C2
        typical value .9

        Args:
            value (float): value for IDD Field `coefficient_2_of_ufactor_times_area_curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')

        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_exhaust_flow_per_unit_of_power_output`

        Args:
            value (float): value for IDD Field `maximum_exhaust_flow_per_unit_of_power_output`
                Unit: (Kg/s)/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))

        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_minimum_exhaust_temperature(self):
        """Get design_minimum_exhaust_temperature

        Returns:
            float: the value of `design_minimum_exhaust_temperature` or None if not set
        """
        return self._data["Design Minimum Exhaust Temperature"]

    @design_minimum_exhaust_temperature.setter
    def design_minimum_exhaust_temperature(self, value=None):
        """  Corresponds to IDD Field `design_minimum_exhaust_temperature`

        Args:
            value (float): value for IDD Field `design_minimum_exhaust_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_minimum_exhaust_temperature`'.format(value))

        self._data["Design Minimum Exhaust Temperature"] = value

    @property
    def design_air_inlet_temperature(self):
        """Get design_air_inlet_temperature

        Returns:
            float: the value of `design_air_inlet_temperature` or None if not set
        """
        return self._data["Design Air Inlet Temperature"]

    @design_air_inlet_temperature.setter
    def design_air_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `design_air_inlet_temperature`

        Args:
            value (float): value for IDD Field `design_air_inlet_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_air_inlet_temperature`'.format(value))

        self._data["Design Air Inlet Temperature"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Unit: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))

        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        if non-zero, then inlet, outlet nodes must be entered.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')

        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')

        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def heat_recovery_maximum_temperature(self):
        """Get heat_recovery_maximum_temperature

        Returns:
            float: the value of `heat_recovery_maximum_temperature` or None if not set
        """
        return self._data["Heat Recovery Maximum Temperature"]

    @heat_recovery_maximum_temperature.setter
    def heat_recovery_maximum_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `heat_recovery_maximum_temperature`

        Args:
            value (float): value for IDD Field `heat_recovery_maximum_temperature`
                Unit: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_maximum_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_maximum_temperature`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `heat_recovery_maximum_temperature`')

        self._data["Heat Recovery Maximum Temperature"] = value

    @property
    def outdoor_air_inlet_node_name(self):
        """Get outdoor_air_inlet_node_name

        Returns:
            str: the value of `outdoor_air_inlet_node_name` or None if not set
        """
        return self._data["Outdoor Air Inlet Node Name"]

    @outdoor_air_inlet_node_name.setter
    def outdoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_inlet_node_name`
        Enter the name of an outdoor air node

        Args:
            value (str): value for IDD Field `outdoor_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_inlet_node_name`')

        self._data["Outdoor Air Inlet Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.rated_power_output))
        out.append(self._to_str(self.electric_circuit_node_name))
        out.append(self._to_str(self.minimum_part_load_ratio))
        out.append(self._to_str(self.maximum_part_load_ratio))
        out.append(self._to_str(self.optimum_part_load_ratio))
        out.append(self._to_str(self.part_load_based_fuel_input_curve_name))
        out.append(self._to_str(self.temperature_based_fuel_input_curve_name))
        out.append(self._to_str(self.exhaust_flow_curve_name))
        out.append(self._to_str(self.part_load_based_exhaust_temperature_curve_name))
        out.append(self._to_str(self.temperature_based_exhaust_temperature_curve_name))
        out.append(self._to_str(self.heat_recovery_lube_energy_curve_name))
        out.append(self._to_str(self.coefficient_1_of_ufactor_times_area_curve))
        out.append(self._to_str(self.coefficient_2_of_ufactor_times_area_curve))
        out.append(self._to_str(self.maximum_exhaust_flow_per_unit_of_power_output))
        out.append(self._to_str(self.design_minimum_exhaust_temperature))
        out.append(self._to_str(self.design_air_inlet_temperature))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_outlet_node_name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.heat_recovery_maximum_temperature))
        out.append(self._to_str(self.outdoor_air_inlet_node_name))
        return ",".join(out)

class GeneratorMicroTurbine(object):
    """ Corresponds to IDD object `Generator:MicroTurbine`
        MicroTurbine generators are small combustion turbines (e.g., 25kW to 500kW). The model
        calculates electrical power output, fuel use, standby and ancillary power.
        Energy recovery from exhaust air can be used to heat water.
    """
    internal_name = "Generator:MicroTurbine"
    field_count = 39

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:MicroTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Electrical Power Output"] = None
        self._data["Minimum Full Load Electrical Power Output"] = None
        self._data["Maximum Full Load Electrical Power Output"] = None
        self._data["Reference Electrical Efficiency Using Lower Heating Value"] = None
        self._data["Reference Combustion Air Inlet Temperature"] = None
        self._data["Reference Combustion Air Inlet Humidity Ratio"] = None
        self._data["Reference Elevation"] = None
        self._data["Electrical Power Function of Temperature and Elevation Curve Name"] = None
        self._data["Electrical Efficiency Function of Temperature Curve Name"] = None
        self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"] = None
        self._data["Fuel Type"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Fuel Lower Heating Value"] = None
        self._data["Standby Power"] = None
        self._data["Ancillary Power"] = None
        self._data["Ancillary Power Function of Fuel Input Curve Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Reference Thermal Efficiency Using Lower Heat Value"] = None
        self._data["Reference Inlet Water Temperature"] = None
        self._data["Heat Recovery Water Flow Operating Mode"] = None
        self._data["Reference Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"] = None
        self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"] = None
        self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"] = None
        self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"] = None
        self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"] = None
        self._data["Minimum Heat Recovery Water Flow Rate"] = None
        self._data["Maximum Heat Recovery Water Flow Rate"] = None
        self._data["Maximum Heat Recovery Water Temperature"] = None
        self._data["Combustion Air Inlet Node Name"] = None
        self._data["Combustion Air Outlet Node Name"] = None
        self._data["Reference Exhaust Air Mass Flow Rate"] = None
        self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"] = None
        self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"] = None
        self._data["Nominal Exhaust Air Outlet Temperature"] = None
        self._data["Exhaust Air Temperature Function of Temperature Curve Name"] = None
        self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_electrical_power_output = None
        else:
            self.reference_electrical_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_full_load_electrical_power_output = None
        else:
            self.minimum_full_load_electrical_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_full_load_electrical_power_output = None
        else:
            self.maximum_full_load_electrical_power_output = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_electrical_efficiency_using_lower_heating_value = None
        else:
            self.reference_electrical_efficiency_using_lower_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_combustion_air_inlet_temperature = None
        else:
            self.reference_combustion_air_inlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_combustion_air_inlet_humidity_ratio = None
        else:
            self.reference_combustion_air_inlet_humidity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_elevation = None
        else:
            self.reference_elevation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_power_function_of_temperature_and_elevation_curve_name = None
        else:
            self.electrical_power_function_of_temperature_and_elevation_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_efficiency_function_of_temperature_curve_name = None
        else:
            self.electrical_efficiency_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_efficiency_function_of_part_load_ratio_curve_name = None
        else:
            self.electrical_efficiency_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_lower_heating_value = None
        else:
            self.fuel_lower_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.standby_power = None
        else:
            self.standby_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancillary_power = None
        else:
            self.ancillary_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancillary_power_function_of_fuel_input_curve_name = None
        else:
            self.ancillary_power_function_of_fuel_input_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_thermal_efficiency_using_lower_heat_value = None
        else:
            self.reference_thermal_efficiency_using_lower_heat_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_inlet_water_temperature = None
        else:
            self.reference_inlet_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_flow_operating_mode = None
        else:
            self.heat_recovery_water_flow_operating_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_heat_recovery_water_flow_rate = None
        else:
            self.reference_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name = None
        else:
            self.heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_efficiency_function_of_temperature_and_elevation_curve_name = None
        else:
            self.thermal_efficiency_function_of_temperature_and_elevation_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_part_load_ratio_curve_name = None
        else:
            self.heat_recovery_rate_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_inlet_water_temperature_curve_name = None
        else:
            self.heat_recovery_rate_function_of_inlet_water_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_water_flow_rate_curve_name = None
        else:
            self.heat_recovery_rate_function_of_water_flow_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_heat_recovery_water_flow_rate = None
        else:
            self.minimum_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heat_recovery_water_flow_rate = None
        else:
            self.maximum_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heat_recovery_water_temperature = None
        else:
            self.maximum_heat_recovery_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.combustion_air_inlet_node_name = None
        else:
            self.combustion_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.combustion_air_outlet_node_name = None
        else:
            self.combustion_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_exhaust_air_mass_flow_rate = None
        else:
            self.reference_exhaust_air_mass_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_flow_rate_function_of_temperature_curve_name = None
        else:
            self.exhaust_air_flow_rate_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_flow_rate_function_of_part_load_ratio_curve_name = None
        else:
            self.exhaust_air_flow_rate_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_exhaust_air_outlet_temperature = None
        else:
            self.nominal_exhaust_air_outlet_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_temperature_function_of_temperature_curve_name = None
        else:
            self.exhaust_air_temperature_function_of_temperature_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_temperature_function_of_part_load_ratio_curve_name = None
        else:
            self.exhaust_air_temperature_function_of_part_load_ratio_curve_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reference_electrical_power_output(self):
        """Get reference_electrical_power_output

        Returns:
            float: the value of `reference_electrical_power_output` or None if not set
        """
        return self._data["Reference Electrical Power Output"]

    @reference_electrical_power_output.setter
    def reference_electrical_power_output(self, value=None):
        """  Corresponds to IDD Field `reference_electrical_power_output`

        Args:
            value (float): value for IDD Field `reference_electrical_power_output`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_electrical_power_output`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_electrical_power_output`')

        self._data["Reference Electrical Power Output"] = value

    @property
    def minimum_full_load_electrical_power_output(self):
        """Get minimum_full_load_electrical_power_output

        Returns:
            float: the value of `minimum_full_load_electrical_power_output` or None if not set
        """
        return self._data["Minimum Full Load Electrical Power Output"]

    @minimum_full_load_electrical_power_output.setter
    def minimum_full_load_electrical_power_output(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_full_load_electrical_power_output`

        Args:
            value (float): value for IDD Field `minimum_full_load_electrical_power_output`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_full_load_electrical_power_output`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_full_load_electrical_power_output`')

        self._data["Minimum Full Load Electrical Power Output"] = value

    @property
    def maximum_full_load_electrical_power_output(self):
        """Get maximum_full_load_electrical_power_output

        Returns:
            float: the value of `maximum_full_load_electrical_power_output` or None if not set
        """
        return self._data["Maximum Full Load Electrical Power Output"]

    @maximum_full_load_electrical_power_output.setter
    def maximum_full_load_electrical_power_output(self, value=None):
        """  Corresponds to IDD Field `maximum_full_load_electrical_power_output`
        If left blank, Maximum Full Load Electrical Power Output will be set
        equal to the Reference Electrical Power Output.

        Args:
            value (float): value for IDD Field `maximum_full_load_electrical_power_output`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_full_load_electrical_power_output`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_full_load_electrical_power_output`')

        self._data["Maximum Full Load Electrical Power Output"] = value

    @property
    def reference_electrical_efficiency_using_lower_heating_value(self):
        """Get reference_electrical_efficiency_using_lower_heating_value

        Returns:
            float: the value of `reference_electrical_efficiency_using_lower_heating_value` or None if not set
        """
        return self._data["Reference Electrical Efficiency Using Lower Heating Value"]

    @reference_electrical_efficiency_using_lower_heating_value.setter
    def reference_electrical_efficiency_using_lower_heating_value(self, value=None):
        """  Corresponds to IDD Field `reference_electrical_efficiency_using_lower_heating_value`
        Electric power output divided by fuel energy input (LHV basis)
        at reference conditions.

        Args:
            value (float): value for IDD Field `reference_electrical_efficiency_using_lower_heating_value`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`')

        self._data["Reference Electrical Efficiency Using Lower Heating Value"] = value

    @property
    def reference_combustion_air_inlet_temperature(self):
        """Get reference_combustion_air_inlet_temperature

        Returns:
            float: the value of `reference_combustion_air_inlet_temperature` or None if not set
        """
        return self._data["Reference Combustion Air Inlet Temperature"]

    @reference_combustion_air_inlet_temperature.setter
    def reference_combustion_air_inlet_temperature(self, value=15.0 ):
        """  Corresponds to IDD Field `reference_combustion_air_inlet_temperature`

        Args:
            value (float): value for IDD Field `reference_combustion_air_inlet_temperature`
                Unit: C
                Default value: 15.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_combustion_air_inlet_temperature`'.format(value))

        self._data["Reference Combustion Air Inlet Temperature"] = value

    @property
    def reference_combustion_air_inlet_humidity_ratio(self):
        """Get reference_combustion_air_inlet_humidity_ratio

        Returns:
            float: the value of `reference_combustion_air_inlet_humidity_ratio` or None if not set
        """
        return self._data["Reference Combustion Air Inlet Humidity Ratio"]

    @reference_combustion_air_inlet_humidity_ratio.setter
    def reference_combustion_air_inlet_humidity_ratio(self, value=0.00638 ):
        """  Corresponds to IDD Field `reference_combustion_air_inlet_humidity_ratio`

        Args:
            value (float): value for IDD Field `reference_combustion_air_inlet_humidity_ratio`
                Unit: kgWater/kgDryAir
                Default value: 0.00638
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_combustion_air_inlet_humidity_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_combustion_air_inlet_humidity_ratio`')

        self._data["Reference Combustion Air Inlet Humidity Ratio"] = value

    @property
    def reference_elevation(self):
        """Get reference_elevation

        Returns:
            float: the value of `reference_elevation` or None if not set
        """
        return self._data["Reference Elevation"]

    @reference_elevation.setter
    def reference_elevation(self, value=0.0 ):
        """  Corresponds to IDD Field `reference_elevation`

        Args:
            value (float): value for IDD Field `reference_elevation`
                Unit: m
                Default value: 0.0
                value >= -300.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_elevation`'.format(value))
            if value < -300.0:
                raise ValueError('value need to be greater or equal -300.0 '
                                 'for field `reference_elevation`')

        self._data["Reference Elevation"] = value

    @property
    def electrical_power_function_of_temperature_and_elevation_curve_name(self):
        """Get electrical_power_function_of_temperature_and_elevation_curve_name

        Returns:
            str: the value of `electrical_power_function_of_temperature_and_elevation_curve_name` or None if not set
        """
        return self._data["Electrical Power Function of Temperature and Elevation Curve Name"]

    @electrical_power_function_of_temperature_and_elevation_curve_name.setter
    def electrical_power_function_of_temperature_and_elevation_curve_name(self, value=None):
        """  Corresponds to IDD Field `electrical_power_function_of_temperature_and_elevation_curve_name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev
        T = combustion air inlet temperature (C)
        Elev = elevation (m)

        Args:
            value (str): value for IDD Field `electrical_power_function_of_temperature_and_elevation_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_power_function_of_temperature_and_elevation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_power_function_of_temperature_and_elevation_curve_name`')

        self._data["Electrical Power Function of Temperature and Elevation Curve Name"] = value

    @property
    def electrical_efficiency_function_of_temperature_curve_name(self):
        """Get electrical_efficiency_function_of_temperature_curve_name

        Returns:
            str: the value of `electrical_efficiency_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Function of Temperature Curve Name"]

    @electrical_efficiency_function_of_temperature_curve_name.setter
    def electrical_efficiency_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `electrical_efficiency_function_of_temperature_curve_name`
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)

        Args:
            value (str): value for IDD Field `electrical_efficiency_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_efficiency_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_function_of_temperature_curve_name`')

        self._data["Electrical Efficiency Function of Temperature Curve Name"] = value

    @property
    def electrical_efficiency_function_of_part_load_ratio_curve_name(self):
        """Get electrical_efficiency_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electrical_efficiency_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"]

    @electrical_efficiency_function_of_part_load_ratio_curve_name.setter
    def electrical_efficiency_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `electrical_efficiency_function_of_part_load_ratio_curve_name`
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions

        Args:
            value (str): value for IDD Field `electrical_efficiency_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_efficiency_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_function_of_part_load_ratio_curve_name`')

        self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=50000.0 ):
        """  Corresponds to IDD Field `fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `fuel_higher_heating_value`
                Unit: kJ/kg
                Default value: 50000.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_higher_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fuel_higher_heating_value`')

        self._data["Fuel Higher Heating Value"] = value

    @property
    def fuel_lower_heating_value(self):
        """Get fuel_lower_heating_value

        Returns:
            float: the value of `fuel_lower_heating_value` or None if not set
        """
        return self._data["Fuel Lower Heating Value"]

    @fuel_lower_heating_value.setter
    def fuel_lower_heating_value(self, value=45450.0 ):
        """  Corresponds to IDD Field `fuel_lower_heating_value`

        Args:
            value (float): value for IDD Field `fuel_lower_heating_value`
                Unit: kJ/kg
                Default value: 45450.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fuel_lower_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fuel_lower_heating_value`')

        self._data["Fuel Lower Heating Value"] = value

    @property
    def standby_power(self):
        """Get standby_power

        Returns:
            float: the value of `standby_power` or None if not set
        """
        return self._data["Standby Power"]

    @standby_power.setter
    def standby_power(self, value=0.0 ):
        """  Corresponds to IDD Field `standby_power`
        Electric power consumed when the generator is available but not being called
        by the Electric Load Center.

        Args:
            value (float): value for IDD Field `standby_power`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `standby_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `standby_power`')

        self._data["Standby Power"] = value

    @property
    def ancillary_power(self):
        """Get ancillary_power

        Returns:
            float: the value of `ancillary_power` or None if not set
        """
        return self._data["Ancillary Power"]

    @ancillary_power.setter
    def ancillary_power(self, value=0.0 ):
        """  Corresponds to IDD Field `ancillary_power`
        Electric power consumed by ancillary equipment (e.g., external fuel pressurization pump).
        Set to zero if Reference Electrical Power Output is the 'net' value (ancillary power
        already deducted). Input value is positive, but indicates negative electric generation.

        Args:
            value (float): value for IDD Field `ancillary_power`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancillary_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ancillary_power`')

        self._data["Ancillary Power"] = value

    @property
    def ancillary_power_function_of_fuel_input_curve_name(self):
        """Get ancillary_power_function_of_fuel_input_curve_name

        Returns:
            str: the value of `ancillary_power_function_of_fuel_input_curve_name` or None if not set
        """
        return self._data["Ancillary Power Function of Fuel Input Curve Name"]

    @ancillary_power_function_of_fuel_input_curve_name.setter
    def ancillary_power_function_of_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `ancillary_power_function_of_fuel_input_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*mdot + c*mdot**2
        mdot = fuel mass flow rate (kg/s)
        If left blank, model assumes ancillary power defined in previous field is constant
        whenever the generator is operating.

        Args:
            value (str): value for IDD Field `ancillary_power_function_of_fuel_input_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ancillary_power_function_of_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ancillary_power_function_of_fuel_input_curve_name`')

        self._data["Ancillary Power Function of Fuel Input Curve Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')

        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')

        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def reference_thermal_efficiency_using_lower_heat_value(self):
        """Get reference_thermal_efficiency_using_lower_heat_value

        Returns:
            float: the value of `reference_thermal_efficiency_using_lower_heat_value` or None if not set
        """
        return self._data["Reference Thermal Efficiency Using Lower Heat Value"]

    @reference_thermal_efficiency_using_lower_heat_value.setter
    def reference_thermal_efficiency_using_lower_heat_value(self, value=0.0 ):
        """  Corresponds to IDD Field `reference_thermal_efficiency_using_lower_heat_value`
        Reference thermal efficiency (heat recovery to water) based on the
        Lower Heating Value (LHV) of the fuel.

        Args:
            value (float): value for IDD Field `reference_thermal_efficiency_using_lower_heat_value`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`')

        self._data["Reference Thermal Efficiency Using Lower Heat Value"] = value

    @property
    def reference_inlet_water_temperature(self):
        """Get reference_inlet_water_temperature

        Returns:
            float: the value of `reference_inlet_water_temperature` or None if not set
        """
        return self._data["Reference Inlet Water Temperature"]

    @reference_inlet_water_temperature.setter
    def reference_inlet_water_temperature(self, value=None):
        """  Corresponds to IDD Field `reference_inlet_water_temperature`

        Args:
            value (float): value for IDD Field `reference_inlet_water_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_inlet_water_temperature`'.format(value))

        self._data["Reference Inlet Water Temperature"] = value

    @property
    def heat_recovery_water_flow_operating_mode(self):
        """Get heat_recovery_water_flow_operating_mode

        Returns:
            str: the value of `heat_recovery_water_flow_operating_mode` or None if not set
        """
        return self._data["Heat Recovery Water Flow Operating Mode"]

    @heat_recovery_water_flow_operating_mode.setter
    def heat_recovery_water_flow_operating_mode(self, value="PlantControl"):
        """  Corresponds to IDD Field `heat_recovery_water_flow_operating_mode`
        PlantControl means the heat recovery water flow rate is determined by the plant,
        but the user needs to supply a heat recovery water flow rate.
        InternalControl means the heat recovery water flow rate is controlled by this generator.
        If 'InternalControl' is selected, then the user needs to supply a reference heat
        recovery water flow rate and optionally the name of a heat recovery flow rate modifier curve.

        Args:
            value (str): value for IDD Field `heat_recovery_water_flow_operating_mode`
                Accepted values are:
                      - PlantControl
                      - InternalControl
                Default value: PlantControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_flow_operating_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_flow_operating_mode`')
            vals = set()
            vals.add("PlantControl")
            vals.add("InternalControl")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_water_flow_operating_mode`'.format(value))

        self._data["Heat Recovery Water Flow Operating Mode"] = value

    @property
    def reference_heat_recovery_water_flow_rate(self):
        """Get reference_heat_recovery_water_flow_rate

        Returns:
            float: the value of `reference_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Reference Heat Recovery Water Flow Rate"]

    @reference_heat_recovery_water_flow_rate.setter
    def reference_heat_recovery_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `reference_heat_recovery_water_flow_rate`

        Args:
            value (float): value for IDD Field `reference_heat_recovery_water_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_heat_recovery_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_heat_recovery_water_flow_rate`')

        self._data["Reference Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name(self):
        """Get heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name

        Returns:
            str: the value of `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name` or None if not set
        """
        return self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"]

    @heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name.setter
    def heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*T + c*T**2 + d*Pnet + e*Pnet + f*T*Pnet
        T = heat recovery inlet water temperature
        Pnet = net power output = electric power output - ancillary power
        If left blank, model assumes the heat recovery water flow rate is constant whenever the
        generator is operating, at the Reference HR Water Flow Rate defined in the previous field.

        Args:
            value (str): value for IDD Field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`')

        self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"] = value

    @property
    def thermal_efficiency_function_of_temperature_and_elevation_curve_name(self):
        """Get thermal_efficiency_function_of_temperature_and_elevation_curve_name

        Returns:
            str: the value of `thermal_efficiency_function_of_temperature_and_elevation_curve_name` or None if not set
        """
        return self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"]

    @thermal_efficiency_function_of_temperature_and_elevation_curve_name.setter
    def thermal_efficiency_function_of_temperature_and_elevation_curve_name(self, value=None):
        """  Corresponds to IDD Field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`
        Table:TwoIndependentVariables object can also be used
        Bicubic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev + g*T**3 + h*Elev**3 + i*T**2*Elev + j*T*Elev**2
        Biquadratic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev
        T = combustion air inlet temperature (C)
        Elev = elevation (m)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`')

        self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_part_load_ratio_curve_name(self):
        """Get heat_recovery_rate_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"]

    @heat_recovery_rate_function_of_part_load_ratio_curve_name.setter
    def heat_recovery_rate_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_rate_function_of_part_load_ratio_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `heat_recovery_rate_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_rate_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_part_load_ratio_curve_name`')

        self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_inlet_water_temperature_curve_name(self):
        """Get heat_recovery_rate_function_of_inlet_water_temperature_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_inlet_water_temperature_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"]

    @heat_recovery_rate_function_of_inlet_water_temperature_curve_name.setter
    def heat_recovery_rate_function_of_inlet_water_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        T = inlet water temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`')

        self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_water_flow_rate_curve_name(self):
        """Get heat_recovery_rate_function_of_water_flow_rate_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_water_flow_rate_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"]

    @heat_recovery_rate_function_of_water_flow_rate_curve_name.setter
    def heat_recovery_rate_function_of_water_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_rate_function_of_water_flow_rate_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*Flow + c*Flow**2
        Flow = flow rate of water through the heat exchanger (m3/s)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `heat_recovery_rate_function_of_water_flow_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_rate_function_of_water_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_water_flow_rate_curve_name`')

        self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"] = value

    @property
    def minimum_heat_recovery_water_flow_rate(self):
        """Get minimum_heat_recovery_water_flow_rate

        Returns:
            float: the value of `minimum_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Minimum Heat Recovery Water Flow Rate"]

    @minimum_heat_recovery_water_flow_rate.setter
    def minimum_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_heat_recovery_water_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_heat_recovery_water_flow_rate`')

        self._data["Minimum Heat Recovery Water Flow Rate"] = value

    @property
    def maximum_heat_recovery_water_flow_rate(self):
        """Get maximum_heat_recovery_water_flow_rate

        Returns:
            float: the value of `maximum_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Maximum Heat Recovery Water Flow Rate"]

    @maximum_heat_recovery_water_flow_rate.setter
    def maximum_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `maximum_heat_recovery_water_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_heat_recovery_water_flow_rate`')

        self._data["Maximum Heat Recovery Water Flow Rate"] = value

    @property
    def maximum_heat_recovery_water_temperature(self):
        """Get maximum_heat_recovery_water_temperature

        Returns:
            float: the value of `maximum_heat_recovery_water_temperature` or None if not set
        """
        return self._data["Maximum Heat Recovery Water Temperature"]

    @maximum_heat_recovery_water_temperature.setter
    def maximum_heat_recovery_water_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_heat_recovery_water_temperature`

        Args:
            value (float): value for IDD Field `maximum_heat_recovery_water_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heat_recovery_water_temperature`'.format(value))

        self._data["Maximum Heat Recovery Water Temperature"] = value

    @property
    def combustion_air_inlet_node_name(self):
        """Get combustion_air_inlet_node_name

        Returns:
            str: the value of `combustion_air_inlet_node_name` or None if not set
        """
        return self._data["Combustion Air Inlet Node Name"]

    @combustion_air_inlet_node_name.setter
    def combustion_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `combustion_air_inlet_node_name`
        Must be an outdoor air node.

        Args:
            value (str): value for IDD Field `combustion_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `combustion_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `combustion_air_inlet_node_name`')

        self._data["Combustion Air Inlet Node Name"] = value

    @property
    def combustion_air_outlet_node_name(self):
        """Get combustion_air_outlet_node_name

        Returns:
            str: the value of `combustion_air_outlet_node_name` or None if not set
        """
        return self._data["Combustion Air Outlet Node Name"]

    @combustion_air_outlet_node_name.setter
    def combustion_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `combustion_air_outlet_node_name`

        Args:
            value (str): value for IDD Field `combustion_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `combustion_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `combustion_air_outlet_node_name`')

        self._data["Combustion Air Outlet Node Name"] = value

    @property
    def reference_exhaust_air_mass_flow_rate(self):
        """Get reference_exhaust_air_mass_flow_rate

        Returns:
            float: the value of `reference_exhaust_air_mass_flow_rate` or None if not set
        """
        return self._data["Reference Exhaust Air Mass Flow Rate"]

    @reference_exhaust_air_mass_flow_rate.setter
    def reference_exhaust_air_mass_flow_rate(self, value=None):
        """  Corresponds to IDD Field `reference_exhaust_air_mass_flow_rate`

        Args:
            value (float): value for IDD Field `reference_exhaust_air_mass_flow_rate`
                Unit: kg/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_exhaust_air_mass_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_exhaust_air_mass_flow_rate`')

        self._data["Reference Exhaust Air Mass Flow Rate"] = value

    @property
    def exhaust_air_flow_rate_function_of_temperature_curve_name(self):
        """Get exhaust_air_flow_rate_function_of_temperature_curve_name

        Returns:
            str: the value of `exhaust_air_flow_rate_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"]

    @exhaust_air_flow_rate_function_of_temperature_curve_name.setter
    def exhaust_air_flow_rate_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_flow_rate_function_of_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `exhaust_air_flow_rate_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_flow_rate_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_flow_rate_function_of_temperature_curve_name`')

        self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"] = value

    @property
    def exhaust_air_flow_rate_function_of_part_load_ratio_curve_name(self):
        """Get exhaust_air_flow_rate_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"]

    @exhaust_air_flow_rate_function_of_part_load_ratio_curve_name.setter
    def exhaust_air_flow_rate_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions.
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`')

        self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"] = value

    @property
    def nominal_exhaust_air_outlet_temperature(self):
        """Get nominal_exhaust_air_outlet_temperature

        Returns:
            float: the value of `nominal_exhaust_air_outlet_temperature` or None if not set
        """
        return self._data["Nominal Exhaust Air Outlet Temperature"]

    @nominal_exhaust_air_outlet_temperature.setter
    def nominal_exhaust_air_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `nominal_exhaust_air_outlet_temperature`
        Exhaust air outlet temperature at reference conditions.

        Args:
            value (float): value for IDD Field `nominal_exhaust_air_outlet_temperature`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_exhaust_air_outlet_temperature`'.format(value))

        self._data["Nominal Exhaust Air Outlet Temperature"] = value

    @property
    def exhaust_air_temperature_function_of_temperature_curve_name(self):
        """Get exhaust_air_temperature_function_of_temperature_curve_name

        Returns:
            str: the value of `exhaust_air_temperature_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Air Temperature Function of Temperature Curve Name"]

    @exhaust_air_temperature_function_of_temperature_curve_name.setter
    def exhaust_air_temperature_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_temperature_function_of_temperature_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `exhaust_air_temperature_function_of_temperature_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_temperature_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_temperature_function_of_temperature_curve_name`')

        self._data["Exhaust Air Temperature Function of Temperature Curve Name"] = value

    @property
    def exhaust_air_temperature_function_of_part_load_ratio_curve_name(self):
        """Get exhaust_air_temperature_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `exhaust_air_temperature_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"]

    @exhaust_air_temperature_function_of_part_load_ratio_curve_name.setter
    def exhaust_air_temperature_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions.
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`')

        self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reference_electrical_power_output))
        out.append(self._to_str(self.minimum_full_load_electrical_power_output))
        out.append(self._to_str(self.maximum_full_load_electrical_power_output))
        out.append(self._to_str(self.reference_electrical_efficiency_using_lower_heating_value))
        out.append(self._to_str(self.reference_combustion_air_inlet_temperature))
        out.append(self._to_str(self.reference_combustion_air_inlet_humidity_ratio))
        out.append(self._to_str(self.reference_elevation))
        out.append(self._to_str(self.electrical_power_function_of_temperature_and_elevation_curve_name))
        out.append(self._to_str(self.electrical_efficiency_function_of_temperature_curve_name))
        out.append(self._to_str(self.electrical_efficiency_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.fuel_higher_heating_value))
        out.append(self._to_str(self.fuel_lower_heating_value))
        out.append(self._to_str(self.standby_power))
        out.append(self._to_str(self.ancillary_power))
        out.append(self._to_str(self.ancillary_power_function_of_fuel_input_curve_name))
        out.append(self._to_str(self.heat_recovery_water_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_outlet_node_name))
        out.append(self._to_str(self.reference_thermal_efficiency_using_lower_heat_value))
        out.append(self._to_str(self.reference_inlet_water_temperature))
        out.append(self._to_str(self.heat_recovery_water_flow_operating_mode))
        out.append(self._to_str(self.reference_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name))
        out.append(self._to_str(self.thermal_efficiency_function_of_temperature_and_elevation_curve_name))
        out.append(self._to_str(self.heat_recovery_rate_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.heat_recovery_rate_function_of_inlet_water_temperature_curve_name))
        out.append(self._to_str(self.heat_recovery_rate_function_of_water_flow_rate_curve_name))
        out.append(self._to_str(self.minimum_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.maximum_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.maximum_heat_recovery_water_temperature))
        out.append(self._to_str(self.combustion_air_inlet_node_name))
        out.append(self._to_str(self.combustion_air_outlet_node_name))
        out.append(self._to_str(self.reference_exhaust_air_mass_flow_rate))
        out.append(self._to_str(self.exhaust_air_flow_rate_function_of_temperature_curve_name))
        out.append(self._to_str(self.exhaust_air_flow_rate_function_of_part_load_ratio_curve_name))
        out.append(self._to_str(self.nominal_exhaust_air_outlet_temperature))
        out.append(self._to_str(self.exhaust_air_temperature_function_of_temperature_curve_name))
        out.append(self._to_str(self.exhaust_air_temperature_function_of_part_load_ratio_curve_name))
        return ",".join(out)

class GeneratorPhotovoltaic(object):
    """ Corresponds to IDD object `Generator:Photovoltaic`
        Describes an array of photovoltaic (PV) modules.  A series of different PV arrays
        can be connected to a single electric load center (and inverter) by listing them all
        in an ElectricLoadCenter:Generator object. PV performance is taken from the
        referenced PhotovoltaicPerformance:* object. Array tilt, azimuth, and gross area
        are taken from the referenced building surface or shading surface. The array
        surface participates normally in all shading calculations.
    """
    internal_name = "Generator:Photovoltaic"
    field_count = 7

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:Photovoltaic`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Surface Name"] = None
        self._data["Photovoltaic Performance Object Type"] = None
        self._data["Module Performance Name"] = None
        self._data["Heat Transfer Integration Mode"] = None
        self._data["Number of Series Strings in Parallel"] = None
        self._data["Number of Modules in Series"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_name = None
        else:
            self.surface_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.photovoltaic_performance_object_type = None
        else:
            self.photovoltaic_performance_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.module_performance_name = None
        else:
            self.module_performance_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_transfer_integration_mode = None
        else:
            self.heat_transfer_integration_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_series_strings_in_parallel = None
        else:
            self.number_of_series_strings_in_parallel = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_modules_in_series = None
        else:
            self.number_of_modules_in_series = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def surface_name(self):
        """Get surface_name

        Returns:
            str: the value of `surface_name` or None if not set
        """
        return self._data["Surface Name"]

    @surface_name.setter
    def surface_name(self, value=None):
        """  Corresponds to IDD Field `surface_name`

        Args:
            value (str): value for IDD Field `surface_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name`')

        self._data["Surface Name"] = value

    @property
    def photovoltaic_performance_object_type(self):
        """Get photovoltaic_performance_object_type

        Returns:
            str: the value of `photovoltaic_performance_object_type` or None if not set
        """
        return self._data["Photovoltaic Performance Object Type"]

    @photovoltaic_performance_object_type.setter
    def photovoltaic_performance_object_type(self, value=None):
        """  Corresponds to IDD Field `photovoltaic_performance_object_type`

        Args:
            value (str): value for IDD Field `photovoltaic_performance_object_type`
                Accepted values are:
                      - PhotovoltaicPerformance:Simple
                      - PhotovoltaicPerformance:EquivalentOne-Diode
                      - PhotovoltaicPerformance:Sandia
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `photovoltaic_performance_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `photovoltaic_performance_object_type`')
            vals = set()
            vals.add("PhotovoltaicPerformance:Simple")
            vals.add("PhotovoltaicPerformance:EquivalentOne-Diode")
            vals.add("PhotovoltaicPerformance:Sandia")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `photovoltaic_performance_object_type`'.format(value))

        self._data["Photovoltaic Performance Object Type"] = value

    @property
    def module_performance_name(self):
        """Get module_performance_name

        Returns:
            str: the value of `module_performance_name` or None if not set
        """
        return self._data["Module Performance Name"]

    @module_performance_name.setter
    def module_performance_name(self, value=None):
        """  Corresponds to IDD Field `module_performance_name`
        PV array modeling details

        Args:
            value (str): value for IDD Field `module_performance_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `module_performance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `module_performance_name`')

        self._data["Module Performance Name"] = value

    @property
    def heat_transfer_integration_mode(self):
        """Get heat_transfer_integration_mode

        Returns:
            str: the value of `heat_transfer_integration_mode` or None if not set
        """
        return self._data["Heat Transfer Integration Mode"]

    @heat_transfer_integration_mode.setter
    def heat_transfer_integration_mode(self, value="Decoupled"):
        """  Corresponds to IDD Field `heat_transfer_integration_mode`

        Args:
            value (str): value for IDD Field `heat_transfer_integration_mode`
                Accepted values are:
                      - Decoupled
                      - DecoupledUllebergDynamic
                      - IntegratedSurfaceOutsideFace
                      - IntegratedTranspiredCollector
                      - IntegratedExteriorVentedCavity
                      - PhotovoltaicThermalSolarCollector
                Default value: Decoupled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_transfer_integration_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_transfer_integration_mode`')
            vals = set()
            vals.add("Decoupled")
            vals.add("DecoupledUllebergDynamic")
            vals.add("IntegratedSurfaceOutsideFace")
            vals.add("IntegratedTranspiredCollector")
            vals.add("IntegratedExteriorVentedCavity")
            vals.add("PhotovoltaicThermalSolarCollector")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_transfer_integration_mode`'.format(value))

        self._data["Heat Transfer Integration Mode"] = value

    @property
    def number_of_series_strings_in_parallel(self):
        """Get number_of_series_strings_in_parallel

        Returns:
            float: the value of `number_of_series_strings_in_parallel` or None if not set
        """
        return self._data["Number of Series Strings in Parallel"]

    @number_of_series_strings_in_parallel.setter
    def number_of_series_strings_in_parallel(self, value=1.0 ):
        """  Corresponds to IDD Field `number_of_series_strings_in_parallel`
        number of series-wired strings of PV modules that are in parallel

        Args:
            value (float): value for IDD Field `number_of_series_strings_in_parallel`
                Unit: dimensionless
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_series_strings_in_parallel`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `number_of_series_strings_in_parallel`')

        self._data["Number of Series Strings in Parallel"] = value

    @property
    def number_of_modules_in_series(self):
        """Get number_of_modules_in_series

        Returns:
            float: the value of `number_of_modules_in_series` or None if not set
        """
        return self._data["Number of Modules in Series"]

    @number_of_modules_in_series.setter
    def number_of_modules_in_series(self, value=1.0 ):
        """  Corresponds to IDD Field `number_of_modules_in_series`
        Number of PV modules wired in series for each string.

        Args:
            value (float): value for IDD Field `number_of_modules_in_series`
                Unit: dimensionless
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_modules_in_series`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `number_of_modules_in_series`')

        self._data["Number of Modules in Series"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.surface_name))
        out.append(self._to_str(self.photovoltaic_performance_object_type))
        out.append(self._to_str(self.module_performance_name))
        out.append(self._to_str(self.heat_transfer_integration_mode))
        out.append(self._to_str(self.number_of_series_strings_in_parallel))
        out.append(self._to_str(self.number_of_modules_in_series))
        return ",".join(out)

class GeneratorFuelCell(object):
    """ Corresponds to IDD object `Generator:FuelCell`
        This generator model is the FC model from IEA Annex 42
    """
    internal_name = "Generator:FuelCell"
    field_count = 10

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Power Module Name"] = None
        self._data["Air Supply Name"] = None
        self._data["Fuel Supply Name"] = None
        self._data["Water Supply Name"] = None
        self._data["Auxiliary Heater Name"] = None
        self._data["Heat Exchanger Name"] = None
        self._data["Electrical Storage Name"] = None
        self._data["Inverter Name"] = None
        self._data["Stack Cooler Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_module_name = None
        else:
            self.power_module_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_supply_name = None
        else:
            self.air_supply_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_supply_name = None
        else:
            self.fuel_supply_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_supply_name = None
        else:
            self.water_supply_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.auxiliary_heater_name = None
        else:
            self.auxiliary_heater_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_exchanger_name = None
        else:
            self.heat_exchanger_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_storage_name = None
        else:
            self.electrical_storage_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inverter_name = None
        else:
            self.inverter_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cooler_name = None
        else:
            self.stack_cooler_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def power_module_name(self):
        """Get power_module_name

        Returns:
            str: the value of `power_module_name` or None if not set
        """
        return self._data["Power Module Name"]

    @power_module_name.setter
    def power_module_name(self, value=None):
        """  Corresponds to IDD Field `power_module_name`
        Enter the name of a Generator:FuelCell:PowerModule object.

        Args:
            value (str): value for IDD Field `power_module_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `power_module_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `power_module_name`')

        self._data["Power Module Name"] = value

    @property
    def air_supply_name(self):
        """Get air_supply_name

        Returns:
            str: the value of `air_supply_name` or None if not set
        """
        return self._data["Air Supply Name"]

    @air_supply_name.setter
    def air_supply_name(self, value=None):
        """  Corresponds to IDD Field `air_supply_name`
        Enter the name of a Generator:FuelCell:AirSupply object.

        Args:
            value (str): value for IDD Field `air_supply_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_name`')

        self._data["Air Supply Name"] = value

    @property
    def fuel_supply_name(self):
        """Get fuel_supply_name

        Returns:
            str: the value of `fuel_supply_name` or None if not set
        """
        return self._data["Fuel Supply Name"]

    @fuel_supply_name.setter
    def fuel_supply_name(self, value=None):
        """  Corresponds to IDD Field `fuel_supply_name`
        Enter the name of a Generator:FuelSupply object.

        Args:
            value (str): value for IDD Field `fuel_supply_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_supply_name`')

        self._data["Fuel Supply Name"] = value

    @property
    def water_supply_name(self):
        """Get water_supply_name

        Returns:
            str: the value of `water_supply_name` or None if not set
        """
        return self._data["Water Supply Name"]

    @water_supply_name.setter
    def water_supply_name(self, value=None):
        """  Corresponds to IDD Field `water_supply_name`
        Enter the name of a Generator:FuelCell:WaterSupply object.

        Args:
            value (str): value for IDD Field `water_supply_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_supply_name`')

        self._data["Water Supply Name"] = value

    @property
    def auxiliary_heater_name(self):
        """Get auxiliary_heater_name

        Returns:
            str: the value of `auxiliary_heater_name` or None if not set
        """
        return self._data["Auxiliary Heater Name"]

    @auxiliary_heater_name.setter
    def auxiliary_heater_name(self, value=None):
        """  Corresponds to IDD Field `auxiliary_heater_name`
        Enter the name of a Generator:FuelCell:AuxiliaryHeater object.

        Args:
            value (str): value for IDD Field `auxiliary_heater_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `auxiliary_heater_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `auxiliary_heater_name`')

        self._data["Auxiliary Heater Name"] = value

    @property
    def heat_exchanger_name(self):
        """Get heat_exchanger_name

        Returns:
            str: the value of `heat_exchanger_name` or None if not set
        """
        return self._data["Heat Exchanger Name"]

    @heat_exchanger_name.setter
    def heat_exchanger_name(self, value=None):
        """  Corresponds to IDD Field `heat_exchanger_name`
        Enter the name of a Generator:FuelCell:ExhaustGasToWaterHeatExchanger object.

        Args:
            value (str): value for IDD Field `heat_exchanger_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_name`')

        self._data["Heat Exchanger Name"] = value

    @property
    def electrical_storage_name(self):
        """Get electrical_storage_name

        Returns:
            str: the value of `electrical_storage_name` or None if not set
        """
        return self._data["Electrical Storage Name"]

    @electrical_storage_name.setter
    def electrical_storage_name(self, value=None):
        """  Corresponds to IDD Field `electrical_storage_name`
        Enter the name of a Generator:FuelCell:ElectricalStorage object.

        Args:
            value (str): value for IDD Field `electrical_storage_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_storage_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_storage_name`')

        self._data["Electrical Storage Name"] = value

    @property
    def inverter_name(self):
        """Get inverter_name

        Returns:
            str: the value of `inverter_name` or None if not set
        """
        return self._data["Inverter Name"]

    @inverter_name.setter
    def inverter_name(self, value=None):
        """  Corresponds to IDD Field `inverter_name`
        Enter the name of a Generator:FuelCell:Inverter object.

        Args:
            value (str): value for IDD Field `inverter_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inverter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inverter_name`')

        self._data["Inverter Name"] = value

    @property
    def stack_cooler_name(self):
        """Get stack_cooler_name

        Returns:
            str: the value of `stack_cooler_name` or None if not set
        """
        return self._data["Stack Cooler Name"]

    @stack_cooler_name.setter
    def stack_cooler_name(self, value=None):
        """  Corresponds to IDD Field `stack_cooler_name`
        Enter the name of a Generator:FuelCell:StackCooler object.
        optional, used for PEMFC

        Args:
            value (str): value for IDD Field `stack_cooler_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `stack_cooler_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stack_cooler_name`')

        self._data["Stack Cooler Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.power_module_name))
        out.append(self._to_str(self.air_supply_name))
        out.append(self._to_str(self.fuel_supply_name))
        out.append(self._to_str(self.water_supply_name))
        out.append(self._to_str(self.auxiliary_heater_name))
        out.append(self._to_str(self.heat_exchanger_name))
        out.append(self._to_str(self.electrical_storage_name))
        out.append(self._to_str(self.inverter_name))
        out.append(self._to_str(self.stack_cooler_name))
        return ",".join(out)

class GeneratorFuelCellPowerModule(object):
    """ Corresponds to IDD object `Generator:FuelCell:PowerModule`
        Describe the core power module subsystem of a fuel cell power generator. This includes
        the fuel cell stack, fuel reformer, and whatever ancillary devices are included inside.
        If the model has multiple FC generators that are of the exact same type, then only one
        of these objects is needed and all the Generator:FuelCell objects can reference it.
    """
    internal_name = "Generator:FuelCell:PowerModule"
    field_count = 33

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell:PowerModule`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Efficiency Curve Mode"] = None
        self._data["Efficiency Curve Name"] = None
        self._data["Nominal Efficiency"] = None
        self._data["Nominal Electrical Power"] = None
        self._data["Number of Stops at Start of Simulation"] = None
        self._data["Cycling Performance Degradation Coefficient"] = None
        self._data["Number of Run Hours at Beginning of Simulation"] = None
        self._data["Accumulated Run Time Degradation Coefficient"] = None
        self._data["Run Time Degradation Initiation Time Threshold"] = None
        self._data["Power Up Transient Limit"] = None
        self._data["Power Down Transient Limit"] = None
        self._data["Start Up Time"] = None
        self._data["Start Up Fuel"] = None
        self._data["Start Up Electricity Consumption"] = None
        self._data["Start Up Electricity Produced"] = None
        self._data["Shut Down Time"] = None
        self._data["Shut Down Fuel"] = None
        self._data["Shut Down Electricity Consumption"] = None
        self._data["Ancilliary Electricity Constant Term"] = None
        self._data["Ancilliary Electricity Linear Term"] = None
        self._data["Skin Loss Calculation Mode"] = None
        self._data["Zone Name"] = None
        self._data["Skin Loss Radiative Fraction"] = None
        self._data["Constant Skin Loss Rate"] = None
        self._data["Skin Loss U-Factor Times Area Term"] = None
        self._data["Skin Loss Quadratic Curve Name"] = None
        self._data["Dilution Air Flow Rate"] = None
        self._data["Stack Heat loss to Dilution Air"] = None
        self._data["Dilution Inlet Air Node Name"] = None
        self._data["Dilution Outlet Air Node Name"] = None
        self._data["Minimum Operating Point"] = None
        self._data["Maximum Operating Point"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_curve_mode = None
        else:
            self.efficiency_curve_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_curve_name = None
        else:
            self.efficiency_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_efficiency = None
        else:
            self.nominal_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_electrical_power = None
        else:
            self.nominal_electrical_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_stops_at_start_of_simulation = None
        else:
            self.number_of_stops_at_start_of_simulation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cycling_performance_degradation_coefficient = None
        else:
            self.cycling_performance_degradation_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_run_hours_at_beginning_of_simulation = None
        else:
            self.number_of_run_hours_at_beginning_of_simulation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.accumulated_run_time_degradation_coefficient = None
        else:
            self.accumulated_run_time_degradation_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.run_time_degradation_initiation_time_threshold = None
        else:
            self.run_time_degradation_initiation_time_threshold = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_up_transient_limit = None
        else:
            self.power_up_transient_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_down_transient_limit = None
        else:
            self.power_down_transient_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_up_time = None
        else:
            self.start_up_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_up_fuel = None
        else:
            self.start_up_fuel = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_up_electricity_consumption = None
        else:
            self.start_up_electricity_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_up_electricity_produced = None
        else:
            self.start_up_electricity_produced = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shut_down_time = None
        else:
            self.shut_down_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shut_down_fuel = None
        else:
            self.shut_down_fuel = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.shut_down_electricity_consumption = None
        else:
            self.shut_down_electricity_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_electricity_constant_term = None
        else:
            self.ancilliary_electricity_constant_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_electricity_linear_term = None
        else:
            self.ancilliary_electricity_linear_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_calculation_mode = None
        else:
            self.skin_loss_calculation_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_radiative_fraction = None
        else:
            self.skin_loss_radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_skin_loss_rate = None
        else:
            self.constant_skin_loss_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_term = None
        else:
            self.skin_loss_ufactor_times_area_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_quadratic_curve_name = None
        else:
            self.skin_loss_quadratic_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dilution_air_flow_rate = None
        else:
            self.dilution_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_heat_loss_to_dilution_air = None
        else:
            self.stack_heat_loss_to_dilution_air = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dilution_inlet_air_node_name = None
        else:
            self.dilution_inlet_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dilution_outlet_air_node_name = None
        else:
            self.dilution_outlet_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_operating_point = None
        else:
            self.minimum_operating_point = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_operating_point = None
        else:
            self.maximum_operating_point = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def efficiency_curve_mode(self):
        """Get efficiency_curve_mode

        Returns:
            str: the value of `efficiency_curve_mode` or None if not set
        """
        return self._data["Efficiency Curve Mode"]

    @efficiency_curve_mode.setter
    def efficiency_curve_mode(self, value=None):
        """  Corresponds to IDD Field `efficiency_curve_mode`

        Args:
            value (str): value for IDD Field `efficiency_curve_mode`
                Accepted values are:
                      - Annex42
                      - Normalized
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_curve_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_mode`')
            vals = set()
            vals.add("Annex42")
            vals.add("Normalized")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `efficiency_curve_mode`'.format(value))

        self._data["Efficiency Curve Mode"] = value

    @property
    def efficiency_curve_name(self):
        """Get efficiency_curve_name

        Returns:
            str: the value of `efficiency_curve_name` or None if not set
        """
        return self._data["Efficiency Curve Name"]

    @efficiency_curve_name.setter
    def efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `efficiency_curve_name`
        Table:OneIndependentVariable

        Args:
            value (str): value for IDD Field `efficiency_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_name`')

        self._data["Efficiency Curve Name"] = value

    @property
    def nominal_efficiency(self):
        """Get nominal_efficiency

        Returns:
            float: the value of `nominal_efficiency` or None if not set
        """
        return self._data["Nominal Efficiency"]

    @nominal_efficiency.setter
    def nominal_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_efficiency`
        This field is not used.

        Args:
            value (float): value for IDD Field `nominal_efficiency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_efficiency`'.format(value))

        self._data["Nominal Efficiency"] = value

    @property
    def nominal_electrical_power(self):
        """Get nominal_electrical_power

        Returns:
            float: the value of `nominal_electrical_power` or None if not set
        """
        return self._data["Nominal Electrical Power"]

    @nominal_electrical_power.setter
    def nominal_electrical_power(self, value=None):
        """  Corresponds to IDD Field `nominal_electrical_power`
        This field is not used

        Args:
            value (float): value for IDD Field `nominal_electrical_power`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_electrical_power`'.format(value))

        self._data["Nominal Electrical Power"] = value

    @property
    def number_of_stops_at_start_of_simulation(self):
        """Get number_of_stops_at_start_of_simulation

        Returns:
            float: the value of `number_of_stops_at_start_of_simulation` or None if not set
        """
        return self._data["Number of Stops at Start of Simulation"]

    @number_of_stops_at_start_of_simulation.setter
    def number_of_stops_at_start_of_simulation(self, value=None):
        """  Corresponds to IDD Field `number_of_stops_at_start_of_simulation`
        this is Nstops in SOFC model specification

        Args:
            value (float): value for IDD Field `number_of_stops_at_start_of_simulation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_stops_at_start_of_simulation`'.format(value))

        self._data["Number of Stops at Start of Simulation"] = value

    @property
    def cycling_performance_degradation_coefficient(self):
        """Get cycling_performance_degradation_coefficient

        Returns:
            float: the value of `cycling_performance_degradation_coefficient` or None if not set
        """
        return self._data["Cycling Performance Degradation Coefficient"]

    @cycling_performance_degradation_coefficient.setter
    def cycling_performance_degradation_coefficient(self, value=None):
        """  Corresponds to IDD Field `cycling_performance_degradation_coefficient`
        this is D in SOFC model specification

        Args:
            value (float): value for IDD Field `cycling_performance_degradation_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cycling_performance_degradation_coefficient`'.format(value))

        self._data["Cycling Performance Degradation Coefficient"] = value

    @property
    def number_of_run_hours_at_beginning_of_simulation(self):
        """Get number_of_run_hours_at_beginning_of_simulation

        Returns:
            float: the value of `number_of_run_hours_at_beginning_of_simulation` or None if not set
        """
        return self._data["Number of Run Hours at Beginning of Simulation"]

    @number_of_run_hours_at_beginning_of_simulation.setter
    def number_of_run_hours_at_beginning_of_simulation(self, value=None):
        """  Corresponds to IDD Field `number_of_run_hours_at_beginning_of_simulation`

        Args:
            value (float): value for IDD Field `number_of_run_hours_at_beginning_of_simulation`
                Unit: hr
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_run_hours_at_beginning_of_simulation`'.format(value))

        self._data["Number of Run Hours at Beginning of Simulation"] = value

    @property
    def accumulated_run_time_degradation_coefficient(self):
        """Get accumulated_run_time_degradation_coefficient

        Returns:
            float: the value of `accumulated_run_time_degradation_coefficient` or None if not set
        """
        return self._data["Accumulated Run Time Degradation Coefficient"]

    @accumulated_run_time_degradation_coefficient.setter
    def accumulated_run_time_degradation_coefficient(self, value=None):
        """  Corresponds to IDD Field `accumulated_run_time_degradation_coefficient`
        this is L in SOFC model specification

        Args:
            value (float): value for IDD Field `accumulated_run_time_degradation_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `accumulated_run_time_degradation_coefficient`'.format(value))

        self._data["Accumulated Run Time Degradation Coefficient"] = value

    @property
    def run_time_degradation_initiation_time_threshold(self):
        """Get run_time_degradation_initiation_time_threshold

        Returns:
            float: the value of `run_time_degradation_initiation_time_threshold` or None if not set
        """
        return self._data["Run Time Degradation Initiation Time Threshold"]

    @run_time_degradation_initiation_time_threshold.setter
    def run_time_degradation_initiation_time_threshold(self, value=None):
        """  Corresponds to IDD Field `run_time_degradation_initiation_time_threshold`

        Args:
            value (float): value for IDD Field `run_time_degradation_initiation_time_threshold`
                Unit: hr
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `run_time_degradation_initiation_time_threshold`'.format(value))

        self._data["Run Time Degradation Initiation Time Threshold"] = value

    @property
    def power_up_transient_limit(self):
        """Get power_up_transient_limit

        Returns:
            float: the value of `power_up_transient_limit` or None if not set
        """
        return self._data["Power Up Transient Limit"]

    @power_up_transient_limit.setter
    def power_up_transient_limit(self, value=None):
        """  Corresponds to IDD Field `power_up_transient_limit`
        Maximum rate of change in elecrical output [power increasing]

        Args:
            value (float): value for IDD Field `power_up_transient_limit`
                Unit: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_up_transient_limit`'.format(value))

        self._data["Power Up Transient Limit"] = value

    @property
    def power_down_transient_limit(self):
        """Get power_down_transient_limit

        Returns:
            float: the value of `power_down_transient_limit` or None if not set
        """
        return self._data["Power Down Transient Limit"]

    @power_down_transient_limit.setter
    def power_down_transient_limit(self, value=None):
        """  Corresponds to IDD Field `power_down_transient_limit`
        Maximum rate of change in elecrical output [power decreasing]
        Enter positive value for rate of change

        Args:
            value (float): value for IDD Field `power_down_transient_limit`
                Unit: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_down_transient_limit`'.format(value))

        self._data["Power Down Transient Limit"] = value

    @property
    def start_up_time(self):
        """Get start_up_time

        Returns:
            float: the value of `start_up_time` or None if not set
        """
        return self._data["Start Up Time"]

    @start_up_time.setter
    def start_up_time(self, value=None):
        """  Corresponds to IDD Field `start_up_time`
        Time from start up to normal operation

        Args:
            value (float): value for IDD Field `start_up_time`
                Unit: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `start_up_time`'.format(value))

        self._data["Start Up Time"] = value

    @property
    def start_up_fuel(self):
        """Get start_up_fuel

        Returns:
            float: the value of `start_up_fuel` or None if not set
        """
        return self._data["Start Up Fuel"]

    @start_up_fuel.setter
    def start_up_fuel(self, value=None):
        """  Corresponds to IDD Field `start_up_fuel`

        Args:
            value (float): value for IDD Field `start_up_fuel`
                Unit: kmol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `start_up_fuel`'.format(value))

        self._data["Start Up Fuel"] = value

    @property
    def start_up_electricity_consumption(self):
        """Get start_up_electricity_consumption

        Returns:
            float: the value of `start_up_electricity_consumption` or None if not set
        """
        return self._data["Start Up Electricity Consumption"]

    @start_up_electricity_consumption.setter
    def start_up_electricity_consumption(self, value=None):
        """  Corresponds to IDD Field `start_up_electricity_consumption`

        Args:
            value (float): value for IDD Field `start_up_electricity_consumption`
                Unit: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `start_up_electricity_consumption`'.format(value))

        self._data["Start Up Electricity Consumption"] = value

    @property
    def start_up_electricity_produced(self):
        """Get start_up_electricity_produced

        Returns:
            float: the value of `start_up_electricity_produced` or None if not set
        """
        return self._data["Start Up Electricity Produced"]

    @start_up_electricity_produced.setter
    def start_up_electricity_produced(self, value=None):
        """  Corresponds to IDD Field `start_up_electricity_produced`

        Args:
            value (float): value for IDD Field `start_up_electricity_produced`
                Unit: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `start_up_electricity_produced`'.format(value))

        self._data["Start Up Electricity Produced"] = value

    @property
    def shut_down_time(self):
        """Get shut_down_time

        Returns:
            float: the value of `shut_down_time` or None if not set
        """
        return self._data["Shut Down Time"]

    @shut_down_time.setter
    def shut_down_time(self, value=None):
        """  Corresponds to IDD Field `shut_down_time`

        Args:
            value (float): value for IDD Field `shut_down_time`
                Unit: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shut_down_time`'.format(value))

        self._data["Shut Down Time"] = value

    @property
    def shut_down_fuel(self):
        """Get shut_down_fuel

        Returns:
            float: the value of `shut_down_fuel` or None if not set
        """
        return self._data["Shut Down Fuel"]

    @shut_down_fuel.setter
    def shut_down_fuel(self, value=None):
        """  Corresponds to IDD Field `shut_down_fuel`

        Args:
            value (float): value for IDD Field `shut_down_fuel`
                Unit: kmol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shut_down_fuel`'.format(value))

        self._data["Shut Down Fuel"] = value

    @property
    def shut_down_electricity_consumption(self):
        """Get shut_down_electricity_consumption

        Returns:
            float: the value of `shut_down_electricity_consumption` or None if not set
        """
        return self._data["Shut Down Electricity Consumption"]

    @shut_down_electricity_consumption.setter
    def shut_down_electricity_consumption(self, value=None):
        """  Corresponds to IDD Field `shut_down_electricity_consumption`

        Args:
            value (float): value for IDD Field `shut_down_electricity_consumption`
                Unit: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `shut_down_electricity_consumption`'.format(value))

        self._data["Shut Down Electricity Consumption"] = value

    @property
    def ancilliary_electricity_constant_term(self):
        """Get ancilliary_electricity_constant_term

        Returns:
            float: the value of `ancilliary_electricity_constant_term` or None if not set
        """
        return self._data["Ancilliary Electricity Constant Term"]

    @ancilliary_electricity_constant_term.setter
    def ancilliary_electricity_constant_term(self, value=None):
        """  Corresponds to IDD Field `ancilliary_electricity_constant_term`

        Args:
            value (float): value for IDD Field `ancilliary_electricity_constant_term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_electricity_constant_term`'.format(value))

        self._data["Ancilliary Electricity Constant Term"] = value

    @property
    def ancilliary_electricity_linear_term(self):
        """Get ancilliary_electricity_linear_term

        Returns:
            float: the value of `ancilliary_electricity_linear_term` or None if not set
        """
        return self._data["Ancilliary Electricity Linear Term"]

    @ancilliary_electricity_linear_term.setter
    def ancilliary_electricity_linear_term(self, value=None):
        """  Corresponds to IDD Field `ancilliary_electricity_linear_term`

        Args:
            value (float): value for IDD Field `ancilliary_electricity_linear_term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_electricity_linear_term`'.format(value))

        self._data["Ancilliary Electricity Linear Term"] = value

    @property
    def skin_loss_calculation_mode(self):
        """Get skin_loss_calculation_mode

        Returns:
            str: the value of `skin_loss_calculation_mode` or None if not set
        """
        return self._data["Skin Loss Calculation Mode"]

    @skin_loss_calculation_mode.setter
    def skin_loss_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `skin_loss_calculation_mode`

        Args:
            value (str): value for IDD Field `skin_loss_calculation_mode`
                Accepted values are:
                      - ConstantRate
                      - UAForProcessGasTemperature
                      - QuadraticFunctionOfFuelRate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `skin_loss_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_calculation_mode`')
            vals = set()
            vals.add("ConstantRate")
            vals.add("UAForProcessGasTemperature")
            vals.add("QuadraticFunctionOfFuelRate")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `skin_loss_calculation_mode`'.format(value))

        self._data["Skin Loss Calculation Mode"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def skin_loss_radiative_fraction(self):
        """Get skin_loss_radiative_fraction

        Returns:
            float: the value of `skin_loss_radiative_fraction` or None if not set
        """
        return self._data["Skin Loss Radiative Fraction"]

    @skin_loss_radiative_fraction.setter
    def skin_loss_radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `skin_loss_radiative_fraction`

        Args:
            value (float): value for IDD Field `skin_loss_radiative_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `skin_loss_radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `skin_loss_radiative_fraction`')

        self._data["Skin Loss Radiative Fraction"] = value

    @property
    def constant_skin_loss_rate(self):
        """Get constant_skin_loss_rate

        Returns:
            float: the value of `constant_skin_loss_rate` or None if not set
        """
        return self._data["Constant Skin Loss Rate"]

    @constant_skin_loss_rate.setter
    def constant_skin_loss_rate(self, value=None):
        """  Corresponds to IDD Field `constant_skin_loss_rate`

        Args:
            value (float): value for IDD Field `constant_skin_loss_rate`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_skin_loss_rate`'.format(value))

        self._data["Constant Skin Loss Rate"] = value

    @property
    def skin_loss_ufactor_times_area_term(self):
        """Get skin_loss_ufactor_times_area_term

        Returns:
            float: the value of `skin_loss_ufactor_times_area_term` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Term"]

    @skin_loss_ufactor_times_area_term.setter
    def skin_loss_ufactor_times_area_term(self, value=None):
        """  Corresponds to IDD Field `skin_loss_ufactor_times_area_term`

        Args:
            value (float): value for IDD Field `skin_loss_ufactor_times_area_term`
                Unit: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_ufactor_times_area_term`'.format(value))

        self._data["Skin Loss U-Factor Times Area Term"] = value

    @property
    def skin_loss_quadratic_curve_name(self):
        """Get skin_loss_quadratic_curve_name

        Returns:
            str: the value of `skin_loss_quadratic_curve_name` or None if not set
        """
        return self._data["Skin Loss Quadratic Curve Name"]

    @skin_loss_quadratic_curve_name.setter
    def skin_loss_quadratic_curve_name(self, value=None):
        """  Corresponds to IDD Field `skin_loss_quadratic_curve_name`
        Table:OneIndependentVariable object can also be used
        curve is function of fuel use rate

        Args:
            value (str): value for IDD Field `skin_loss_quadratic_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `skin_loss_quadratic_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_quadratic_curve_name`')

        self._data["Skin Loss Quadratic Curve Name"] = value

    @property
    def dilution_air_flow_rate(self):
        """Get dilution_air_flow_rate

        Returns:
            float: the value of `dilution_air_flow_rate` or None if not set
        """
        return self._data["Dilution Air Flow Rate"]

    @dilution_air_flow_rate.setter
    def dilution_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `dilution_air_flow_rate`

        Args:
            value (float): value for IDD Field `dilution_air_flow_rate`
                Unit: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dilution_air_flow_rate`'.format(value))

        self._data["Dilution Air Flow Rate"] = value

    @property
    def stack_heat_loss_to_dilution_air(self):
        """Get stack_heat_loss_to_dilution_air

        Returns:
            float: the value of `stack_heat_loss_to_dilution_air` or None if not set
        """
        return self._data["Stack Heat loss to Dilution Air"]

    @stack_heat_loss_to_dilution_air.setter
    def stack_heat_loss_to_dilution_air(self, value=None):
        """  Corresponds to IDD Field `stack_heat_loss_to_dilution_air`

        Args:
            value (float): value for IDD Field `stack_heat_loss_to_dilution_air`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_heat_loss_to_dilution_air`'.format(value))

        self._data["Stack Heat loss to Dilution Air"] = value

    @property
    def dilution_inlet_air_node_name(self):
        """Get dilution_inlet_air_node_name

        Returns:
            str: the value of `dilution_inlet_air_node_name` or None if not set
        """
        return self._data["Dilution Inlet Air Node Name"]

    @dilution_inlet_air_node_name.setter
    def dilution_inlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `dilution_inlet_air_node_name`

        Args:
            value (str): value for IDD Field `dilution_inlet_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dilution_inlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dilution_inlet_air_node_name`')

        self._data["Dilution Inlet Air Node Name"] = value

    @property
    def dilution_outlet_air_node_name(self):
        """Get dilution_outlet_air_node_name

        Returns:
            str: the value of `dilution_outlet_air_node_name` or None if not set
        """
        return self._data["Dilution Outlet Air Node Name"]

    @dilution_outlet_air_node_name.setter
    def dilution_outlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `dilution_outlet_air_node_name`

        Args:
            value (str): value for IDD Field `dilution_outlet_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dilution_outlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dilution_outlet_air_node_name`')

        self._data["Dilution Outlet Air Node Name"] = value

    @property
    def minimum_operating_point(self):
        """Get minimum_operating_point

        Returns:
            float: the value of `minimum_operating_point` or None if not set
        """
        return self._data["Minimum Operating Point"]

    @minimum_operating_point.setter
    def minimum_operating_point(self, value=None):
        """  Corresponds to IDD Field `minimum_operating_point`

        Args:
            value (float): value for IDD Field `minimum_operating_point`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_operating_point`'.format(value))

        self._data["Minimum Operating Point"] = value

    @property
    def maximum_operating_point(self):
        """Get maximum_operating_point

        Returns:
            float: the value of `maximum_operating_point` or None if not set
        """
        return self._data["Maximum Operating Point"]

    @maximum_operating_point.setter
    def maximum_operating_point(self, value=None):
        """  Corresponds to IDD Field `maximum_operating_point`

        Args:
            value (float): value for IDD Field `maximum_operating_point`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_operating_point`'.format(value))

        self._data["Maximum Operating Point"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.efficiency_curve_mode))
        out.append(self._to_str(self.efficiency_curve_name))
        out.append(self._to_str(self.nominal_efficiency))
        out.append(self._to_str(self.nominal_electrical_power))
        out.append(self._to_str(self.number_of_stops_at_start_of_simulation))
        out.append(self._to_str(self.cycling_performance_degradation_coefficient))
        out.append(self._to_str(self.number_of_run_hours_at_beginning_of_simulation))
        out.append(self._to_str(self.accumulated_run_time_degradation_coefficient))
        out.append(self._to_str(self.run_time_degradation_initiation_time_threshold))
        out.append(self._to_str(self.power_up_transient_limit))
        out.append(self._to_str(self.power_down_transient_limit))
        out.append(self._to_str(self.start_up_time))
        out.append(self._to_str(self.start_up_fuel))
        out.append(self._to_str(self.start_up_electricity_consumption))
        out.append(self._to_str(self.start_up_electricity_produced))
        out.append(self._to_str(self.shut_down_time))
        out.append(self._to_str(self.shut_down_fuel))
        out.append(self._to_str(self.shut_down_electricity_consumption))
        out.append(self._to_str(self.ancilliary_electricity_constant_term))
        out.append(self._to_str(self.ancilliary_electricity_linear_term))
        out.append(self._to_str(self.skin_loss_calculation_mode))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.skin_loss_radiative_fraction))
        out.append(self._to_str(self.constant_skin_loss_rate))
        out.append(self._to_str(self.skin_loss_ufactor_times_area_term))
        out.append(self._to_str(self.skin_loss_quadratic_curve_name))
        out.append(self._to_str(self.dilution_air_flow_rate))
        out.append(self._to_str(self.stack_heat_loss_to_dilution_air))
        out.append(self._to_str(self.dilution_inlet_air_node_name))
        out.append(self._to_str(self.dilution_outlet_air_node_name))
        out.append(self._to_str(self.minimum_operating_point))
        out.append(self._to_str(self.maximum_operating_point))
        return ",".join(out)

class GeneratorFuelCellAirSupply(object):
    """ Corresponds to IDD object `Generator:FuelCell:AirSupply`
        Used to define details of the air supply subsystem for a fuel cell power generator.
    """
    internal_name = "Generator:FuelCell:AirSupply"
    field_count = 22

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell:AirSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Blower Power Curve Name"] = None
        self._data["Blower Heat Loss Factor"] = None
        self._data["Air Supply Rate Calculation Mode"] = None
        self._data["Stoichiometric Ratio"] = None
        self._data["Air Rate Function of Electric Power Curve Name"] = None
        self._data["Air Rate Air Temperature Coefficient"] = None
        self._data["Air Rate Function of Fuel Rate Curve Name"] = None
        self._data["Air Intake Heat Recovery Mode"] = None
        self._data["Air Supply Constituent Mode"] = None
        self._data["Number of UserDefined Constituents"] = None
        self._data["Constituent 1 Name"] = None
        self._data["Molar Fraction 1"] = None
        self._data["Constituent 2 Name"] = None
        self._data["Molar Fraction 2"] = None
        self._data["Constituent 3 Name"] = None
        self._data["Molar Fraction 3"] = None
        self._data["Constituent 4 Name"] = None
        self._data["Molar Fraction 4"] = None
        self._data["Constituent 5 Name"] = None
        self._data["Molar Fraction 5"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blower_power_curve_name = None
        else:
            self.blower_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blower_heat_loss_factor = None
        else:
            self.blower_heat_loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_supply_rate_calculation_mode = None
        else:
            self.air_supply_rate_calculation_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stoichiometric_ratio = None
        else:
            self.stoichiometric_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_rate_function_of_electric_power_curve_name = None
        else:
            self.air_rate_function_of_electric_power_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_rate_air_temperature_coefficient = None
        else:
            self.air_rate_air_temperature_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_rate_function_of_fuel_rate_curve_name = None
        else:
            self.air_rate_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_intake_heat_recovery_mode = None
        else:
            self.air_intake_heat_recovery_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_supply_constituent_mode = None
        else:
            self.air_supply_constituent_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_userdefined_constituents = None
        else:
            self.number_of_userdefined_constituents = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_1_name = None
        else:
            self.constituent_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_1 = None
        else:
            self.molar_fraction_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_2_name = None
        else:
            self.constituent_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_2 = None
        else:
            self.molar_fraction_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_3_name = None
        else:
            self.constituent_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_3 = None
        else:
            self.molar_fraction_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_4_name = None
        else:
            self.constituent_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_4 = None
        else:
            self.molar_fraction_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_5_name = None
        else:
            self.constituent_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.molar_fraction_5 = None
        else:
            self.molar_fraction_5 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def blower_power_curve_name(self):
        """Get blower_power_curve_name

        Returns:
            str: the value of `blower_power_curve_name` or None if not set
        """
        return self._data["Blower Power Curve Name"]

    @blower_power_curve_name.setter
    def blower_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `blower_power_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `blower_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `blower_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `blower_power_curve_name`')

        self._data["Blower Power Curve Name"] = value

    @property
    def blower_heat_loss_factor(self):
        """Get blower_heat_loss_factor

        Returns:
            float: the value of `blower_heat_loss_factor` or None if not set
        """
        return self._data["Blower Heat Loss Factor"]

    @blower_heat_loss_factor.setter
    def blower_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `blower_heat_loss_factor`

        Args:
            value (float): value for IDD Field `blower_heat_loss_factor`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `blower_heat_loss_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `blower_heat_loss_factor`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `blower_heat_loss_factor`')

        self._data["Blower Heat Loss Factor"] = value

    @property
    def air_supply_rate_calculation_mode(self):
        """Get air_supply_rate_calculation_mode

        Returns:
            str: the value of `air_supply_rate_calculation_mode` or None if not set
        """
        return self._data["Air Supply Rate Calculation Mode"]

    @air_supply_rate_calculation_mode.setter
    def air_supply_rate_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `air_supply_rate_calculation_mode`

        Args:
            value (str): value for IDD Field `air_supply_rate_calculation_mode`
                Accepted values are:
                      - AirRatiobyStoics
                      - QuadraticFunctionofElectricPower
                      - QuadraticFunctionofFuelRate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_supply_rate_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_rate_calculation_mode`')
            vals = set()
            vals.add("AirRatiobyStoics")
            vals.add("QuadraticFunctionofElectricPower")
            vals.add("QuadraticFunctionofFuelRate")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `air_supply_rate_calculation_mode`'.format(value))

        self._data["Air Supply Rate Calculation Mode"] = value

    @property
    def stoichiometric_ratio(self):
        """Get stoichiometric_ratio

        Returns:
            float: the value of `stoichiometric_ratio` or None if not set
        """
        return self._data["Stoichiometric Ratio"]

    @stoichiometric_ratio.setter
    def stoichiometric_ratio(self, value=None):
        """  Corresponds to IDD Field `stoichiometric_ratio`
        This is the excess air "stoics"
        the value entered is incremented by 1 in the model.

        Args:
            value (float): value for IDD Field `stoichiometric_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stoichiometric_ratio`'.format(value))

        self._data["Stoichiometric Ratio"] = value

    @property
    def air_rate_function_of_electric_power_curve_name(self):
        """Get air_rate_function_of_electric_power_curve_name

        Returns:
            str: the value of `air_rate_function_of_electric_power_curve_name` or None if not set
        """
        return self._data["Air Rate Function of Electric Power Curve Name"]

    @air_rate_function_of_electric_power_curve_name.setter
    def air_rate_function_of_electric_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `air_rate_function_of_electric_power_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `air_rate_function_of_electric_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_rate_function_of_electric_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_rate_function_of_electric_power_curve_name`')

        self._data["Air Rate Function of Electric Power Curve Name"] = value

    @property
    def air_rate_air_temperature_coefficient(self):
        """Get air_rate_air_temperature_coefficient

        Returns:
            float: the value of `air_rate_air_temperature_coefficient` or None if not set
        """
        return self._data["Air Rate Air Temperature Coefficient"]

    @air_rate_air_temperature_coefficient.setter
    def air_rate_air_temperature_coefficient(self, value=None):
        """  Corresponds to IDD Field `air_rate_air_temperature_coefficient`

        Args:
            value (float): value for IDD Field `air_rate_air_temperature_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `air_rate_air_temperature_coefficient`'.format(value))

        self._data["Air Rate Air Temperature Coefficient"] = value

    @property
    def air_rate_function_of_fuel_rate_curve_name(self):
        """Get air_rate_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `air_rate_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Air Rate Function of Fuel Rate Curve Name"]

    @air_rate_function_of_fuel_rate_curve_name.setter
    def air_rate_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `air_rate_function_of_fuel_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `air_rate_function_of_fuel_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_rate_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_rate_function_of_fuel_rate_curve_name`')

        self._data["Air Rate Function of Fuel Rate Curve Name"] = value

    @property
    def air_intake_heat_recovery_mode(self):
        """Get air_intake_heat_recovery_mode

        Returns:
            str: the value of `air_intake_heat_recovery_mode` or None if not set
        """
        return self._data["Air Intake Heat Recovery Mode"]

    @air_intake_heat_recovery_mode.setter
    def air_intake_heat_recovery_mode(self, value=None):
        """  Corresponds to IDD Field `air_intake_heat_recovery_mode`

        Args:
            value (str): value for IDD Field `air_intake_heat_recovery_mode`
                Accepted values are:
                      - NoRecovery
                      - RecoverBurnerInverterStorage
                      - RecoverAuxiliaryBurner
                      - RecoverInverterandStorage
                      - RecoverInverter
                      - RecoverElectricalStorage
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_intake_heat_recovery_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_intake_heat_recovery_mode`')
            vals = set()
            vals.add("NoRecovery")
            vals.add("RecoverBurnerInverterStorage")
            vals.add("RecoverAuxiliaryBurner")
            vals.add("RecoverInverterandStorage")
            vals.add("RecoverInverter")
            vals.add("RecoverElectricalStorage")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `air_intake_heat_recovery_mode`'.format(value))

        self._data["Air Intake Heat Recovery Mode"] = value

    @property
    def air_supply_constituent_mode(self):
        """Get air_supply_constituent_mode

        Returns:
            str: the value of `air_supply_constituent_mode` or None if not set
        """
        return self._data["Air Supply Constituent Mode"]

    @air_supply_constituent_mode.setter
    def air_supply_constituent_mode(self, value=None):
        """  Corresponds to IDD Field `air_supply_constituent_mode`

        Args:
            value (str): value for IDD Field `air_supply_constituent_mode`
                Accepted values are:
                      - AmbientAir
                      - UserDefinedConstituents
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_supply_constituent_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_constituent_mode`')
            vals = set()
            vals.add("AmbientAir")
            vals.add("UserDefinedConstituents")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `air_supply_constituent_mode`'.format(value))

        self._data["Air Supply Constituent Mode"] = value

    @property
    def number_of_userdefined_constituents(self):
        """Get number_of_userdefined_constituents

        Returns:
            float: the value of `number_of_userdefined_constituents` or None if not set
        """
        return self._data["Number of UserDefined Constituents"]

    @number_of_userdefined_constituents.setter
    def number_of_userdefined_constituents(self, value=None):
        """  Corresponds to IDD Field `number_of_userdefined_constituents`

        Args:
            value (float): value for IDD Field `number_of_userdefined_constituents`
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_userdefined_constituents`'.format(value))
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `number_of_userdefined_constituents`')

        self._data["Number of UserDefined Constituents"] = value

    @property
    def constituent_1_name(self):
        """Get constituent_1_name

        Returns:
            str: the value of `constituent_1_name` or None if not set
        """
        return self._data["Constituent 1 Name"]

    @constituent_1_name.setter
    def constituent_1_name(self, value=None):
        """  Corresponds to IDD Field `constituent_1_name`

        Args:
            value (str): value for IDD Field `constituent_1_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_1_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_1_name`'.format(value))

        self._data["Constituent 1 Name"] = value

    @property
    def molar_fraction_1(self):
        """Get molar_fraction_1

        Returns:
            float: the value of `molar_fraction_1` or None if not set
        """
        return self._data["Molar Fraction 1"]

    @molar_fraction_1.setter
    def molar_fraction_1(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_1`

        Args:
            value (float): value for IDD Field `molar_fraction_1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_1`')

        self._data["Molar Fraction 1"] = value

    @property
    def constituent_2_name(self):
        """Get constituent_2_name

        Returns:
            str: the value of `constituent_2_name` or None if not set
        """
        return self._data["Constituent 2 Name"]

    @constituent_2_name.setter
    def constituent_2_name(self, value=None):
        """  Corresponds to IDD Field `constituent_2_name`

        Args:
            value (str): value for IDD Field `constituent_2_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_2_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_2_name`'.format(value))

        self._data["Constituent 2 Name"] = value

    @property
    def molar_fraction_2(self):
        """Get molar_fraction_2

        Returns:
            float: the value of `molar_fraction_2` or None if not set
        """
        return self._data["Molar Fraction 2"]

    @molar_fraction_2.setter
    def molar_fraction_2(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_2`

        Args:
            value (float): value for IDD Field `molar_fraction_2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_2`')

        self._data["Molar Fraction 2"] = value

    @property
    def constituent_3_name(self):
        """Get constituent_3_name

        Returns:
            str: the value of `constituent_3_name` or None if not set
        """
        return self._data["Constituent 3 Name"]

    @constituent_3_name.setter
    def constituent_3_name(self, value=None):
        """  Corresponds to IDD Field `constituent_3_name`

        Args:
            value (str): value for IDD Field `constituent_3_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_3_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_3_name`'.format(value))

        self._data["Constituent 3 Name"] = value

    @property
    def molar_fraction_3(self):
        """Get molar_fraction_3

        Returns:
            float: the value of `molar_fraction_3` or None if not set
        """
        return self._data["Molar Fraction 3"]

    @molar_fraction_3.setter
    def molar_fraction_3(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_3`

        Args:
            value (float): value for IDD Field `molar_fraction_3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_3`')

        self._data["Molar Fraction 3"] = value

    @property
    def constituent_4_name(self):
        """Get constituent_4_name

        Returns:
            str: the value of `constituent_4_name` or None if not set
        """
        return self._data["Constituent 4 Name"]

    @constituent_4_name.setter
    def constituent_4_name(self, value=None):
        """  Corresponds to IDD Field `constituent_4_name`

        Args:
            value (str): value for IDD Field `constituent_4_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_4_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_4_name`'.format(value))

        self._data["Constituent 4 Name"] = value

    @property
    def molar_fraction_4(self):
        """Get molar_fraction_4

        Returns:
            float: the value of `molar_fraction_4` or None if not set
        """
        return self._data["Molar Fraction 4"]

    @molar_fraction_4.setter
    def molar_fraction_4(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_4`

        Args:
            value (float): value for IDD Field `molar_fraction_4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_4`')

        self._data["Molar Fraction 4"] = value

    @property
    def constituent_5_name(self):
        """Get constituent_5_name

        Returns:
            str: the value of `constituent_5_name` or None if not set
        """
        return self._data["Constituent 5 Name"]

    @constituent_5_name.setter
    def constituent_5_name(self, value=None):
        """  Corresponds to IDD Field `constituent_5_name`

        Args:
            value (str): value for IDD Field `constituent_5_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_5_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_5_name`'.format(value))

        self._data["Constituent 5 Name"] = value

    @property
    def molar_fraction_5(self):
        """Get molar_fraction_5

        Returns:
            float: the value of `molar_fraction_5` or None if not set
        """
        return self._data["Molar Fraction 5"]

    @molar_fraction_5.setter
    def molar_fraction_5(self, value=None):
        """  Corresponds to IDD Field `molar_fraction_5`

        Args:
            value (float): value for IDD Field `molar_fraction_5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `molar_fraction_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_5`')

        self._data["Molar Fraction 5"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.blower_power_curve_name))
        out.append(self._to_str(self.blower_heat_loss_factor))
        out.append(self._to_str(self.air_supply_rate_calculation_mode))
        out.append(self._to_str(self.stoichiometric_ratio))
        out.append(self._to_str(self.air_rate_function_of_electric_power_curve_name))
        out.append(self._to_str(self.air_rate_air_temperature_coefficient))
        out.append(self._to_str(self.air_rate_function_of_fuel_rate_curve_name))
        out.append(self._to_str(self.air_intake_heat_recovery_mode))
        out.append(self._to_str(self.air_supply_constituent_mode))
        out.append(self._to_str(self.number_of_userdefined_constituents))
        out.append(self._to_str(self.constituent_1_name))
        out.append(self._to_str(self.molar_fraction_1))
        out.append(self._to_str(self.constituent_2_name))
        out.append(self._to_str(self.molar_fraction_2))
        out.append(self._to_str(self.constituent_3_name))
        out.append(self._to_str(self.molar_fraction_3))
        out.append(self._to_str(self.constituent_4_name))
        out.append(self._to_str(self.molar_fraction_4))
        out.append(self._to_str(self.constituent_5_name))
        out.append(self._to_str(self.molar_fraction_5))
        return ",".join(out)

class GeneratorFuelCellWaterSupply(object):
    """ Corresponds to IDD object `Generator:FuelCell:WaterSupply`
        Used to provide details of the water supply subsystem for a fuel cell power generator.
        This water is used for steam reforming of the fuel and is not the same
        as the water used for thermal heat recovery.
    """
    internal_name = "Generator:FuelCell:WaterSupply"
    field_count = 7

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell:WaterSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"] = None
        self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"] = None
        self._data["Pump Heat Loss Factor"] = None
        self._data["Water Temperature Modeling Mode"] = None
        self._data["Water Temperature Reference Node Name"] = None
        self._data["Water Temperature Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reformer_water_flow_rate_function_of_fuel_rate_curve_name = None
        else:
            self.reformer_water_flow_rate_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reformer_water_pump_power_function_of_fuel_rate_curve_name = None
        else:
            self.reformer_water_pump_power_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_heat_loss_factor = None
        else:
            self.pump_heat_loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_temperature_modeling_mode = None
        else:
            self.water_temperature_modeling_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_temperature_reference_node_name = None
        else:
            self.water_temperature_reference_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_temperature_schedule_name = None
        else:
            self.water_temperature_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reformer_water_flow_rate_function_of_fuel_rate_curve_name(self):
        """Get reformer_water_flow_rate_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `reformer_water_flow_rate_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"]

    @reformer_water_flow_rate_function_of_fuel_rate_curve_name.setter
    def reformer_water_flow_rate_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`')

        self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"] = value

    @property
    def reformer_water_pump_power_function_of_fuel_rate_curve_name(self):
        """Get reformer_water_pump_power_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `reformer_water_pump_power_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"]

    @reformer_water_pump_power_function_of_fuel_rate_curve_name.setter
    def reformer_water_pump_power_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `reformer_water_pump_power_function_of_fuel_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `reformer_water_pump_power_function_of_fuel_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reformer_water_pump_power_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reformer_water_pump_power_function_of_fuel_rate_curve_name`')

        self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"] = value

    @property
    def pump_heat_loss_factor(self):
        """Get pump_heat_loss_factor

        Returns:
            float: the value of `pump_heat_loss_factor` or None if not set
        """
        return self._data["Pump Heat Loss Factor"]

    @pump_heat_loss_factor.setter
    def pump_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `pump_heat_loss_factor`

        Args:
            value (float): value for IDD Field `pump_heat_loss_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pump_heat_loss_factor`'.format(value))

        self._data["Pump Heat Loss Factor"] = value

    @property
    def water_temperature_modeling_mode(self):
        """Get water_temperature_modeling_mode

        Returns:
            str: the value of `water_temperature_modeling_mode` or None if not set
        """
        return self._data["Water Temperature Modeling Mode"]

    @water_temperature_modeling_mode.setter
    def water_temperature_modeling_mode(self, value=None):
        """  Corresponds to IDD Field `water_temperature_modeling_mode`

        Args:
            value (str): value for IDD Field `water_temperature_modeling_mode`
                Accepted values are:
                      - TemperatureFromAirNode
                      - TemperatureFromWaterNode
                      - TemperatureFromSchedule
                      - MainsWaterTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_temperature_modeling_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_modeling_mode`')
            vals = set()
            vals.add("TemperatureFromAirNode")
            vals.add("TemperatureFromWaterNode")
            vals.add("TemperatureFromSchedule")
            vals.add("MainsWaterTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `water_temperature_modeling_mode`'.format(value))

        self._data["Water Temperature Modeling Mode"] = value

    @property
    def water_temperature_reference_node_name(self):
        """Get water_temperature_reference_node_name

        Returns:
            str: the value of `water_temperature_reference_node_name` or None if not set
        """
        return self._data["Water Temperature Reference Node Name"]

    @water_temperature_reference_node_name.setter
    def water_temperature_reference_node_name(self, value=None):
        """  Corresponds to IDD Field `water_temperature_reference_node_name`

        Args:
            value (str): value for IDD Field `water_temperature_reference_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_temperature_reference_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_reference_node_name`')

        self._data["Water Temperature Reference Node Name"] = value

    @property
    def water_temperature_schedule_name(self):
        """Get water_temperature_schedule_name

        Returns:
            str: the value of `water_temperature_schedule_name` or None if not set
        """
        return self._data["Water Temperature Schedule Name"]

    @water_temperature_schedule_name.setter
    def water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `water_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `water_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_schedule_name`')

        self._data["Water Temperature Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reformer_water_flow_rate_function_of_fuel_rate_curve_name))
        out.append(self._to_str(self.reformer_water_pump_power_function_of_fuel_rate_curve_name))
        out.append(self._to_str(self.pump_heat_loss_factor))
        out.append(self._to_str(self.water_temperature_modeling_mode))
        out.append(self._to_str(self.water_temperature_reference_node_name))
        out.append(self._to_str(self.water_temperature_schedule_name))
        return ",".join(out)

class GeneratorFuelCellAuxiliaryHeater(object):
    """ Corresponds to IDD object `Generator:FuelCell:AuxiliaryHeater`
        Intended for modeling an auxiliary heater for a fuel cell power generator, however this
        portion of the model is not yet available. The program still requires one of these
        objects be included even though the data are not yet used (so that internal data
        structures can be allocated).
    """
    internal_name = "Generator:FuelCell:AuxiliaryHeater"
    field_count = 12

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell:AuxiliaryHeater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Excess Air Ratio"] = None
        self._data["Ancilliary Power Constant Term"] = None
        self._data["Ancilliary Power Linear Term"] = None
        self._data["Skin Loss U-Factor Times Area Value"] = None
        self._data["Skin Loss Destination"] = None
        self._data["Zone Name to Receive Skin Losses"] = None
        self._data["Heating Capacity Units"] = None
        self._data["Maximum Heating Capacity in Watts"] = None
        self._data["Minimum Heating Capacity in Watts"] = None
        self._data["Maximum Heating Capacity in Kmol per Second"] = None
        self._data["Minimum Heating Capacity in Kmol per Second"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.excess_air_ratio = None
        else:
            self.excess_air_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_power_constant_term = None
        else:
            self.ancilliary_power_constant_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_power_linear_term = None
        else:
            self.ancilliary_power_linear_term = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_value = None
        else:
            self.skin_loss_ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_destination = None
        else:
            self.skin_loss_destination = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name_to_receive_skin_losses = None
        else:
            self.zone_name_to_receive_skin_losses = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_capacity_units = None
        else:
            self.heating_capacity_units = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_capacity_in_watts = None
        else:
            self.maximum_heating_capacity_in_watts = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_heating_capacity_in_watts = None
        else:
            self.minimum_heating_capacity_in_watts = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_capacity_in_kmol_per_second = None
        else:
            self.maximum_heating_capacity_in_kmol_per_second = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_heating_capacity_in_kmol_per_second = None
        else:
            self.minimum_heating_capacity_in_kmol_per_second = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def excess_air_ratio(self):
        """Get excess_air_ratio

        Returns:
            float: the value of `excess_air_ratio` or None if not set
        """
        return self._data["Excess Air Ratio"]

    @excess_air_ratio.setter
    def excess_air_ratio(self, value=None):
        """  Corresponds to IDD Field `excess_air_ratio`

        Args:
            value (float): value for IDD Field `excess_air_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `excess_air_ratio`'.format(value))

        self._data["Excess Air Ratio"] = value

    @property
    def ancilliary_power_constant_term(self):
        """Get ancilliary_power_constant_term

        Returns:
            float: the value of `ancilliary_power_constant_term` or None if not set
        """
        return self._data["Ancilliary Power Constant Term"]

    @ancilliary_power_constant_term.setter
    def ancilliary_power_constant_term(self, value=None):
        """  Corresponds to IDD Field `ancilliary_power_constant_term`

        Args:
            value (float): value for IDD Field `ancilliary_power_constant_term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_power_constant_term`'.format(value))

        self._data["Ancilliary Power Constant Term"] = value

    @property
    def ancilliary_power_linear_term(self):
        """Get ancilliary_power_linear_term

        Returns:
            float: the value of `ancilliary_power_linear_term` or None if not set
        """
        return self._data["Ancilliary Power Linear Term"]

    @ancilliary_power_linear_term.setter
    def ancilliary_power_linear_term(self, value=None):
        """  Corresponds to IDD Field `ancilliary_power_linear_term`

        Args:
            value (float): value for IDD Field `ancilliary_power_linear_term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_power_linear_term`'.format(value))

        self._data["Ancilliary Power Linear Term"] = value

    @property
    def skin_loss_ufactor_times_area_value(self):
        """Get skin_loss_ufactor_times_area_value

        Returns:
            float: the value of `skin_loss_ufactor_times_area_value` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Value"]

    @skin_loss_ufactor_times_area_value.setter
    def skin_loss_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `skin_loss_ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `skin_loss_ufactor_times_area_value`
                Unit: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_ufactor_times_area_value`'.format(value))

        self._data["Skin Loss U-Factor Times Area Value"] = value

    @property
    def skin_loss_destination(self):
        """Get skin_loss_destination

        Returns:
            str: the value of `skin_loss_destination` or None if not set
        """
        return self._data["Skin Loss Destination"]

    @skin_loss_destination.setter
    def skin_loss_destination(self, value=None):
        """  Corresponds to IDD Field `skin_loss_destination`

        Args:
            value (str): value for IDD Field `skin_loss_destination`
                Accepted values are:
                      - SurroundingZone
                      - AirInletForFuelCell
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `skin_loss_destination`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_destination`')
            vals = set()
            vals.add("SurroundingZone")
            vals.add("AirInletForFuelCell")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `skin_loss_destination`'.format(value))

        self._data["Skin Loss Destination"] = value

    @property
    def zone_name_to_receive_skin_losses(self):
        """Get zone_name_to_receive_skin_losses

        Returns:
            str: the value of `zone_name_to_receive_skin_losses` or None if not set
        """
        return self._data["Zone Name to Receive Skin Losses"]

    @zone_name_to_receive_skin_losses.setter
    def zone_name_to_receive_skin_losses(self, value=None):
        """  Corresponds to IDD Field `zone_name_to_receive_skin_losses`

        Args:
            value (str): value for IDD Field `zone_name_to_receive_skin_losses`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name_to_receive_skin_losses`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name_to_receive_skin_losses`')

        self._data["Zone Name to Receive Skin Losses"] = value

    @property
    def heating_capacity_units(self):
        """Get heating_capacity_units

        Returns:
            str: the value of `heating_capacity_units` or None if not set
        """
        return self._data["Heating Capacity Units"]

    @heating_capacity_units.setter
    def heating_capacity_units(self, value=None):
        """  Corresponds to IDD Field `heating_capacity_units`

        Args:
            value (str): value for IDD Field `heating_capacity_units`
                Accepted values are:
                      - Watts
                      - kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_units`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_units`')
            vals = set()
            vals.add("Watts")
            vals.add("kmol/s")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_capacity_units`'.format(value))

        self._data["Heating Capacity Units"] = value

    @property
    def maximum_heating_capacity_in_watts(self):
        """Get maximum_heating_capacity_in_watts

        Returns:
            float: the value of `maximum_heating_capacity_in_watts` or None if not set
        """
        return self._data["Maximum Heating Capacity in Watts"]

    @maximum_heating_capacity_in_watts.setter
    def maximum_heating_capacity_in_watts(self, value=None):
        """  Corresponds to IDD Field `maximum_heating_capacity_in_watts`

        Args:
            value (float): value for IDD Field `maximum_heating_capacity_in_watts`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_capacity_in_watts`'.format(value))

        self._data["Maximum Heating Capacity in Watts"] = value

    @property
    def minimum_heating_capacity_in_watts(self):
        """Get minimum_heating_capacity_in_watts

        Returns:
            float: the value of `minimum_heating_capacity_in_watts` or None if not set
        """
        return self._data["Minimum Heating Capacity in Watts"]

    @minimum_heating_capacity_in_watts.setter
    def minimum_heating_capacity_in_watts(self, value=None):
        """  Corresponds to IDD Field `minimum_heating_capacity_in_watts`

        Args:
            value (float): value for IDD Field `minimum_heating_capacity_in_watts`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_heating_capacity_in_watts`'.format(value))

        self._data["Minimum Heating Capacity in Watts"] = value

    @property
    def maximum_heating_capacity_in_kmol_per_second(self):
        """Get maximum_heating_capacity_in_kmol_per_second

        Returns:
            float: the value of `maximum_heating_capacity_in_kmol_per_second` or None if not set
        """
        return self._data["Maximum Heating Capacity in Kmol per Second"]

    @maximum_heating_capacity_in_kmol_per_second.setter
    def maximum_heating_capacity_in_kmol_per_second(self, value=None):
        """  Corresponds to IDD Field `maximum_heating_capacity_in_kmol_per_second`

        Args:
            value (float): value for IDD Field `maximum_heating_capacity_in_kmol_per_second`
                Unit: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_capacity_in_kmol_per_second`'.format(value))

        self._data["Maximum Heating Capacity in Kmol per Second"] = value

    @property
    def minimum_heating_capacity_in_kmol_per_second(self):
        """Get minimum_heating_capacity_in_kmol_per_second

        Returns:
            float: the value of `minimum_heating_capacity_in_kmol_per_second` or None if not set
        """
        return self._data["Minimum Heating Capacity in Kmol per Second"]

    @minimum_heating_capacity_in_kmol_per_second.setter
    def minimum_heating_capacity_in_kmol_per_second(self, value=None):
        """  Corresponds to IDD Field `minimum_heating_capacity_in_kmol_per_second`

        Args:
            value (float): value for IDD Field `minimum_heating_capacity_in_kmol_per_second`
                Unit: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_heating_capacity_in_kmol_per_second`'.format(value))

        self._data["Minimum Heating Capacity in Kmol per Second"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.excess_air_ratio))
        out.append(self._to_str(self.ancilliary_power_constant_term))
        out.append(self._to_str(self.ancilliary_power_linear_term))
        out.append(self._to_str(self.skin_loss_ufactor_times_area_value))
        out.append(self._to_str(self.skin_loss_destination))
        out.append(self._to_str(self.zone_name_to_receive_skin_losses))
        out.append(self._to_str(self.heating_capacity_units))
        out.append(self._to_str(self.maximum_heating_capacity_in_watts))
        out.append(self._to_str(self.minimum_heating_capacity_in_watts))
        out.append(self._to_str(self.maximum_heating_capacity_in_kmol_per_second))
        out.append(self._to_str(self.minimum_heating_capacity_in_kmol_per_second))
        return ",".join(out)

class GeneratorFuelCellExhaustGasToWaterHeatExchanger(object):
    """ Corresponds to IDD object `Generator:FuelCell:ExhaustGasToWaterHeatExchanger`
        Describes the exhaust gas heat exchanger subsystem of a fuel cell power generator
        used to recovery thermal energy
    """
    internal_name = "Generator:FuelCell:ExhaustGasToWaterHeatExchanger"
    field_count = 24

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell:ExhaustGasToWaterHeatExchanger`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Heat Recovery Water Maximum Flow Rate"] = None
        self._data["Exhaust Outlet Air Node Name"] = None
        self._data["Heat Exchanger Calculation Method"] = None
        self._data["Method 1 Heat Exchanger Effectiveness"] = None
        self._data["Method 2 Parameter hxs0"] = None
        self._data["Method 2 Parameter hxs1"] = None
        self._data["Method 2 Parameter hxs2"] = None
        self._data["Method 2 Parameter hxs3"] = None
        self._data["Method 2 Parameter hxs4"] = None
        self._data["Method 3 h0Gas Coefficient"] = None
        self._data["Method 3 NdotGasRef Coefficient"] = None
        self._data["Method 3 n Coefficient"] = None
        self._data["Method 3 Gas Area"] = None
        self._data["Method 3 h0 Water Coefficient"] = None
        self._data["Method 3 N dot Water ref Coefficient"] = None
        self._data["Method 3 m Coefficient"] = None
        self._data["Method 3 Water Area"] = None
        self._data["Method 3 F Adjustment Factor"] = None
        self._data["Method 4 hxl1 Coefficient"] = None
        self._data["Method 4 hxl2 Coefficient"] = None
        self._data["Method 4 Condensation Threshold"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_maximum_flow_rate = None
        else:
            self.heat_recovery_water_maximum_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_outlet_air_node_name = None
        else:
            self.exhaust_outlet_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_exchanger_calculation_method = None
        else:
            self.heat_exchanger_calculation_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_1_heat_exchanger_effectiveness = None
        else:
            self.method_1_heat_exchanger_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs0 = None
        else:
            self.method_2_parameter_hxs0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs1 = None
        else:
            self.method_2_parameter_hxs1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs2 = None
        else:
            self.method_2_parameter_hxs2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs3 = None
        else:
            self.method_2_parameter_hxs3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs4 = None
        else:
            self.method_2_parameter_hxs4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_h0gas_coefficient = None
        else:
            self.method_3_h0gas_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_ndotgasref_coefficient = None
        else:
            self.method_3_ndotgasref_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_n_coefficient = None
        else:
            self.method_3_n_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_gas_area = None
        else:
            self.method_3_gas_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_h0_water_coefficient = None
        else:
            self.method_3_h0_water_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_n_dot_water_ref_coefficient = None
        else:
            self.method_3_n_dot_water_ref_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_m_coefficient = None
        else:
            self.method_3_m_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_water_area = None
        else:
            self.method_3_water_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_3_f_adjustment_factor = None
        else:
            self.method_3_f_adjustment_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_4_hxl1_coefficient = None
        else:
            self.method_4_hxl1_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_4_hxl2_coefficient = None
        else:
            self.method_4_hxl2_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.method_4_condensation_threshold = None
        else:
            self.method_4_condensation_threshold = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')

        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')

        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def heat_recovery_water_maximum_flow_rate(self):
        """Get heat_recovery_water_maximum_flow_rate

        Returns:
            float: the value of `heat_recovery_water_maximum_flow_rate` or None if not set
        """
        return self._data["Heat Recovery Water Maximum Flow Rate"]

    @heat_recovery_water_maximum_flow_rate.setter
    def heat_recovery_water_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_maximum_flow_rate`

        Args:
            value (float): value for IDD Field `heat_recovery_water_maximum_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_recovery_water_maximum_flow_rate`'.format(value))

        self._data["Heat Recovery Water Maximum Flow Rate"] = value

    @property
    def exhaust_outlet_air_node_name(self):
        """Get exhaust_outlet_air_node_name

        Returns:
            str: the value of `exhaust_outlet_air_node_name` or None if not set
        """
        return self._data["Exhaust Outlet Air Node Name"]

    @exhaust_outlet_air_node_name.setter
    def exhaust_outlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_outlet_air_node_name`

        Args:
            value (str): value for IDD Field `exhaust_outlet_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_outlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_outlet_air_node_name`')

        self._data["Exhaust Outlet Air Node Name"] = value

    @property
    def heat_exchanger_calculation_method(self):
        """Get heat_exchanger_calculation_method

        Returns:
            str: the value of `heat_exchanger_calculation_method` or None if not set
        """
        return self._data["Heat Exchanger Calculation Method"]

    @heat_exchanger_calculation_method.setter
    def heat_exchanger_calculation_method(self, value=None):
        """  Corresponds to IDD Field `heat_exchanger_calculation_method`

        Args:
            value (str): value for IDD Field `heat_exchanger_calculation_method`
                Accepted values are:
                      - FixedEffectiveness
                      - EmpiricalUAeff
                      - FundementalUAeff
                      - Condensing
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_calculation_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_calculation_method`')
            vals = set()
            vals.add("FixedEffectiveness")
            vals.add("EmpiricalUAeff")
            vals.add("FundementalUAeff")
            vals.add("Condensing")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_exchanger_calculation_method`'.format(value))

        self._data["Heat Exchanger Calculation Method"] = value

    @property
    def method_1_heat_exchanger_effectiveness(self):
        """Get method_1_heat_exchanger_effectiveness

        Returns:
            float: the value of `method_1_heat_exchanger_effectiveness` or None if not set
        """
        return self._data["Method 1 Heat Exchanger Effectiveness"]

    @method_1_heat_exchanger_effectiveness.setter
    def method_1_heat_exchanger_effectiveness(self, value=None):
        """  Corresponds to IDD Field `method_1_heat_exchanger_effectiveness`

        Args:
            value (float): value for IDD Field `method_1_heat_exchanger_effectiveness`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_1_heat_exchanger_effectiveness`'.format(value))

        self._data["Method 1 Heat Exchanger Effectiveness"] = value

    @property
    def method_2_parameter_hxs0(self):
        """Get method_2_parameter_hxs0

        Returns:
            float: the value of `method_2_parameter_hxs0` or None if not set
        """
        return self._data["Method 2 Parameter hxs0"]

    @method_2_parameter_hxs0.setter
    def method_2_parameter_hxs0(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs0`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs0`'.format(value))

        self._data["Method 2 Parameter hxs0"] = value

    @property
    def method_2_parameter_hxs1(self):
        """Get method_2_parameter_hxs1

        Returns:
            float: the value of `method_2_parameter_hxs1` or None if not set
        """
        return self._data["Method 2 Parameter hxs1"]

    @method_2_parameter_hxs1.setter
    def method_2_parameter_hxs1(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs1`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs1`'.format(value))

        self._data["Method 2 Parameter hxs1"] = value

    @property
    def method_2_parameter_hxs2(self):
        """Get method_2_parameter_hxs2

        Returns:
            float: the value of `method_2_parameter_hxs2` or None if not set
        """
        return self._data["Method 2 Parameter hxs2"]

    @method_2_parameter_hxs2.setter
    def method_2_parameter_hxs2(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs2`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs2`'.format(value))

        self._data["Method 2 Parameter hxs2"] = value

    @property
    def method_2_parameter_hxs3(self):
        """Get method_2_parameter_hxs3

        Returns:
            float: the value of `method_2_parameter_hxs3` or None if not set
        """
        return self._data["Method 2 Parameter hxs3"]

    @method_2_parameter_hxs3.setter
    def method_2_parameter_hxs3(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs3`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs3`'.format(value))

        self._data["Method 2 Parameter hxs3"] = value

    @property
    def method_2_parameter_hxs4(self):
        """Get method_2_parameter_hxs4

        Returns:
            float: the value of `method_2_parameter_hxs4` or None if not set
        """
        return self._data["Method 2 Parameter hxs4"]

    @method_2_parameter_hxs4.setter
    def method_2_parameter_hxs4(self, value=None):
        """  Corresponds to IDD Field `method_2_parameter_hxs4`

        Args:
            value (float): value for IDD Field `method_2_parameter_hxs4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_2_parameter_hxs4`'.format(value))

        self._data["Method 2 Parameter hxs4"] = value

    @property
    def method_3_h0gas_coefficient(self):
        """Get method_3_h0gas_coefficient

        Returns:
            float: the value of `method_3_h0gas_coefficient` or None if not set
        """
        return self._data["Method 3 h0Gas Coefficient"]

    @method_3_h0gas_coefficient.setter
    def method_3_h0gas_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_h0gas_coefficient`

        Args:
            value (float): value for IDD Field `method_3_h0gas_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_h0gas_coefficient`'.format(value))

        self._data["Method 3 h0Gas Coefficient"] = value

    @property
    def method_3_ndotgasref_coefficient(self):
        """Get method_3_ndotgasref_coefficient

        Returns:
            float: the value of `method_3_ndotgasref_coefficient` or None if not set
        """
        return self._data["Method 3 NdotGasRef Coefficient"]

    @method_3_ndotgasref_coefficient.setter
    def method_3_ndotgasref_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_ndotgasref_coefficient`

        Args:
            value (float): value for IDD Field `method_3_ndotgasref_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_ndotgasref_coefficient`'.format(value))

        self._data["Method 3 NdotGasRef Coefficient"] = value

    @property
    def method_3_n_coefficient(self):
        """Get method_3_n_coefficient

        Returns:
            float: the value of `method_3_n_coefficient` or None if not set
        """
        return self._data["Method 3 n Coefficient"]

    @method_3_n_coefficient.setter
    def method_3_n_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_n_coefficient`

        Args:
            value (float): value for IDD Field `method_3_n_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_n_coefficient`'.format(value))

        self._data["Method 3 n Coefficient"] = value

    @property
    def method_3_gas_area(self):
        """Get method_3_gas_area

        Returns:
            float: the value of `method_3_gas_area` or None if not set
        """
        return self._data["Method 3 Gas Area"]

    @method_3_gas_area.setter
    def method_3_gas_area(self, value=None):
        """  Corresponds to IDD Field `method_3_gas_area`

        Args:
            value (float): value for IDD Field `method_3_gas_area`
                Unit: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_gas_area`'.format(value))

        self._data["Method 3 Gas Area"] = value

    @property
    def method_3_h0_water_coefficient(self):
        """Get method_3_h0_water_coefficient

        Returns:
            float: the value of `method_3_h0_water_coefficient` or None if not set
        """
        return self._data["Method 3 h0 Water Coefficient"]

    @method_3_h0_water_coefficient.setter
    def method_3_h0_water_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_h0_water_coefficient`

        Args:
            value (float): value for IDD Field `method_3_h0_water_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_h0_water_coefficient`'.format(value))

        self._data["Method 3 h0 Water Coefficient"] = value

    @property
    def method_3_n_dot_water_ref_coefficient(self):
        """Get method_3_n_dot_water_ref_coefficient

        Returns:
            float: the value of `method_3_n_dot_water_ref_coefficient` or None if not set
        """
        return self._data["Method 3 N dot Water ref Coefficient"]

    @method_3_n_dot_water_ref_coefficient.setter
    def method_3_n_dot_water_ref_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_n_dot_water_ref_coefficient`

        Args:
            value (float): value for IDD Field `method_3_n_dot_water_ref_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_n_dot_water_ref_coefficient`'.format(value))

        self._data["Method 3 N dot Water ref Coefficient"] = value

    @property
    def method_3_m_coefficient(self):
        """Get method_3_m_coefficient

        Returns:
            float: the value of `method_3_m_coefficient` or None if not set
        """
        return self._data["Method 3 m Coefficient"]

    @method_3_m_coefficient.setter
    def method_3_m_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_3_m_coefficient`

        Args:
            value (float): value for IDD Field `method_3_m_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_m_coefficient`'.format(value))

        self._data["Method 3 m Coefficient"] = value

    @property
    def method_3_water_area(self):
        """Get method_3_water_area

        Returns:
            float: the value of `method_3_water_area` or None if not set
        """
        return self._data["Method 3 Water Area"]

    @method_3_water_area.setter
    def method_3_water_area(self, value=None):
        """  Corresponds to IDD Field `method_3_water_area`

        Args:
            value (float): value for IDD Field `method_3_water_area`
                Unit: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_water_area`'.format(value))

        self._data["Method 3 Water Area"] = value

    @property
    def method_3_f_adjustment_factor(self):
        """Get method_3_f_adjustment_factor

        Returns:
            float: the value of `method_3_f_adjustment_factor` or None if not set
        """
        return self._data["Method 3 F Adjustment Factor"]

    @method_3_f_adjustment_factor.setter
    def method_3_f_adjustment_factor(self, value=None):
        """  Corresponds to IDD Field `method_3_f_adjustment_factor`

        Args:
            value (float): value for IDD Field `method_3_f_adjustment_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_3_f_adjustment_factor`'.format(value))

        self._data["Method 3 F Adjustment Factor"] = value

    @property
    def method_4_hxl1_coefficient(self):
        """Get method_4_hxl1_coefficient

        Returns:
            float: the value of `method_4_hxl1_coefficient` or None if not set
        """
        return self._data["Method 4 hxl1 Coefficient"]

    @method_4_hxl1_coefficient.setter
    def method_4_hxl1_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_4_hxl1_coefficient`

        Args:
            value (float): value for IDD Field `method_4_hxl1_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_4_hxl1_coefficient`'.format(value))

        self._data["Method 4 hxl1 Coefficient"] = value

    @property
    def method_4_hxl2_coefficient(self):
        """Get method_4_hxl2_coefficient

        Returns:
            float: the value of `method_4_hxl2_coefficient` or None if not set
        """
        return self._data["Method 4 hxl2 Coefficient"]

    @method_4_hxl2_coefficient.setter
    def method_4_hxl2_coefficient(self, value=None):
        """  Corresponds to IDD Field `method_4_hxl2_coefficient`

        Args:
            value (float): value for IDD Field `method_4_hxl2_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_4_hxl2_coefficient`'.format(value))

        self._data["Method 4 hxl2 Coefficient"] = value

    @property
    def method_4_condensation_threshold(self):
        """Get method_4_condensation_threshold

        Returns:
            float: the value of `method_4_condensation_threshold` or None if not set
        """
        return self._data["Method 4 Condensation Threshold"]

    @method_4_condensation_threshold.setter
    def method_4_condensation_threshold(self, value=None):
        """  Corresponds to IDD Field `method_4_condensation_threshold`

        Args:
            value (float): value for IDD Field `method_4_condensation_threshold`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `method_4_condensation_threshold`'.format(value))

        self._data["Method 4 Condensation Threshold"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.heat_recovery_water_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_outlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_maximum_flow_rate))
        out.append(self._to_str(self.exhaust_outlet_air_node_name))
        out.append(self._to_str(self.heat_exchanger_calculation_method))
        out.append(self._to_str(self.method_1_heat_exchanger_effectiveness))
        out.append(self._to_str(self.method_2_parameter_hxs0))
        out.append(self._to_str(self.method_2_parameter_hxs1))
        out.append(self._to_str(self.method_2_parameter_hxs2))
        out.append(self._to_str(self.method_2_parameter_hxs3))
        out.append(self._to_str(self.method_2_parameter_hxs4))
        out.append(self._to_str(self.method_3_h0gas_coefficient))
        out.append(self._to_str(self.method_3_ndotgasref_coefficient))
        out.append(self._to_str(self.method_3_n_coefficient))
        out.append(self._to_str(self.method_3_gas_area))
        out.append(self._to_str(self.method_3_h0_water_coefficient))
        out.append(self._to_str(self.method_3_n_dot_water_ref_coefficient))
        out.append(self._to_str(self.method_3_m_coefficient))
        out.append(self._to_str(self.method_3_water_area))
        out.append(self._to_str(self.method_3_f_adjustment_factor))
        out.append(self._to_str(self.method_4_hxl1_coefficient))
        out.append(self._to_str(self.method_4_hxl2_coefficient))
        out.append(self._to_str(self.method_4_condensation_threshold))
        return ",".join(out)

class GeneratorFuelCellElectricalStorage(object):
    """ Corresponds to IDD object `Generator:FuelCell:ElectricalStorage`
        Used to describe the electrical storage subsystem for a fuel cell power generator.
        The electrical storage model is a very simple "constrained bucket" model.
        Note that this electrical storage is embedded within the FC device.
    """
    internal_name = "Generator:FuelCell:ElectricalStorage"
    field_count = 8

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell:ElectricalStorage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Choice of Model"] = None
        self._data["Nominal Charging Energetic Efficiency"] = None
        self._data["Nominal Discharging Energetic Efficiency"] = None
        self._data["Simple Maximum Capacity"] = None
        self._data["Simple Maximum Power Draw"] = None
        self._data["Simple Maximum Power Store"] = None
        self._data["Initial Charge State"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.choice_of_model = None
        else:
            self.choice_of_model = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_charging_energetic_efficiency = None
        else:
            self.nominal_charging_energetic_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_discharging_energetic_efficiency = None
        else:
            self.nominal_discharging_energetic_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.simple_maximum_capacity = None
        else:
            self.simple_maximum_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.simple_maximum_power_draw = None
        else:
            self.simple_maximum_power_draw = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.simple_maximum_power_store = None
        else:
            self.simple_maximum_power_store = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.initial_charge_state = None
        else:
            self.initial_charge_state = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def choice_of_model(self):
        """Get choice_of_model

        Returns:
            str: the value of `choice_of_model` or None if not set
        """
        return self._data["Choice of Model"]

    @choice_of_model.setter
    def choice_of_model(self, value=None):
        """  Corresponds to IDD Field `choice_of_model`

        Args:
            value (str): value for IDD Field `choice_of_model`
                Accepted values are:
                      - SimpleEfficiencyWithConstraints
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `choice_of_model`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `choice_of_model`')
            vals = set()
            vals.add("SimpleEfficiencyWithConstraints")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `choice_of_model`'.format(value))

        self._data["Choice of Model"] = value

    @property
    def nominal_charging_energetic_efficiency(self):
        """Get nominal_charging_energetic_efficiency

        Returns:
            float: the value of `nominal_charging_energetic_efficiency` or None if not set
        """
        return self._data["Nominal Charging Energetic Efficiency"]

    @nominal_charging_energetic_efficiency.setter
    def nominal_charging_energetic_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_charging_energetic_efficiency`

        Args:
            value (float): value for IDD Field `nominal_charging_energetic_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_charging_energetic_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_charging_energetic_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_charging_energetic_efficiency`')

        self._data["Nominal Charging Energetic Efficiency"] = value

    @property
    def nominal_discharging_energetic_efficiency(self):
        """Get nominal_discharging_energetic_efficiency

        Returns:
            float: the value of `nominal_discharging_energetic_efficiency` or None if not set
        """
        return self._data["Nominal Discharging Energetic Efficiency"]

    @nominal_discharging_energetic_efficiency.setter
    def nominal_discharging_energetic_efficiency(self, value=None):
        """  Corresponds to IDD Field `nominal_discharging_energetic_efficiency`

        Args:
            value (float): value for IDD Field `nominal_discharging_energetic_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_discharging_energetic_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')

        self._data["Nominal Discharging Energetic Efficiency"] = value

    @property
    def simple_maximum_capacity(self):
        """Get simple_maximum_capacity

        Returns:
            float: the value of `simple_maximum_capacity` or None if not set
        """
        return self._data["Simple Maximum Capacity"]

    @simple_maximum_capacity.setter
    def simple_maximum_capacity(self, value=None):
        """  Corresponds to IDD Field `simple_maximum_capacity`

        Args:
            value (float): value for IDD Field `simple_maximum_capacity`
                Unit: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `simple_maximum_capacity`'.format(value))

        self._data["Simple Maximum Capacity"] = value

    @property
    def simple_maximum_power_draw(self):
        """Get simple_maximum_power_draw

        Returns:
            float: the value of `simple_maximum_power_draw` or None if not set
        """
        return self._data["Simple Maximum Power Draw"]

    @simple_maximum_power_draw.setter
    def simple_maximum_power_draw(self, value=None):
        """  Corresponds to IDD Field `simple_maximum_power_draw`

        Args:
            value (float): value for IDD Field `simple_maximum_power_draw`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `simple_maximum_power_draw`'.format(value))

        self._data["Simple Maximum Power Draw"] = value

    @property
    def simple_maximum_power_store(self):
        """Get simple_maximum_power_store

        Returns:
            float: the value of `simple_maximum_power_store` or None if not set
        """
        return self._data["Simple Maximum Power Store"]

    @simple_maximum_power_store.setter
    def simple_maximum_power_store(self, value=None):
        """  Corresponds to IDD Field `simple_maximum_power_store`

        Args:
            value (float): value for IDD Field `simple_maximum_power_store`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `simple_maximum_power_store`'.format(value))

        self._data["Simple Maximum Power Store"] = value

    @property
    def initial_charge_state(self):
        """Get initial_charge_state

        Returns:
            float: the value of `initial_charge_state` or None if not set
        """
        return self._data["Initial Charge State"]

    @initial_charge_state.setter
    def initial_charge_state(self, value=None):
        """  Corresponds to IDD Field `initial_charge_state`

        Args:
            value (float): value for IDD Field `initial_charge_state`
                Unit: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `initial_charge_state`'.format(value))

        self._data["Initial Charge State"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.choice_of_model))
        out.append(self._to_str(self.nominal_charging_energetic_efficiency))
        out.append(self._to_str(self.nominal_discharging_energetic_efficiency))
        out.append(self._to_str(self.simple_maximum_capacity))
        out.append(self._to_str(self.simple_maximum_power_draw))
        out.append(self._to_str(self.simple_maximum_power_store))
        out.append(self._to_str(self.initial_charge_state))
        return ",".join(out)

class GeneratorFuelCellInverter(object):
    """ Corresponds to IDD object `Generator:FuelCell:Inverter`
        Used to describe the power condition unit subsystem of a fuel cell power generator.
        This object models an inverter system contained within a fuel cell system that
        converts from direct current (DC) to alternating current (AC).
    """
    internal_name = "Generator:FuelCell:Inverter"
    field_count = 4

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell:Inverter`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inverter Efficiency Calculation Mode"] = None
        self._data["Inverter Efficiency"] = None
        self._data["Efficiency Function of DC Power Curve Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inverter_efficiency_calculation_mode = None
        else:
            self.inverter_efficiency_calculation_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inverter_efficiency = None
        else:
            self.inverter_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency_function_of_dc_power_curve_name = None
        else:
            self.efficiency_function_of_dc_power_curve_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def inverter_efficiency_calculation_mode(self):
        """Get inverter_efficiency_calculation_mode

        Returns:
            str: the value of `inverter_efficiency_calculation_mode` or None if not set
        """
        return self._data["Inverter Efficiency Calculation Mode"]

    @inverter_efficiency_calculation_mode.setter
    def inverter_efficiency_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `inverter_efficiency_calculation_mode`

        Args:
            value (str): value for IDD Field `inverter_efficiency_calculation_mode`
                Accepted values are:
                      - Quadratic
                      - Constant
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inverter_efficiency_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inverter_efficiency_calculation_mode`')
            vals = set()
            vals.add("Quadratic")
            vals.add("Constant")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `inverter_efficiency_calculation_mode`'.format(value))

        self._data["Inverter Efficiency Calculation Mode"] = value

    @property
    def inverter_efficiency(self):
        """Get inverter_efficiency

        Returns:
            float: the value of `inverter_efficiency` or None if not set
        """
        return self._data["Inverter Efficiency"]

    @inverter_efficiency.setter
    def inverter_efficiency(self, value=None):
        """  Corresponds to IDD Field `inverter_efficiency`

        Args:
            value (float): value for IDD Field `inverter_efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `inverter_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inverter_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `inverter_efficiency`')

        self._data["Inverter Efficiency"] = value

    @property
    def efficiency_function_of_dc_power_curve_name(self):
        """Get efficiency_function_of_dc_power_curve_name

        Returns:
            str: the value of `efficiency_function_of_dc_power_curve_name` or None if not set
        """
        return self._data["Efficiency Function of DC Power Curve Name"]

    @efficiency_function_of_dc_power_curve_name.setter
    def efficiency_function_of_dc_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `efficiency_function_of_dc_power_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `efficiency_function_of_dc_power_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `efficiency_function_of_dc_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_function_of_dc_power_curve_name`')

        self._data["Efficiency Function of DC Power Curve Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.inverter_efficiency_calculation_mode))
        out.append(self._to_str(self.inverter_efficiency))
        out.append(self._to_str(self.efficiency_function_of_dc_power_curve_name))
        return ",".join(out)

class GeneratorFuelCellStackCooler(object):
    """ Corresponds to IDD object `Generator:FuelCell:StackCooler`
        This object is optional and is used to define details needed to model the stack cooler
        on PEMFC.
    """
    internal_name = "Generator:FuelCell:StackCooler"
    field_count = 21

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelCell:StackCooler`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Nominal Stack Temperature"] = None
        self._data["Actual Stack Temperature"] = None
        self._data["Coefficient r0"] = None
        self._data["Coefficient r1"] = None
        self._data["Coefficient r2"] = None
        self._data["Coefficient r3"] = None
        self._data["Stack Coolant Flow Rate"] = None
        self._data["Stack Cooler U-Factor Times Area Value"] = None
        self._data["Fs-cogen Adjustment Factor"] = None
        self._data["Stack Cogeneration Exchanger Area"] = None
        self._data["Stack Cogeneration Exchanger Nominal Flow Rate"] = None
        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"] = None
        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"] = None
        self._data["Stack Cooler Pump Power"] = None
        self._data["Stack Cooler Pump Heat Loss Fraction"] = None
        self._data["Stack Air Cooler Fan Coefficient f0"] = None
        self._data["Stack Air Cooler Fan Coefficient f1"] = None
        self._data["Stack Air Cooler Fan Coefficient f2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_stack_temperature = None
        else:
            self.nominal_stack_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.actual_stack_temperature = None
        else:
            self.actual_stack_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_r0 = None
        else:
            self.coefficient_r0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_r1 = None
        else:
            self.coefficient_r1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_r2 = None
        else:
            self.coefficient_r2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coefficient_r3 = None
        else:
            self.coefficient_r3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_coolant_flow_rate = None
        else:
            self.stack_coolant_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cooler_ufactor_times_area_value = None
        else:
            self.stack_cooler_ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fscogen_adjustment_factor = None
        else:
            self.fscogen_adjustment_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_area = None
        else:
            self.stack_cogeneration_exchanger_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_flow_rate = None
        else:
            self.stack_cogeneration_exchanger_nominal_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient = None
        else:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent = None
        else:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cooler_pump_power = None
        else:
            self.stack_cooler_pump_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_cooler_pump_heat_loss_fraction = None
        else:
            self.stack_cooler_pump_heat_loss_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f0 = None
        else:
            self.stack_air_cooler_fan_coefficient_f0 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f1 = None
        else:
            self.stack_air_cooler_fan_coefficient_f1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f2 = None
        else:
            self.stack_air_cooler_fan_coefficient_f2 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')

        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')

        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def nominal_stack_temperature(self):
        """Get nominal_stack_temperature

        Returns:
            float: the value of `nominal_stack_temperature` or None if not set
        """
        return self._data["Nominal Stack Temperature"]

    @nominal_stack_temperature.setter
    def nominal_stack_temperature(self, value=None):
        """  Corresponds to IDD Field `nominal_stack_temperature`

        Args:
            value (float): value for IDD Field `nominal_stack_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_stack_temperature`'.format(value))

        self._data["Nominal Stack Temperature"] = value

    @property
    def actual_stack_temperature(self):
        """Get actual_stack_temperature

        Returns:
            float: the value of `actual_stack_temperature` or None if not set
        """
        return self._data["Actual Stack Temperature"]

    @actual_stack_temperature.setter
    def actual_stack_temperature(self, value=None):
        """  Corresponds to IDD Field `actual_stack_temperature`

        Args:
            value (float): value for IDD Field `actual_stack_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `actual_stack_temperature`'.format(value))

        self._data["Actual Stack Temperature"] = value

    @property
    def coefficient_r0(self):
        """Get coefficient_r0

        Returns:
            float: the value of `coefficient_r0` or None if not set
        """
        return self._data["Coefficient r0"]

    @coefficient_r0.setter
    def coefficient_r0(self, value=None):
        """  Corresponds to IDD Field `coefficient_r0`

        Args:
            value (float): value for IDD Field `coefficient_r0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_r0`'.format(value))

        self._data["Coefficient r0"] = value

    @property
    def coefficient_r1(self):
        """Get coefficient_r1

        Returns:
            float: the value of `coefficient_r1` or None if not set
        """
        return self._data["Coefficient r1"]

    @coefficient_r1.setter
    def coefficient_r1(self, value=None):
        """  Corresponds to IDD Field `coefficient_r1`

        Args:
            value (float): value for IDD Field `coefficient_r1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_r1`'.format(value))

        self._data["Coefficient r1"] = value

    @property
    def coefficient_r2(self):
        """Get coefficient_r2

        Returns:
            float: the value of `coefficient_r2` or None if not set
        """
        return self._data["Coefficient r2"]

    @coefficient_r2.setter
    def coefficient_r2(self, value=None):
        """  Corresponds to IDD Field `coefficient_r2`

        Args:
            value (float): value for IDD Field `coefficient_r2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_r2`'.format(value))

        self._data["Coefficient r2"] = value

    @property
    def coefficient_r3(self):
        """Get coefficient_r3

        Returns:
            float: the value of `coefficient_r3` or None if not set
        """
        return self._data["Coefficient r3"]

    @coefficient_r3.setter
    def coefficient_r3(self, value=None):
        """  Corresponds to IDD Field `coefficient_r3`

        Args:
            value (float): value for IDD Field `coefficient_r3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `coefficient_r3`'.format(value))

        self._data["Coefficient r3"] = value

    @property
    def stack_coolant_flow_rate(self):
        """Get stack_coolant_flow_rate

        Returns:
            float: the value of `stack_coolant_flow_rate` or None if not set
        """
        return self._data["Stack Coolant Flow Rate"]

    @stack_coolant_flow_rate.setter
    def stack_coolant_flow_rate(self, value=None):
        """  Corresponds to IDD Field `stack_coolant_flow_rate`

        Args:
            value (float): value for IDD Field `stack_coolant_flow_rate`
                Unit: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_coolant_flow_rate`'.format(value))

        self._data["Stack Coolant Flow Rate"] = value

    @property
    def stack_cooler_ufactor_times_area_value(self):
        """Get stack_cooler_ufactor_times_area_value

        Returns:
            float: the value of `stack_cooler_ufactor_times_area_value` or None if not set
        """
        return self._data["Stack Cooler U-Factor Times Area Value"]

    @stack_cooler_ufactor_times_area_value.setter
    def stack_cooler_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `stack_cooler_ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `stack_cooler_ufactor_times_area_value`
                Unit: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cooler_ufactor_times_area_value`'.format(value))

        self._data["Stack Cooler U-Factor Times Area Value"] = value

    @property
    def fscogen_adjustment_factor(self):
        """Get fscogen_adjustment_factor

        Returns:
            float: the value of `fscogen_adjustment_factor` or None if not set
        """
        return self._data["Fs-cogen Adjustment Factor"]

    @fscogen_adjustment_factor.setter
    def fscogen_adjustment_factor(self, value=None):
        """  Corresponds to IDD Field `fscogen_adjustment_factor`

        Args:
            value (float): value for IDD Field `fscogen_adjustment_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fscogen_adjustment_factor`'.format(value))

        self._data["Fs-cogen Adjustment Factor"] = value

    @property
    def stack_cogeneration_exchanger_area(self):
        """Get stack_cogeneration_exchanger_area

        Returns:
            float: the value of `stack_cogeneration_exchanger_area` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Area"]

    @stack_cogeneration_exchanger_area.setter
    def stack_cogeneration_exchanger_area(self, value=None):
        """  Corresponds to IDD Field `stack_cogeneration_exchanger_area`

        Args:
            value (float): value for IDD Field `stack_cogeneration_exchanger_area`
                Unit: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cogeneration_exchanger_area`'.format(value))

        self._data["Stack Cogeneration Exchanger Area"] = value

    @property
    def stack_cogeneration_exchanger_nominal_flow_rate(self):
        """Get stack_cogeneration_exchanger_nominal_flow_rate

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_flow_rate` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Flow Rate"]

    @stack_cogeneration_exchanger_nominal_flow_rate.setter
    def stack_cogeneration_exchanger_nominal_flow_rate(self, value=None):
        """  Corresponds to IDD Field `stack_cogeneration_exchanger_nominal_flow_rate`

        Args:
            value (float): value for IDD Field `stack_cogeneration_exchanger_nominal_flow_rate`
                Unit: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cogeneration_exchanger_nominal_flow_rate`'.format(value))

        self._data["Stack Cogeneration Exchanger Nominal Flow Rate"] = value

    @property
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient(self):
        """Get stack_cogeneration_exchanger_nominal_heat_transfer_coefficient

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"]

    @stack_cogeneration_exchanger_nominal_heat_transfer_coefficient.setter
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient`

        Args:
            value (float): value for IDD Field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient`
                Unit: W/m2-K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient`'.format(value))

        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"] = value

    @property
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent(self):
        """Get stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"]

    @stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent.setter
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent(self, value=None):
        """  Corresponds to IDD Field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent`

        Args:
            value (float): value for IDD Field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent`'.format(value))

        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"] = value

    @property
    def stack_cooler_pump_power(self):
        """Get stack_cooler_pump_power

        Returns:
            float: the value of `stack_cooler_pump_power` or None if not set
        """
        return self._data["Stack Cooler Pump Power"]

    @stack_cooler_pump_power.setter
    def stack_cooler_pump_power(self, value=None):
        """  Corresponds to IDD Field `stack_cooler_pump_power`

        Args:
            value (float): value for IDD Field `stack_cooler_pump_power`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cooler_pump_power`'.format(value))

        self._data["Stack Cooler Pump Power"] = value

    @property
    def stack_cooler_pump_heat_loss_fraction(self):
        """Get stack_cooler_pump_heat_loss_fraction

        Returns:
            float: the value of `stack_cooler_pump_heat_loss_fraction` or None if not set
        """
        return self._data["Stack Cooler Pump Heat Loss Fraction"]

    @stack_cooler_pump_heat_loss_fraction.setter
    def stack_cooler_pump_heat_loss_fraction(self, value=None):
        """  Corresponds to IDD Field `stack_cooler_pump_heat_loss_fraction`

        Args:
            value (float): value for IDD Field `stack_cooler_pump_heat_loss_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_cooler_pump_heat_loss_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `stack_cooler_pump_heat_loss_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `stack_cooler_pump_heat_loss_fraction`')

        self._data["Stack Cooler Pump Heat Loss Fraction"] = value

    @property
    def stack_air_cooler_fan_coefficient_f0(self):
        """Get stack_air_cooler_fan_coefficient_f0

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f0` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f0"]

    @stack_air_cooler_fan_coefficient_f0.setter
    def stack_air_cooler_fan_coefficient_f0(self, value=None):
        """  Corresponds to IDD Field `stack_air_cooler_fan_coefficient_f0`

        Args:
            value (float): value for IDD Field `stack_air_cooler_fan_coefficient_f0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_air_cooler_fan_coefficient_f0`'.format(value))

        self._data["Stack Air Cooler Fan Coefficient f0"] = value

    @property
    def stack_air_cooler_fan_coefficient_f1(self):
        """Get stack_air_cooler_fan_coefficient_f1

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f1` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f1"]

    @stack_air_cooler_fan_coefficient_f1.setter
    def stack_air_cooler_fan_coefficient_f1(self, value=None):
        """  Corresponds to IDD Field `stack_air_cooler_fan_coefficient_f1`

        Args:
            value (float): value for IDD Field `stack_air_cooler_fan_coefficient_f1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_air_cooler_fan_coefficient_f1`'.format(value))

        self._data["Stack Air Cooler Fan Coefficient f1"] = value

    @property
    def stack_air_cooler_fan_coefficient_f2(self):
        """Get stack_air_cooler_fan_coefficient_f2

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f2` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f2"]

    @stack_air_cooler_fan_coefficient_f2.setter
    def stack_air_cooler_fan_coefficient_f2(self, value=None):
        """  Corresponds to IDD Field `stack_air_cooler_fan_coefficient_f2`

        Args:
            value (float): value for IDD Field `stack_air_cooler_fan_coefficient_f2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `stack_air_cooler_fan_coefficient_f2`'.format(value))

        self._data["Stack Air Cooler Fan Coefficient f2"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.heat_recovery_water_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_outlet_node_name))
        out.append(self._to_str(self.nominal_stack_temperature))
        out.append(self._to_str(self.actual_stack_temperature))
        out.append(self._to_str(self.coefficient_r0))
        out.append(self._to_str(self.coefficient_r1))
        out.append(self._to_str(self.coefficient_r2))
        out.append(self._to_str(self.coefficient_r3))
        out.append(self._to_str(self.stack_coolant_flow_rate))
        out.append(self._to_str(self.stack_cooler_ufactor_times_area_value))
        out.append(self._to_str(self.fscogen_adjustment_factor))
        out.append(self._to_str(self.stack_cogeneration_exchanger_area))
        out.append(self._to_str(self.stack_cogeneration_exchanger_nominal_flow_rate))
        out.append(self._to_str(self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient))
        out.append(self._to_str(self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent))
        out.append(self._to_str(self.stack_cooler_pump_power))
        out.append(self._to_str(self.stack_cooler_pump_heat_loss_fraction))
        out.append(self._to_str(self.stack_air_cooler_fan_coefficient_f0))
        out.append(self._to_str(self.stack_air_cooler_fan_coefficient_f1))
        out.append(self._to_str(self.stack_air_cooler_fan_coefficient_f2))
        return ",".join(out)

class GeneratorMicroChp(object):
    """ Corresponds to IDD object `Generator:MicroCHP`
        Small-scale combined heat and power (micro CHP) electric generator using the model
        developed by IEA/ECBCS Annex 42  see www.cogen-sim.net. The model was developed
        for both internal combustion and Stirling cycle
        engines, but might be used for other types of residential CHP devices.
    """
    internal_name = "Generator:MicroCHP"
    field_count = 9

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:MicroCHP`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Performance Parameters Name"] = None
        self._data["Zone Name"] = None
        self._data["Cooling Water Inlet Node Name"] = None
        self._data["Cooling Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Generator Fuel Supply Name"] = None
        self._data["Availability Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.performance_parameters_name = None
        else:
            self.performance_parameters_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_inlet_node_name = None
        else:
            self.cooling_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_outlet_node_name = None
        else:
            self.cooling_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.generator_fuel_supply_name = None
        else:
            self.generator_fuel_supply_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def performance_parameters_name(self):
        """Get performance_parameters_name

        Returns:
            str: the value of `performance_parameters_name` or None if not set
        """
        return self._data["Performance Parameters Name"]

    @performance_parameters_name.setter
    def performance_parameters_name(self, value=None):
        """  Corresponds to IDD Field `performance_parameters_name`
        Enter the name of a Generator:MicroCHP:NonNormalizedParameters object.

        Args:
            value (str): value for IDD Field `performance_parameters_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `performance_parameters_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `performance_parameters_name`')

        self._data["Performance Parameters Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def cooling_water_inlet_node_name(self):
        """Get cooling_water_inlet_node_name

        Returns:
            str: the value of `cooling_water_inlet_node_name` or None if not set
        """
        return self._data["Cooling Water Inlet Node Name"]

    @cooling_water_inlet_node_name.setter
    def cooling_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_inlet_node_name`')

        self._data["Cooling Water Inlet Node Name"] = value

    @property
    def cooling_water_outlet_node_name(self):
        """Get cooling_water_outlet_node_name

        Returns:
            str: the value of `cooling_water_outlet_node_name` or None if not set
        """
        return self._data["Cooling Water Outlet Node Name"]

    @cooling_water_outlet_node_name.setter
    def cooling_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_outlet_node_name`')

        self._data["Cooling Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def generator_fuel_supply_name(self):
        """Get generator_fuel_supply_name

        Returns:
            str: the value of `generator_fuel_supply_name` or None if not set
        """
        return self._data["Generator Fuel Supply Name"]

    @generator_fuel_supply_name.setter
    def generator_fuel_supply_name(self, value=None):
        """  Corresponds to IDD Field `generator_fuel_supply_name`
        Enter the name of a Generator:FuelSupply object.

        Args:
            value (str): value for IDD Field `generator_fuel_supply_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `generator_fuel_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_fuel_supply_name`')

        self._data["Generator Fuel Supply Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.performance_parameters_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.cooling_water_inlet_node_name))
        out.append(self._to_str(self.cooling_water_outlet_node_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.generator_fuel_supply_name))
        out.append(self._to_str(self.availability_schedule_name))
        return ",".join(out)

class GeneratorMicroChpNonNormalizedParameters(object):
    """ Corresponds to IDD object `Generator:MicroCHP:NonNormalizedParameters`
        This object is referenced by a Generator:MicroCHP object and provides the
        non-normalized parameters for the MicroCHP generator model.
    """
    internal_name = "Generator:MicroCHP:NonNormalizedParameters"
    field_count = 27

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:MicroCHP:NonNormalizedParameters`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Maximum Electric Power"] = None
        self._data["Minimum Electric Power"] = None
        self._data["Minimum Cooling Water Flow Rate"] = None
        self._data["Maximum Cooling Water Temperature"] = None
        self._data["Electrical Efficiency Curve Name"] = None
        self._data["Thermal Efficiency Curve Name"] = None
        self._data["Cooling Water Flow Rate Mode"] = None
        self._data["Cooling Water Flow Rate Curve Name"] = None
        self._data["Air Flow Rate Curve Name"] = None
        self._data["Maximum Net Electrical Power Rate of Change"] = None
        self._data["Maximum Fuel Flow Rate of Change"] = None
        self._data["Heat Exchanger U-Factor Times Area Value"] = None
        self._data["Skin Loss U-Factor Times Area Value"] = None
        self._data["Skin Loss Radiative Fraction"] = None
        self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"] = None
        self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"] = None
        self._data["Standby Power"] = None
        self._data["Warm Up Mode"] = None
        self._data["Warm Up Fuel Flow Rate Coefficient"] = None
        self._data["Nominal Engine Operating Temperature"] = None
        self._data["Warm Up Power Coefficient"] = None
        self._data["Warm Up Fuel Flow Rate Limit Ratio"] = None
        self._data["Warm Up Delay Time"] = None
        self._data["Cool Down Power"] = None
        self._data["Cool Down Delay Time"] = None
        self._data["Restart Mode"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_electric_power = None
        else:
            self.maximum_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_electric_power = None
        else:
            self.minimum_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_cooling_water_flow_rate = None
        else:
            self.minimum_cooling_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cooling_water_temperature = None
        else:
            self.maximum_cooling_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electrical_efficiency_curve_name = None
        else:
            self.electrical_efficiency_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thermal_efficiency_curve_name = None
        else:
            self.thermal_efficiency_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_flow_rate_mode = None
        else:
            self.cooling_water_flow_rate_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_flow_rate_curve_name = None
        else:
            self.cooling_water_flow_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_flow_rate_curve_name = None
        else:
            self.air_flow_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_net_electrical_power_rate_of_change = None
        else:
            self.maximum_net_electrical_power_rate_of_change = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_fuel_flow_rate_of_change = None
        else:
            self.maximum_fuel_flow_rate_of_change = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_exchanger_ufactor_times_area_value = None
        else:
            self.heat_exchanger_ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_value = None
        else:
            self.skin_loss_ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.skin_loss_radiative_fraction = None
        else:
            self.skin_loss_radiative_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregated_thermal_mass_of_energy_conversion_portion_of_generator = None
        else:
            self.aggregated_thermal_mass_of_energy_conversion_portion_of_generator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregated_thermal_mass_of_heat_recovery_portion_of_generator = None
        else:
            self.aggregated_thermal_mass_of_heat_recovery_portion_of_generator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.standby_power = None
        else:
            self.standby_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_mode = None
        else:
            self.warm_up_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_fuel_flow_rate_coefficient = None
        else:
            self.warm_up_fuel_flow_rate_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_engine_operating_temperature = None
        else:
            self.nominal_engine_operating_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_power_coefficient = None
        else:
            self.warm_up_power_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_fuel_flow_rate_limit_ratio = None
        else:
            self.warm_up_fuel_flow_rate_limit_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.warm_up_delay_time = None
        else:
            self.warm_up_delay_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cool_down_power = None
        else:
            self.cool_down_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cool_down_delay_time = None
        else:
            self.cool_down_delay_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.restart_mode = None
        else:
            self.restart_mode = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def maximum_electric_power(self):
        """Get maximum_electric_power

        Returns:
            float: the value of `maximum_electric_power` or None if not set
        """
        return self._data["Maximum Electric Power"]

    @maximum_electric_power.setter
    def maximum_electric_power(self, value=None):
        """  Corresponds to IDD Field `maximum_electric_power`

        Args:
            value (float): value for IDD Field `maximum_electric_power`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_electric_power`'.format(value))

        self._data["Maximum Electric Power"] = value

    @property
    def minimum_electric_power(self):
        """Get minimum_electric_power

        Returns:
            float: the value of `minimum_electric_power` or None if not set
        """
        return self._data["Minimum Electric Power"]

    @minimum_electric_power.setter
    def minimum_electric_power(self, value=None):
        """  Corresponds to IDD Field `minimum_electric_power`

        Args:
            value (float): value for IDD Field `minimum_electric_power`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_electric_power`'.format(value))

        self._data["Minimum Electric Power"] = value

    @property
    def minimum_cooling_water_flow_rate(self):
        """Get minimum_cooling_water_flow_rate

        Returns:
            float: the value of `minimum_cooling_water_flow_rate` or None if not set
        """
        return self._data["Minimum Cooling Water Flow Rate"]

    @minimum_cooling_water_flow_rate.setter
    def minimum_cooling_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_cooling_water_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_cooling_water_flow_rate`
                Unit: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_cooling_water_flow_rate`'.format(value))

        self._data["Minimum Cooling Water Flow Rate"] = value

    @property
    def maximum_cooling_water_temperature(self):
        """Get maximum_cooling_water_temperature

        Returns:
            float: the value of `maximum_cooling_water_temperature` or None if not set
        """
        return self._data["Maximum Cooling Water Temperature"]

    @maximum_cooling_water_temperature.setter
    def maximum_cooling_water_temperature(self, value=None):
        """  Corresponds to IDD Field `maximum_cooling_water_temperature`

        Args:
            value (float): value for IDD Field `maximum_cooling_water_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cooling_water_temperature`'.format(value))

        self._data["Maximum Cooling Water Temperature"] = value

    @property
    def electrical_efficiency_curve_name(self):
        """Get electrical_efficiency_curve_name

        Returns:
            str: the value of `electrical_efficiency_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Curve Name"]

    @electrical_efficiency_curve_name.setter
    def electrical_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `electrical_efficiency_curve_name`
        TriQuadratic
        Table:MultiVariableLookup object can also be used

        Args:
            value (str): value for IDD Field `electrical_efficiency_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electrical_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_curve_name`')

        self._data["Electrical Efficiency Curve Name"] = value

    @property
    def thermal_efficiency_curve_name(self):
        """Get thermal_efficiency_curve_name

        Returns:
            str: the value of `thermal_efficiency_curve_name` or None if not set
        """
        return self._data["Thermal Efficiency Curve Name"]

    @thermal_efficiency_curve_name.setter
    def thermal_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `thermal_efficiency_curve_name`
        TriQuadratic
        Table:MultiVariableLookup object can also be used

        Args:
            value (str): value for IDD Field `thermal_efficiency_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thermal_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermal_efficiency_curve_name`')

        self._data["Thermal Efficiency Curve Name"] = value

    @property
    def cooling_water_flow_rate_mode(self):
        """Get cooling_water_flow_rate_mode

        Returns:
            str: the value of `cooling_water_flow_rate_mode` or None if not set
        """
        return self._data["Cooling Water Flow Rate Mode"]

    @cooling_water_flow_rate_mode.setter
    def cooling_water_flow_rate_mode(self, value=None):
        """  Corresponds to IDD Field `cooling_water_flow_rate_mode`

        Args:
            value (str): value for IDD Field `cooling_water_flow_rate_mode`
                Accepted values are:
                      - PlantControl
                      - InternalControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_flow_rate_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_flow_rate_mode`')
            vals = set()
            vals.add("PlantControl")
            vals.add("InternalControl")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_water_flow_rate_mode`'.format(value))

        self._data["Cooling Water Flow Rate Mode"] = value

    @property
    def cooling_water_flow_rate_curve_name(self):
        """Get cooling_water_flow_rate_curve_name

        Returns:
            str: the value of `cooling_water_flow_rate_curve_name` or None if not set
        """
        return self._data["Cooling Water Flow Rate Curve Name"]

    @cooling_water_flow_rate_curve_name.setter
    def cooling_water_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_flow_rate_curve_name`
        Table:TwoIndependentVariables object can also be used

        Args:
            value (str): value for IDD Field `cooling_water_flow_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_flow_rate_curve_name`')

        self._data["Cooling Water Flow Rate Curve Name"] = value

    @property
    def air_flow_rate_curve_name(self):
        """Get air_flow_rate_curve_name

        Returns:
            str: the value of `air_flow_rate_curve_name` or None if not set
        """
        return self._data["Air Flow Rate Curve Name"]

    @air_flow_rate_curve_name.setter
    def air_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `air_flow_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `air_flow_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_flow_rate_curve_name`')

        self._data["Air Flow Rate Curve Name"] = value

    @property
    def maximum_net_electrical_power_rate_of_change(self):
        """Get maximum_net_electrical_power_rate_of_change

        Returns:
            float: the value of `maximum_net_electrical_power_rate_of_change` or None if not set
        """
        return self._data["Maximum Net Electrical Power Rate of Change"]

    @maximum_net_electrical_power_rate_of_change.setter
    def maximum_net_electrical_power_rate_of_change(self, value=None):
        """  Corresponds to IDD Field `maximum_net_electrical_power_rate_of_change`

        Args:
            value (float): value for IDD Field `maximum_net_electrical_power_rate_of_change`
                Unit: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_net_electrical_power_rate_of_change`'.format(value))

        self._data["Maximum Net Electrical Power Rate of Change"] = value

    @property
    def maximum_fuel_flow_rate_of_change(self):
        """Get maximum_fuel_flow_rate_of_change

        Returns:
            float: the value of `maximum_fuel_flow_rate_of_change` or None if not set
        """
        return self._data["Maximum Fuel Flow Rate of Change"]

    @maximum_fuel_flow_rate_of_change.setter
    def maximum_fuel_flow_rate_of_change(self, value=None):
        """  Corresponds to IDD Field `maximum_fuel_flow_rate_of_change`

        Args:
            value (float): value for IDD Field `maximum_fuel_flow_rate_of_change`
                Unit: kg/s2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_fuel_flow_rate_of_change`'.format(value))

        self._data["Maximum Fuel Flow Rate of Change"] = value

    @property
    def heat_exchanger_ufactor_times_area_value(self):
        """Get heat_exchanger_ufactor_times_area_value

        Returns:
            float: the value of `heat_exchanger_ufactor_times_area_value` or None if not set
        """
        return self._data["Heat Exchanger U-Factor Times Area Value"]

    @heat_exchanger_ufactor_times_area_value.setter
    def heat_exchanger_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `heat_exchanger_ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `heat_exchanger_ufactor_times_area_value`
                Unit: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_exchanger_ufactor_times_area_value`'.format(value))

        self._data["Heat Exchanger U-Factor Times Area Value"] = value

    @property
    def skin_loss_ufactor_times_area_value(self):
        """Get skin_loss_ufactor_times_area_value

        Returns:
            float: the value of `skin_loss_ufactor_times_area_value` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Value"]

    @skin_loss_ufactor_times_area_value.setter
    def skin_loss_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `skin_loss_ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `skin_loss_ufactor_times_area_value`
                Unit: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_ufactor_times_area_value`'.format(value))

        self._data["Skin Loss U-Factor Times Area Value"] = value

    @property
    def skin_loss_radiative_fraction(self):
        """Get skin_loss_radiative_fraction

        Returns:
            float: the value of `skin_loss_radiative_fraction` or None if not set
        """
        return self._data["Skin Loss Radiative Fraction"]

    @skin_loss_radiative_fraction.setter
    def skin_loss_radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `skin_loss_radiative_fraction`

        Args:
            value (float): value for IDD Field `skin_loss_radiative_fraction`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `skin_loss_radiative_fraction`'.format(value))

        self._data["Skin Loss Radiative Fraction"] = value

    @property
    def aggregated_thermal_mass_of_energy_conversion_portion_of_generator(self):
        """Get aggregated_thermal_mass_of_energy_conversion_portion_of_generator

        Returns:
            float: the value of `aggregated_thermal_mass_of_energy_conversion_portion_of_generator` or None if not set
        """
        return self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"]

    @aggregated_thermal_mass_of_energy_conversion_portion_of_generator.setter
    def aggregated_thermal_mass_of_energy_conversion_portion_of_generator(self, value=None):
        """  Corresponds to IDD Field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`

        Args:
            value (float): value for IDD Field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`
                Unit: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`')

        self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"] = value

    @property
    def aggregated_thermal_mass_of_heat_recovery_portion_of_generator(self):
        """Get aggregated_thermal_mass_of_heat_recovery_portion_of_generator

        Returns:
            float: the value of `aggregated_thermal_mass_of_heat_recovery_portion_of_generator` or None if not set
        """
        return self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"]

    @aggregated_thermal_mass_of_heat_recovery_portion_of_generator.setter
    def aggregated_thermal_mass_of_heat_recovery_portion_of_generator(self, value=None):
        """  Corresponds to IDD Field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`

        Args:
            value (float): value for IDD Field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`
                Unit: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`')

        self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"] = value

    @property
    def standby_power(self):
        """Get standby_power

        Returns:
            float: the value of `standby_power` or None if not set
        """
        return self._data["Standby Power"]

    @standby_power.setter
    def standby_power(self, value=None):
        """  Corresponds to IDD Field `standby_power`

        Args:
            value (float): value for IDD Field `standby_power`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `standby_power`'.format(value))

        self._data["Standby Power"] = value

    @property
    def warm_up_mode(self):
        """Get warm_up_mode

        Returns:
            str: the value of `warm_up_mode` or None if not set
        """
        return self._data["Warm Up Mode"]

    @warm_up_mode.setter
    def warm_up_mode(self, value=None):
        """  Corresponds to IDD Field `warm_up_mode`
        Stirling engines use Nominal Engine Temperature
        Internal combustion engines use Time Delay

        Args:
            value (str): value for IDD Field `warm_up_mode`
                Accepted values are:
                      - NominalEngineTemperature
                      - TimeDelay
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `warm_up_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `warm_up_mode`')
            vals = set()
            vals.add("NominalEngineTemperature")
            vals.add("TimeDelay")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `warm_up_mode`'.format(value))

        self._data["Warm Up Mode"] = value

    @property
    def warm_up_fuel_flow_rate_coefficient(self):
        """Get warm_up_fuel_flow_rate_coefficient

        Returns:
            float: the value of `warm_up_fuel_flow_rate_coefficient` or None if not set
        """
        return self._data["Warm Up Fuel Flow Rate Coefficient"]

    @warm_up_fuel_flow_rate_coefficient.setter
    def warm_up_fuel_flow_rate_coefficient(self, value=None):
        """  Corresponds to IDD Field `warm_up_fuel_flow_rate_coefficient`

        Args:
            value (float): value for IDD Field `warm_up_fuel_flow_rate_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `warm_up_fuel_flow_rate_coefficient`'.format(value))

        self._data["Warm Up Fuel Flow Rate Coefficient"] = value

    @property
    def nominal_engine_operating_temperature(self):
        """Get nominal_engine_operating_temperature

        Returns:
            float: the value of `nominal_engine_operating_temperature` or None if not set
        """
        return self._data["Nominal Engine Operating Temperature"]

    @nominal_engine_operating_temperature.setter
    def nominal_engine_operating_temperature(self, value=None):
        """  Corresponds to IDD Field `nominal_engine_operating_temperature`

        Args:
            value (float): value for IDD Field `nominal_engine_operating_temperature`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_engine_operating_temperature`'.format(value))

        self._data["Nominal Engine Operating Temperature"] = value

    @property
    def warm_up_power_coefficient(self):
        """Get warm_up_power_coefficient

        Returns:
            float: the value of `warm_up_power_coefficient` or None if not set
        """
        return self._data["Warm Up Power Coefficient"]

    @warm_up_power_coefficient.setter
    def warm_up_power_coefficient(self, value=None):
        """  Corresponds to IDD Field `warm_up_power_coefficient`

        Args:
            value (float): value for IDD Field `warm_up_power_coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `warm_up_power_coefficient`'.format(value))

        self._data["Warm Up Power Coefficient"] = value

    @property
    def warm_up_fuel_flow_rate_limit_ratio(self):
        """Get warm_up_fuel_flow_rate_limit_ratio

        Returns:
            float: the value of `warm_up_fuel_flow_rate_limit_ratio` or None if not set
        """
        return self._data["Warm Up Fuel Flow Rate Limit Ratio"]

    @warm_up_fuel_flow_rate_limit_ratio.setter
    def warm_up_fuel_flow_rate_limit_ratio(self, value=None):
        """  Corresponds to IDD Field `warm_up_fuel_flow_rate_limit_ratio`

        Args:
            value (float): value for IDD Field `warm_up_fuel_flow_rate_limit_ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `warm_up_fuel_flow_rate_limit_ratio`'.format(value))

        self._data["Warm Up Fuel Flow Rate Limit Ratio"] = value

    @property
    def warm_up_delay_time(self):
        """Get warm_up_delay_time

        Returns:
            float: the value of `warm_up_delay_time` or None if not set
        """
        return self._data["Warm Up Delay Time"]

    @warm_up_delay_time.setter
    def warm_up_delay_time(self, value=None):
        """  Corresponds to IDD Field `warm_up_delay_time`

        Args:
            value (float): value for IDD Field `warm_up_delay_time`
                Unit: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `warm_up_delay_time`'.format(value))

        self._data["Warm Up Delay Time"] = value

    @property
    def cool_down_power(self):
        """Get cool_down_power

        Returns:
            float: the value of `cool_down_power` or None if not set
        """
        return self._data["Cool Down Power"]

    @cool_down_power.setter
    def cool_down_power(self, value=None):
        """  Corresponds to IDD Field `cool_down_power`

        Args:
            value (float): value for IDD Field `cool_down_power`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cool_down_power`'.format(value))

        self._data["Cool Down Power"] = value

    @property
    def cool_down_delay_time(self):
        """Get cool_down_delay_time

        Returns:
            float: the value of `cool_down_delay_time` or None if not set
        """
        return self._data["Cool Down Delay Time"]

    @cool_down_delay_time.setter
    def cool_down_delay_time(self, value=None):
        """  Corresponds to IDD Field `cool_down_delay_time`

        Args:
            value (float): value for IDD Field `cool_down_delay_time`
                Unit: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cool_down_delay_time`'.format(value))

        self._data["Cool Down Delay Time"] = value

    @property
    def restart_mode(self):
        """Get restart_mode

        Returns:
            str: the value of `restart_mode` or None if not set
        """
        return self._data["Restart Mode"]

    @restart_mode.setter
    def restart_mode(self, value=None):
        """  Corresponds to IDD Field `restart_mode`

        Args:
            value (str): value for IDD Field `restart_mode`
                Accepted values are:
                      - MandatoryCoolDown
                      - OptionalCoolDown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `restart_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `restart_mode`')
            vals = set()
            vals.add("MandatoryCoolDown")
            vals.add("OptionalCoolDown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `restart_mode`'.format(value))

        self._data["Restart Mode"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.maximum_electric_power))
        out.append(self._to_str(self.minimum_electric_power))
        out.append(self._to_str(self.minimum_cooling_water_flow_rate))
        out.append(self._to_str(self.maximum_cooling_water_temperature))
        out.append(self._to_str(self.electrical_efficiency_curve_name))
        out.append(self._to_str(self.thermal_efficiency_curve_name))
        out.append(self._to_str(self.cooling_water_flow_rate_mode))
        out.append(self._to_str(self.cooling_water_flow_rate_curve_name))
        out.append(self._to_str(self.air_flow_rate_curve_name))
        out.append(self._to_str(self.maximum_net_electrical_power_rate_of_change))
        out.append(self._to_str(self.maximum_fuel_flow_rate_of_change))
        out.append(self._to_str(self.heat_exchanger_ufactor_times_area_value))
        out.append(self._to_str(self.skin_loss_ufactor_times_area_value))
        out.append(self._to_str(self.skin_loss_radiative_fraction))
        out.append(self._to_str(self.aggregated_thermal_mass_of_energy_conversion_portion_of_generator))
        out.append(self._to_str(self.aggregated_thermal_mass_of_heat_recovery_portion_of_generator))
        out.append(self._to_str(self.standby_power))
        out.append(self._to_str(self.warm_up_mode))
        out.append(self._to_str(self.warm_up_fuel_flow_rate_coefficient))
        out.append(self._to_str(self.nominal_engine_operating_temperature))
        out.append(self._to_str(self.warm_up_power_coefficient))
        out.append(self._to_str(self.warm_up_fuel_flow_rate_limit_ratio))
        out.append(self._to_str(self.warm_up_delay_time))
        out.append(self._to_str(self.cool_down_power))
        out.append(self._to_str(self.cool_down_delay_time))
        out.append(self._to_str(self.restart_mode))
        return ",".join(out)

class GeneratorFuelSupply(object):
    """ Corresponds to IDD object `Generator:FuelSupply`
        Used only with Generator:FuelCell and Generator:MicroCHP
    """
    internal_name = "Generator:FuelSupply"
    field_count = 36

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:FuelSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Temperature Modeling Mode"] = None
        self._data["Fuel Temperature Reference Node Name"] = None
        self._data["Fuel Temperature Schedule Name"] = None
        self._data["Compressor Power Function of Fuel Rate Curve Name"] = None
        self._data["Compressor Heat Loss Factor"] = None
        self._data["Fuel Type"] = None
        self._data["Liquid Generic Fuel Lower Heating Value"] = None
        self._data["Liquid Generic Fuel Higher Heating Value"] = None
        self._data["Liquid Generic Fuel Molecular Weight"] = None
        self._data["Liquid Generic Fuel CO2 Emission Factor"] = None
        self._data["Number of Constituents in Gaseous Constituent Fuel Supply"] = None
        self._data["Constituent 1 Name"] = None
        self._data["Constituent 1 Molar Fraction"] = None
        self._data["Constituent 2 Name"] = None
        self._data["Constituent 2 Molar Fraction"] = None
        self._data["Constituent 3 Name"] = None
        self._data["Constituent 3 Molar Fraction"] = None
        self._data["Constituent 4 Name"] = None
        self._data["Constituent 4 Molar Fraction"] = None
        self._data["Constituent 5 Name"] = None
        self._data["Constituent 5 Molar Fraction"] = None
        self._data["Constituent 6 Name"] = None
        self._data["Constituent 6 Molar Fraction"] = None
        self._data["Constituent 7 Name"] = None
        self._data["Constituent 7 Molar Fraction"] = None
        self._data["Constituent 8 Name"] = None
        self._data["Constituent 8 Molar Fraction"] = None
        self._data["Constituent 9 Name"] = None
        self._data["Constituent 9 Molar Fraction"] = None
        self._data["Constituent 10 Name"] = None
        self._data["Constituent 10 Molar Fraction"] = None
        self._data["Constituent 11 Name"] = None
        self._data["Constituent 11 Molar Fraction"] = None
        self._data["Constituent 12 Name"] = None
        self._data["Constituent 12 Molar Fraction"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_temperature_modeling_mode = None
        else:
            self.fuel_temperature_modeling_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_temperature_reference_node_name = None
        else:
            self.fuel_temperature_reference_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_temperature_schedule_name = None
        else:
            self.fuel_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_power_function_of_fuel_rate_curve_name = None
        else:
            self.compressor_power_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compressor_heat_loss_factor = None
        else:
            self.compressor_heat_loss_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_lower_heating_value = None
        else:
            self.liquid_generic_fuel_lower_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_higher_heating_value = None
        else:
            self.liquid_generic_fuel_higher_heating_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_molecular_weight = None
        else:
            self.liquid_generic_fuel_molecular_weight = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_co2_emission_factor = None
        else:
            self.liquid_generic_fuel_co2_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_constituents_in_gaseous_constituent_fuel_supply = None
        else:
            self.number_of_constituents_in_gaseous_constituent_fuel_supply = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_1_name = None
        else:
            self.constituent_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_1_molar_fraction = None
        else:
            self.constituent_1_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_2_name = None
        else:
            self.constituent_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_2_molar_fraction = None
        else:
            self.constituent_2_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_3_name = None
        else:
            self.constituent_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_3_molar_fraction = None
        else:
            self.constituent_3_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_4_name = None
        else:
            self.constituent_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_4_molar_fraction = None
        else:
            self.constituent_4_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_5_name = None
        else:
            self.constituent_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_5_molar_fraction = None
        else:
            self.constituent_5_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_6_name = None
        else:
            self.constituent_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_6_molar_fraction = None
        else:
            self.constituent_6_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_7_name = None
        else:
            self.constituent_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_7_molar_fraction = None
        else:
            self.constituent_7_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_8_name = None
        else:
            self.constituent_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_8_molar_fraction = None
        else:
            self.constituent_8_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_9_name = None
        else:
            self.constituent_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_9_molar_fraction = None
        else:
            self.constituent_9_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_10_name = None
        else:
            self.constituent_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_10_molar_fraction = None
        else:
            self.constituent_10_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_11_name = None
        else:
            self.constituent_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_11_molar_fraction = None
        else:
            self.constituent_11_molar_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_12_name = None
        else:
            self.constituent_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constituent_12_molar_fraction = None
        else:
            self.constituent_12_molar_fraction = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_temperature_modeling_mode(self):
        """Get fuel_temperature_modeling_mode

        Returns:
            str: the value of `fuel_temperature_modeling_mode` or None if not set
        """
        return self._data["Fuel Temperature Modeling Mode"]

    @fuel_temperature_modeling_mode.setter
    def fuel_temperature_modeling_mode(self, value=None):
        """  Corresponds to IDD Field `fuel_temperature_modeling_mode`

        Args:
            value (str): value for IDD Field `fuel_temperature_modeling_mode`
                Accepted values are:
                      - TemperatureFromAirNode
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_temperature_modeling_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_modeling_mode`')
            vals = set()
            vals.add("TemperatureFromAirNode")
            vals.add("Scheduled")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_temperature_modeling_mode`'.format(value))

        self._data["Fuel Temperature Modeling Mode"] = value

    @property
    def fuel_temperature_reference_node_name(self):
        """Get fuel_temperature_reference_node_name

        Returns:
            str: the value of `fuel_temperature_reference_node_name` or None if not set
        """
        return self._data["Fuel Temperature Reference Node Name"]

    @fuel_temperature_reference_node_name.setter
    def fuel_temperature_reference_node_name(self, value=None):
        """  Corresponds to IDD Field `fuel_temperature_reference_node_name`

        Args:
            value (str): value for IDD Field `fuel_temperature_reference_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_temperature_reference_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_reference_node_name`')

        self._data["Fuel Temperature Reference Node Name"] = value

    @property
    def fuel_temperature_schedule_name(self):
        """Get fuel_temperature_schedule_name

        Returns:
            str: the value of `fuel_temperature_schedule_name` or None if not set
        """
        return self._data["Fuel Temperature Schedule Name"]

    @fuel_temperature_schedule_name.setter
    def fuel_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `fuel_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `fuel_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_schedule_name`')

        self._data["Fuel Temperature Schedule Name"] = value

    @property
    def compressor_power_function_of_fuel_rate_curve_name(self):
        """Get compressor_power_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `compressor_power_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Compressor Power Function of Fuel Rate Curve Name"]

    @compressor_power_function_of_fuel_rate_curve_name.setter
    def compressor_power_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `compressor_power_function_of_fuel_rate_curve_name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `compressor_power_function_of_fuel_rate_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compressor_power_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compressor_power_function_of_fuel_rate_curve_name`')

        self._data["Compressor Power Function of Fuel Rate Curve Name"] = value

    @property
    def compressor_heat_loss_factor(self):
        """Get compressor_heat_loss_factor

        Returns:
            float: the value of `compressor_heat_loss_factor` or None if not set
        """
        return self._data["Compressor Heat Loss Factor"]

    @compressor_heat_loss_factor.setter
    def compressor_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `compressor_heat_loss_factor`

        Args:
            value (float): value for IDD Field `compressor_heat_loss_factor`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_heat_loss_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `compressor_heat_loss_factor`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `compressor_heat_loss_factor`')

        self._data["Compressor Heat Loss Factor"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - GaseousConstituents
                      - LiquidGeneric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("GaseousConstituents")
            vals.add("LiquidGeneric")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def liquid_generic_fuel_lower_heating_value(self):
        """Get liquid_generic_fuel_lower_heating_value

        Returns:
            float: the value of `liquid_generic_fuel_lower_heating_value` or None if not set
        """
        return self._data["Liquid Generic Fuel Lower Heating Value"]

    @liquid_generic_fuel_lower_heating_value.setter
    def liquid_generic_fuel_lower_heating_value(self, value=None):
        """  Corresponds to IDD Field `liquid_generic_fuel_lower_heating_value`

        Args:
            value (float): value for IDD Field `liquid_generic_fuel_lower_heating_value`
                Unit: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_generic_fuel_lower_heating_value`'.format(value))

        self._data["Liquid Generic Fuel Lower Heating Value"] = value

    @property
    def liquid_generic_fuel_higher_heating_value(self):
        """Get liquid_generic_fuel_higher_heating_value

        Returns:
            float: the value of `liquid_generic_fuel_higher_heating_value` or None if not set
        """
        return self._data["Liquid Generic Fuel Higher Heating Value"]

    @liquid_generic_fuel_higher_heating_value.setter
    def liquid_generic_fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `liquid_generic_fuel_higher_heating_value`

        Args:
            value (float): value for IDD Field `liquid_generic_fuel_higher_heating_value`
                Unit: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_generic_fuel_higher_heating_value`'.format(value))

        self._data["Liquid Generic Fuel Higher Heating Value"] = value

    @property
    def liquid_generic_fuel_molecular_weight(self):
        """Get liquid_generic_fuel_molecular_weight

        Returns:
            float: the value of `liquid_generic_fuel_molecular_weight` or None if not set
        """
        return self._data["Liquid Generic Fuel Molecular Weight"]

    @liquid_generic_fuel_molecular_weight.setter
    def liquid_generic_fuel_molecular_weight(self, value=None):
        """  Corresponds to IDD Field `liquid_generic_fuel_molecular_weight`

        Args:
            value (float): value for IDD Field `liquid_generic_fuel_molecular_weight`
                Unit: g/mol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_generic_fuel_molecular_weight`'.format(value))

        self._data["Liquid Generic Fuel Molecular Weight"] = value

    @property
    def liquid_generic_fuel_co2_emission_factor(self):
        """Get liquid_generic_fuel_co2_emission_factor

        Returns:
            float: the value of `liquid_generic_fuel_co2_emission_factor` or None if not set
        """
        return self._data["Liquid Generic Fuel CO2 Emission Factor"]

    @liquid_generic_fuel_co2_emission_factor.setter
    def liquid_generic_fuel_co2_emission_factor(self, value=None):
        """  Corresponds to IDD Field `liquid_generic_fuel_co2_emission_factor`

        Args:
            value (float): value for IDD Field `liquid_generic_fuel_co2_emission_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `liquid_generic_fuel_co2_emission_factor`'.format(value))

        self._data["Liquid Generic Fuel CO2 Emission Factor"] = value

    @property
    def number_of_constituents_in_gaseous_constituent_fuel_supply(self):
        """Get number_of_constituents_in_gaseous_constituent_fuel_supply

        Returns:
            float: the value of `number_of_constituents_in_gaseous_constituent_fuel_supply` or None if not set
        """
        return self._data["Number of Constituents in Gaseous Constituent Fuel Supply"]

    @number_of_constituents_in_gaseous_constituent_fuel_supply.setter
    def number_of_constituents_in_gaseous_constituent_fuel_supply(self, value=None):
        """  Corresponds to IDD Field `number_of_constituents_in_gaseous_constituent_fuel_supply`

        Args:
            value (float): value for IDD Field `number_of_constituents_in_gaseous_constituent_fuel_supply`
                value >= 0.0
                value <= 12.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`')
            if value > 12.0:
                raise ValueError('value need to be smaller 12.0 '
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`')

        self._data["Number of Constituents in Gaseous Constituent Fuel Supply"] = value

    @property
    def constituent_1_name(self):
        """Get constituent_1_name

        Returns:
            str: the value of `constituent_1_name` or None if not set
        """
        return self._data["Constituent 1 Name"]

    @constituent_1_name.setter
    def constituent_1_name(self, value=None):
        """  Corresponds to IDD Field `constituent_1_name`

        Args:
            value (str): value for IDD Field `constituent_1_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_1_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_1_name`'.format(value))

        self._data["Constituent 1 Name"] = value

    @property
    def constituent_1_molar_fraction(self):
        """Get constituent_1_molar_fraction

        Returns:
            float: the value of `constituent_1_molar_fraction` or None if not set
        """
        return self._data["Constituent 1 Molar Fraction"]

    @constituent_1_molar_fraction.setter
    def constituent_1_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_1_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_1_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_1_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_1_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_1_molar_fraction`')

        self._data["Constituent 1 Molar Fraction"] = value

    @property
    def constituent_2_name(self):
        """Get constituent_2_name

        Returns:
            str: the value of `constituent_2_name` or None if not set
        """
        return self._data["Constituent 2 Name"]

    @constituent_2_name.setter
    def constituent_2_name(self, value=None):
        """  Corresponds to IDD Field `constituent_2_name`

        Args:
            value (str): value for IDD Field `constituent_2_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_2_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_2_name`'.format(value))

        self._data["Constituent 2 Name"] = value

    @property
    def constituent_2_molar_fraction(self):
        """Get constituent_2_molar_fraction

        Returns:
            float: the value of `constituent_2_molar_fraction` or None if not set
        """
        return self._data["Constituent 2 Molar Fraction"]

    @constituent_2_molar_fraction.setter
    def constituent_2_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_2_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_2_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_2_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_2_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_2_molar_fraction`')

        self._data["Constituent 2 Molar Fraction"] = value

    @property
    def constituent_3_name(self):
        """Get constituent_3_name

        Returns:
            str: the value of `constituent_3_name` or None if not set
        """
        return self._data["Constituent 3 Name"]

    @constituent_3_name.setter
    def constituent_3_name(self, value=None):
        """  Corresponds to IDD Field `constituent_3_name`

        Args:
            value (str): value for IDD Field `constituent_3_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_3_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_3_name`'.format(value))

        self._data["Constituent 3 Name"] = value

    @property
    def constituent_3_molar_fraction(self):
        """Get constituent_3_molar_fraction

        Returns:
            float: the value of `constituent_3_molar_fraction` or None if not set
        """
        return self._data["Constituent 3 Molar Fraction"]

    @constituent_3_molar_fraction.setter
    def constituent_3_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_3_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_3_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_3_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_3_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_3_molar_fraction`')

        self._data["Constituent 3 Molar Fraction"] = value

    @property
    def constituent_4_name(self):
        """Get constituent_4_name

        Returns:
            str: the value of `constituent_4_name` or None if not set
        """
        return self._data["Constituent 4 Name"]

    @constituent_4_name.setter
    def constituent_4_name(self, value=None):
        """  Corresponds to IDD Field `constituent_4_name`

        Args:
            value (str): value for IDD Field `constituent_4_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_4_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_4_name`'.format(value))

        self._data["Constituent 4 Name"] = value

    @property
    def constituent_4_molar_fraction(self):
        """Get constituent_4_molar_fraction

        Returns:
            float: the value of `constituent_4_molar_fraction` or None if not set
        """
        return self._data["Constituent 4 Molar Fraction"]

    @constituent_4_molar_fraction.setter
    def constituent_4_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_4_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_4_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_4_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_4_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_4_molar_fraction`')

        self._data["Constituent 4 Molar Fraction"] = value

    @property
    def constituent_5_name(self):
        """Get constituent_5_name

        Returns:
            str: the value of `constituent_5_name` or None if not set
        """
        return self._data["Constituent 5 Name"]

    @constituent_5_name.setter
    def constituent_5_name(self, value=None):
        """  Corresponds to IDD Field `constituent_5_name`

        Args:
            value (str): value for IDD Field `constituent_5_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_5_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_5_name`'.format(value))

        self._data["Constituent 5 Name"] = value

    @property
    def constituent_5_molar_fraction(self):
        """Get constituent_5_molar_fraction

        Returns:
            float: the value of `constituent_5_molar_fraction` or None if not set
        """
        return self._data["Constituent 5 Molar Fraction"]

    @constituent_5_molar_fraction.setter
    def constituent_5_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_5_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_5_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_5_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_5_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_5_molar_fraction`')

        self._data["Constituent 5 Molar Fraction"] = value

    @property
    def constituent_6_name(self):
        """Get constituent_6_name

        Returns:
            str: the value of `constituent_6_name` or None if not set
        """
        return self._data["Constituent 6 Name"]

    @constituent_6_name.setter
    def constituent_6_name(self, value=None):
        """  Corresponds to IDD Field `constituent_6_name`

        Args:
            value (str): value for IDD Field `constituent_6_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_6_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_6_name`'.format(value))

        self._data["Constituent 6 Name"] = value

    @property
    def constituent_6_molar_fraction(self):
        """Get constituent_6_molar_fraction

        Returns:
            float: the value of `constituent_6_molar_fraction` or None if not set
        """
        return self._data["Constituent 6 Molar Fraction"]

    @constituent_6_molar_fraction.setter
    def constituent_6_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_6_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_6_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_6_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_6_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_6_molar_fraction`')

        self._data["Constituent 6 Molar Fraction"] = value

    @property
    def constituent_7_name(self):
        """Get constituent_7_name

        Returns:
            str: the value of `constituent_7_name` or None if not set
        """
        return self._data["Constituent 7 Name"]

    @constituent_7_name.setter
    def constituent_7_name(self, value=None):
        """  Corresponds to IDD Field `constituent_7_name`

        Args:
            value (str): value for IDD Field `constituent_7_name`
                Accepted values are:
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_7_name`')
            vals = set()
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_7_name`'.format(value))

        self._data["Constituent 7 Name"] = value

    @property
    def constituent_7_molar_fraction(self):
        """Get constituent_7_molar_fraction

        Returns:
            float: the value of `constituent_7_molar_fraction` or None if not set
        """
        return self._data["Constituent 7 Molar Fraction"]

    @constituent_7_molar_fraction.setter
    def constituent_7_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_7_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_7_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_7_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_7_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_7_molar_fraction`')

        self._data["Constituent 7 Molar Fraction"] = value

    @property
    def constituent_8_name(self):
        """Get constituent_8_name

        Returns:
            str: the value of `constituent_8_name` or None if not set
        """
        return self._data["Constituent 8 Name"]

    @constituent_8_name.setter
    def constituent_8_name(self, value=None):
        """  Corresponds to IDD Field `constituent_8_name`

        Args:
            value (str): value for IDD Field `constituent_8_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_8_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_8_name`'.format(value))

        self._data["Constituent 8 Name"] = value

    @property
    def constituent_8_molar_fraction(self):
        """Get constituent_8_molar_fraction

        Returns:
            float: the value of `constituent_8_molar_fraction` or None if not set
        """
        return self._data["Constituent 8 Molar Fraction"]

    @constituent_8_molar_fraction.setter
    def constituent_8_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_8_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_8_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_8_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_8_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_8_molar_fraction`')

        self._data["Constituent 8 Molar Fraction"] = value

    @property
    def constituent_9_name(self):
        """Get constituent_9_name

        Returns:
            str: the value of `constituent_9_name` or None if not set
        """
        return self._data["Constituent 9 Name"]

    @constituent_9_name.setter
    def constituent_9_name(self, value=None):
        """  Corresponds to IDD Field `constituent_9_name`

        Args:
            value (str): value for IDD Field `constituent_9_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_9_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_9_name`'.format(value))

        self._data["Constituent 9 Name"] = value

    @property
    def constituent_9_molar_fraction(self):
        """Get constituent_9_molar_fraction

        Returns:
            float: the value of `constituent_9_molar_fraction` or None if not set
        """
        return self._data["Constituent 9 Molar Fraction"]

    @constituent_9_molar_fraction.setter
    def constituent_9_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_9_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_9_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_9_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_9_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_9_molar_fraction`')

        self._data["Constituent 9 Molar Fraction"] = value

    @property
    def constituent_10_name(self):
        """Get constituent_10_name

        Returns:
            str: the value of `constituent_10_name` or None if not set
        """
        return self._data["Constituent 10 Name"]

    @constituent_10_name.setter
    def constituent_10_name(self, value=None):
        """  Corresponds to IDD Field `constituent_10_name`

        Args:
            value (str): value for IDD Field `constituent_10_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_10_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_10_name`'.format(value))

        self._data["Constituent 10 Name"] = value

    @property
    def constituent_10_molar_fraction(self):
        """Get constituent_10_molar_fraction

        Returns:
            float: the value of `constituent_10_molar_fraction` or None if not set
        """
        return self._data["Constituent 10 Molar Fraction"]

    @constituent_10_molar_fraction.setter
    def constituent_10_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_10_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_10_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_10_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_10_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_10_molar_fraction`')

        self._data["Constituent 10 Molar Fraction"] = value

    @property
    def constituent_11_name(self):
        """Get constituent_11_name

        Returns:
            str: the value of `constituent_11_name` or None if not set
        """
        return self._data["Constituent 11 Name"]

    @constituent_11_name.setter
    def constituent_11_name(self, value=None):
        """  Corresponds to IDD Field `constituent_11_name`

        Args:
            value (str): value for IDD Field `constituent_11_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_11_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_11_name`'.format(value))

        self._data["Constituent 11 Name"] = value

    @property
    def constituent_11_molar_fraction(self):
        """Get constituent_11_molar_fraction

        Returns:
            float: the value of `constituent_11_molar_fraction` or None if not set
        """
        return self._data["Constituent 11 Molar Fraction"]

    @constituent_11_molar_fraction.setter
    def constituent_11_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_11_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_11_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_11_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_11_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_11_molar_fraction`')

        self._data["Constituent 11 Molar Fraction"] = value

    @property
    def constituent_12_name(self):
        """Get constituent_12_name

        Returns:
            str: the value of `constituent_12_name` or None if not set
        """
        return self._data["Constituent 12 Name"]

    @constituent_12_name.setter
    def constituent_12_name(self, value=None):
        """  Corresponds to IDD Field `constituent_12_name`

        Args:
            value (str): value for IDD Field `constituent_12_name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `constituent_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_12_name`')
            vals = set()
            vals.add("CarbonDioxide")
            vals.add("Nitrogen")
            vals.add("Oxygen")
            vals.add("Water")
            vals.add("Argon")
            vals.add("Hydrogen")
            vals.add("Methane")
            vals.add("Ethane")
            vals.add("Propane")
            vals.add("Butane")
            vals.add("Pentane")
            vals.add("Hexane")
            vals.add("Methanol")
            vals.add("Ethanol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `constituent_12_name`'.format(value))

        self._data["Constituent 12 Name"] = value

    @property
    def constituent_12_molar_fraction(self):
        """Get constituent_12_molar_fraction

        Returns:
            float: the value of `constituent_12_molar_fraction` or None if not set
        """
        return self._data["Constituent 12 Molar Fraction"]

    @constituent_12_molar_fraction.setter
    def constituent_12_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `constituent_12_molar_fraction`

        Args:
            value (float): value for IDD Field `constituent_12_molar_fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constituent_12_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_12_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_12_molar_fraction`')

        self._data["Constituent 12 Molar Fraction"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_temperature_modeling_mode))
        out.append(self._to_str(self.fuel_temperature_reference_node_name))
        out.append(self._to_str(self.fuel_temperature_schedule_name))
        out.append(self._to_str(self.compressor_power_function_of_fuel_rate_curve_name))
        out.append(self._to_str(self.compressor_heat_loss_factor))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.liquid_generic_fuel_lower_heating_value))
        out.append(self._to_str(self.liquid_generic_fuel_higher_heating_value))
        out.append(self._to_str(self.liquid_generic_fuel_molecular_weight))
        out.append(self._to_str(self.liquid_generic_fuel_co2_emission_factor))
        out.append(self._to_str(self.number_of_constituents_in_gaseous_constituent_fuel_supply))
        out.append(self._to_str(self.constituent_1_name))
        out.append(self._to_str(self.constituent_1_molar_fraction))
        out.append(self._to_str(self.constituent_2_name))
        out.append(self._to_str(self.constituent_2_molar_fraction))
        out.append(self._to_str(self.constituent_3_name))
        out.append(self._to_str(self.constituent_3_molar_fraction))
        out.append(self._to_str(self.constituent_4_name))
        out.append(self._to_str(self.constituent_4_molar_fraction))
        out.append(self._to_str(self.constituent_5_name))
        out.append(self._to_str(self.constituent_5_molar_fraction))
        out.append(self._to_str(self.constituent_6_name))
        out.append(self._to_str(self.constituent_6_molar_fraction))
        out.append(self._to_str(self.constituent_7_name))
        out.append(self._to_str(self.constituent_7_molar_fraction))
        out.append(self._to_str(self.constituent_8_name))
        out.append(self._to_str(self.constituent_8_molar_fraction))
        out.append(self._to_str(self.constituent_9_name))
        out.append(self._to_str(self.constituent_9_molar_fraction))
        out.append(self._to_str(self.constituent_10_name))
        out.append(self._to_str(self.constituent_10_molar_fraction))
        out.append(self._to_str(self.constituent_11_name))
        out.append(self._to_str(self.constituent_11_molar_fraction))
        out.append(self._to_str(self.constituent_12_name))
        out.append(self._to_str(self.constituent_12_molar_fraction))
        return ",".join(out)

class GeneratorWindTurbine(object):
    """ Corresponds to IDD object `Generator:WindTurbine`
        Wind turbine generator.
    """
    internal_name = "Generator:WindTurbine"
    field_count = 26

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Generator:WindTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Rotor Type"] = None
        self._data["Power Control"] = None
        self._data["Rated Rotor Speed"] = None
        self._data["Rotor Diameter"] = None
        self._data["Overall Height"] = None
        self._data["Number of Blades"] = None
        self._data["Rated Power"] = None
        self._data["Rated Wind Speed"] = None
        self._data["Cut In Wind Speed"] = None
        self._data["Cut Out Wind Speed"] = None
        self._data["Fraction system Efficiency"] = None
        self._data["Maximum Tip Speed Ratio"] = None
        self._data["Maximum Power Coefficient"] = None
        self._data["Annual Local Average Wind Speed"] = None
        self._data["Height for Local Average Wind Speed"] = None
        self._data["Blade Chord Area"] = None
        self._data["Blade Drag Coefficient"] = None
        self._data["Blade Lift Coefficient"] = None
        self._data["Power Coefficient C1"] = None
        self._data["Power Coefficient C2"] = None
        self._data["Power Coefficient C3"] = None
        self._data["Power Coefficient C4"] = None
        self._data["Power Coefficient C5"] = None
        self._data["Power Coefficient C6"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rotor_type = None
        else:
            self.rotor_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_control = None
        else:
            self.power_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_rotor_speed = None
        else:
            self.rated_rotor_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rotor_diameter = None
        else:
            self.rotor_diameter = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.overall_height = None
        else:
            self.overall_height = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_blades = None
        else:
            self.number_of_blades = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_power = None
        else:
            self.rated_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_wind_speed = None
        else:
            self.rated_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cut_in_wind_speed = None
        else:
            self.cut_in_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cut_out_wind_speed = None
        else:
            self.cut_out_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_system_efficiency = None
        else:
            self.fraction_system_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_tip_speed_ratio = None
        else:
            self.maximum_tip_speed_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_power_coefficient = None
        else:
            self.maximum_power_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.annual_local_average_wind_speed = None
        else:
            self.annual_local_average_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.height_for_local_average_wind_speed = None
        else:
            self.height_for_local_average_wind_speed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blade_chord_area = None
        else:
            self.blade_chord_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blade_drag_coefficient = None
        else:
            self.blade_drag_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.blade_lift_coefficient = None
        else:
            self.blade_lift_coefficient = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c1 = None
        else:
            self.power_coefficient_c1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c2 = None
        else:
            self.power_coefficient_c2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c3 = None
        else:
            self.power_coefficient_c3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c4 = None
        else:
            self.power_coefficient_c4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c5 = None
        else:
            self.power_coefficient_c5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.power_coefficient_c6 = None
        else:
            self.power_coefficient_c6 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def rotor_type(self):
        """Get rotor_type

        Returns:
            str: the value of `rotor_type` or None if not set
        """
        return self._data["Rotor Type"]

    @rotor_type.setter
    def rotor_type(self, value="HorizontalAxisWindTurbine"):
        """  Corresponds to IDD Field `rotor_type`
        allowed values are: Horizontal Axis Wind Turbine or Vertical Axis Wind Turbine

        Args:
            value (str): value for IDD Field `rotor_type`
                Accepted values are:
                      - HorizontalAxisWindTurbine
                      - VerticalAxisWindTurbine
                Default value: HorizontalAxisWindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `rotor_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `rotor_type`')
            vals = set()
            vals.add("HorizontalAxisWindTurbine")
            vals.add("VerticalAxisWindTurbine")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `rotor_type`'.format(value))

        self._data["Rotor Type"] = value

    @property
    def power_control(self):
        """Get power_control

        Returns:
            str: the value of `power_control` or None if not set
        """
        return self._data["Power Control"]

    @power_control.setter
    def power_control(self, value="VariableSpeedVariablePitch"):
        """  Corresponds to IDD Field `power_control`
        Constant power output is obtained in the last three control types
        when the wind speed exceeds the rated wind speed.
        allowd values are: Fixed Speed Fixed Pitch, Fixed Speed Variable Pitch,
        Variable Speed Fixed Pitch or Variable Speed Variable Pitch

        Args:
            value (str): value for IDD Field `power_control`
                Accepted values are:
                      - FixedSpeedFixedPitch
                      - FixedSpeedVariablePitch
                      - VariableSpeedFixedPitch
                      - VariableSpeedVariablePitch
                Default value: VariableSpeedVariablePitch
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `power_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `power_control`')
            vals = set()
            vals.add("FixedSpeedFixedPitch")
            vals.add("FixedSpeedVariablePitch")
            vals.add("VariableSpeedFixedPitch")
            vals.add("VariableSpeedVariablePitch")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `power_control`'.format(value))

        self._data["Power Control"] = value

    @property
    def rated_rotor_speed(self):
        """Get rated_rotor_speed

        Returns:
            float: the value of `rated_rotor_speed` or None if not set
        """
        return self._data["Rated Rotor Speed"]

    @rated_rotor_speed.setter
    def rated_rotor_speed(self, value=None):
        """  Corresponds to IDD Field `rated_rotor_speed`

        Args:
            value (float): value for IDD Field `rated_rotor_speed`
                Unit: rev/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_rotor_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_rotor_speed`')

        self._data["Rated Rotor Speed"] = value

    @property
    def rotor_diameter(self):
        """Get rotor_diameter

        Returns:
            float: the value of `rotor_diameter` or None if not set
        """
        return self._data["Rotor Diameter"]

    @rotor_diameter.setter
    def rotor_diameter(self, value=None):
        """  Corresponds to IDD Field `rotor_diameter`
        This field is the diameter of the perpendicular circle of the Vertical Axis Wind Turbine system
        from the upright pole on the ground.

        Args:
            value (float): value for IDD Field `rotor_diameter`
                Unit: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rotor_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rotor_diameter`')

        self._data["Rotor Diameter"] = value

    @property
    def overall_height(self):
        """Get overall_height

        Returns:
            float: the value of `overall_height` or None if not set
        """
        return self._data["Overall Height"]

    @overall_height.setter
    def overall_height(self, value=None):
        """  Corresponds to IDD Field `overall_height`
        This field is the height of the hub for the Horizontal Axis Wind Turbines and
        of the pole for the Vertical Axis Wind Turbines.

        Args:
            value (float): value for IDD Field `overall_height`
                Unit: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `overall_height`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `overall_height`')

        self._data["Overall Height"] = value

    @property
    def number_of_blades(self):
        """Get number_of_blades

        Returns:
            float: the value of `number_of_blades` or None if not set
        """
        return self._data["Number of Blades"]

    @number_of_blades.setter
    def number_of_blades(self, value=3.0 ):
        """  Corresponds to IDD Field `number_of_blades`

        Args:
            value (float): value for IDD Field `number_of_blades`
                Default value: 3.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_blades`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `number_of_blades`')

        self._data["Number of Blades"] = value

    @property
    def rated_power(self):
        """Get rated_power

        Returns:
            float: the value of `rated_power` or None if not set
        """
        return self._data["Rated Power"]

    @rated_power.setter
    def rated_power(self, value=None):
        """  Corresponds to IDD Field `rated_power`
        This field is the nominal power at the rated wind speed.
        Users should input maximum power in case of Fixed Speed Fixed Pitch control type.

        Args:
            value (float): value for IDD Field `rated_power`
                Unit: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_power`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_power`')

        self._data["Rated Power"] = value

    @property
    def rated_wind_speed(self):
        """Get rated_wind_speed

        Returns:
            float: the value of `rated_wind_speed` or None if not set
        """
        return self._data["Rated Wind Speed"]

    @rated_wind_speed.setter
    def rated_wind_speed(self, value=None):
        """  Corresponds to IDD Field `rated_wind_speed`

        Args:
            value (float): value for IDD Field `rated_wind_speed`
                Unit: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_wind_speed`')

        self._data["Rated Wind Speed"] = value

    @property
    def cut_in_wind_speed(self):
        """Get cut_in_wind_speed

        Returns:
            float: the value of `cut_in_wind_speed` or None if not set
        """
        return self._data["Cut In Wind Speed"]

    @cut_in_wind_speed.setter
    def cut_in_wind_speed(self, value=None):
        """  Corresponds to IDD Field `cut_in_wind_speed`

        Args:
            value (float): value for IDD Field `cut_in_wind_speed`
                Unit: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cut_in_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cut_in_wind_speed`')

        self._data["Cut In Wind Speed"] = value

    @property
    def cut_out_wind_speed(self):
        """Get cut_out_wind_speed

        Returns:
            float: the value of `cut_out_wind_speed` or None if not set
        """
        return self._data["Cut Out Wind Speed"]

    @cut_out_wind_speed.setter
    def cut_out_wind_speed(self, value=None):
        """  Corresponds to IDD Field `cut_out_wind_speed`

        Args:
            value (float): value for IDD Field `cut_out_wind_speed`
                Unit: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cut_out_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cut_out_wind_speed`')

        self._data["Cut Out Wind Speed"] = value

    @property
    def fraction_system_efficiency(self):
        """Get fraction_system_efficiency

        Returns:
            float: the value of `fraction_system_efficiency` or None if not set
        """
        return self._data["Fraction system Efficiency"]

    @fraction_system_efficiency.setter
    def fraction_system_efficiency(self, value=0.835 ):
        """  Corresponds to IDD Field `fraction_system_efficiency`

        Args:
            value (float): value for IDD Field `fraction_system_efficiency`
                Default value: 0.835
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_system_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fraction_system_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_system_efficiency`')

        self._data["Fraction system Efficiency"] = value

    @property
    def maximum_tip_speed_ratio(self):
        """Get maximum_tip_speed_ratio

        Returns:
            float: the value of `maximum_tip_speed_ratio` or None if not set
        """
        return self._data["Maximum Tip Speed Ratio"]

    @maximum_tip_speed_ratio.setter
    def maximum_tip_speed_ratio(self, value=5.0 ):
        """  Corresponds to IDD Field `maximum_tip_speed_ratio`

        Args:
            value (float): value for IDD Field `maximum_tip_speed_ratio`
                Default value: 5.0
                value > 0.0
                value <= 12.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_tip_speed_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_tip_speed_ratio`')
            if value > 12.0:
                raise ValueError('value need to be smaller 12.0 '
                                 'for field `maximum_tip_speed_ratio`')

        self._data["Maximum Tip Speed Ratio"] = value

    @property
    def maximum_power_coefficient(self):
        """Get maximum_power_coefficient

        Returns:
            float: the value of `maximum_power_coefficient` or None if not set
        """
        return self._data["Maximum Power Coefficient"]

    @maximum_power_coefficient.setter
    def maximum_power_coefficient(self, value=0.25 ):
        """  Corresponds to IDD Field `maximum_power_coefficient`
        This field should be input if the rotor type is Horizontal Axis Wind Turbine

        Args:
            value (float): value for IDD Field `maximum_power_coefficient`
                Default value: 0.25
                value > 0.0
                value <= 0.59
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_power_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_power_coefficient`')
            if value > 0.59:
                raise ValueError('value need to be smaller 0.59 '
                                 'for field `maximum_power_coefficient`')

        self._data["Maximum Power Coefficient"] = value

    @property
    def annual_local_average_wind_speed(self):
        """Get annual_local_average_wind_speed

        Returns:
            float: the value of `annual_local_average_wind_speed` or None if not set
        """
        return self._data["Annual Local Average Wind Speed"]

    @annual_local_average_wind_speed.setter
    def annual_local_average_wind_speed(self, value=None):
        """  Corresponds to IDD Field `annual_local_average_wind_speed`

        Args:
            value (float): value for IDD Field `annual_local_average_wind_speed`
                Unit: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `annual_local_average_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `annual_local_average_wind_speed`')

        self._data["Annual Local Average Wind Speed"] = value

    @property
    def height_for_local_average_wind_speed(self):
        """Get height_for_local_average_wind_speed

        Returns:
            float: the value of `height_for_local_average_wind_speed` or None if not set
        """
        return self._data["Height for Local Average Wind Speed"]

    @height_for_local_average_wind_speed.setter
    def height_for_local_average_wind_speed(self, value=50.0 ):
        """  Corresponds to IDD Field `height_for_local_average_wind_speed`

        Args:
            value (float): value for IDD Field `height_for_local_average_wind_speed`
                Unit: m
                Default value: 50.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_for_local_average_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `height_for_local_average_wind_speed`')

        self._data["Height for Local Average Wind Speed"] = value

    @property
    def blade_chord_area(self):
        """Get blade_chord_area

        Returns:
            float: the value of `blade_chord_area` or None if not set
        """
        return self._data["Blade Chord Area"]

    @blade_chord_area.setter
    def blade_chord_area(self, value=None):
        """  Corresponds to IDD Field `blade_chord_area`

        Args:
            value (float): value for IDD Field `blade_chord_area`
                Unit: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `blade_chord_area`'.format(value))

        self._data["Blade Chord Area"] = value

    @property
    def blade_drag_coefficient(self):
        """Get blade_drag_coefficient

        Returns:
            float: the value of `blade_drag_coefficient` or None if not set
        """
        return self._data["Blade Drag Coefficient"]

    @blade_drag_coefficient.setter
    def blade_drag_coefficient(self, value=0.9 ):
        """  Corresponds to IDD Field `blade_drag_coefficient`
        This field is only for Vertical Axis Wind Turbine..
        The user must input this field if the rotor type is Vertical Axis Wind Turbine.

        Args:
            value (float): value for IDD Field `blade_drag_coefficient`
                Default value: 0.9
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `blade_drag_coefficient`'.format(value))

        self._data["Blade Drag Coefficient"] = value

    @property
    def blade_lift_coefficient(self):
        """Get blade_lift_coefficient

        Returns:
            float: the value of `blade_lift_coefficient` or None if not set
        """
        return self._data["Blade Lift Coefficient"]

    @blade_lift_coefficient.setter
    def blade_lift_coefficient(self, value=0.05 ):
        """  Corresponds to IDD Field `blade_lift_coefficient`
        This field is only for Vertical Axis Wind Turbine..
        The user must input this field if the rotor type is Vertical Axis Wind Turbine.

        Args:
            value (float): value for IDD Field `blade_lift_coefficient`
                Default value: 0.05
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `blade_lift_coefficient`'.format(value))

        self._data["Blade Lift Coefficient"] = value

    @property
    def power_coefficient_c1(self):
        """Get power_coefficient_c1

        Returns:
            float: the value of `power_coefficient_c1` or None if not set
        """
        return self._data["Power Coefficient C1"]

    @power_coefficient_c1.setter
    def power_coefficient_c1(self, value=0.5176 ):
        """  Corresponds to IDD Field `power_coefficient_c1`
        This field is only available for Horizontal Axis Wind Turbine.
        The user should input all six parameters
        so that the analytic approximation is assumed.
        The simple approximation will be assumed,
        if any field C1 through C6 is not input.
        Leave this field blank, if the manufacturers's data is unavailable
        so that the simple approximation will be assumed.

        Args:
            value (float): value for IDD Field `power_coefficient_c1`
                Default value: 0.5176
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c1`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c1`')

        self._data["Power Coefficient C1"] = value

    @property
    def power_coefficient_c2(self):
        """Get power_coefficient_c2

        Returns:
            float: the value of `power_coefficient_c2` or None if not set
        """
        return self._data["Power Coefficient C2"]

    @power_coefficient_c2.setter
    def power_coefficient_c2(self, value=116.0 ):
        """  Corresponds to IDD Field `power_coefficient_c2`

        Args:
            value (float): value for IDD Field `power_coefficient_c2`
                Default value: 116.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c2`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c2`')

        self._data["Power Coefficient C2"] = value

    @property
    def power_coefficient_c3(self):
        """Get power_coefficient_c3

        Returns:
            float: the value of `power_coefficient_c3` or None if not set
        """
        return self._data["Power Coefficient C3"]

    @power_coefficient_c3.setter
    def power_coefficient_c3(self, value=0.4 ):
        """  Corresponds to IDD Field `power_coefficient_c3`

        Args:
            value (float): value for IDD Field `power_coefficient_c3`
                Default value: 0.4
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c3`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c3`')

        self._data["Power Coefficient C3"] = value

    @property
    def power_coefficient_c4(self):
        """Get power_coefficient_c4

        Returns:
            float: the value of `power_coefficient_c4` or None if not set
        """
        return self._data["Power Coefficient C4"]

    @power_coefficient_c4.setter
    def power_coefficient_c4(self, value=0.0 ):
        """  Corresponds to IDD Field `power_coefficient_c4`

        Args:
            value (float): value for IDD Field `power_coefficient_c4`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `power_coefficient_c4`')

        self._data["Power Coefficient C4"] = value

    @property
    def power_coefficient_c5(self):
        """Get power_coefficient_c5

        Returns:
            float: the value of `power_coefficient_c5` or None if not set
        """
        return self._data["Power Coefficient C5"]

    @power_coefficient_c5.setter
    def power_coefficient_c5(self, value=5.0 ):
        """  Corresponds to IDD Field `power_coefficient_c5`

        Args:
            value (float): value for IDD Field `power_coefficient_c5`
                Default value: 5.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c5`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c5`')

        self._data["Power Coefficient C5"] = value

    @property
    def power_coefficient_c6(self):
        """Get power_coefficient_c6

        Returns:
            float: the value of `power_coefficient_c6` or None if not set
        """
        return self._data["Power Coefficient C6"]

    @power_coefficient_c6.setter
    def power_coefficient_c6(self, value=21.0 ):
        """  Corresponds to IDD Field `power_coefficient_c6`

        Args:
            value (float): value for IDD Field `power_coefficient_c6`
                Default value: 21.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `power_coefficient_c6`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c6`')

        self._data["Power Coefficient C6"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.rotor_type))
        out.append(self._to_str(self.power_control))
        out.append(self._to_str(self.rated_rotor_speed))
        out.append(self._to_str(self.rotor_diameter))
        out.append(self._to_str(self.overall_height))
        out.append(self._to_str(self.number_of_blades))
        out.append(self._to_str(self.rated_power))
        out.append(self._to_str(self.rated_wind_speed))
        out.append(self._to_str(self.cut_in_wind_speed))
        out.append(self._to_str(self.cut_out_wind_speed))
        out.append(self._to_str(self.fraction_system_efficiency))
        out.append(self._to_str(self.maximum_tip_speed_ratio))
        out.append(self._to_str(self.maximum_power_coefficient))
        out.append(self._to_str(self.annual_local_average_wind_speed))
        out.append(self._to_str(self.height_for_local_average_wind_speed))
        out.append(self._to_str(self.blade_chord_area))
        out.append(self._to_str(self.blade_drag_coefficient))
        out.append(self._to_str(self.blade_lift_coefficient))
        out.append(self._to_str(self.power_coefficient_c1))
        out.append(self._to_str(self.power_coefficient_c2))
        out.append(self._to_str(self.power_coefficient_c3))
        out.append(self._to_str(self.power_coefficient_c4))
        out.append(self._to_str(self.power_coefficient_c5))
        out.append(self._to_str(self.power_coefficient_c6))
        return ",".join(out)