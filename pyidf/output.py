from collections import OrderedDict

class OutputDaylightFactors(object):
    """ Corresponds to IDD object `Output:DaylightFactors`
        Reports hourly daylight factors for each exterior window for four sky types
        (clear, turbid clear, intermediate, and overcast).
    """
    internal_name = "Output:DaylightFactors"
    field_count = 1

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:DaylightFactors`
        """
        self._data = OrderedDict()
        self._data["Reporting Days"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.reporting_days = None
        else:
            self.reporting_days = vals[i]
        i += 1

    @property
    def reporting_days(self):
        """Get reporting_days

        Returns:
            str: the value of `reporting_days` or None if not set
        """
        return self._data["Reporting Days"]

    @reporting_days.setter
    def reporting_days(self, value=None):
        """  Corresponds to IDD Field `reporting_days`

        Args:
            value (str): value for IDD Field `reporting_days`
                Accepted values are:
                      - SizingDays
                      - AllShadowCalculationDays
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_days`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_days`')
            vals = set()
            vals.add("SizingDays")
            vals.add("AllShadowCalculationDays")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_days`'.format(value))

        self._data["Reporting Days"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.reporting_days))
        return ",".join(out)

class OutputIlluminanceMap(object):
    """ Corresponds to IDD object `Output:IlluminanceMap`
        reference points are given in coordinates specified in the GlobalGeometryRules object
        Daylighting Reference Point CoordinateSystem field
    """
    internal_name = "Output:IlluminanceMap"
    field_count = 9

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:IlluminanceMap`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Zone Name"] = None
        self._data["Z height"] = None
        self._data["X Minimum Coordinate"] = None
        self._data["X Maximum Coordinate"] = None
        self._data["Number of X Grid Points"] = None
        self._data["Y Minimum Coordinate"] = None
        self._data["Y Maximum Coordinate"] = None
        self._data["Number of Y Grid Points"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.z_height = None
        else:
            self.z_height = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.x_minimum_coordinate = None
        else:
            self.x_minimum_coordinate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.x_maximum_coordinate = None
        else:
            self.x_maximum_coordinate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_x_grid_points = None
        else:
            self.number_of_x_grid_points = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.y_minimum_coordinate = None
        else:
            self.y_minimum_coordinate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.y_maximum_coordinate = None
        else:
            self.y_maximum_coordinate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_y_grid_points = None
        else:
            self.number_of_y_grid_points = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def z_height(self):
        """Get z_height

        Returns:
            float: the value of `z_height` or None if not set
        """
        return self._data["Z height"]

    @z_height.setter
    def z_height(self, value=0.0 ):
        """  Corresponds to IDD Field `z_height`

        Args:
            value (float): value for IDD Field `z_height`
                Unit: m
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `z_height`'.format(value))

        self._data["Z height"] = value

    @property
    def x_minimum_coordinate(self):
        """Get x_minimum_coordinate

        Returns:
            float: the value of `x_minimum_coordinate` or None if not set
        """
        return self._data["X Minimum Coordinate"]

    @x_minimum_coordinate.setter
    def x_minimum_coordinate(self, value=0.0 ):
        """  Corresponds to IDD Field `x_minimum_coordinate`

        Args:
            value (float): value for IDD Field `x_minimum_coordinate`
                Unit: m
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `x_minimum_coordinate`'.format(value))

        self._data["X Minimum Coordinate"] = value

    @property
    def x_maximum_coordinate(self):
        """Get x_maximum_coordinate

        Returns:
            float: the value of `x_maximum_coordinate` or None if not set
        """
        return self._data["X Maximum Coordinate"]

    @x_maximum_coordinate.setter
    def x_maximum_coordinate(self, value=1.0 ):
        """  Corresponds to IDD Field `x_maximum_coordinate`

        Args:
            value (float): value for IDD Field `x_maximum_coordinate`
                Unit: m
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `x_maximum_coordinate`'.format(value))

        self._data["X Maximum Coordinate"] = value

    @property
    def number_of_x_grid_points(self):
        """Get number_of_x_grid_points

        Returns:
            int: the value of `number_of_x_grid_points` or None if not set
        """
        return self._data["Number of X Grid Points"]

    @number_of_x_grid_points.setter
    def number_of_x_grid_points(self, value=2 ):
        """  Corresponds to IDD Field `number_of_x_grid_points`
        Maximum number of total grid points must be <= 2500 (X*Y)

        Args:
            value (int): value for IDD Field `number_of_x_grid_points`
                Default value: 2
                value > 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_x_grid_points`'.format(value))
            if value <= 0:
                raise ValueError('value need to be greater 0 '
                                 'for field `number_of_x_grid_points`')

        self._data["Number of X Grid Points"] = value

    @property
    def y_minimum_coordinate(self):
        """Get y_minimum_coordinate

        Returns:
            float: the value of `y_minimum_coordinate` or None if not set
        """
        return self._data["Y Minimum Coordinate"]

    @y_minimum_coordinate.setter
    def y_minimum_coordinate(self, value=0.0 ):
        """  Corresponds to IDD Field `y_minimum_coordinate`

        Args:
            value (float): value for IDD Field `y_minimum_coordinate`
                Unit: m
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `y_minimum_coordinate`'.format(value))

        self._data["Y Minimum Coordinate"] = value

    @property
    def y_maximum_coordinate(self):
        """Get y_maximum_coordinate

        Returns:
            float: the value of `y_maximum_coordinate` or None if not set
        """
        return self._data["Y Maximum Coordinate"]

    @y_maximum_coordinate.setter
    def y_maximum_coordinate(self, value=1.0 ):
        """  Corresponds to IDD Field `y_maximum_coordinate`

        Args:
            value (float): value for IDD Field `y_maximum_coordinate`
                Unit: m
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `y_maximum_coordinate`'.format(value))

        self._data["Y Maximum Coordinate"] = value

    @property
    def number_of_y_grid_points(self):
        """Get number_of_y_grid_points

        Returns:
            int: the value of `number_of_y_grid_points` or None if not set
        """
        return self._data["Number of Y Grid Points"]

    @number_of_y_grid_points.setter
    def number_of_y_grid_points(self, value=2 ):
        """  Corresponds to IDD Field `number_of_y_grid_points`
        Maximum number of total grid points must be <= 2500 (X*Y)

        Args:
            value (int): value for IDD Field `number_of_y_grid_points`
                Default value: 2
                value > 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_y_grid_points`'.format(value))
            if value <= 0:
                raise ValueError('value need to be greater 0 '
                                 'for field `number_of_y_grid_points`')

        self._data["Number of Y Grid Points"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.z_height))
        out.append(self._to_str(self.x_minimum_coordinate))
        out.append(self._to_str(self.x_maximum_coordinate))
        out.append(self._to_str(self.number_of_x_grid_points))
        out.append(self._to_str(self.y_minimum_coordinate))
        out.append(self._to_str(self.y_maximum_coordinate))
        out.append(self._to_str(self.number_of_y_grid_points))
        return ",".join(out)

class OutputVariableDictionary(object):
    """ Corresponds to IDD object `Output:VariableDictionary`
        Produces a list summarizing the output variables and meters that are available for
        reporting for the model being simulated (rdd output file). The list varies depending
        on the types of objects present in the idf file.  For example, variables related to
        lights will only appear if a Lights object is present. The IDF option generates
        complete Output:Variable objects to simplify adding the desired output to the idf file.
    """
    internal_name = "Output:VariableDictionary"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:VariableDictionary`
        """
        self._data = OrderedDict()
        self._data["Key Field"] = None
        self._data["Sort Option"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_field = None
        else:
            self.key_field = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sort_option = None
        else:
            self.sort_option = vals[i]
        i += 1

    @property
    def key_field(self):
        """Get key_field

        Returns:
            str: the value of `key_field` or None if not set
        """
        return self._data["Key Field"]

    @key_field.setter
    def key_field(self, value="regular"):
        """  Corresponds to IDD Field `key_field`

        Args:
            value (str): value for IDD Field `key_field`
                Accepted values are:
                      - IDF
                      - regular
                Default value: regular
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_field`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_field`')
            vals = set()
            vals.add("IDF")
            vals.add("regular")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `key_field`'.format(value))

        self._data["Key Field"] = value

    @property
    def sort_option(self):
        """Get sort_option

        Returns:
            str: the value of `sort_option` or None if not set
        """
        return self._data["Sort Option"]

    @sort_option.setter
    def sort_option(self, value=None):
        """  Corresponds to IDD Field `sort_option`

        Args:
            value (str): value for IDD Field `sort_option`
                Accepted values are:
                      - Name
                      - Unsorted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `sort_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sort_option`')
            vals = set()
            vals.add("Name")
            vals.add("Unsorted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `sort_option`'.format(value))

        self._data["Sort Option"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_field))
        out.append(self._to_str(self.sort_option))
        return ",".join(out)

class OutputSurfacesList(object):
    """ Corresponds to IDD object `Output:Surfaces:List`
        Produces a report summarizing the details of surfaces in the eio output file.
    """
    internal_name = "Output:Surfaces:List"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Surfaces:List`
        """
        self._data = OrderedDict()
        self._data["Report Type"] = None
        self._data["Report Specifications"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.report_type = None
        else:
            self.report_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_specifications = None
        else:
            self.report_specifications = vals[i]
        i += 1

    @property
    def report_type(self):
        """Get report_type

        Returns:
            str: the value of `report_type` or None if not set
        """
        return self._data["Report Type"]

    @report_type.setter
    def report_type(self, value=None):
        """  Corresponds to IDD Field `report_type`

        Args:
            value (str): value for IDD Field `report_type`
                Accepted values are:
                      - Details
                      - Vertices
                      - DetailsWithVertices
                      - ViewFactorInfo
                      - Lines
                      - CostInfo
                      - DecayCurvesfromZoneComponentLoads
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_type`')
            vals = set()
            vals.add("Details")
            vals.add("Vertices")
            vals.add("DetailsWithVertices")
            vals.add("ViewFactorInfo")
            vals.add("Lines")
            vals.add("CostInfo")
            vals.add("DecayCurvesfromZoneComponentLoads")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_type`'.format(value))

        self._data["Report Type"] = value

    @property
    def report_specifications(self):
        """Get report_specifications

        Returns:
            str: the value of `report_specifications` or None if not set
        """
        return self._data["Report Specifications"]

    @report_specifications.setter
    def report_specifications(self, value=None):
        """  Corresponds to IDD Field `report_specifications`
        (IDF, only for Output:Surfaces:List, Lines report --
        will print transformed coordinates in IDF style)

        Args:
            value (str): value for IDD Field `report_specifications`
                Accepted values are:
                      - IDF
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications`')
            vals = set()
            vals.add("IDF")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_specifications`'.format(value))

        self._data["Report Specifications"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.report_type))
        out.append(self._to_str(self.report_specifications))
        return ",".join(out)

class OutputSurfacesDrawing(object):
    """ Corresponds to IDD object `Output:Surfaces:Drawing`
        Produces reports/files that are capable of rendering graphically or
        being imported into other programs. Rendering does not alter the
        actual inputs/surfaces.
    """
    internal_name = "Output:Surfaces:Drawing"
    field_count = 3

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Surfaces:Drawing`
        """
        self._data = OrderedDict()
        self._data["Report Type"] = None
        self._data["Report Specifications 1"] = None
        self._data["Report Specifications 2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.report_type = None
        else:
            self.report_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_specifications_1 = None
        else:
            self.report_specifications_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_specifications_2 = None
        else:
            self.report_specifications_2 = vals[i]
        i += 1

    @property
    def report_type(self):
        """Get report_type

        Returns:
            str: the value of `report_type` or None if not set
        """
        return self._data["Report Type"]

    @report_type.setter
    def report_type(self, value=None):
        """  Corresponds to IDD Field `report_type`

        Args:
            value (str): value for IDD Field `report_type`
                Accepted values are:
                      - DXF
                      - DXF:WireFrame
                      - VRML
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_type`')
            vals = set()
            vals.add("DXF")
            vals.add("DXF:WireFrame")
            vals.add("VRML")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_type`'.format(value))

        self._data["Report Type"] = value

    @property
    def report_specifications_1(self):
        """Get report_specifications_1

        Returns:
            str: the value of `report_specifications_1` or None if not set
        """
        return self._data["Report Specifications 1"]

    @report_specifications_1.setter
    def report_specifications_1(self, value="Triangulate3DFace"):
        """  Corresponds to IDD Field `report_specifications_1`
        Triangulate3DFace (default), ThickPolyline, RegularPolyline apply to DXF
        This field is ignored for DXF:WireFrame and VRML

        Args:
            value (str): value for IDD Field `report_specifications_1`
                Accepted values are:
                      - Triangulate3DFace
                      - ThickPolyline
                      - RegularPolyline
                Default value: Triangulate3DFace
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications_1`')
            vals = set()
            vals.add("Triangulate3DFace")
            vals.add("ThickPolyline")
            vals.add("RegularPolyline")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_specifications_1`'.format(value))

        self._data["Report Specifications 1"] = value

    @property
    def report_specifications_2(self):
        """Get report_specifications_2

        Returns:
            str: the value of `report_specifications_2` or None if not set
        """
        return self._data["Report Specifications 2"]

    @report_specifications_2.setter
    def report_specifications_2(self, value=None):
        """  Corresponds to IDD Field `report_specifications_2`
        Use ColorScheme Name for DXF reports

        Args:
            value (str): value for IDD Field `report_specifications_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications_2`')

        self._data["Report Specifications 2"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.report_type))
        out.append(self._to_str(self.report_specifications_1))
        out.append(self._to_str(self.report_specifications_2))
        return ",".join(out)

class OutputSchedules(object):
    """ Corresponds to IDD object `Output:Schedules`
        Produces a condensed reporting that illustrates the full range of schedule values in
        the eio output file. In the style of input: DaySchedule,  WeekSchedule, and
        Annual Schedule.
    """
    internal_name = "Output:Schedules"
    field_count = 1

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Schedules`
        """
        self._data = OrderedDict()
        self._data["Key Field"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_field = None
        else:
            self.key_field = vals[i]
        i += 1

    @property
    def key_field(self):
        """Get key_field

        Returns:
            str: the value of `key_field` or None if not set
        """
        return self._data["Key Field"]

    @key_field.setter
    def key_field(self, value=None):
        """  Corresponds to IDD Field `key_field`

        Args:
            value (str): value for IDD Field `key_field`
                Accepted values are:
                      - Hourly
                      - Timestep
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_field`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_field`')
            vals = set()
            vals.add("Hourly")
            vals.add("Timestep")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `key_field`'.format(value))

        self._data["Key Field"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_field))
        return ",".join(out)

class OutputConstructions(object):
    """ Corresponds to IDD object `Output:Constructions`
        Adds a report to the eio output file which shows details for each construction,
        including overall properties, a list of material layers, and calculated results
        related to conduction transfer functions.
    """
    internal_name = "Output:Constructions"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Constructions`
        """
        self._data = OrderedDict()
        self._data["Details Type 1"] = None
        self._data["Details Type 2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.details_type_1 = None
        else:
            self.details_type_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.details_type_2 = None
        else:
            self.details_type_2 = vals[i]
        i += 1

    @property
    def details_type_1(self):
        """Get details_type_1

        Returns:
            str: the value of `details_type_1` or None if not set
        """
        return self._data["Details Type 1"]

    @details_type_1.setter
    def details_type_1(self, value=None):
        """  Corresponds to IDD Field `details_type_1`

        Args:
            value (str): value for IDD Field `details_type_1`
                Accepted values are:
                      - Constructions
                      - Materials
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `details_type_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `details_type_1`')
            vals = set()
            vals.add("Constructions")
            vals.add("Materials")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `details_type_1`'.format(value))

        self._data["Details Type 1"] = value

    @property
    def details_type_2(self):
        """Get details_type_2

        Returns:
            str: the value of `details_type_2` or None if not set
        """
        return self._data["Details Type 2"]

    @details_type_2.setter
    def details_type_2(self, value=None):
        """  Corresponds to IDD Field `details_type_2`

        Args:
            value (str): value for IDD Field `details_type_2`
                Accepted values are:
                      - Constructions
                      - Materials
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `details_type_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `details_type_2`')
            vals = set()
            vals.add("Constructions")
            vals.add("Materials")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `details_type_2`'.format(value))

        self._data["Details Type 2"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.details_type_1))
        out.append(self._to_str(self.details_type_2))
        return ",".join(out)

class OutputEnergyManagementSystem(object):
    """ Corresponds to IDD object `Output:EnergyManagementSystem`
        This object is used to control the output produced by the Energy Management System
    """
    internal_name = "Output:EnergyManagementSystem"
    field_count = 3

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:EnergyManagementSystem`
        """
        self._data = OrderedDict()
        self._data["Actuator Availability Dictionary Reporting"] = None
        self._data["Internal Variable Availability Dictionary Reporting"] = None
        self._data["EMS Runtime Language Debug Output Level"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.actuator_availability_dictionary_reporting = None
        else:
            self.actuator_availability_dictionary_reporting = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.internal_variable_availability_dictionary_reporting = None
        else:
            self.internal_variable_availability_dictionary_reporting = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ems_runtime_language_debug_output_level = None
        else:
            self.ems_runtime_language_debug_output_level = vals[i]
        i += 1

    @property
    def actuator_availability_dictionary_reporting(self):
        """Get actuator_availability_dictionary_reporting

        Returns:
            str: the value of `actuator_availability_dictionary_reporting` or None if not set
        """
        return self._data["Actuator Availability Dictionary Reporting"]

    @actuator_availability_dictionary_reporting.setter
    def actuator_availability_dictionary_reporting(self, value="None"):
        """  Corresponds to IDD Field `actuator_availability_dictionary_reporting`

        Args:
            value (str): value for IDD Field `actuator_availability_dictionary_reporting`
                Accepted values are:
                      - None
                      - NotByUniqueKeyNames
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `actuator_availability_dictionary_reporting`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `actuator_availability_dictionary_reporting`')
            vals = set()
            vals.add("None")
            vals.add("NotByUniqueKeyNames")
            vals.add("Verbose")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `actuator_availability_dictionary_reporting`'.format(value))

        self._data["Actuator Availability Dictionary Reporting"] = value

    @property
    def internal_variable_availability_dictionary_reporting(self):
        """Get internal_variable_availability_dictionary_reporting

        Returns:
            str: the value of `internal_variable_availability_dictionary_reporting` or None if not set
        """
        return self._data["Internal Variable Availability Dictionary Reporting"]

    @internal_variable_availability_dictionary_reporting.setter
    def internal_variable_availability_dictionary_reporting(self, value="None"):
        """  Corresponds to IDD Field `internal_variable_availability_dictionary_reporting`

        Args:
            value (str): value for IDD Field `internal_variable_availability_dictionary_reporting`
                Accepted values are:
                      - None
                      - NotByUniqueKeyNames
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `internal_variable_availability_dictionary_reporting`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `internal_variable_availability_dictionary_reporting`')
            vals = set()
            vals.add("None")
            vals.add("NotByUniqueKeyNames")
            vals.add("Verbose")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `internal_variable_availability_dictionary_reporting`'.format(value))

        self._data["Internal Variable Availability Dictionary Reporting"] = value

    @property
    def ems_runtime_language_debug_output_level(self):
        """Get ems_runtime_language_debug_output_level

        Returns:
            str: the value of `ems_runtime_language_debug_output_level` or None if not set
        """
        return self._data["EMS Runtime Language Debug Output Level"]

    @ems_runtime_language_debug_output_level.setter
    def ems_runtime_language_debug_output_level(self, value="None"):
        """  Corresponds to IDD Field `ems_runtime_language_debug_output_level`

        Args:
            value (str): value for IDD Field `ems_runtime_language_debug_output_level`
                Accepted values are:
                      - None
                      - ErrorsOnly
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ems_runtime_language_debug_output_level`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ems_runtime_language_debug_output_level`')
            vals = set()
            vals.add("None")
            vals.add("ErrorsOnly")
            vals.add("Verbose")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `ems_runtime_language_debug_output_level`'.format(value))

        self._data["EMS Runtime Language Debug Output Level"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.actuator_availability_dictionary_reporting))
        out.append(self._to_str(self.internal_variable_availability_dictionary_reporting))
        out.append(self._to_str(self.ems_runtime_language_debug_output_level))
        return ",".join(out)

class OutputTableSummaryReports(object):
    """ Corresponds to IDD object `Output:Table:SummaryReports`
        This object allows the user to call report types that are predefined and will appear with the
        other tabular reports.  These predefined reports are sensitive to the OutputControl:Table:Style object
        and appear in the same files as the tabular reports.  The entries for this object is a list
        of the predefined reports that should appear in the tabular report output file.
        There should be as many fields (A) in this object as there are keys in the following (minus
        AllSummary+AllMonthly+AllSummaryAndMonthly)
    """
    internal_name = "Output:Table:SummaryReports"
    field_count = 83

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Table:SummaryReports`
        """
        self._data = OrderedDict()
        self._data["Report 1 Name"] = None
        self._data["Report 2 Name"] = None
        self._data["Report 3 Name"] = None
        self._data["Report 4 Name"] = None
        self._data["Report 5 Name"] = None
        self._data["Report 6 Name"] = None
        self._data["Report 7 Name"] = None
        self._data["Report 8 Name"] = None
        self._data["Report 9 Name"] = None
        self._data["Report 10 Name"] = None
        self._data["Report 11 Name"] = None
        self._data["Report 12 Name"] = None
        self._data["Report 13 Name"] = None
        self._data["Report 14 Name"] = None
        self._data["Report 15 Name"] = None
        self._data["Report 16 Name"] = None
        self._data["Report 17 Name"] = None
        self._data["Report 18 Name"] = None
        self._data["Report 19 Name"] = None
        self._data["Report 20 Name"] = None
        self._data["Report 21 Name"] = None
        self._data["Report 22 Name"] = None
        self._data["Report 23 Name"] = None
        self._data["Report 24 Name"] = None
        self._data["Report 25 Name"] = None
        self._data["Report 26 Name"] = None
        self._data["Report 27 Name"] = None
        self._data["Report 28 Name"] = None
        self._data["Report 29 Name"] = None
        self._data["Report 30 Name"] = None
        self._data["Report 31 Name"] = None
        self._data["Report 32 Name"] = None
        self._data["Report 33 Name"] = None
        self._data["Report 34 Name"] = None
        self._data["Report 35 Name"] = None
        self._data["Report 36 Name"] = None
        self._data["Report 37 Name"] = None
        self._data["Report 38 Name"] = None
        self._data["Report 39 Name"] = None
        self._data["Report 40 Name"] = None
        self._data["Report 41 Name"] = None
        self._data["Report 42 Name"] = None
        self._data["Report 43 Name"] = None
        self._data["Report 44 Name"] = None
        self._data["Report 45 Name"] = None
        self._data["Report 46 Name"] = None
        self._data["Report 47 Name"] = None
        self._data["Report 48 Name"] = None
        self._data["Report 49 Name"] = None
        self._data["Report 50 Name"] = None
        self._data["Report 51 Name"] = None
        self._data["Report 52 Name"] = None
        self._data["Report 53 Name"] = None
        self._data["Report 54 Name"] = None
        self._data["Report 55 Name"] = None
        self._data["Report 56 Name"] = None
        self._data["Report 57 Name"] = None
        self._data["Report 58 Name"] = None
        self._data["Report 59 Name"] = None
        self._data["Report 60 Name"] = None
        self._data["Report 61 Name"] = None
        self._data["Report 62 Name"] = None
        self._data["Report 63 Name"] = None
        self._data["Report 64 Name"] = None
        self._data["Report 65 Name"] = None
        self._data["Report 66 Name"] = None
        self._data["Report 67 Name"] = None
        self._data["Report 68 Name"] = None
        self._data["Report 69 Name"] = None
        self._data["Report 70 Name"] = None
        self._data["Report 71 Name"] = None
        self._data["Report 72 Name"] = None
        self._data["Report 73 Name"] = None
        self._data["Report 74 Name"] = None
        self._data["Report 75 Name"] = None
        self._data["Report 76 Name"] = None
        self._data["Report 77 Name"] = None
        self._data["Report 78 Name"] = None
        self._data["Report 79 Name"] = None
        self._data["Report 80 Name"] = None
        self._data["Report 81 Name"] = None
        self._data["Report 82 Name"] = None
        self._data["Report 83 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.report_1_name = None
        else:
            self.report_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_2_name = None
        else:
            self.report_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_3_name = None
        else:
            self.report_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_4_name = None
        else:
            self.report_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_5_name = None
        else:
            self.report_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_6_name = None
        else:
            self.report_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_7_name = None
        else:
            self.report_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_8_name = None
        else:
            self.report_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_9_name = None
        else:
            self.report_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_10_name = None
        else:
            self.report_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_11_name = None
        else:
            self.report_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_12_name = None
        else:
            self.report_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_13_name = None
        else:
            self.report_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_14_name = None
        else:
            self.report_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_15_name = None
        else:
            self.report_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_16_name = None
        else:
            self.report_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_17_name = None
        else:
            self.report_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_18_name = None
        else:
            self.report_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_19_name = None
        else:
            self.report_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_20_name = None
        else:
            self.report_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_21_name = None
        else:
            self.report_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_22_name = None
        else:
            self.report_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_23_name = None
        else:
            self.report_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_24_name = None
        else:
            self.report_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_25_name = None
        else:
            self.report_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_26_name = None
        else:
            self.report_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_27_name = None
        else:
            self.report_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_28_name = None
        else:
            self.report_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_29_name = None
        else:
            self.report_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_30_name = None
        else:
            self.report_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_31_name = None
        else:
            self.report_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_32_name = None
        else:
            self.report_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_33_name = None
        else:
            self.report_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_34_name = None
        else:
            self.report_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_35_name = None
        else:
            self.report_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_36_name = None
        else:
            self.report_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_37_name = None
        else:
            self.report_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_38_name = None
        else:
            self.report_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_39_name = None
        else:
            self.report_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_40_name = None
        else:
            self.report_40_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_41_name = None
        else:
            self.report_41_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_42_name = None
        else:
            self.report_42_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_43_name = None
        else:
            self.report_43_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_44_name = None
        else:
            self.report_44_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_45_name = None
        else:
            self.report_45_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_46_name = None
        else:
            self.report_46_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_47_name = None
        else:
            self.report_47_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_48_name = None
        else:
            self.report_48_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_49_name = None
        else:
            self.report_49_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_50_name = None
        else:
            self.report_50_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_51_name = None
        else:
            self.report_51_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_52_name = None
        else:
            self.report_52_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_53_name = None
        else:
            self.report_53_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_54_name = None
        else:
            self.report_54_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_55_name = None
        else:
            self.report_55_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_56_name = None
        else:
            self.report_56_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_57_name = None
        else:
            self.report_57_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_58_name = None
        else:
            self.report_58_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_59_name = None
        else:
            self.report_59_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_60_name = None
        else:
            self.report_60_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_61_name = None
        else:
            self.report_61_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_62_name = None
        else:
            self.report_62_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_63_name = None
        else:
            self.report_63_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_64_name = None
        else:
            self.report_64_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_65_name = None
        else:
            self.report_65_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_66_name = None
        else:
            self.report_66_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_67_name = None
        else:
            self.report_67_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_68_name = None
        else:
            self.report_68_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_69_name = None
        else:
            self.report_69_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_70_name = None
        else:
            self.report_70_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_71_name = None
        else:
            self.report_71_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_72_name = None
        else:
            self.report_72_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_73_name = None
        else:
            self.report_73_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_74_name = None
        else:
            self.report_74_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_75_name = None
        else:
            self.report_75_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_76_name = None
        else:
            self.report_76_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_77_name = None
        else:
            self.report_77_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_78_name = None
        else:
            self.report_78_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_79_name = None
        else:
            self.report_79_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_80_name = None
        else:
            self.report_80_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_81_name = None
        else:
            self.report_81_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_82_name = None
        else:
            self.report_82_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_83_name = None
        else:
            self.report_83_name = vals[i]
        i += 1

    @property
    def report_1_name(self):
        """Get report_1_name

        Returns:
            str: the value of `report_1_name` or None if not set
        """
        return self._data["Report 1 Name"]

    @report_1_name.setter
    def report_1_name(self, value=None):
        """  Corresponds to IDD Field `report_1_name`

        Args:
            value (str): value for IDD Field `report_1_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_1_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_1_name`'.format(value))

        self._data["Report 1 Name"] = value

    @property
    def report_2_name(self):
        """Get report_2_name

        Returns:
            str: the value of `report_2_name` or None if not set
        """
        return self._data["Report 2 Name"]

    @report_2_name.setter
    def report_2_name(self, value=None):
        """  Corresponds to IDD Field `report_2_name`

        Args:
            value (str): value for IDD Field `report_2_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_2_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_2_name`'.format(value))

        self._data["Report 2 Name"] = value

    @property
    def report_3_name(self):
        """Get report_3_name

        Returns:
            str: the value of `report_3_name` or None if not set
        """
        return self._data["Report 3 Name"]

    @report_3_name.setter
    def report_3_name(self, value=None):
        """  Corresponds to IDD Field `report_3_name`

        Args:
            value (str): value for IDD Field `report_3_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_3_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_3_name`'.format(value))

        self._data["Report 3 Name"] = value

    @property
    def report_4_name(self):
        """Get report_4_name

        Returns:
            str: the value of `report_4_name` or None if not set
        """
        return self._data["Report 4 Name"]

    @report_4_name.setter
    def report_4_name(self, value=None):
        """  Corresponds to IDD Field `report_4_name`

        Args:
            value (str): value for IDD Field `report_4_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_4_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_4_name`'.format(value))

        self._data["Report 4 Name"] = value

    @property
    def report_5_name(self):
        """Get report_5_name

        Returns:
            str: the value of `report_5_name` or None if not set
        """
        return self._data["Report 5 Name"]

    @report_5_name.setter
    def report_5_name(self, value=None):
        """  Corresponds to IDD Field `report_5_name`

        Args:
            value (str): value for IDD Field `report_5_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_5_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_5_name`'.format(value))

        self._data["Report 5 Name"] = value

    @property
    def report_6_name(self):
        """Get report_6_name

        Returns:
            str: the value of `report_6_name` or None if not set
        """
        return self._data["Report 6 Name"]

    @report_6_name.setter
    def report_6_name(self, value=None):
        """  Corresponds to IDD Field `report_6_name`

        Args:
            value (str): value for IDD Field `report_6_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_6_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_6_name`'.format(value))

        self._data["Report 6 Name"] = value

    @property
    def report_7_name(self):
        """Get report_7_name

        Returns:
            str: the value of `report_7_name` or None if not set
        """
        return self._data["Report 7 Name"]

    @report_7_name.setter
    def report_7_name(self, value=None):
        """  Corresponds to IDD Field `report_7_name`

        Args:
            value (str): value for IDD Field `report_7_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_7_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_7_name`'.format(value))

        self._data["Report 7 Name"] = value

    @property
    def report_8_name(self):
        """Get report_8_name

        Returns:
            str: the value of `report_8_name` or None if not set
        """
        return self._data["Report 8 Name"]

    @report_8_name.setter
    def report_8_name(self, value=None):
        """  Corresponds to IDD Field `report_8_name`

        Args:
            value (str): value for IDD Field `report_8_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_8_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_8_name`'.format(value))

        self._data["Report 8 Name"] = value

    @property
    def report_9_name(self):
        """Get report_9_name

        Returns:
            str: the value of `report_9_name` or None if not set
        """
        return self._data["Report 9 Name"]

    @report_9_name.setter
    def report_9_name(self, value=None):
        """  Corresponds to IDD Field `report_9_name`

        Args:
            value (str): value for IDD Field `report_9_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_9_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_9_name`'.format(value))

        self._data["Report 9 Name"] = value

    @property
    def report_10_name(self):
        """Get report_10_name

        Returns:
            str: the value of `report_10_name` or None if not set
        """
        return self._data["Report 10 Name"]

    @report_10_name.setter
    def report_10_name(self, value=None):
        """  Corresponds to IDD Field `report_10_name`

        Args:
            value (str): value for IDD Field `report_10_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_10_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_10_name`'.format(value))

        self._data["Report 10 Name"] = value

    @property
    def report_11_name(self):
        """Get report_11_name

        Returns:
            str: the value of `report_11_name` or None if not set
        """
        return self._data["Report 11 Name"]

    @report_11_name.setter
    def report_11_name(self, value=None):
        """  Corresponds to IDD Field `report_11_name`

        Args:
            value (str): value for IDD Field `report_11_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_11_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_11_name`'.format(value))

        self._data["Report 11 Name"] = value

    @property
    def report_12_name(self):
        """Get report_12_name

        Returns:
            str: the value of `report_12_name` or None if not set
        """
        return self._data["Report 12 Name"]

    @report_12_name.setter
    def report_12_name(self, value=None):
        """  Corresponds to IDD Field `report_12_name`

        Args:
            value (str): value for IDD Field `report_12_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_12_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_12_name`'.format(value))

        self._data["Report 12 Name"] = value

    @property
    def report_13_name(self):
        """Get report_13_name

        Returns:
            str: the value of `report_13_name` or None if not set
        """
        return self._data["Report 13 Name"]

    @report_13_name.setter
    def report_13_name(self, value=None):
        """  Corresponds to IDD Field `report_13_name`

        Args:
            value (str): value for IDD Field `report_13_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_13_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_13_name`'.format(value))

        self._data["Report 13 Name"] = value

    @property
    def report_14_name(self):
        """Get report_14_name

        Returns:
            str: the value of `report_14_name` or None if not set
        """
        return self._data["Report 14 Name"]

    @report_14_name.setter
    def report_14_name(self, value=None):
        """  Corresponds to IDD Field `report_14_name`

        Args:
            value (str): value for IDD Field `report_14_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_14_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_14_name`'.format(value))

        self._data["Report 14 Name"] = value

    @property
    def report_15_name(self):
        """Get report_15_name

        Returns:
            str: the value of `report_15_name` or None if not set
        """
        return self._data["Report 15 Name"]

    @report_15_name.setter
    def report_15_name(self, value=None):
        """  Corresponds to IDD Field `report_15_name`

        Args:
            value (str): value for IDD Field `report_15_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_15_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_15_name`'.format(value))

        self._data["Report 15 Name"] = value

    @property
    def report_16_name(self):
        """Get report_16_name

        Returns:
            str: the value of `report_16_name` or None if not set
        """
        return self._data["Report 16 Name"]

    @report_16_name.setter
    def report_16_name(self, value=None):
        """  Corresponds to IDD Field `report_16_name`

        Args:
            value (str): value for IDD Field `report_16_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_16_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_16_name`'.format(value))

        self._data["Report 16 Name"] = value

    @property
    def report_17_name(self):
        """Get report_17_name

        Returns:
            str: the value of `report_17_name` or None if not set
        """
        return self._data["Report 17 Name"]

    @report_17_name.setter
    def report_17_name(self, value=None):
        """  Corresponds to IDD Field `report_17_name`

        Args:
            value (str): value for IDD Field `report_17_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_17_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_17_name`'.format(value))

        self._data["Report 17 Name"] = value

    @property
    def report_18_name(self):
        """Get report_18_name

        Returns:
            str: the value of `report_18_name` or None if not set
        """
        return self._data["Report 18 Name"]

    @report_18_name.setter
    def report_18_name(self, value=None):
        """  Corresponds to IDD Field `report_18_name`

        Args:
            value (str): value for IDD Field `report_18_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_18_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_18_name`'.format(value))

        self._data["Report 18 Name"] = value

    @property
    def report_19_name(self):
        """Get report_19_name

        Returns:
            str: the value of `report_19_name` or None if not set
        """
        return self._data["Report 19 Name"]

    @report_19_name.setter
    def report_19_name(self, value=None):
        """  Corresponds to IDD Field `report_19_name`

        Args:
            value (str): value for IDD Field `report_19_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_19_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_19_name`'.format(value))

        self._data["Report 19 Name"] = value

    @property
    def report_20_name(self):
        """Get report_20_name

        Returns:
            str: the value of `report_20_name` or None if not set
        """
        return self._data["Report 20 Name"]

    @report_20_name.setter
    def report_20_name(self, value=None):
        """  Corresponds to IDD Field `report_20_name`

        Args:
            value (str): value for IDD Field `report_20_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_20_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_20_name`'.format(value))

        self._data["Report 20 Name"] = value

    @property
    def report_21_name(self):
        """Get report_21_name

        Returns:
            str: the value of `report_21_name` or None if not set
        """
        return self._data["Report 21 Name"]

    @report_21_name.setter
    def report_21_name(self, value=None):
        """  Corresponds to IDD Field `report_21_name`

        Args:
            value (str): value for IDD Field `report_21_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_21_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_21_name`'.format(value))

        self._data["Report 21 Name"] = value

    @property
    def report_22_name(self):
        """Get report_22_name

        Returns:
            str: the value of `report_22_name` or None if not set
        """
        return self._data["Report 22 Name"]

    @report_22_name.setter
    def report_22_name(self, value=None):
        """  Corresponds to IDD Field `report_22_name`

        Args:
            value (str): value for IDD Field `report_22_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_22_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_22_name`'.format(value))

        self._data["Report 22 Name"] = value

    @property
    def report_23_name(self):
        """Get report_23_name

        Returns:
            str: the value of `report_23_name` or None if not set
        """
        return self._data["Report 23 Name"]

    @report_23_name.setter
    def report_23_name(self, value=None):
        """  Corresponds to IDD Field `report_23_name`

        Args:
            value (str): value for IDD Field `report_23_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_23_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_23_name`'.format(value))

        self._data["Report 23 Name"] = value

    @property
    def report_24_name(self):
        """Get report_24_name

        Returns:
            str: the value of `report_24_name` or None if not set
        """
        return self._data["Report 24 Name"]

    @report_24_name.setter
    def report_24_name(self, value=None):
        """  Corresponds to IDD Field `report_24_name`

        Args:
            value (str): value for IDD Field `report_24_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_24_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_24_name`'.format(value))

        self._data["Report 24 Name"] = value

    @property
    def report_25_name(self):
        """Get report_25_name

        Returns:
            str: the value of `report_25_name` or None if not set
        """
        return self._data["Report 25 Name"]

    @report_25_name.setter
    def report_25_name(self, value=None):
        """  Corresponds to IDD Field `report_25_name`

        Args:
            value (str): value for IDD Field `report_25_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_25_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_25_name`'.format(value))

        self._data["Report 25 Name"] = value

    @property
    def report_26_name(self):
        """Get report_26_name

        Returns:
            str: the value of `report_26_name` or None if not set
        """
        return self._data["Report 26 Name"]

    @report_26_name.setter
    def report_26_name(self, value=None):
        """  Corresponds to IDD Field `report_26_name`

        Args:
            value (str): value for IDD Field `report_26_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_26_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_26_name`'.format(value))

        self._data["Report 26 Name"] = value

    @property
    def report_27_name(self):
        """Get report_27_name

        Returns:
            str: the value of `report_27_name` or None if not set
        """
        return self._data["Report 27 Name"]

    @report_27_name.setter
    def report_27_name(self, value=None):
        """  Corresponds to IDD Field `report_27_name`

        Args:
            value (str): value for IDD Field `report_27_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_27_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_27_name`'.format(value))

        self._data["Report 27 Name"] = value

    @property
    def report_28_name(self):
        """Get report_28_name

        Returns:
            str: the value of `report_28_name` or None if not set
        """
        return self._data["Report 28 Name"]

    @report_28_name.setter
    def report_28_name(self, value=None):
        """  Corresponds to IDD Field `report_28_name`

        Args:
            value (str): value for IDD Field `report_28_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_28_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_28_name`'.format(value))

        self._data["Report 28 Name"] = value

    @property
    def report_29_name(self):
        """Get report_29_name

        Returns:
            str: the value of `report_29_name` or None if not set
        """
        return self._data["Report 29 Name"]

    @report_29_name.setter
    def report_29_name(self, value=None):
        """  Corresponds to IDD Field `report_29_name`

        Args:
            value (str): value for IDD Field `report_29_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_29_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_29_name`'.format(value))

        self._data["Report 29 Name"] = value

    @property
    def report_30_name(self):
        """Get report_30_name

        Returns:
            str: the value of `report_30_name` or None if not set
        """
        return self._data["Report 30 Name"]

    @report_30_name.setter
    def report_30_name(self, value=None):
        """  Corresponds to IDD Field `report_30_name`

        Args:
            value (str): value for IDD Field `report_30_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_30_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_30_name`'.format(value))

        self._data["Report 30 Name"] = value

    @property
    def report_31_name(self):
        """Get report_31_name

        Returns:
            str: the value of `report_31_name` or None if not set
        """
        return self._data["Report 31 Name"]

    @report_31_name.setter
    def report_31_name(self, value=None):
        """  Corresponds to IDD Field `report_31_name`

        Args:
            value (str): value for IDD Field `report_31_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_31_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_31_name`'.format(value))

        self._data["Report 31 Name"] = value

    @property
    def report_32_name(self):
        """Get report_32_name

        Returns:
            str: the value of `report_32_name` or None if not set
        """
        return self._data["Report 32 Name"]

    @report_32_name.setter
    def report_32_name(self, value=None):
        """  Corresponds to IDD Field `report_32_name`

        Args:
            value (str): value for IDD Field `report_32_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_32_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_32_name`'.format(value))

        self._data["Report 32 Name"] = value

    @property
    def report_33_name(self):
        """Get report_33_name

        Returns:
            str: the value of `report_33_name` or None if not set
        """
        return self._data["Report 33 Name"]

    @report_33_name.setter
    def report_33_name(self, value=None):
        """  Corresponds to IDD Field `report_33_name`

        Args:
            value (str): value for IDD Field `report_33_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_33_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_33_name`'.format(value))

        self._data["Report 33 Name"] = value

    @property
    def report_34_name(self):
        """Get report_34_name

        Returns:
            str: the value of `report_34_name` or None if not set
        """
        return self._data["Report 34 Name"]

    @report_34_name.setter
    def report_34_name(self, value=None):
        """  Corresponds to IDD Field `report_34_name`

        Args:
            value (str): value for IDD Field `report_34_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_34_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_34_name`'.format(value))

        self._data["Report 34 Name"] = value

    @property
    def report_35_name(self):
        """Get report_35_name

        Returns:
            str: the value of `report_35_name` or None if not set
        """
        return self._data["Report 35 Name"]

    @report_35_name.setter
    def report_35_name(self, value=None):
        """  Corresponds to IDD Field `report_35_name`

        Args:
            value (str): value for IDD Field `report_35_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_35_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_35_name`'.format(value))

        self._data["Report 35 Name"] = value

    @property
    def report_36_name(self):
        """Get report_36_name

        Returns:
            str: the value of `report_36_name` or None if not set
        """
        return self._data["Report 36 Name"]

    @report_36_name.setter
    def report_36_name(self, value=None):
        """  Corresponds to IDD Field `report_36_name`

        Args:
            value (str): value for IDD Field `report_36_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_36_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_36_name`'.format(value))

        self._data["Report 36 Name"] = value

    @property
    def report_37_name(self):
        """Get report_37_name

        Returns:
            str: the value of `report_37_name` or None if not set
        """
        return self._data["Report 37 Name"]

    @report_37_name.setter
    def report_37_name(self, value=None):
        """  Corresponds to IDD Field `report_37_name`

        Args:
            value (str): value for IDD Field `report_37_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_37_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_37_name`'.format(value))

        self._data["Report 37 Name"] = value

    @property
    def report_38_name(self):
        """Get report_38_name

        Returns:
            str: the value of `report_38_name` or None if not set
        """
        return self._data["Report 38 Name"]

    @report_38_name.setter
    def report_38_name(self, value=None):
        """  Corresponds to IDD Field `report_38_name`

        Args:
            value (str): value for IDD Field `report_38_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_38_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_38_name`'.format(value))

        self._data["Report 38 Name"] = value

    @property
    def report_39_name(self):
        """Get report_39_name

        Returns:
            str: the value of `report_39_name` or None if not set
        """
        return self._data["Report 39 Name"]

    @report_39_name.setter
    def report_39_name(self, value=None):
        """  Corresponds to IDD Field `report_39_name`

        Args:
            value (str): value for IDD Field `report_39_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_39_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_39_name`'.format(value))

        self._data["Report 39 Name"] = value

    @property
    def report_40_name(self):
        """Get report_40_name

        Returns:
            str: the value of `report_40_name` or None if not set
        """
        return self._data["Report 40 Name"]

    @report_40_name.setter
    def report_40_name(self, value=None):
        """  Corresponds to IDD Field `report_40_name`

        Args:
            value (str): value for IDD Field `report_40_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_40_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_40_name`'.format(value))

        self._data["Report 40 Name"] = value

    @property
    def report_41_name(self):
        """Get report_41_name

        Returns:
            str: the value of `report_41_name` or None if not set
        """
        return self._data["Report 41 Name"]

    @report_41_name.setter
    def report_41_name(self, value=None):
        """  Corresponds to IDD Field `report_41_name`

        Args:
            value (str): value for IDD Field `report_41_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_41_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_41_name`'.format(value))

        self._data["Report 41 Name"] = value

    @property
    def report_42_name(self):
        """Get report_42_name

        Returns:
            str: the value of `report_42_name` or None if not set
        """
        return self._data["Report 42 Name"]

    @report_42_name.setter
    def report_42_name(self, value=None):
        """  Corresponds to IDD Field `report_42_name`

        Args:
            value (str): value for IDD Field `report_42_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_42_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_42_name`'.format(value))

        self._data["Report 42 Name"] = value

    @property
    def report_43_name(self):
        """Get report_43_name

        Returns:
            str: the value of `report_43_name` or None if not set
        """
        return self._data["Report 43 Name"]

    @report_43_name.setter
    def report_43_name(self, value=None):
        """  Corresponds to IDD Field `report_43_name`

        Args:
            value (str): value for IDD Field `report_43_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_43_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_43_name`'.format(value))

        self._data["Report 43 Name"] = value

    @property
    def report_44_name(self):
        """Get report_44_name

        Returns:
            str: the value of `report_44_name` or None if not set
        """
        return self._data["Report 44 Name"]

    @report_44_name.setter
    def report_44_name(self, value=None):
        """  Corresponds to IDD Field `report_44_name`

        Args:
            value (str): value for IDD Field `report_44_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_44_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_44_name`'.format(value))

        self._data["Report 44 Name"] = value

    @property
    def report_45_name(self):
        """Get report_45_name

        Returns:
            str: the value of `report_45_name` or None if not set
        """
        return self._data["Report 45 Name"]

    @report_45_name.setter
    def report_45_name(self, value=None):
        """  Corresponds to IDD Field `report_45_name`

        Args:
            value (str): value for IDD Field `report_45_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_45_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_45_name`'.format(value))

        self._data["Report 45 Name"] = value

    @property
    def report_46_name(self):
        """Get report_46_name

        Returns:
            str: the value of `report_46_name` or None if not set
        """
        return self._data["Report 46 Name"]

    @report_46_name.setter
    def report_46_name(self, value=None):
        """  Corresponds to IDD Field `report_46_name`

        Args:
            value (str): value for IDD Field `report_46_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_46_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_46_name`'.format(value))

        self._data["Report 46 Name"] = value

    @property
    def report_47_name(self):
        """Get report_47_name

        Returns:
            str: the value of `report_47_name` or None if not set
        """
        return self._data["Report 47 Name"]

    @report_47_name.setter
    def report_47_name(self, value=None):
        """  Corresponds to IDD Field `report_47_name`

        Args:
            value (str): value for IDD Field `report_47_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_47_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_47_name`'.format(value))

        self._data["Report 47 Name"] = value

    @property
    def report_48_name(self):
        """Get report_48_name

        Returns:
            str: the value of `report_48_name` or None if not set
        """
        return self._data["Report 48 Name"]

    @report_48_name.setter
    def report_48_name(self, value=None):
        """  Corresponds to IDD Field `report_48_name`

        Args:
            value (str): value for IDD Field `report_48_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_48_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_48_name`'.format(value))

        self._data["Report 48 Name"] = value

    @property
    def report_49_name(self):
        """Get report_49_name

        Returns:
            str: the value of `report_49_name` or None if not set
        """
        return self._data["Report 49 Name"]

    @report_49_name.setter
    def report_49_name(self, value=None):
        """  Corresponds to IDD Field `report_49_name`

        Args:
            value (str): value for IDD Field `report_49_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_49_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_49_name`'.format(value))

        self._data["Report 49 Name"] = value

    @property
    def report_50_name(self):
        """Get report_50_name

        Returns:
            str: the value of `report_50_name` or None if not set
        """
        return self._data["Report 50 Name"]

    @report_50_name.setter
    def report_50_name(self, value=None):
        """  Corresponds to IDD Field `report_50_name`

        Args:
            value (str): value for IDD Field `report_50_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_50_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_50_name`'.format(value))

        self._data["Report 50 Name"] = value

    @property
    def report_51_name(self):
        """Get report_51_name

        Returns:
            str: the value of `report_51_name` or None if not set
        """
        return self._data["Report 51 Name"]

    @report_51_name.setter
    def report_51_name(self, value=None):
        """  Corresponds to IDD Field `report_51_name`

        Args:
            value (str): value for IDD Field `report_51_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_51_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_51_name`'.format(value))

        self._data["Report 51 Name"] = value

    @property
    def report_52_name(self):
        """Get report_52_name

        Returns:
            str: the value of `report_52_name` or None if not set
        """
        return self._data["Report 52 Name"]

    @report_52_name.setter
    def report_52_name(self, value=None):
        """  Corresponds to IDD Field `report_52_name`

        Args:
            value (str): value for IDD Field `report_52_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_52_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_52_name`'.format(value))

        self._data["Report 52 Name"] = value

    @property
    def report_53_name(self):
        """Get report_53_name

        Returns:
            str: the value of `report_53_name` or None if not set
        """
        return self._data["Report 53 Name"]

    @report_53_name.setter
    def report_53_name(self, value=None):
        """  Corresponds to IDD Field `report_53_name`

        Args:
            value (str): value for IDD Field `report_53_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_53_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_53_name`'.format(value))

        self._data["Report 53 Name"] = value

    @property
    def report_54_name(self):
        """Get report_54_name

        Returns:
            str: the value of `report_54_name` or None if not set
        """
        return self._data["Report 54 Name"]

    @report_54_name.setter
    def report_54_name(self, value=None):
        """  Corresponds to IDD Field `report_54_name`

        Args:
            value (str): value for IDD Field `report_54_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_54_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_54_name`'.format(value))

        self._data["Report 54 Name"] = value

    @property
    def report_55_name(self):
        """Get report_55_name

        Returns:
            str: the value of `report_55_name` or None if not set
        """
        return self._data["Report 55 Name"]

    @report_55_name.setter
    def report_55_name(self, value=None):
        """  Corresponds to IDD Field `report_55_name`

        Args:
            value (str): value for IDD Field `report_55_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_55_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_55_name`'.format(value))

        self._data["Report 55 Name"] = value

    @property
    def report_56_name(self):
        """Get report_56_name

        Returns:
            str: the value of `report_56_name` or None if not set
        """
        return self._data["Report 56 Name"]

    @report_56_name.setter
    def report_56_name(self, value=None):
        """  Corresponds to IDD Field `report_56_name`

        Args:
            value (str): value for IDD Field `report_56_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_56_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_56_name`'.format(value))

        self._data["Report 56 Name"] = value

    @property
    def report_57_name(self):
        """Get report_57_name

        Returns:
            str: the value of `report_57_name` or None if not set
        """
        return self._data["Report 57 Name"]

    @report_57_name.setter
    def report_57_name(self, value=None):
        """  Corresponds to IDD Field `report_57_name`

        Args:
            value (str): value for IDD Field `report_57_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_57_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_57_name`'.format(value))

        self._data["Report 57 Name"] = value

    @property
    def report_58_name(self):
        """Get report_58_name

        Returns:
            str: the value of `report_58_name` or None if not set
        """
        return self._data["Report 58 Name"]

    @report_58_name.setter
    def report_58_name(self, value=None):
        """  Corresponds to IDD Field `report_58_name`

        Args:
            value (str): value for IDD Field `report_58_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_58_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_58_name`'.format(value))

        self._data["Report 58 Name"] = value

    @property
    def report_59_name(self):
        """Get report_59_name

        Returns:
            str: the value of `report_59_name` or None if not set
        """
        return self._data["Report 59 Name"]

    @report_59_name.setter
    def report_59_name(self, value=None):
        """  Corresponds to IDD Field `report_59_name`

        Args:
            value (str): value for IDD Field `report_59_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_59_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_59_name`'.format(value))

        self._data["Report 59 Name"] = value

    @property
    def report_60_name(self):
        """Get report_60_name

        Returns:
            str: the value of `report_60_name` or None if not set
        """
        return self._data["Report 60 Name"]

    @report_60_name.setter
    def report_60_name(self, value=None):
        """  Corresponds to IDD Field `report_60_name`

        Args:
            value (str): value for IDD Field `report_60_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_60_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_60_name`'.format(value))

        self._data["Report 60 Name"] = value

    @property
    def report_61_name(self):
        """Get report_61_name

        Returns:
            str: the value of `report_61_name` or None if not set
        """
        return self._data["Report 61 Name"]

    @report_61_name.setter
    def report_61_name(self, value=None):
        """  Corresponds to IDD Field `report_61_name`

        Args:
            value (str): value for IDD Field `report_61_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_61_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_61_name`'.format(value))

        self._data["Report 61 Name"] = value

    @property
    def report_62_name(self):
        """Get report_62_name

        Returns:
            str: the value of `report_62_name` or None if not set
        """
        return self._data["Report 62 Name"]

    @report_62_name.setter
    def report_62_name(self, value=None):
        """  Corresponds to IDD Field `report_62_name`

        Args:
            value (str): value for IDD Field `report_62_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_62_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_62_name`'.format(value))

        self._data["Report 62 Name"] = value

    @property
    def report_63_name(self):
        """Get report_63_name

        Returns:
            str: the value of `report_63_name` or None if not set
        """
        return self._data["Report 63 Name"]

    @report_63_name.setter
    def report_63_name(self, value=None):
        """  Corresponds to IDD Field `report_63_name`

        Args:
            value (str): value for IDD Field `report_63_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_63_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_63_name`'.format(value))

        self._data["Report 63 Name"] = value

    @property
    def report_64_name(self):
        """Get report_64_name

        Returns:
            str: the value of `report_64_name` or None if not set
        """
        return self._data["Report 64 Name"]

    @report_64_name.setter
    def report_64_name(self, value=None):
        """  Corresponds to IDD Field `report_64_name`

        Args:
            value (str): value for IDD Field `report_64_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_64_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_64_name`'.format(value))

        self._data["Report 64 Name"] = value

    @property
    def report_65_name(self):
        """Get report_65_name

        Returns:
            str: the value of `report_65_name` or None if not set
        """
        return self._data["Report 65 Name"]

    @report_65_name.setter
    def report_65_name(self, value=None):
        """  Corresponds to IDD Field `report_65_name`

        Args:
            value (str): value for IDD Field `report_65_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_65_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_65_name`'.format(value))

        self._data["Report 65 Name"] = value

    @property
    def report_66_name(self):
        """Get report_66_name

        Returns:
            str: the value of `report_66_name` or None if not set
        """
        return self._data["Report 66 Name"]

    @report_66_name.setter
    def report_66_name(self, value=None):
        """  Corresponds to IDD Field `report_66_name`

        Args:
            value (str): value for IDD Field `report_66_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_66_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_66_name`'.format(value))

        self._data["Report 66 Name"] = value

    @property
    def report_67_name(self):
        """Get report_67_name

        Returns:
            str: the value of `report_67_name` or None if not set
        """
        return self._data["Report 67 Name"]

    @report_67_name.setter
    def report_67_name(self, value=None):
        """  Corresponds to IDD Field `report_67_name`

        Args:
            value (str): value for IDD Field `report_67_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_67_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_67_name`'.format(value))

        self._data["Report 67 Name"] = value

    @property
    def report_68_name(self):
        """Get report_68_name

        Returns:
            str: the value of `report_68_name` or None if not set
        """
        return self._data["Report 68 Name"]

    @report_68_name.setter
    def report_68_name(self, value=None):
        """  Corresponds to IDD Field `report_68_name`

        Args:
            value (str): value for IDD Field `report_68_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_68_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_68_name`'.format(value))

        self._data["Report 68 Name"] = value

    @property
    def report_69_name(self):
        """Get report_69_name

        Returns:
            str: the value of `report_69_name` or None if not set
        """
        return self._data["Report 69 Name"]

    @report_69_name.setter
    def report_69_name(self, value=None):
        """  Corresponds to IDD Field `report_69_name`

        Args:
            value (str): value for IDD Field `report_69_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_69_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_69_name`'.format(value))

        self._data["Report 69 Name"] = value

    @property
    def report_70_name(self):
        """Get report_70_name

        Returns:
            str: the value of `report_70_name` or None if not set
        """
        return self._data["Report 70 Name"]

    @report_70_name.setter
    def report_70_name(self, value=None):
        """  Corresponds to IDD Field `report_70_name`

        Args:
            value (str): value for IDD Field `report_70_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_70_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_70_name`'.format(value))

        self._data["Report 70 Name"] = value

    @property
    def report_71_name(self):
        """Get report_71_name

        Returns:
            str: the value of `report_71_name` or None if not set
        """
        return self._data["Report 71 Name"]

    @report_71_name.setter
    def report_71_name(self, value=None):
        """  Corresponds to IDD Field `report_71_name`

        Args:
            value (str): value for IDD Field `report_71_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_71_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_71_name`'.format(value))

        self._data["Report 71 Name"] = value

    @property
    def report_72_name(self):
        """Get report_72_name

        Returns:
            str: the value of `report_72_name` or None if not set
        """
        return self._data["Report 72 Name"]

    @report_72_name.setter
    def report_72_name(self, value=None):
        """  Corresponds to IDD Field `report_72_name`

        Args:
            value (str): value for IDD Field `report_72_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_72_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_72_name`'.format(value))

        self._data["Report 72 Name"] = value

    @property
    def report_73_name(self):
        """Get report_73_name

        Returns:
            str: the value of `report_73_name` or None if not set
        """
        return self._data["Report 73 Name"]

    @report_73_name.setter
    def report_73_name(self, value=None):
        """  Corresponds to IDD Field `report_73_name`

        Args:
            value (str): value for IDD Field `report_73_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_73_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_73_name`'.format(value))

        self._data["Report 73 Name"] = value

    @property
    def report_74_name(self):
        """Get report_74_name

        Returns:
            str: the value of `report_74_name` or None if not set
        """
        return self._data["Report 74 Name"]

    @report_74_name.setter
    def report_74_name(self, value=None):
        """  Corresponds to IDD Field `report_74_name`

        Args:
            value (str): value for IDD Field `report_74_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_74_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_74_name`'.format(value))

        self._data["Report 74 Name"] = value

    @property
    def report_75_name(self):
        """Get report_75_name

        Returns:
            str: the value of `report_75_name` or None if not set
        """
        return self._data["Report 75 Name"]

    @report_75_name.setter
    def report_75_name(self, value=None):
        """  Corresponds to IDD Field `report_75_name`

        Args:
            value (str): value for IDD Field `report_75_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_75_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_75_name`'.format(value))

        self._data["Report 75 Name"] = value

    @property
    def report_76_name(self):
        """Get report_76_name

        Returns:
            str: the value of `report_76_name` or None if not set
        """
        return self._data["Report 76 Name"]

    @report_76_name.setter
    def report_76_name(self, value=None):
        """  Corresponds to IDD Field `report_76_name`

        Args:
            value (str): value for IDD Field `report_76_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_76_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_76_name`'.format(value))

        self._data["Report 76 Name"] = value

    @property
    def report_77_name(self):
        """Get report_77_name

        Returns:
            str: the value of `report_77_name` or None if not set
        """
        return self._data["Report 77 Name"]

    @report_77_name.setter
    def report_77_name(self, value=None):
        """  Corresponds to IDD Field `report_77_name`

        Args:
            value (str): value for IDD Field `report_77_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_77_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_77_name`'.format(value))

        self._data["Report 77 Name"] = value

    @property
    def report_78_name(self):
        """Get report_78_name

        Returns:
            str: the value of `report_78_name` or None if not set
        """
        return self._data["Report 78 Name"]

    @report_78_name.setter
    def report_78_name(self, value=None):
        """  Corresponds to IDD Field `report_78_name`

        Args:
            value (str): value for IDD Field `report_78_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_78_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_78_name`'.format(value))

        self._data["Report 78 Name"] = value

    @property
    def report_79_name(self):
        """Get report_79_name

        Returns:
            str: the value of `report_79_name` or None if not set
        """
        return self._data["Report 79 Name"]

    @report_79_name.setter
    def report_79_name(self, value=None):
        """  Corresponds to IDD Field `report_79_name`

        Args:
            value (str): value for IDD Field `report_79_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_79_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_79_name`'.format(value))

        self._data["Report 79 Name"] = value

    @property
    def report_80_name(self):
        """Get report_80_name

        Returns:
            str: the value of `report_80_name` or None if not set
        """
        return self._data["Report 80 Name"]

    @report_80_name.setter
    def report_80_name(self, value=None):
        """  Corresponds to IDD Field `report_80_name`

        Args:
            value (str): value for IDD Field `report_80_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_80_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_80_name`'.format(value))

        self._data["Report 80 Name"] = value

    @property
    def report_81_name(self):
        """Get report_81_name

        Returns:
            str: the value of `report_81_name` or None if not set
        """
        return self._data["Report 81 Name"]

    @report_81_name.setter
    def report_81_name(self, value=None):
        """  Corresponds to IDD Field `report_81_name`

        Args:
            value (str): value for IDD Field `report_81_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_81_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_81_name`'.format(value))

        self._data["Report 81 Name"] = value

    @property
    def report_82_name(self):
        """Get report_82_name

        Returns:
            str: the value of `report_82_name` or None if not set
        """
        return self._data["Report 82 Name"]

    @report_82_name.setter
    def report_82_name(self, value=None):
        """  Corresponds to IDD Field `report_82_name`

        Args:
            value (str): value for IDD Field `report_82_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_82_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_82_name`'.format(value))

        self._data["Report 82 Name"] = value

    @property
    def report_83_name(self):
        """Get report_83_name

        Returns:
            str: the value of `report_83_name` or None if not set
        """
        return self._data["Report 83 Name"]

    @report_83_name.setter
    def report_83_name(self, value=None):
        """  Corresponds to IDD Field `report_83_name`

        Args:
            value (str): value for IDD Field `report_83_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_83_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_83_name`'.format(value))

        self._data["Report 83 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.report_1_name))
        out.append(self._to_str(self.report_2_name))
        out.append(self._to_str(self.report_3_name))
        out.append(self._to_str(self.report_4_name))
        out.append(self._to_str(self.report_5_name))
        out.append(self._to_str(self.report_6_name))
        out.append(self._to_str(self.report_7_name))
        out.append(self._to_str(self.report_8_name))
        out.append(self._to_str(self.report_9_name))
        out.append(self._to_str(self.report_10_name))
        out.append(self._to_str(self.report_11_name))
        out.append(self._to_str(self.report_12_name))
        out.append(self._to_str(self.report_13_name))
        out.append(self._to_str(self.report_14_name))
        out.append(self._to_str(self.report_15_name))
        out.append(self._to_str(self.report_16_name))
        out.append(self._to_str(self.report_17_name))
        out.append(self._to_str(self.report_18_name))
        out.append(self._to_str(self.report_19_name))
        out.append(self._to_str(self.report_20_name))
        out.append(self._to_str(self.report_21_name))
        out.append(self._to_str(self.report_22_name))
        out.append(self._to_str(self.report_23_name))
        out.append(self._to_str(self.report_24_name))
        out.append(self._to_str(self.report_25_name))
        out.append(self._to_str(self.report_26_name))
        out.append(self._to_str(self.report_27_name))
        out.append(self._to_str(self.report_28_name))
        out.append(self._to_str(self.report_29_name))
        out.append(self._to_str(self.report_30_name))
        out.append(self._to_str(self.report_31_name))
        out.append(self._to_str(self.report_32_name))
        out.append(self._to_str(self.report_33_name))
        out.append(self._to_str(self.report_34_name))
        out.append(self._to_str(self.report_35_name))
        out.append(self._to_str(self.report_36_name))
        out.append(self._to_str(self.report_37_name))
        out.append(self._to_str(self.report_38_name))
        out.append(self._to_str(self.report_39_name))
        out.append(self._to_str(self.report_40_name))
        out.append(self._to_str(self.report_41_name))
        out.append(self._to_str(self.report_42_name))
        out.append(self._to_str(self.report_43_name))
        out.append(self._to_str(self.report_44_name))
        out.append(self._to_str(self.report_45_name))
        out.append(self._to_str(self.report_46_name))
        out.append(self._to_str(self.report_47_name))
        out.append(self._to_str(self.report_48_name))
        out.append(self._to_str(self.report_49_name))
        out.append(self._to_str(self.report_50_name))
        out.append(self._to_str(self.report_51_name))
        out.append(self._to_str(self.report_52_name))
        out.append(self._to_str(self.report_53_name))
        out.append(self._to_str(self.report_54_name))
        out.append(self._to_str(self.report_55_name))
        out.append(self._to_str(self.report_56_name))
        out.append(self._to_str(self.report_57_name))
        out.append(self._to_str(self.report_58_name))
        out.append(self._to_str(self.report_59_name))
        out.append(self._to_str(self.report_60_name))
        out.append(self._to_str(self.report_61_name))
        out.append(self._to_str(self.report_62_name))
        out.append(self._to_str(self.report_63_name))
        out.append(self._to_str(self.report_64_name))
        out.append(self._to_str(self.report_65_name))
        out.append(self._to_str(self.report_66_name))
        out.append(self._to_str(self.report_67_name))
        out.append(self._to_str(self.report_68_name))
        out.append(self._to_str(self.report_69_name))
        out.append(self._to_str(self.report_70_name))
        out.append(self._to_str(self.report_71_name))
        out.append(self._to_str(self.report_72_name))
        out.append(self._to_str(self.report_73_name))
        out.append(self._to_str(self.report_74_name))
        out.append(self._to_str(self.report_75_name))
        out.append(self._to_str(self.report_76_name))
        out.append(self._to_str(self.report_77_name))
        out.append(self._to_str(self.report_78_name))
        out.append(self._to_str(self.report_79_name))
        out.append(self._to_str(self.report_80_name))
        out.append(self._to_str(self.report_81_name))
        out.append(self._to_str(self.report_82_name))
        out.append(self._to_str(self.report_83_name))
        return ",".join(out)

class OutputTableTimeBins(object):
    """ Corresponds to IDD object `Output:Table:TimeBins`
        Produces a bin report in the table output file which shows the amount of time in hours
        that occurs in different bins for a single specific output variable or meter.
        Two different types of binning are reported: by month and by hour of the day.
    """
    internal_name = "Output:Table:TimeBins"
    field_count = 7

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Table:TimeBins`
        """
        self._data = OrderedDict()
        self._data["Key Value"] = None
        self._data["Variable Name"] = None
        self._data["Interval Start"] = None
        self._data["Interval Size"] = None
        self._data["Interval Count"] = None
        self._data["Schedule Name"] = None
        self._data["Variable Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_value = None
        else:
            self.key_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_name = None
        else:
            self.variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interval_start = None
        else:
            self.interval_start = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interval_size = None
        else:
            self.interval_size = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interval_count = None
        else:
            self.interval_count = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_type = None
        else:
            self.variable_type = vals[i]
        i += 1

    @property
    def key_value(self):
        """Get key_value

        Returns:
            str: the value of `key_value` or None if not set
        """
        return self._data["Key Value"]

    @key_value.setter
    def key_value(self, value="*"):
        """  Corresponds to IDD Field `key_value`
        use '*' (without quotes) to apply this variable to all keys

        Args:
            value (str): value for IDD Field `key_value`
                Default value: *
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_value`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_value`')

        self._data["Key Value"] = value

    @property
    def variable_name(self):
        """Get variable_name

        Returns:
            str: the value of `variable_name` or None if not set
        """
        return self._data["Variable Name"]

    @variable_name.setter
    def variable_name(self, value=None):
        """  Corresponds to IDD Field `variable_name`

        Args:
            value (str): value for IDD Field `variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_name`')

        self._data["Variable Name"] = value

    @property
    def interval_start(self):
        """Get interval_start

        Returns:
            float: the value of `interval_start` or None if not set
        """
        return self._data["Interval Start"]

    @interval_start.setter
    def interval_start(self, value=None):
        """  Corresponds to IDD Field `interval_start`
        The lowest value for the intervals being binned into.

        Args:
            value (float): value for IDD Field `interval_start`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `interval_start`'.format(value))

        self._data["Interval Start"] = value

    @property
    def interval_size(self):
        """Get interval_size

        Returns:
            float: the value of `interval_size` or None if not set
        """
        return self._data["Interval Size"]

    @interval_size.setter
    def interval_size(self, value=None):
        """  Corresponds to IDD Field `interval_size`
        The size of the bins starting with Interval start.

        Args:
            value (float): value for IDD Field `interval_size`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `interval_size`'.format(value))

        self._data["Interval Size"] = value

    @property
    def interval_count(self):
        """Get interval_count

        Returns:
            int: the value of `interval_count` or None if not set
        """
        return self._data["Interval Count"]

    @interval_count.setter
    def interval_count(self, value=None):
        """  Corresponds to IDD Field `interval_count`
        The number of bins used. The number of hours below the start of the
        Lowest bin and above the value of the last bin are also shown.

        Args:
            value (int): value for IDD Field `interval_count`
                value >= 1
                value <= 20
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `interval_count`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `interval_count`')
            if value > 20:
                raise ValueError('value need to be smaller 20 '
                                 'for field `interval_count`')

        self._data["Interval Count"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `schedule_name`
        Optional schedule name. Binning is performed for non-zero hours.
        Binning always performed if left blank.

        Args:
            value (str): value for IDD Field `schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')

        self._data["Schedule Name"] = value

    @property
    def variable_type(self):
        """Get variable_type

        Returns:
            str: the value of `variable_type` or None if not set
        """
        return self._data["Variable Type"]

    @variable_type.setter
    def variable_type(self, value=None):
        """  Corresponds to IDD Field `variable_type`
        Optional input on the type of units for the variable used by other fields in the object.

        Args:
            value (str): value for IDD Field `variable_type`
                Accepted values are:
                      - Energy
                      - Temperature
                      - VolumetricFlow
                      - Power
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_type`')
            vals = set()
            vals.add("Energy")
            vals.add("Temperature")
            vals.add("VolumetricFlow")
            vals.add("Power")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `variable_type`'.format(value))

        self._data["Variable Type"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_value))
        out.append(self._to_str(self.variable_name))
        out.append(self._to_str(self.interval_start))
        out.append(self._to_str(self.interval_size))
        out.append(self._to_str(self.interval_count))
        out.append(self._to_str(self.schedule_name))
        out.append(self._to_str(self.variable_type))
        return ",".join(out)

class OutputTableMonthly(object):
    """ Corresponds to IDD object `Output:Table:Monthly`
        has multiple columns that are each defined using a repeated group of fields for any
        number of columns. A single Output:Table:Monthly object often produces multiple
        tables in the output. A table is produced for every instance of a particular output
        variable. For example, a table defined with zone variables will be produced once for
        every zone.
    """
    internal_name = "Output:Table:Monthly"
    field_count = 52

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Table:Monthly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Digits After Decimal"] = None
        self._data["Variable or Meter 1 Name"] = None
        self._data["Aggregation Type for Variable or Meter 1"] = None
        self._data["Variable or Meter 2 Name"] = None
        self._data["Aggregation Type for Variable or Meter 2"] = None
        self._data["Variable or Meter 3 Name"] = None
        self._data["Aggregation Type for Variable or Meter 3"] = None
        self._data["Variable or Meter 4 Name"] = None
        self._data["Aggregation Type for Variable or Meter 4"] = None
        self._data["Variable or Meter 5 Name"] = None
        self._data["Aggregation Type for Variable or Meter 5"] = None
        self._data["Variable or Meter 6 Name"] = None
        self._data["Aggregation Type for Variable or Meter 6"] = None
        self._data["Variable or Meter 7 Name"] = None
        self._data["Aggregation Type for Variable or Meter 7"] = None
        self._data["Variable or Meter 8 Name"] = None
        self._data["Aggregation Type for Variable or Meter 8"] = None
        self._data["Variable or Meter 9 Name"] = None
        self._data["Aggregation Type for Variable or Meter 9"] = None
        self._data["Variable or Meter 10 Name"] = None
        self._data["Aggregation Type for Variable or Meter 10"] = None
        self._data["Variable or Meter 11 Name"] = None
        self._data["Aggregation Type for Variable or Meter 11"] = None
        self._data["Variable or Meter 12 Name"] = None
        self._data["Aggregation Type for Variable or Meter 12"] = None
        self._data["Variable or Meter 13 Name"] = None
        self._data["Aggregation Type for Variable or Meter 13"] = None
        self._data["Variable or Meter 14 Name"] = None
        self._data["Aggregation Type for Variable or Meter 14"] = None
        self._data["Variable or Meter 15 Name"] = None
        self._data["Aggregation Type for Variable or Meter 15"] = None
        self._data["Variable or Meter 16 Name"] = None
        self._data["Aggregation Type for Variable or Meter 16"] = None
        self._data["Variable or Meter 17 Name"] = None
        self._data["Aggregation Type for Variable or Meter 17"] = None
        self._data["Variable or Meter 18 Name"] = None
        self._data["Aggregation Type for Variable or Meter 18"] = None
        self._data["Variable or Meter 19 Name"] = None
        self._data["Aggregation Type for Variable or Meter 19"] = None
        self._data["Variable or Meter 20 Name"] = None
        self._data["Aggregation Type for Variable or Meter 20"] = None
        self._data["Variable or Meter 21 Name"] = None
        self._data["Aggregation Type for Variable or Meter 21"] = None
        self._data["Variable or Meter 22 Name"] = None
        self._data["Aggregation Type for Variable or Meter 22"] = None
        self._data["Variable or Meter 23 Name"] = None
        self._data["Aggregation Type for Variable or Meter 23"] = None
        self._data["Variable or Meter 24 Name"] = None
        self._data["Aggregation Type for Variable or Meter 24"] = None
        self._data["Variable or Meter 25 Name"] = None
        self._data["Aggregation Type for Variable or Meter 25"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.digits_after_decimal = None
        else:
            self.digits_after_decimal = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_1_name = None
        else:
            self.variable_or_meter_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_1 = None
        else:
            self.aggregation_type_for_variable_or_meter_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_2_name = None
        else:
            self.variable_or_meter_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_2 = None
        else:
            self.aggregation_type_for_variable_or_meter_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_3_name = None
        else:
            self.variable_or_meter_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_3 = None
        else:
            self.aggregation_type_for_variable_or_meter_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_4_name = None
        else:
            self.variable_or_meter_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_4 = None
        else:
            self.aggregation_type_for_variable_or_meter_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_5_name = None
        else:
            self.variable_or_meter_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_5 = None
        else:
            self.aggregation_type_for_variable_or_meter_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_6_name = None
        else:
            self.variable_or_meter_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_6 = None
        else:
            self.aggregation_type_for_variable_or_meter_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_7_name = None
        else:
            self.variable_or_meter_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_7 = None
        else:
            self.aggregation_type_for_variable_or_meter_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_8_name = None
        else:
            self.variable_or_meter_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_8 = None
        else:
            self.aggregation_type_for_variable_or_meter_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_9_name = None
        else:
            self.variable_or_meter_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_9 = None
        else:
            self.aggregation_type_for_variable_or_meter_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_10_name = None
        else:
            self.variable_or_meter_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_10 = None
        else:
            self.aggregation_type_for_variable_or_meter_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_11_name = None
        else:
            self.variable_or_meter_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_11 = None
        else:
            self.aggregation_type_for_variable_or_meter_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_12_name = None
        else:
            self.variable_or_meter_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_12 = None
        else:
            self.aggregation_type_for_variable_or_meter_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_13_name = None
        else:
            self.variable_or_meter_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_13 = None
        else:
            self.aggregation_type_for_variable_or_meter_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_14_name = None
        else:
            self.variable_or_meter_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_14 = None
        else:
            self.aggregation_type_for_variable_or_meter_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_15_name = None
        else:
            self.variable_or_meter_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_15 = None
        else:
            self.aggregation_type_for_variable_or_meter_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_16_name = None
        else:
            self.variable_or_meter_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_16 = None
        else:
            self.aggregation_type_for_variable_or_meter_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_17_name = None
        else:
            self.variable_or_meter_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_17 = None
        else:
            self.aggregation_type_for_variable_or_meter_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_18_name = None
        else:
            self.variable_or_meter_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_18 = None
        else:
            self.aggregation_type_for_variable_or_meter_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_19_name = None
        else:
            self.variable_or_meter_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_19 = None
        else:
            self.aggregation_type_for_variable_or_meter_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_20_name = None
        else:
            self.variable_or_meter_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_20 = None
        else:
            self.aggregation_type_for_variable_or_meter_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_21_name = None
        else:
            self.variable_or_meter_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_21 = None
        else:
            self.aggregation_type_for_variable_or_meter_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_22_name = None
        else:
            self.variable_or_meter_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_22 = None
        else:
            self.aggregation_type_for_variable_or_meter_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_23_name = None
        else:
            self.variable_or_meter_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_23 = None
        else:
            self.aggregation_type_for_variable_or_meter_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_24_name = None
        else:
            self.variable_or_meter_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_24 = None
        else:
            self.aggregation_type_for_variable_or_meter_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_25_name = None
        else:
            self.variable_or_meter_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_25 = None
        else:
            self.aggregation_type_for_variable_or_meter_25 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def digits_after_decimal(self):
        """Get digits_after_decimal

        Returns:
            int: the value of `digits_after_decimal` or None if not set
        """
        return self._data["Digits After Decimal"]

    @digits_after_decimal.setter
    def digits_after_decimal(self, value=2 ):
        """  Corresponds to IDD Field `digits_after_decimal`

        Args:
            value (int): value for IDD Field `digits_after_decimal`
                Default value: 2
                value >= 0
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `digits_after_decimal`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `digits_after_decimal`')
            if value > 10:
                raise ValueError('value need to be smaller 10 '
                                 'for field `digits_after_decimal`')

        self._data["Digits After Decimal"] = value

    @property
    def variable_or_meter_1_name(self):
        """Get variable_or_meter_1_name

        Returns:
            str: the value of `variable_or_meter_1_name` or None if not set
        """
        return self._data["Variable or Meter 1 Name"]

    @variable_or_meter_1_name.setter
    def variable_or_meter_1_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_1_name`
        The name of an output variable or  meter that is available in the RDD file.

        Args:
            value (str): value for IDD Field `variable_or_meter_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_1_name`')

        self._data["Variable or Meter 1 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_1(self):
        """Get aggregation_type_for_variable_or_meter_1

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_1` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 1"]

    @aggregation_type_for_variable_or_meter_1.setter
    def aggregation_type_for_variable_or_meter_1(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_1`
        The method of aggregation for the selected variable or meter.
        SumOrAverage adds up the values for every timestep in the month if the variable
        is a sum variable. If the variable is an average variable it reports the average value.
        This is probably the most common Aggregation Type option to choose.
        Maximum and Minimum find the maximum and minimum value for the month and report it
        along with the time that it first occurred.  When Maximum or Minimum are selected a
        column is automatically shown in the output report for the time that it occurred.
        When Maximum or Minimum are used with an average variable the value is divided
        by the length of the timestep.
        ValueWhenMaxMin looks at the previous variable in the report that sets a maximum or minimum
        and displays the value of the current variable at that same timestep.
        Order of the variables in the report is important when using ValueWhenMaxMin.
        This can be used when an outdoor temperature should be reported for the time of the
        maximum cooling load.
        HoursNonZero adds up the elapsed time during the month that this variable is non-zero
        and would be appropriate to determine the number of hour that a fan operates.
        HoursZero - The HoursZero option adds up the elapsed time during the month that this
        variable has a zero value and would be appropriate to determine the number of hour
        that a fan does not operate.
        HoursPositive - The HoursPositive option adds up the elapsed time during the month that
        this variable has a positive value.  Hours with a zero value are not included.
        HoursNonPositive - The HoursNonPositive option adds up the elaspsed time during the month
        that this variable has non-positive value. Hours with a negative value and hours with a
        zero value are all included.
        HoursNegative - The HoursNegative option adds up the elapsed time during the month that
        this variable has a negative value.  Hours with a zero value are not included.
        HoursNonNegative - The HoursNonNegative option adds up the elaspsed time during the month
        that this variable has non-negative value. Hours with a positive value and
        hours with a zero value are all included.
        SumOrAverageDuringHoursShown - Provides the sum or average of the named variable when
        during the hours that the previous variable displayed with any of the Aggregation Types
        starting with "Hours". For "sum" type variables adds up the values for each timestep
        and reports the sum of the value monthly during the hours reported on the previous
        variable. For "average" type variables, the value shown will be the average for the month
        during the hours reported on the previous variable.  Order of the variables in
        the report is important when using this Aggregation Type.
        MaximumDuringHoursShown - Reports the maximum value and the time that the maximum value
        occurred but only during the hours reported with the previous "hours-" Aggregation Type.
        When the Maximum option is used with an average variable the value is divided
        by the length of the timestep.  Order of the variables in the report is important
        when using this Aggregation Type.
        MinimumDuringHoursShown - Reports the minimum value and the time that the minimum value
        occurred but only during the hours reported with the previous "hours-" Aggregation Type.
        When the Minimum option is used with an average variable the value is divided
        by the length of the timestep.  Order of the variables in the report is important
        when using this Aggregation Type.

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_1`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_1`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_1`'.format(value))

        self._data["Aggregation Type for Variable or Meter 1"] = value

    @property
    def variable_or_meter_2_name(self):
        """Get variable_or_meter_2_name

        Returns:
            str: the value of `variable_or_meter_2_name` or None if not set
        """
        return self._data["Variable or Meter 2 Name"]

    @variable_or_meter_2_name.setter
    def variable_or_meter_2_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_2_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_2_name`')

        self._data["Variable or Meter 2 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_2(self):
        """Get aggregation_type_for_variable_or_meter_2

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_2` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 2"]

    @aggregation_type_for_variable_or_meter_2.setter
    def aggregation_type_for_variable_or_meter_2(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_2`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_2`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_2`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_2`'.format(value))

        self._data["Aggregation Type for Variable or Meter 2"] = value

    @property
    def variable_or_meter_3_name(self):
        """Get variable_or_meter_3_name

        Returns:
            str: the value of `variable_or_meter_3_name` or None if not set
        """
        return self._data["Variable or Meter 3 Name"]

    @variable_or_meter_3_name.setter
    def variable_or_meter_3_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_3_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_3_name`')

        self._data["Variable or Meter 3 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_3(self):
        """Get aggregation_type_for_variable_or_meter_3

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_3` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 3"]

    @aggregation_type_for_variable_or_meter_3.setter
    def aggregation_type_for_variable_or_meter_3(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_3`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_3`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_3`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_3`'.format(value))

        self._data["Aggregation Type for Variable or Meter 3"] = value

    @property
    def variable_or_meter_4_name(self):
        """Get variable_or_meter_4_name

        Returns:
            str: the value of `variable_or_meter_4_name` or None if not set
        """
        return self._data["Variable or Meter 4 Name"]

    @variable_or_meter_4_name.setter
    def variable_or_meter_4_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_4_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_4_name`')

        self._data["Variable or Meter 4 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_4(self):
        """Get aggregation_type_for_variable_or_meter_4

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_4` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 4"]

    @aggregation_type_for_variable_or_meter_4.setter
    def aggregation_type_for_variable_or_meter_4(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_4`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_4`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_4`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_4`'.format(value))

        self._data["Aggregation Type for Variable or Meter 4"] = value

    @property
    def variable_or_meter_5_name(self):
        """Get variable_or_meter_5_name

        Returns:
            str: the value of `variable_or_meter_5_name` or None if not set
        """
        return self._data["Variable or Meter 5 Name"]

    @variable_or_meter_5_name.setter
    def variable_or_meter_5_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_5_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_5_name`')

        self._data["Variable or Meter 5 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_5(self):
        """Get aggregation_type_for_variable_or_meter_5

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_5` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 5"]

    @aggregation_type_for_variable_or_meter_5.setter
    def aggregation_type_for_variable_or_meter_5(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_5`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_5`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_5`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_5`'.format(value))

        self._data["Aggregation Type for Variable or Meter 5"] = value

    @property
    def variable_or_meter_6_name(self):
        """Get variable_or_meter_6_name

        Returns:
            str: the value of `variable_or_meter_6_name` or None if not set
        """
        return self._data["Variable or Meter 6 Name"]

    @variable_or_meter_6_name.setter
    def variable_or_meter_6_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_6_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_6_name`')

        self._data["Variable or Meter 6 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_6(self):
        """Get aggregation_type_for_variable_or_meter_6

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_6` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 6"]

    @aggregation_type_for_variable_or_meter_6.setter
    def aggregation_type_for_variable_or_meter_6(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_6`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_6`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_6`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_6`'.format(value))

        self._data["Aggregation Type for Variable or Meter 6"] = value

    @property
    def variable_or_meter_7_name(self):
        """Get variable_or_meter_7_name

        Returns:
            str: the value of `variable_or_meter_7_name` or None if not set
        """
        return self._data["Variable or Meter 7 Name"]

    @variable_or_meter_7_name.setter
    def variable_or_meter_7_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_7_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_7_name`')

        self._data["Variable or Meter 7 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_7(self):
        """Get aggregation_type_for_variable_or_meter_7

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_7` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 7"]

    @aggregation_type_for_variable_or_meter_7.setter
    def aggregation_type_for_variable_or_meter_7(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_7`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_7`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_7`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_7`'.format(value))

        self._data["Aggregation Type for Variable or Meter 7"] = value

    @property
    def variable_or_meter_8_name(self):
        """Get variable_or_meter_8_name

        Returns:
            str: the value of `variable_or_meter_8_name` or None if not set
        """
        return self._data["Variable or Meter 8 Name"]

    @variable_or_meter_8_name.setter
    def variable_or_meter_8_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_8_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_8_name`')

        self._data["Variable or Meter 8 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_8(self):
        """Get aggregation_type_for_variable_or_meter_8

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_8` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 8"]

    @aggregation_type_for_variable_or_meter_8.setter
    def aggregation_type_for_variable_or_meter_8(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_8`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_8`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_8`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_8`'.format(value))

        self._data["Aggregation Type for Variable or Meter 8"] = value

    @property
    def variable_or_meter_9_name(self):
        """Get variable_or_meter_9_name

        Returns:
            str: the value of `variable_or_meter_9_name` or None if not set
        """
        return self._data["Variable or Meter 9 Name"]

    @variable_or_meter_9_name.setter
    def variable_or_meter_9_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_9_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_9_name`')

        self._data["Variable or Meter 9 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_9(self):
        """Get aggregation_type_for_variable_or_meter_9

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_9` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 9"]

    @aggregation_type_for_variable_or_meter_9.setter
    def aggregation_type_for_variable_or_meter_9(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_9`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_9`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_9`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_9`'.format(value))

        self._data["Aggregation Type for Variable or Meter 9"] = value

    @property
    def variable_or_meter_10_name(self):
        """Get variable_or_meter_10_name

        Returns:
            str: the value of `variable_or_meter_10_name` or None if not set
        """
        return self._data["Variable or Meter 10 Name"]

    @variable_or_meter_10_name.setter
    def variable_or_meter_10_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_10_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_10_name`')

        self._data["Variable or Meter 10 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_10(self):
        """Get aggregation_type_for_variable_or_meter_10

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_10` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 10"]

    @aggregation_type_for_variable_or_meter_10.setter
    def aggregation_type_for_variable_or_meter_10(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_10`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_10`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_10`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_10`'.format(value))

        self._data["Aggregation Type for Variable or Meter 10"] = value

    @property
    def variable_or_meter_11_name(self):
        """Get variable_or_meter_11_name

        Returns:
            str: the value of `variable_or_meter_11_name` or None if not set
        """
        return self._data["Variable or Meter 11 Name"]

    @variable_or_meter_11_name.setter
    def variable_or_meter_11_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_11_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_11_name`')

        self._data["Variable or Meter 11 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_11(self):
        """Get aggregation_type_for_variable_or_meter_11

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_11` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 11"]

    @aggregation_type_for_variable_or_meter_11.setter
    def aggregation_type_for_variable_or_meter_11(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_11`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_11`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_11`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_11`'.format(value))

        self._data["Aggregation Type for Variable or Meter 11"] = value

    @property
    def variable_or_meter_12_name(self):
        """Get variable_or_meter_12_name

        Returns:
            str: the value of `variable_or_meter_12_name` or None if not set
        """
        return self._data["Variable or Meter 12 Name"]

    @variable_or_meter_12_name.setter
    def variable_or_meter_12_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_12_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_12_name`')

        self._data["Variable or Meter 12 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_12(self):
        """Get aggregation_type_for_variable_or_meter_12

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_12` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 12"]

    @aggregation_type_for_variable_or_meter_12.setter
    def aggregation_type_for_variable_or_meter_12(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_12`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_12`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_12`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_12`'.format(value))

        self._data["Aggregation Type for Variable or Meter 12"] = value

    @property
    def variable_or_meter_13_name(self):
        """Get variable_or_meter_13_name

        Returns:
            str: the value of `variable_or_meter_13_name` or None if not set
        """
        return self._data["Variable or Meter 13 Name"]

    @variable_or_meter_13_name.setter
    def variable_or_meter_13_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_13_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_13_name`')

        self._data["Variable or Meter 13 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_13(self):
        """Get aggregation_type_for_variable_or_meter_13

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_13` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 13"]

    @aggregation_type_for_variable_or_meter_13.setter
    def aggregation_type_for_variable_or_meter_13(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_13`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_13`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_13`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_13`'.format(value))

        self._data["Aggregation Type for Variable or Meter 13"] = value

    @property
    def variable_or_meter_14_name(self):
        """Get variable_or_meter_14_name

        Returns:
            str: the value of `variable_or_meter_14_name` or None if not set
        """
        return self._data["Variable or Meter 14 Name"]

    @variable_or_meter_14_name.setter
    def variable_or_meter_14_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_14_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_14_name`')

        self._data["Variable or Meter 14 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_14(self):
        """Get aggregation_type_for_variable_or_meter_14

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_14` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 14"]

    @aggregation_type_for_variable_or_meter_14.setter
    def aggregation_type_for_variable_or_meter_14(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_14`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_14`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_14`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_14`'.format(value))

        self._data["Aggregation Type for Variable or Meter 14"] = value

    @property
    def variable_or_meter_15_name(self):
        """Get variable_or_meter_15_name

        Returns:
            str: the value of `variable_or_meter_15_name` or None if not set
        """
        return self._data["Variable or Meter 15 Name"]

    @variable_or_meter_15_name.setter
    def variable_or_meter_15_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_15_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_15_name`')

        self._data["Variable or Meter 15 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_15(self):
        """Get aggregation_type_for_variable_or_meter_15

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_15` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 15"]

    @aggregation_type_for_variable_or_meter_15.setter
    def aggregation_type_for_variable_or_meter_15(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_15`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_15`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_15`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_15`'.format(value))

        self._data["Aggregation Type for Variable or Meter 15"] = value

    @property
    def variable_or_meter_16_name(self):
        """Get variable_or_meter_16_name

        Returns:
            str: the value of `variable_or_meter_16_name` or None if not set
        """
        return self._data["Variable or Meter 16 Name"]

    @variable_or_meter_16_name.setter
    def variable_or_meter_16_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_16_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_16_name`')

        self._data["Variable or Meter 16 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_16(self):
        """Get aggregation_type_for_variable_or_meter_16

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_16` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 16"]

    @aggregation_type_for_variable_or_meter_16.setter
    def aggregation_type_for_variable_or_meter_16(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_16`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_16`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_16`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_16`'.format(value))

        self._data["Aggregation Type for Variable or Meter 16"] = value

    @property
    def variable_or_meter_17_name(self):
        """Get variable_or_meter_17_name

        Returns:
            str: the value of `variable_or_meter_17_name` or None if not set
        """
        return self._data["Variable or Meter 17 Name"]

    @variable_or_meter_17_name.setter
    def variable_or_meter_17_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_17_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_17_name`')

        self._data["Variable or Meter 17 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_17(self):
        """Get aggregation_type_for_variable_or_meter_17

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_17` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 17"]

    @aggregation_type_for_variable_or_meter_17.setter
    def aggregation_type_for_variable_or_meter_17(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_17`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_17`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_17`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_17`'.format(value))

        self._data["Aggregation Type for Variable or Meter 17"] = value

    @property
    def variable_or_meter_18_name(self):
        """Get variable_or_meter_18_name

        Returns:
            str: the value of `variable_or_meter_18_name` or None if not set
        """
        return self._data["Variable or Meter 18 Name"]

    @variable_or_meter_18_name.setter
    def variable_or_meter_18_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_18_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_18_name`')

        self._data["Variable or Meter 18 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_18(self):
        """Get aggregation_type_for_variable_or_meter_18

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_18` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 18"]

    @aggregation_type_for_variable_or_meter_18.setter
    def aggregation_type_for_variable_or_meter_18(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_18`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_18`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_18`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_18`'.format(value))

        self._data["Aggregation Type for Variable or Meter 18"] = value

    @property
    def variable_or_meter_19_name(self):
        """Get variable_or_meter_19_name

        Returns:
            str: the value of `variable_or_meter_19_name` or None if not set
        """
        return self._data["Variable or Meter 19 Name"]

    @variable_or_meter_19_name.setter
    def variable_or_meter_19_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_19_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_19_name`')

        self._data["Variable or Meter 19 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_19(self):
        """Get aggregation_type_for_variable_or_meter_19

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_19` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 19"]

    @aggregation_type_for_variable_or_meter_19.setter
    def aggregation_type_for_variable_or_meter_19(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_19`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_19`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_19`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_19`'.format(value))

        self._data["Aggregation Type for Variable or Meter 19"] = value

    @property
    def variable_or_meter_20_name(self):
        """Get variable_or_meter_20_name

        Returns:
            str: the value of `variable_or_meter_20_name` or None if not set
        """
        return self._data["Variable or Meter 20 Name"]

    @variable_or_meter_20_name.setter
    def variable_or_meter_20_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_20_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_20_name`')

        self._data["Variable or Meter 20 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_20(self):
        """Get aggregation_type_for_variable_or_meter_20

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_20` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 20"]

    @aggregation_type_for_variable_or_meter_20.setter
    def aggregation_type_for_variable_or_meter_20(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_20`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_20`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_20`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_20`'.format(value))

        self._data["Aggregation Type for Variable or Meter 20"] = value

    @property
    def variable_or_meter_21_name(self):
        """Get variable_or_meter_21_name

        Returns:
            str: the value of `variable_or_meter_21_name` or None if not set
        """
        return self._data["Variable or Meter 21 Name"]

    @variable_or_meter_21_name.setter
    def variable_or_meter_21_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_21_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_21_name`')

        self._data["Variable or Meter 21 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_21(self):
        """Get aggregation_type_for_variable_or_meter_21

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_21` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 21"]

    @aggregation_type_for_variable_or_meter_21.setter
    def aggregation_type_for_variable_or_meter_21(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_21`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_21`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_21`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_21`'.format(value))

        self._data["Aggregation Type for Variable or Meter 21"] = value

    @property
    def variable_or_meter_22_name(self):
        """Get variable_or_meter_22_name

        Returns:
            str: the value of `variable_or_meter_22_name` or None if not set
        """
        return self._data["Variable or Meter 22 Name"]

    @variable_or_meter_22_name.setter
    def variable_or_meter_22_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_22_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_22_name`')

        self._data["Variable or Meter 22 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_22(self):
        """Get aggregation_type_for_variable_or_meter_22

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_22` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 22"]

    @aggregation_type_for_variable_or_meter_22.setter
    def aggregation_type_for_variable_or_meter_22(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_22`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_22`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_22`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_22`'.format(value))

        self._data["Aggregation Type for Variable or Meter 22"] = value

    @property
    def variable_or_meter_23_name(self):
        """Get variable_or_meter_23_name

        Returns:
            str: the value of `variable_or_meter_23_name` or None if not set
        """
        return self._data["Variable or Meter 23 Name"]

    @variable_or_meter_23_name.setter
    def variable_or_meter_23_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_23_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_23_name`')

        self._data["Variable or Meter 23 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_23(self):
        """Get aggregation_type_for_variable_or_meter_23

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_23` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 23"]

    @aggregation_type_for_variable_or_meter_23.setter
    def aggregation_type_for_variable_or_meter_23(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_23`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_23`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_23`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_23`'.format(value))

        self._data["Aggregation Type for Variable or Meter 23"] = value

    @property
    def variable_or_meter_24_name(self):
        """Get variable_or_meter_24_name

        Returns:
            str: the value of `variable_or_meter_24_name` or None if not set
        """
        return self._data["Variable or Meter 24 Name"]

    @variable_or_meter_24_name.setter
    def variable_or_meter_24_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_24_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_24_name`')

        self._data["Variable or Meter 24 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_24(self):
        """Get aggregation_type_for_variable_or_meter_24

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_24` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 24"]

    @aggregation_type_for_variable_or_meter_24.setter
    def aggregation_type_for_variable_or_meter_24(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_24`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_24`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_24`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_24`'.format(value))

        self._data["Aggregation Type for Variable or Meter 24"] = value

    @property
    def variable_or_meter_25_name(self):
        """Get variable_or_meter_25_name

        Returns:
            str: the value of `variable_or_meter_25_name` or None if not set
        """
        return self._data["Variable or Meter 25 Name"]

    @variable_or_meter_25_name.setter
    def variable_or_meter_25_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_25_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_25_name`')

        self._data["Variable or Meter 25 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_25(self):
        """Get aggregation_type_for_variable_or_meter_25

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_25` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 25"]

    @aggregation_type_for_variable_or_meter_25.setter
    def aggregation_type_for_variable_or_meter_25(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_25`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_25`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_25`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_25`'.format(value))

        self._data["Aggregation Type for Variable or Meter 25"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.digits_after_decimal))
        out.append(self._to_str(self.variable_or_meter_1_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_1))
        out.append(self._to_str(self.variable_or_meter_2_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_2))
        out.append(self._to_str(self.variable_or_meter_3_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_3))
        out.append(self._to_str(self.variable_or_meter_4_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_4))
        out.append(self._to_str(self.variable_or_meter_5_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_5))
        out.append(self._to_str(self.variable_or_meter_6_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_6))
        out.append(self._to_str(self.variable_or_meter_7_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_7))
        out.append(self._to_str(self.variable_or_meter_8_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_8))
        out.append(self._to_str(self.variable_or_meter_9_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_9))
        out.append(self._to_str(self.variable_or_meter_10_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_10))
        out.append(self._to_str(self.variable_or_meter_11_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_11))
        out.append(self._to_str(self.variable_or_meter_12_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_12))
        out.append(self._to_str(self.variable_or_meter_13_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_13))
        out.append(self._to_str(self.variable_or_meter_14_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_14))
        out.append(self._to_str(self.variable_or_meter_15_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_15))
        out.append(self._to_str(self.variable_or_meter_16_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_16))
        out.append(self._to_str(self.variable_or_meter_17_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_17))
        out.append(self._to_str(self.variable_or_meter_18_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_18))
        out.append(self._to_str(self.variable_or_meter_19_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_19))
        out.append(self._to_str(self.variable_or_meter_20_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_20))
        out.append(self._to_str(self.variable_or_meter_21_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_21))
        out.append(self._to_str(self.variable_or_meter_22_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_22))
        out.append(self._to_str(self.variable_or_meter_23_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_23))
        out.append(self._to_str(self.variable_or_meter_24_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_24))
        out.append(self._to_str(self.variable_or_meter_25_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_25))
        return ",".join(out)

class OutputVariable(object):
    """ Corresponds to IDD object `Output:Variable`
        each Output:Variable command picks variables to be put onto the standard output file (.eso)
        some variables may not be reported for every simulation.
        a list of variables that can be reported are available after a run on
        the report dictionary file (.rdd) if the Output:VariableDictionary has been requested.
    """
    internal_name = "Output:Variable"
    field_count = 4

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Variable`
        """
        self._data = OrderedDict()
        self._data["Key Value"] = None
        self._data["Variable Name"] = None
        self._data["Reporting Frequency"] = None
        self._data["Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_value = None
        else:
            self.key_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_name = None
        else:
            self.variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1

    @property
    def key_value(self):
        """Get key_value

        Returns:
            str: the value of `key_value` or None if not set
        """
        return self._data["Key Value"]

    @key_value.setter
    def key_value(self, value="*"):
        """  Corresponds to IDD Field `key_value`
        use '*' (without quotes) to apply this variable to all keys

        Args:
            value (str): value for IDD Field `key_value`
                Default value: *
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_value`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_value`')

        self._data["Key Value"] = value

    @property
    def variable_name(self):
        """Get variable_name

        Returns:
            str: the value of `variable_name` or None if not set
        """
        return self._data["Variable Name"]

    @variable_name.setter
    def variable_name(self, value=None):
        """  Corresponds to IDD Field `variable_name`

        Args:
            value (str): value for IDD Field `variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_name`')

        self._data["Variable Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Detailed lists every instance (i.e. HVAC variable timesteps)
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Detailed
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Detailed")
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `schedule_name`

        Args:
            value (str): value for IDD Field `schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')

        self._data["Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_value))
        out.append(self._to_str(self.variable_name))
        out.append(self._to_str(self.reporting_frequency))
        out.append(self._to_str(self.schedule_name))
        return ",".join(out)

class OutputMeter(object):
    """ Corresponds to IDD object `Output:Meter`
        Each Output:Meter command picks meters to be put onto the standard output file (.eso) and
        meter file (.mtr). Not all meters are reported in every simulation. A list of
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    """
    internal_name = "Output:Meter"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Meter`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter puts results on both the eplusout.mtr and eplusout.eso files

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class OutputMeterMeterFileOnly(object):
    """ Corresponds to IDD object `Output:Meter:MeterFileOnly`
        Each Output:Meter:MeterFileOnly command picks meters to be put only onto meter file (.mtr).
        Not all meters are reported in every simulation. A list of meters that can be reported
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    """
    internal_name = "Output:Meter:MeterFileOnly"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Meter:MeterFileOnly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:MeterFileOnly puts results on the eplusout.mtr file only

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class OutputMeterCumulative(object):
    """ Corresponds to IDD object `Output:Meter:Cumulative`
        Each Output:Meter:Cumulative command picks meters to be reported cumulatively onto the
        standard output file (.eso) and meter file (.mtr). Not all meters are reported in every
        simulation.
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    """
    internal_name = "Output:Meter:Cumulative"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Meter:Cumulative`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:Cumulative puts results on both the eplusout.mtr and eplusout.eso files

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class OutputMeterCumulativeMeterFileOnly(object):
    """ Corresponds to IDD object `Output:Meter:Cumulative:MeterFileOnly`
        Each Output:Meter:Cumulative:MeterFileOnly command picks meters to be reported cumulatively
        onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in
        every simulation.
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    """
    internal_name = "Output:Meter:Cumulative:MeterFileOnly"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Meter:Cumulative:MeterFileOnly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:Cumulative:MeterFileOnly puts results on the eplusout.mtr file only

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class OutputSqlite(object):
    """ Corresponds to IDD object `Output:SQLite`
        Output from EnergyPlus can be written to an SQLite format file.
    """
    internal_name = "Output:SQLite"
    field_count = 1

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:SQLite`
        """
        self._data = OrderedDict()
        self._data["Option Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.option_type = None
        else:
            self.option_type = vals[i]
        i += 1

    @property
    def option_type(self):
        """Get option_type

        Returns:
            str: the value of `option_type` or None if not set
        """
        return self._data["Option Type"]

    @option_type.setter
    def option_type(self, value=None):
        """  Corresponds to IDD Field `option_type`

        Args:
            value (str): value for IDD Field `option_type`
                Accepted values are:
                      - Simple
                      - SimpleAndTabular
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `option_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `option_type`')
            vals = set()
            vals.add("Simple")
            vals.add("SimpleAndTabular")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `option_type`'.format(value))

        self._data["Option Type"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.option_type))
        return ",".join(out)

class OutputEnvironmentalImpactFactors(object):
    """ Corresponds to IDD object `Output:EnvironmentalImpactFactors`
        This is used to Automatically report the facility meters and turn on the Environmental Impact Report calculations
        for all of the Environmental Factors.
    """
    internal_name = "Output:EnvironmentalImpactFactors"
    field_count = 1

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:EnvironmentalImpactFactors`
        """
        self._data = OrderedDict()
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value=None):
        """  Corresponds to IDD Field `reporting_frequency`

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class OutputDiagnostics(object):
    """ Corresponds to IDD object `Output:Diagnostics`
        Special keys to produce certain warning messages or effect certain simulation characteristics.
    """
    internal_name = "Output:Diagnostics"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:Diagnostics`
        """
        self._data = OrderedDict()
        self._data["Key 1"] = None
        self._data["Key 2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_1 = None
        else:
            self.key_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_2 = None
        else:
            self.key_2 = vals[i]
        i += 1

    @property
    def key_1(self):
        """Get key_1

        Returns:
            str: the value of `key_1` or None if not set
        """
        return self._data["Key 1"]

    @key_1.setter
    def key_1(self, value=None):
        """  Corresponds to IDD Field `key_1`

        Args:
            value (str): value for IDD Field `key_1`
                Accepted values are:
                      - DisplayAllWarnings
                      - DisplayExtraWarnings
                      - DisplayUnusedSchedules
                      - DisplayUnusedObjects
                      - DisplayAdvancedReportVariables
                      - DisplayZoneAirHeatBalanceOffBalance
                      - DoNotMirrorDetachedShading
                      - DisplayWeatherMissingDataWarnings
                      - ReportDuringWarmup
                      - ReportDetailedWarmupConvergence
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_1`')
            vals = set()
            vals.add("DisplayAllWarnings")
            vals.add("DisplayExtraWarnings")
            vals.add("DisplayUnusedSchedules")
            vals.add("DisplayUnusedObjects")
            vals.add("DisplayAdvancedReportVariables")
            vals.add("DisplayZoneAirHeatBalanceOffBalance")
            vals.add("DoNotMirrorDetachedShading")
            vals.add("DisplayWeatherMissingDataWarnings")
            vals.add("ReportDuringWarmup")
            vals.add("ReportDetailedWarmupConvergence")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `key_1`'.format(value))

        self._data["Key 1"] = value

    @property
    def key_2(self):
        """Get key_2

        Returns:
            str: the value of `key_2` or None if not set
        """
        return self._data["Key 2"]

    @key_2.setter
    def key_2(self, value=None):
        """  Corresponds to IDD Field `key_2`

        Args:
            value (str): value for IDD Field `key_2`
                Accepted values are:
                      - DisplayAllWarnings
                      - DisplayExtraWarnings
                      - DisplayUnusedSchedules
                      - DisplayUnusedObjects
                      - DisplayAdvancedReportVariables
                      - DisplayZoneAirHeatBalanceOffBalance
                      - DoNotMirrorDetachedShading
                      - DisplayWeatherMissingDataWarnings
                      - ReportDuringWarmup
                      - ReportDetailedWarmupConvergence
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_2`')
            vals = set()
            vals.add("DisplayAllWarnings")
            vals.add("DisplayExtraWarnings")
            vals.add("DisplayUnusedSchedules")
            vals.add("DisplayUnusedObjects")
            vals.add("DisplayAdvancedReportVariables")
            vals.add("DisplayZoneAirHeatBalanceOffBalance")
            vals.add("DoNotMirrorDetachedShading")
            vals.add("DisplayWeatherMissingDataWarnings")
            vals.add("ReportDuringWarmup")
            vals.add("ReportDetailedWarmupConvergence")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `key_2`'.format(value))

        self._data["Key 2"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_1))
        out.append(self._to_str(self.key_2))
        return ",".join(out)

class OutputDebuggingData(object):
    """ Corresponds to IDD object `Output:DebuggingData`
        switch eplusout.dbg file on or off
    """
    internal_name = "Output:DebuggingData"
    field_count = 2

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:DebuggingData`
        """
        self._data = OrderedDict()
        self._data["Report Debugging Data"] = None
        self._data["Report During Warmup"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.report_debugging_data = None
        else:
            self.report_debugging_data = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_during_warmup = None
        else:
            self.report_during_warmup = vals[i]
        i += 1

    @property
    def report_debugging_data(self):
        """Get report_debugging_data

        Returns:
            float: the value of `report_debugging_data` or None if not set
        """
        return self._data["Report Debugging Data"]

    @report_debugging_data.setter
    def report_debugging_data(self, value=None):
        """  Corresponds to IDD Field `report_debugging_data`
        value=1 then yes all others no

        Args:
            value (float): value for IDD Field `report_debugging_data`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `report_debugging_data`'.format(value))

        self._data["Report Debugging Data"] = value

    @property
    def report_during_warmup(self):
        """Get report_during_warmup

        Returns:
            float: the value of `report_during_warmup` or None if not set
        """
        return self._data["Report During Warmup"]

    @report_during_warmup.setter
    def report_during_warmup(self, value=None):
        """  Corresponds to IDD Field `report_during_warmup`
        value=1 then always even during warmup  all others no

        Args:
            value (float): value for IDD Field `report_during_warmup`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `report_during_warmup`'.format(value))

        self._data["Report During Warmup"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.report_debugging_data))
        out.append(self._to_str(self.report_during_warmup))
        return ",".join(out)

class OutputPreprocessorMessage(object):
    """ Corresponds to IDD object `Output:PreprocessorMessage`
        This object does not come from a user input.  This is generated by a pre-processor
        so that various conditions can be gracefully passed on by the InputProcessor.
    """
    internal_name = "Output:PreprocessorMessage"
    field_count = 12

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Output:PreprocessorMessage`
        """
        self._data = OrderedDict()
        self._data["Preprocessor Name"] = None
        self._data["Error Severity"] = None
        self._data["Message Line 1"] = None
        self._data["Message Line 2"] = None
        self._data["Message Line 3"] = None
        self._data["Message Line 4"] = None
        self._data["Message Line 5"] = None
        self._data["Message Line 6"] = None
        self._data["Message Line 7"] = None
        self._data["Message Line 8"] = None
        self._data["Message Line 9"] = None
        self._data["Message Line 10"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.preprocessor_name = None
        else:
            self.preprocessor_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.error_severity = None
        else:
            self.error_severity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_1 = None
        else:
            self.message_line_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_2 = None
        else:
            self.message_line_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_3 = None
        else:
            self.message_line_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_4 = None
        else:
            self.message_line_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_5 = None
        else:
            self.message_line_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_6 = None
        else:
            self.message_line_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_7 = None
        else:
            self.message_line_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_8 = None
        else:
            self.message_line_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_9 = None
        else:
            self.message_line_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_10 = None
        else:
            self.message_line_10 = vals[i]
        i += 1

    @property
    def preprocessor_name(self):
        """Get preprocessor_name

        Returns:
            str: the value of `preprocessor_name` or None if not set
        """
        return self._data["Preprocessor Name"]

    @preprocessor_name.setter
    def preprocessor_name(self, value=None):
        """  Corresponds to IDD Field `preprocessor_name`

        Args:
            value (str): value for IDD Field `preprocessor_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preprocessor_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preprocessor_name`')

        self._data["Preprocessor Name"] = value

    @property
    def error_severity(self):
        """Get error_severity

        Returns:
            str: the value of `error_severity` or None if not set
        """
        return self._data["Error Severity"]

    @error_severity.setter
    def error_severity(self, value=None):
        """  Corresponds to IDD Field `error_severity`
        Depending on type, InputProcessor may terminate the program.

        Args:
            value (str): value for IDD Field `error_severity`
                Accepted values are:
                      - Information
                      - Warning
                      - Severe
                      - Fatal
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `error_severity`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `error_severity`')
            vals = set()
            vals.add("Information")
            vals.add("Warning")
            vals.add("Severe")
            vals.add("Fatal")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `error_severity`'.format(value))

        self._data["Error Severity"] = value

    @property
    def message_line_1(self):
        """Get message_line_1

        Returns:
            str: the value of `message_line_1` or None if not set
        """
        return self._data["Message Line 1"]

    @message_line_1.setter
    def message_line_1(self, value=None):
        """  Corresponds to IDD Field `message_line_1`

        Args:
            value (str): value for IDD Field `message_line_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_1`')

        self._data["Message Line 1"] = value

    @property
    def message_line_2(self):
        """Get message_line_2

        Returns:
            str: the value of `message_line_2` or None if not set
        """
        return self._data["Message Line 2"]

    @message_line_2.setter
    def message_line_2(self, value=None):
        """  Corresponds to IDD Field `message_line_2`

        Args:
            value (str): value for IDD Field `message_line_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_2`')

        self._data["Message Line 2"] = value

    @property
    def message_line_3(self):
        """Get message_line_3

        Returns:
            str: the value of `message_line_3` or None if not set
        """
        return self._data["Message Line 3"]

    @message_line_3.setter
    def message_line_3(self, value=None):
        """  Corresponds to IDD Field `message_line_3`

        Args:
            value (str): value for IDD Field `message_line_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_3`')

        self._data["Message Line 3"] = value

    @property
    def message_line_4(self):
        """Get message_line_4

        Returns:
            str: the value of `message_line_4` or None if not set
        """
        return self._data["Message Line 4"]

    @message_line_4.setter
    def message_line_4(self, value=None):
        """  Corresponds to IDD Field `message_line_4`

        Args:
            value (str): value for IDD Field `message_line_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_4`')

        self._data["Message Line 4"] = value

    @property
    def message_line_5(self):
        """Get message_line_5

        Returns:
            str: the value of `message_line_5` or None if not set
        """
        return self._data["Message Line 5"]

    @message_line_5.setter
    def message_line_5(self, value=None):
        """  Corresponds to IDD Field `message_line_5`

        Args:
            value (str): value for IDD Field `message_line_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_5`')

        self._data["Message Line 5"] = value

    @property
    def message_line_6(self):
        """Get message_line_6

        Returns:
            str: the value of `message_line_6` or None if not set
        """
        return self._data["Message Line 6"]

    @message_line_6.setter
    def message_line_6(self, value=None):
        """  Corresponds to IDD Field `message_line_6`

        Args:
            value (str): value for IDD Field `message_line_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_6`')

        self._data["Message Line 6"] = value

    @property
    def message_line_7(self):
        """Get message_line_7

        Returns:
            str: the value of `message_line_7` or None if not set
        """
        return self._data["Message Line 7"]

    @message_line_7.setter
    def message_line_7(self, value=None):
        """  Corresponds to IDD Field `message_line_7`

        Args:
            value (str): value for IDD Field `message_line_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_7`')

        self._data["Message Line 7"] = value

    @property
    def message_line_8(self):
        """Get message_line_8

        Returns:
            str: the value of `message_line_8` or None if not set
        """
        return self._data["Message Line 8"]

    @message_line_8.setter
    def message_line_8(self, value=None):
        """  Corresponds to IDD Field `message_line_8`

        Args:
            value (str): value for IDD Field `message_line_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_8`')

        self._data["Message Line 8"] = value

    @property
    def message_line_9(self):
        """Get message_line_9

        Returns:
            str: the value of `message_line_9` or None if not set
        """
        return self._data["Message Line 9"]

    @message_line_9.setter
    def message_line_9(self, value=None):
        """  Corresponds to IDD Field `message_line_9`

        Args:
            value (str): value for IDD Field `message_line_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_9`')

        self._data["Message Line 9"] = value

    @property
    def message_line_10(self):
        """Get message_line_10

        Returns:
            str: the value of `message_line_10` or None if not set
        """
        return self._data["Message Line 10"]

    @message_line_10.setter
    def message_line_10(self, value=None):
        """  Corresponds to IDD Field `message_line_10`

        Args:
            value (str): value for IDD Field `message_line_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_10`')

        self._data["Message Line 10"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.preprocessor_name))
        out.append(self._to_str(self.error_severity))
        out.append(self._to_str(self.message_line_1))
        out.append(self._to_str(self.message_line_2))
        out.append(self._to_str(self.message_line_3))
        out.append(self._to_str(self.message_line_4))
        out.append(self._to_str(self.message_line_5))
        out.append(self._to_str(self.message_line_6))
        out.append(self._to_str(self.message_line_7))
        out.append(self._to_str(self.message_line_8))
        out.append(self._to_str(self.message_line_9))
        out.append(self._to_str(self.message_line_10))
        return ",".join(out)