from collections import OrderedDict

class ScheduleDayHourly(object):
    """ Corresponds to IDD object `Schedule:Day:Hourly`
        A Schedule:Day:Hourly contains 24 values for each hour of the day.
    """
    internal_name = "Schedule:Day:Hourly"
    field_count = 26

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:Day:Hourly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Schedule Type Limits Name"] = None
        self._data["Hour 1"] = None
        self._data["Hour 2"] = None
        self._data["Hour 3"] = None
        self._data["Hour 4"] = None
        self._data["Hour 5"] = None
        self._data["Hour 6"] = None
        self._data["Hour 7"] = None
        self._data["Hour 8"] = None
        self._data["Hour 9"] = None
        self._data["Hour 10"] = None
        self._data["Hour 11"] = None
        self._data["Hour 12"] = None
        self._data["Hour 13"] = None
        self._data["Hour 14"] = None
        self._data["Hour 15"] = None
        self._data["Hour 16"] = None
        self._data["Hour 17"] = None
        self._data["Hour 18"] = None
        self._data["Hour 19"] = None
        self._data["Hour 20"] = None
        self._data["Hour 21"] = None
        self._data["Hour 22"] = None
        self._data["Hour 23"] = None
        self._data["Hour 24"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_type_limits_name = None
        else:
            self.schedule_type_limits_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_1 = None
        else:
            self.hour_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_2 = None
        else:
            self.hour_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_3 = None
        else:
            self.hour_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_4 = None
        else:
            self.hour_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_5 = None
        else:
            self.hour_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_6 = None
        else:
            self.hour_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_7 = None
        else:
            self.hour_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_8 = None
        else:
            self.hour_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_9 = None
        else:
            self.hour_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_10 = None
        else:
            self.hour_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_11 = None
        else:
            self.hour_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_12 = None
        else:
            self.hour_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_13 = None
        else:
            self.hour_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_14 = None
        else:
            self.hour_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_15 = None
        else:
            self.hour_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_16 = None
        else:
            self.hour_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_17 = None
        else:
            self.hour_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_18 = None
        else:
            self.hour_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_19 = None
        else:
            self.hour_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_20 = None
        else:
            self.hour_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_21 = None
        else:
            self.hour_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_22 = None
        else:
            self.hour_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_23 = None
        else:
            self.hour_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hour_24 = None
        else:
            self.hour_24 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def schedule_type_limits_name(self):
        """Get schedule_type_limits_name

        Returns:
            str: the value of `schedule_type_limits_name` or None if not set
        """
        return self._data["Schedule Type Limits Name"]

    @schedule_type_limits_name.setter
    def schedule_type_limits_name(self, value=None):
        """  Corresponds to IDD Field `schedule_type_limits_name`

        Args:
            value (str): value for IDD Field `schedule_type_limits_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_type_limits_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_type_limits_name`')

        self._data["Schedule Type Limits Name"] = value

    @property
    def hour_1(self):
        """Get hour_1

        Returns:
            float: the value of `hour_1` or None if not set
        """
        return self._data["Hour 1"]

    @hour_1.setter
    def hour_1(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_1`

        Args:
            value (float): value for IDD Field `hour_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_1`'.format(value))

        self._data["Hour 1"] = value

    @property
    def hour_2(self):
        """Get hour_2

        Returns:
            float: the value of `hour_2` or None if not set
        """
        return self._data["Hour 2"]

    @hour_2.setter
    def hour_2(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_2`

        Args:
            value (float): value for IDD Field `hour_2`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_2`'.format(value))

        self._data["Hour 2"] = value

    @property
    def hour_3(self):
        """Get hour_3

        Returns:
            float: the value of `hour_3` or None if not set
        """
        return self._data["Hour 3"]

    @hour_3.setter
    def hour_3(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_3`

        Args:
            value (float): value for IDD Field `hour_3`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_3`'.format(value))

        self._data["Hour 3"] = value

    @property
    def hour_4(self):
        """Get hour_4

        Returns:
            float: the value of `hour_4` or None if not set
        """
        return self._data["Hour 4"]

    @hour_4.setter
    def hour_4(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_4`

        Args:
            value (float): value for IDD Field `hour_4`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_4`'.format(value))

        self._data["Hour 4"] = value

    @property
    def hour_5(self):
        """Get hour_5

        Returns:
            float: the value of `hour_5` or None if not set
        """
        return self._data["Hour 5"]

    @hour_5.setter
    def hour_5(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_5`

        Args:
            value (float): value for IDD Field `hour_5`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_5`'.format(value))

        self._data["Hour 5"] = value

    @property
    def hour_6(self):
        """Get hour_6

        Returns:
            float: the value of `hour_6` or None if not set
        """
        return self._data["Hour 6"]

    @hour_6.setter
    def hour_6(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_6`

        Args:
            value (float): value for IDD Field `hour_6`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_6`'.format(value))

        self._data["Hour 6"] = value

    @property
    def hour_7(self):
        """Get hour_7

        Returns:
            float: the value of `hour_7` or None if not set
        """
        return self._data["Hour 7"]

    @hour_7.setter
    def hour_7(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_7`

        Args:
            value (float): value for IDD Field `hour_7`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_7`'.format(value))

        self._data["Hour 7"] = value

    @property
    def hour_8(self):
        """Get hour_8

        Returns:
            float: the value of `hour_8` or None if not set
        """
        return self._data["Hour 8"]

    @hour_8.setter
    def hour_8(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_8`

        Args:
            value (float): value for IDD Field `hour_8`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_8`'.format(value))

        self._data["Hour 8"] = value

    @property
    def hour_9(self):
        """Get hour_9

        Returns:
            float: the value of `hour_9` or None if not set
        """
        return self._data["Hour 9"]

    @hour_9.setter
    def hour_9(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_9`

        Args:
            value (float): value for IDD Field `hour_9`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_9`'.format(value))

        self._data["Hour 9"] = value

    @property
    def hour_10(self):
        """Get hour_10

        Returns:
            float: the value of `hour_10` or None if not set
        """
        return self._data["Hour 10"]

    @hour_10.setter
    def hour_10(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_10`

        Args:
            value (float): value for IDD Field `hour_10`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_10`'.format(value))

        self._data["Hour 10"] = value

    @property
    def hour_11(self):
        """Get hour_11

        Returns:
            float: the value of `hour_11` or None if not set
        """
        return self._data["Hour 11"]

    @hour_11.setter
    def hour_11(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_11`

        Args:
            value (float): value for IDD Field `hour_11`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_11`'.format(value))

        self._data["Hour 11"] = value

    @property
    def hour_12(self):
        """Get hour_12

        Returns:
            float: the value of `hour_12` or None if not set
        """
        return self._data["Hour 12"]

    @hour_12.setter
    def hour_12(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_12`

        Args:
            value (float): value for IDD Field `hour_12`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_12`'.format(value))

        self._data["Hour 12"] = value

    @property
    def hour_13(self):
        """Get hour_13

        Returns:
            float: the value of `hour_13` or None if not set
        """
        return self._data["Hour 13"]

    @hour_13.setter
    def hour_13(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_13`

        Args:
            value (float): value for IDD Field `hour_13`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_13`'.format(value))

        self._data["Hour 13"] = value

    @property
    def hour_14(self):
        """Get hour_14

        Returns:
            float: the value of `hour_14` or None if not set
        """
        return self._data["Hour 14"]

    @hour_14.setter
    def hour_14(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_14`

        Args:
            value (float): value for IDD Field `hour_14`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_14`'.format(value))

        self._data["Hour 14"] = value

    @property
    def hour_15(self):
        """Get hour_15

        Returns:
            float: the value of `hour_15` or None if not set
        """
        return self._data["Hour 15"]

    @hour_15.setter
    def hour_15(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_15`

        Args:
            value (float): value for IDD Field `hour_15`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_15`'.format(value))

        self._data["Hour 15"] = value

    @property
    def hour_16(self):
        """Get hour_16

        Returns:
            float: the value of `hour_16` or None if not set
        """
        return self._data["Hour 16"]

    @hour_16.setter
    def hour_16(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_16`

        Args:
            value (float): value for IDD Field `hour_16`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_16`'.format(value))

        self._data["Hour 16"] = value

    @property
    def hour_17(self):
        """Get hour_17

        Returns:
            float: the value of `hour_17` or None if not set
        """
        return self._data["Hour 17"]

    @hour_17.setter
    def hour_17(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_17`

        Args:
            value (float): value for IDD Field `hour_17`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_17`'.format(value))

        self._data["Hour 17"] = value

    @property
    def hour_18(self):
        """Get hour_18

        Returns:
            float: the value of `hour_18` or None if not set
        """
        return self._data["Hour 18"]

    @hour_18.setter
    def hour_18(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_18`

        Args:
            value (float): value for IDD Field `hour_18`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_18`'.format(value))

        self._data["Hour 18"] = value

    @property
    def hour_19(self):
        """Get hour_19

        Returns:
            float: the value of `hour_19` or None if not set
        """
        return self._data["Hour 19"]

    @hour_19.setter
    def hour_19(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_19`

        Args:
            value (float): value for IDD Field `hour_19`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_19`'.format(value))

        self._data["Hour 19"] = value

    @property
    def hour_20(self):
        """Get hour_20

        Returns:
            float: the value of `hour_20` or None if not set
        """
        return self._data["Hour 20"]

    @hour_20.setter
    def hour_20(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_20`

        Args:
            value (float): value for IDD Field `hour_20`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_20`'.format(value))

        self._data["Hour 20"] = value

    @property
    def hour_21(self):
        """Get hour_21

        Returns:
            float: the value of `hour_21` or None if not set
        """
        return self._data["Hour 21"]

    @hour_21.setter
    def hour_21(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_21`

        Args:
            value (float): value for IDD Field `hour_21`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_21`'.format(value))

        self._data["Hour 21"] = value

    @property
    def hour_22(self):
        """Get hour_22

        Returns:
            float: the value of `hour_22` or None if not set
        """
        return self._data["Hour 22"]

    @hour_22.setter
    def hour_22(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_22`

        Args:
            value (float): value for IDD Field `hour_22`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_22`'.format(value))

        self._data["Hour 22"] = value

    @property
    def hour_23(self):
        """Get hour_23

        Returns:
            float: the value of `hour_23` or None if not set
        """
        return self._data["Hour 23"]

    @hour_23.setter
    def hour_23(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_23`

        Args:
            value (float): value for IDD Field `hour_23`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_23`'.format(value))

        self._data["Hour 23"] = value

    @property
    def hour_24(self):
        """Get hour_24

        Returns:
            float: the value of `hour_24` or None if not set
        """
        return self._data["Hour 24"]

    @hour_24.setter
    def hour_24(self, value=0.0 ):
        """  Corresponds to IDD Field `hour_24`

        Args:
            value (float): value for IDD Field `hour_24`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hour_24`'.format(value))

        self._data["Hour 24"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.schedule_type_limits_name))
        out.append(self._to_str(self.hour_1))
        out.append(self._to_str(self.hour_2))
        out.append(self._to_str(self.hour_3))
        out.append(self._to_str(self.hour_4))
        out.append(self._to_str(self.hour_5))
        out.append(self._to_str(self.hour_6))
        out.append(self._to_str(self.hour_7))
        out.append(self._to_str(self.hour_8))
        out.append(self._to_str(self.hour_9))
        out.append(self._to_str(self.hour_10))
        out.append(self._to_str(self.hour_11))
        out.append(self._to_str(self.hour_12))
        out.append(self._to_str(self.hour_13))
        out.append(self._to_str(self.hour_14))
        out.append(self._to_str(self.hour_15))
        out.append(self._to_str(self.hour_16))
        out.append(self._to_str(self.hour_17))
        out.append(self._to_str(self.hour_18))
        out.append(self._to_str(self.hour_19))
        out.append(self._to_str(self.hour_20))
        out.append(self._to_str(self.hour_21))
        out.append(self._to_str(self.hour_22))
        out.append(self._to_str(self.hour_23))
        out.append(self._to_str(self.hour_24))
        return ",".join(out)

class ScheduleDayInterval(object):
    """ Corresponds to IDD object `Schedule:Day:Interval`
        A Schedule:Day:Interval contains a full day of values with specified end times for each value
        Currently, is set up to allow for 10 minute intervals for an entire day.
    """
    internal_name = "Schedule:Day:Interval"
    field_count = 291

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:Day:Interval`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Schedule Type Limits Name"] = None
        self._data["Interpolate to Timestep"] = None
        self._data["Time 1"] = None
        self._data["Value Until Time 1"] = None
        self._data["Time 2"] = None
        self._data["Value Until Time 2"] = None
        self._data["Time 3"] = None
        self._data["Value Until Time 3"] = None
        self._data["Time 4"] = None
        self._data["Value Until Time 4"] = None
        self._data["Time 5"] = None
        self._data["Value Until Time 5"] = None
        self._data["Time 6"] = None
        self._data["Value Until Time 6"] = None
        self._data["Time 7"] = None
        self._data["Value Until Time 7"] = None
        self._data["Time 8"] = None
        self._data["Value Until Time 8"] = None
        self._data["Time 9"] = None
        self._data["Value Until Time 9"] = None
        self._data["Time 10"] = None
        self._data["Value Until Time 10"] = None
        self._data["Time 11"] = None
        self._data["Value Until Time 11"] = None
        self._data["Time 12"] = None
        self._data["Value Until Time 12"] = None
        self._data["Time 13"] = None
        self._data["Value Until Time 13"] = None
        self._data["Time 14"] = None
        self._data["Value Until Time 14"] = None
        self._data["Time 15"] = None
        self._data["Value Until Time 15"] = None
        self._data["Time 16"] = None
        self._data["Value Until Time 16"] = None
        self._data["Time 17"] = None
        self._data["Value Until Time 17"] = None
        self._data["Time 18"] = None
        self._data["Value Until Time 18"] = None
        self._data["Time 19"] = None
        self._data["Value Until Time 19"] = None
        self._data["Time 20"] = None
        self._data["Value Until Time 20"] = None
        self._data["Time 21"] = None
        self._data["Value Until Time 21"] = None
        self._data["Time 22"] = None
        self._data["Value Until Time 22"] = None
        self._data["Time 23"] = None
        self._data["Value Until Time 23"] = None
        self._data["Time 24"] = None
        self._data["Value Until Time 24"] = None
        self._data["Time 25"] = None
        self._data["Value Until Time 25"] = None
        self._data["Time 26"] = None
        self._data["Value Until Time 26"] = None
        self._data["Time 27"] = None
        self._data["Value Until Time 27"] = None
        self._data["Time 28"] = None
        self._data["Value Until Time 28"] = None
        self._data["Time 29"] = None
        self._data["Value Until Time 29"] = None
        self._data["Time 30"] = None
        self._data["Value Until Time 30"] = None
        self._data["Time 31"] = None
        self._data["Value Until Time 31"] = None
        self._data["Time 32"] = None
        self._data["Value Until Time 32"] = None
        self._data["Time 33"] = None
        self._data["Value Until Time 33"] = None
        self._data["Time 34"] = None
        self._data["Value Until Time 34"] = None
        self._data["Time 35"] = None
        self._data["Value Until Time 35"] = None
        self._data["Time 36"] = None
        self._data["Value Until Time 36"] = None
        self._data["Time 37"] = None
        self._data["Value Until Time 37"] = None
        self._data["Time 38"] = None
        self._data["Value Until Time 38"] = None
        self._data["Time 39"] = None
        self._data["Value Until Time 39"] = None
        self._data["Time 40"] = None
        self._data["Value Until Time 40"] = None
        self._data["Time 41"] = None
        self._data["Value Until Time 41"] = None
        self._data["Time 42"] = None
        self._data["Value Until Time 42"] = None
        self._data["Time 43"] = None
        self._data["Value Until Time 43"] = None
        self._data["Time 44"] = None
        self._data["Value Until Time 44"] = None
        self._data["Time 45"] = None
        self._data["Value Until Time 45"] = None
        self._data["Time 46"] = None
        self._data["Value Until Time 46"] = None
        self._data["Time 47"] = None
        self._data["Value Until Time 47"] = None
        self._data["Time 48"] = None
        self._data["Value Until Time 48"] = None
        self._data["Time 49"] = None
        self._data["Value Until Time 49"] = None
        self._data["Time 50"] = None
        self._data["Value Until Time 50"] = None
        self._data["Time 51"] = None
        self._data["Value Until Time 51"] = None
        self._data["Time 52"] = None
        self._data["Value Until Time 52"] = None
        self._data["Time 53"] = None
        self._data["Value Until Time 53"] = None
        self._data["Time 54"] = None
        self._data["Value Until Time 54"] = None
        self._data["Time 55"] = None
        self._data["Value Until Time 55"] = None
        self._data["Time 56"] = None
        self._data["Value Until Time 56"] = None
        self._data["Time 57"] = None
        self._data["Value Until Time 57"] = None
        self._data["Time 58"] = None
        self._data["Value Until Time 58"] = None
        self._data["Time 59"] = None
        self._data["Value Until Time 59"] = None
        self._data["Time 60"] = None
        self._data["Value Until Time 60"] = None
        self._data["Time 61"] = None
        self._data["Value Until Time 61"] = None
        self._data["Time 62"] = None
        self._data["Value Until Time 62"] = None
        self._data["Time 63"] = None
        self._data["Value Until Time 63"] = None
        self._data["Time 64"] = None
        self._data["Value Until Time 64"] = None
        self._data["Time 65"] = None
        self._data["Value Until Time 65"] = None
        self._data["Time 66"] = None
        self._data["Value Until Time 66"] = None
        self._data["Time 67"] = None
        self._data["Value Until Time 67"] = None
        self._data["Time 68"] = None
        self._data["Value Until Time 68"] = None
        self._data["Time 69"] = None
        self._data["Value Until Time 69"] = None
        self._data["Time 70"] = None
        self._data["Value Until Time 70"] = None
        self._data["Time 71"] = None
        self._data["Value Until Time 71"] = None
        self._data["Time 72"] = None
        self._data["Value Until Time 72"] = None
        self._data["Time 73"] = None
        self._data["Value Until Time 73"] = None
        self._data["Time 74"] = None
        self._data["Value Until Time 74"] = None
        self._data["Time 75"] = None
        self._data["Value Until Time 75"] = None
        self._data["Time 76"] = None
        self._data["Value Until Time 76"] = None
        self._data["Time 77"] = None
        self._data["Value Until Time 77"] = None
        self._data["Time 78"] = None
        self._data["Value Until Time 78"] = None
        self._data["Time 79"] = None
        self._data["Value Until Time 79"] = None
        self._data["Time 80"] = None
        self._data["Value Until Time 80"] = None
        self._data["Time 81"] = None
        self._data["Value Until Time 81"] = None
        self._data["Time 82"] = None
        self._data["Value Until Time 82"] = None
        self._data["Time 83"] = None
        self._data["Value Until Time 83"] = None
        self._data["Time 84"] = None
        self._data["Value Until Time 84"] = None
        self._data["Time 85"] = None
        self._data["Value Until Time 85"] = None
        self._data["Time 86"] = None
        self._data["Value Until Time 86"] = None
        self._data["Time 87"] = None
        self._data["Value Until Time 87"] = None
        self._data["Time 88"] = None
        self._data["Value Until Time 88"] = None
        self._data["Time 89"] = None
        self._data["Value Until Time 89"] = None
        self._data["Time 90"] = None
        self._data["Value Until Time 90"] = None
        self._data["Time 91"] = None
        self._data["Value Until Time 91"] = None
        self._data["Time 92"] = None
        self._data["Value Until Time 92"] = None
        self._data["Time 93"] = None
        self._data["Value Until Time 93"] = None
        self._data["Time 94"] = None
        self._data["Value Until Time 94"] = None
        self._data["Time 95"] = None
        self._data["Value Until Time 95"] = None
        self._data["Time 96"] = None
        self._data["Value Until Time 96"] = None
        self._data["Time 97"] = None
        self._data["Value Until Time 97"] = None
        self._data["Time 98"] = None
        self._data["Value Until Time 98"] = None
        self._data["Time 99"] = None
        self._data["Value Until Time 99"] = None
        self._data["Time 100"] = None
        self._data["Value Until Time 100"] = None
        self._data["Time 101"] = None
        self._data["Value Until Time 101"] = None
        self._data["Time 102"] = None
        self._data["Value Until Time 102"] = None
        self._data["Time 103"] = None
        self._data["Value Until Time 103"] = None
        self._data["Time 104"] = None
        self._data["Value Until Time 104"] = None
        self._data["Time 105"] = None
        self._data["Value Until Time 105"] = None
        self._data["Time 106"] = None
        self._data["Value Until Time 106"] = None
        self._data["Time 107"] = None
        self._data["Value Until Time 107"] = None
        self._data["Time 108"] = None
        self._data["Value Until Time 108"] = None
        self._data["Time 109"] = None
        self._data["Value Until Time 109"] = None
        self._data["Time 110"] = None
        self._data["Value Until Time 110"] = None
        self._data["Time 111"] = None
        self._data["Value Until Time 111"] = None
        self._data["Time 112"] = None
        self._data["Value Until Time 112"] = None
        self._data["Time 113"] = None
        self._data["Value Until Time 113"] = None
        self._data["Time 114"] = None
        self._data["Value Until Time 114"] = None
        self._data["Time 115"] = None
        self._data["Value Until Time 115"] = None
        self._data["Time 116"] = None
        self._data["Value Until Time 116"] = None
        self._data["Time 117"] = None
        self._data["Value Until Time 117"] = None
        self._data["Time 118"] = None
        self._data["Value Until Time 118"] = None
        self._data["Time 119"] = None
        self._data["Value Until Time 119"] = None
        self._data["Time 120"] = None
        self._data["Value Until Time 120"] = None
        self._data["Time 121"] = None
        self._data["Value Until Time 121"] = None
        self._data["Time 122"] = None
        self._data["Value Until Time 122"] = None
        self._data["Time 123"] = None
        self._data["Value Until Time 123"] = None
        self._data["Time 124"] = None
        self._data["Value Until Time 124"] = None
        self._data["Time 125"] = None
        self._data["Value Until Time 125"] = None
        self._data["Time 126"] = None
        self._data["Value Until Time 126"] = None
        self._data["Time 127"] = None
        self._data["Value Until Time 127"] = None
        self._data["Time 128"] = None
        self._data["Value Until Time 128"] = None
        self._data["Time 129"] = None
        self._data["Value Until Time 129"] = None
        self._data["Time 130"] = None
        self._data["Value Until Time 130"] = None
        self._data["Time 131"] = None
        self._data["Value Until Time 131"] = None
        self._data["Time 132"] = None
        self._data["Value Until Time 132"] = None
        self._data["Time 133"] = None
        self._data["Value Until Time 133"] = None
        self._data["Time 134"] = None
        self._data["Value Until Time 134"] = None
        self._data["Time 135"] = None
        self._data["Value Until Time 135"] = None
        self._data["Time 136"] = None
        self._data["Value Until Time 136"] = None
        self._data["Time 137"] = None
        self._data["Value Until Time 137"] = None
        self._data["Time 138"] = None
        self._data["Value Until Time 138"] = None
        self._data["Time 139"] = None
        self._data["Value Until Time 139"] = None
        self._data["Time 140"] = None
        self._data["Value Until Time 140"] = None
        self._data["Time 141"] = None
        self._data["Value Until Time 141"] = None
        self._data["Time 142"] = None
        self._data["Value Until Time 142"] = None
        self._data["Time 143"] = None
        self._data["Value Until Time 143"] = None
        self._data["Time 144"] = None
        self._data["Value Until Time 144"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_type_limits_name = None
        else:
            self.schedule_type_limits_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interpolate_to_timestep = None
        else:
            self.interpolate_to_timestep = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_1 = None
        else:
            self.time_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_1 = None
        else:
            self.value_until_time_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_2 = None
        else:
            self.time_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_2 = None
        else:
            self.value_until_time_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_3 = None
        else:
            self.time_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_3 = None
        else:
            self.value_until_time_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_4 = None
        else:
            self.time_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_4 = None
        else:
            self.value_until_time_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_5 = None
        else:
            self.time_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_5 = None
        else:
            self.value_until_time_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_6 = None
        else:
            self.time_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_6 = None
        else:
            self.value_until_time_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_7 = None
        else:
            self.time_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_7 = None
        else:
            self.value_until_time_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_8 = None
        else:
            self.time_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_8 = None
        else:
            self.value_until_time_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_9 = None
        else:
            self.time_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_9 = None
        else:
            self.value_until_time_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_10 = None
        else:
            self.time_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_10 = None
        else:
            self.value_until_time_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_11 = None
        else:
            self.time_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_11 = None
        else:
            self.value_until_time_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_12 = None
        else:
            self.time_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_12 = None
        else:
            self.value_until_time_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_13 = None
        else:
            self.time_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_13 = None
        else:
            self.value_until_time_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_14 = None
        else:
            self.time_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_14 = None
        else:
            self.value_until_time_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_15 = None
        else:
            self.time_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_15 = None
        else:
            self.value_until_time_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_16 = None
        else:
            self.time_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_16 = None
        else:
            self.value_until_time_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_17 = None
        else:
            self.time_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_17 = None
        else:
            self.value_until_time_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_18 = None
        else:
            self.time_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_18 = None
        else:
            self.value_until_time_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_19 = None
        else:
            self.time_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_19 = None
        else:
            self.value_until_time_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_20 = None
        else:
            self.time_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_20 = None
        else:
            self.value_until_time_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_21 = None
        else:
            self.time_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_21 = None
        else:
            self.value_until_time_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_22 = None
        else:
            self.time_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_22 = None
        else:
            self.value_until_time_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_23 = None
        else:
            self.time_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_23 = None
        else:
            self.value_until_time_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_24 = None
        else:
            self.time_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_24 = None
        else:
            self.value_until_time_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_25 = None
        else:
            self.time_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_25 = None
        else:
            self.value_until_time_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_26 = None
        else:
            self.time_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_26 = None
        else:
            self.value_until_time_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_27 = None
        else:
            self.time_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_27 = None
        else:
            self.value_until_time_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_28 = None
        else:
            self.time_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_28 = None
        else:
            self.value_until_time_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_29 = None
        else:
            self.time_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_29 = None
        else:
            self.value_until_time_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_30 = None
        else:
            self.time_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_30 = None
        else:
            self.value_until_time_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_31 = None
        else:
            self.time_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_31 = None
        else:
            self.value_until_time_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_32 = None
        else:
            self.time_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_32 = None
        else:
            self.value_until_time_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_33 = None
        else:
            self.time_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_33 = None
        else:
            self.value_until_time_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_34 = None
        else:
            self.time_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_34 = None
        else:
            self.value_until_time_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_35 = None
        else:
            self.time_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_35 = None
        else:
            self.value_until_time_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_36 = None
        else:
            self.time_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_36 = None
        else:
            self.value_until_time_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_37 = None
        else:
            self.time_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_37 = None
        else:
            self.value_until_time_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_38 = None
        else:
            self.time_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_38 = None
        else:
            self.value_until_time_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_39 = None
        else:
            self.time_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_39 = None
        else:
            self.value_until_time_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_40 = None
        else:
            self.time_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_40 = None
        else:
            self.value_until_time_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_41 = None
        else:
            self.time_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_41 = None
        else:
            self.value_until_time_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_42 = None
        else:
            self.time_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_42 = None
        else:
            self.value_until_time_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_43 = None
        else:
            self.time_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_43 = None
        else:
            self.value_until_time_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_44 = None
        else:
            self.time_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_44 = None
        else:
            self.value_until_time_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_45 = None
        else:
            self.time_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_45 = None
        else:
            self.value_until_time_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_46 = None
        else:
            self.time_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_46 = None
        else:
            self.value_until_time_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_47 = None
        else:
            self.time_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_47 = None
        else:
            self.value_until_time_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_48 = None
        else:
            self.time_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_48 = None
        else:
            self.value_until_time_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_49 = None
        else:
            self.time_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_49 = None
        else:
            self.value_until_time_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_50 = None
        else:
            self.time_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_50 = None
        else:
            self.value_until_time_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_51 = None
        else:
            self.time_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_51 = None
        else:
            self.value_until_time_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_52 = None
        else:
            self.time_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_52 = None
        else:
            self.value_until_time_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_53 = None
        else:
            self.time_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_53 = None
        else:
            self.value_until_time_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_54 = None
        else:
            self.time_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_54 = None
        else:
            self.value_until_time_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_55 = None
        else:
            self.time_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_55 = None
        else:
            self.value_until_time_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_56 = None
        else:
            self.time_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_56 = None
        else:
            self.value_until_time_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_57 = None
        else:
            self.time_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_57 = None
        else:
            self.value_until_time_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_58 = None
        else:
            self.time_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_58 = None
        else:
            self.value_until_time_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_59 = None
        else:
            self.time_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_59 = None
        else:
            self.value_until_time_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_60 = None
        else:
            self.time_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_60 = None
        else:
            self.value_until_time_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_61 = None
        else:
            self.time_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_61 = None
        else:
            self.value_until_time_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_62 = None
        else:
            self.time_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_62 = None
        else:
            self.value_until_time_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_63 = None
        else:
            self.time_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_63 = None
        else:
            self.value_until_time_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_64 = None
        else:
            self.time_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_64 = None
        else:
            self.value_until_time_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_65 = None
        else:
            self.time_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_65 = None
        else:
            self.value_until_time_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_66 = None
        else:
            self.time_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_66 = None
        else:
            self.value_until_time_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_67 = None
        else:
            self.time_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_67 = None
        else:
            self.value_until_time_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_68 = None
        else:
            self.time_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_68 = None
        else:
            self.value_until_time_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_69 = None
        else:
            self.time_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_69 = None
        else:
            self.value_until_time_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_70 = None
        else:
            self.time_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_70 = None
        else:
            self.value_until_time_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_71 = None
        else:
            self.time_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_71 = None
        else:
            self.value_until_time_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_72 = None
        else:
            self.time_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_72 = None
        else:
            self.value_until_time_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_73 = None
        else:
            self.time_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_73 = None
        else:
            self.value_until_time_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_74 = None
        else:
            self.time_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_74 = None
        else:
            self.value_until_time_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_75 = None
        else:
            self.time_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_75 = None
        else:
            self.value_until_time_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_76 = None
        else:
            self.time_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_76 = None
        else:
            self.value_until_time_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_77 = None
        else:
            self.time_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_77 = None
        else:
            self.value_until_time_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_78 = None
        else:
            self.time_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_78 = None
        else:
            self.value_until_time_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_79 = None
        else:
            self.time_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_79 = None
        else:
            self.value_until_time_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_80 = None
        else:
            self.time_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_80 = None
        else:
            self.value_until_time_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_81 = None
        else:
            self.time_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_81 = None
        else:
            self.value_until_time_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_82 = None
        else:
            self.time_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_82 = None
        else:
            self.value_until_time_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_83 = None
        else:
            self.time_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_83 = None
        else:
            self.value_until_time_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_84 = None
        else:
            self.time_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_84 = None
        else:
            self.value_until_time_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_85 = None
        else:
            self.time_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_85 = None
        else:
            self.value_until_time_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_86 = None
        else:
            self.time_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_86 = None
        else:
            self.value_until_time_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_87 = None
        else:
            self.time_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_87 = None
        else:
            self.value_until_time_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_88 = None
        else:
            self.time_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_88 = None
        else:
            self.value_until_time_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_89 = None
        else:
            self.time_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_89 = None
        else:
            self.value_until_time_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_90 = None
        else:
            self.time_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_90 = None
        else:
            self.value_until_time_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_91 = None
        else:
            self.time_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_91 = None
        else:
            self.value_until_time_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_92 = None
        else:
            self.time_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_92 = None
        else:
            self.value_until_time_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_93 = None
        else:
            self.time_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_93 = None
        else:
            self.value_until_time_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_94 = None
        else:
            self.time_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_94 = None
        else:
            self.value_until_time_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_95 = None
        else:
            self.time_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_95 = None
        else:
            self.value_until_time_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_96 = None
        else:
            self.time_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_96 = None
        else:
            self.value_until_time_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_97 = None
        else:
            self.time_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_97 = None
        else:
            self.value_until_time_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_98 = None
        else:
            self.time_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_98 = None
        else:
            self.value_until_time_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_99 = None
        else:
            self.time_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_99 = None
        else:
            self.value_until_time_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_100 = None
        else:
            self.time_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_100 = None
        else:
            self.value_until_time_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_101 = None
        else:
            self.time_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_101 = None
        else:
            self.value_until_time_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_102 = None
        else:
            self.time_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_102 = None
        else:
            self.value_until_time_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_103 = None
        else:
            self.time_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_103 = None
        else:
            self.value_until_time_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_104 = None
        else:
            self.time_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_104 = None
        else:
            self.value_until_time_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_105 = None
        else:
            self.time_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_105 = None
        else:
            self.value_until_time_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_106 = None
        else:
            self.time_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_106 = None
        else:
            self.value_until_time_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_107 = None
        else:
            self.time_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_107 = None
        else:
            self.value_until_time_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_108 = None
        else:
            self.time_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_108 = None
        else:
            self.value_until_time_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_109 = None
        else:
            self.time_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_109 = None
        else:
            self.value_until_time_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_110 = None
        else:
            self.time_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_110 = None
        else:
            self.value_until_time_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_111 = None
        else:
            self.time_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_111 = None
        else:
            self.value_until_time_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_112 = None
        else:
            self.time_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_112 = None
        else:
            self.value_until_time_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_113 = None
        else:
            self.time_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_113 = None
        else:
            self.value_until_time_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_114 = None
        else:
            self.time_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_114 = None
        else:
            self.value_until_time_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_115 = None
        else:
            self.time_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_115 = None
        else:
            self.value_until_time_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_116 = None
        else:
            self.time_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_116 = None
        else:
            self.value_until_time_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_117 = None
        else:
            self.time_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_117 = None
        else:
            self.value_until_time_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_118 = None
        else:
            self.time_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_118 = None
        else:
            self.value_until_time_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_119 = None
        else:
            self.time_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_119 = None
        else:
            self.value_until_time_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_120 = None
        else:
            self.time_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_120 = None
        else:
            self.value_until_time_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_121 = None
        else:
            self.time_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_121 = None
        else:
            self.value_until_time_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_122 = None
        else:
            self.time_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_122 = None
        else:
            self.value_until_time_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_123 = None
        else:
            self.time_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_123 = None
        else:
            self.value_until_time_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_124 = None
        else:
            self.time_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_124 = None
        else:
            self.value_until_time_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_125 = None
        else:
            self.time_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_125 = None
        else:
            self.value_until_time_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_126 = None
        else:
            self.time_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_126 = None
        else:
            self.value_until_time_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_127 = None
        else:
            self.time_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_127 = None
        else:
            self.value_until_time_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_128 = None
        else:
            self.time_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_128 = None
        else:
            self.value_until_time_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_129 = None
        else:
            self.time_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_129 = None
        else:
            self.value_until_time_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_130 = None
        else:
            self.time_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_130 = None
        else:
            self.value_until_time_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_131 = None
        else:
            self.time_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_131 = None
        else:
            self.value_until_time_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_132 = None
        else:
            self.time_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_132 = None
        else:
            self.value_until_time_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_133 = None
        else:
            self.time_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_133 = None
        else:
            self.value_until_time_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_134 = None
        else:
            self.time_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_134 = None
        else:
            self.value_until_time_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_135 = None
        else:
            self.time_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_135 = None
        else:
            self.value_until_time_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_136 = None
        else:
            self.time_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_136 = None
        else:
            self.value_until_time_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_137 = None
        else:
            self.time_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_137 = None
        else:
            self.value_until_time_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_138 = None
        else:
            self.time_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_138 = None
        else:
            self.value_until_time_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_139 = None
        else:
            self.time_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_139 = None
        else:
            self.value_until_time_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_140 = None
        else:
            self.time_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_140 = None
        else:
            self.value_until_time_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_141 = None
        else:
            self.time_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_141 = None
        else:
            self.value_until_time_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_142 = None
        else:
            self.time_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_142 = None
        else:
            self.value_until_time_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_143 = None
        else:
            self.time_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_143 = None
        else:
            self.value_until_time_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_144 = None
        else:
            self.time_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_until_time_144 = None
        else:
            self.value_until_time_144 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def schedule_type_limits_name(self):
        """Get schedule_type_limits_name

        Returns:
            str: the value of `schedule_type_limits_name` or None if not set
        """
        return self._data["Schedule Type Limits Name"]

    @schedule_type_limits_name.setter
    def schedule_type_limits_name(self, value=None):
        """  Corresponds to IDD Field `schedule_type_limits_name`

        Args:
            value (str): value for IDD Field `schedule_type_limits_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_type_limits_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_type_limits_name`')

        self._data["Schedule Type Limits Name"] = value

    @property
    def interpolate_to_timestep(self):
        """Get interpolate_to_timestep

        Returns:
            str: the value of `interpolate_to_timestep` or None if not set
        """
        return self._data["Interpolate to Timestep"]

    @interpolate_to_timestep.setter
    def interpolate_to_timestep(self, value="No"):
        """  Corresponds to IDD Field `interpolate_to_timestep`
        when the interval does not match the user specified timestep a Yes choice will average between the intervals request (to
        timestep resolution.  a No choice will use the interval value at the simulation timestep without regard to if it matches
        the boundary or not.

        Args:
            value (str): value for IDD Field `interpolate_to_timestep`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `interpolate_to_timestep`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `interpolate_to_timestep`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `interpolate_to_timestep`'.format(value))

        self._data["Interpolate to Timestep"] = value

    @property
    def time_1(self):
        """Get time_1

        Returns:
            str: the value of `time_1` or None if not set
        """
        return self._data["Time 1"]

    @time_1.setter
    def time_1(self, value=None):
        """  Corresponds to IDD Field `time_1`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_1`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_1`')

        self._data["Time 1"] = value

    @property
    def value_until_time_1(self):
        """Get value_until_time_1

        Returns:
            float: the value of `value_until_time_1` or None if not set
        """
        return self._data["Value Until Time 1"]

    @value_until_time_1.setter
    def value_until_time_1(self, value=None):
        """  Corresponds to IDD Field `value_until_time_1`

        Args:
            value (float): value for IDD Field `value_until_time_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_1`'.format(value))

        self._data["Value Until Time 1"] = value

    @property
    def time_2(self):
        """Get time_2

        Returns:
            str: the value of `time_2` or None if not set
        """
        return self._data["Time 2"]

    @time_2.setter
    def time_2(self, value=None):
        """  Corresponds to IDD Field `time_2`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_2`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_2`')

        self._data["Time 2"] = value

    @property
    def value_until_time_2(self):
        """Get value_until_time_2

        Returns:
            float: the value of `value_until_time_2` or None if not set
        """
        return self._data["Value Until Time 2"]

    @value_until_time_2.setter
    def value_until_time_2(self, value=None):
        """  Corresponds to IDD Field `value_until_time_2`

        Args:
            value (float): value for IDD Field `value_until_time_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_2`'.format(value))

        self._data["Value Until Time 2"] = value

    @property
    def time_3(self):
        """Get time_3

        Returns:
            str: the value of `time_3` or None if not set
        """
        return self._data["Time 3"]

    @time_3.setter
    def time_3(self, value=None):
        """  Corresponds to IDD Field `time_3`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_3`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_3`')

        self._data["Time 3"] = value

    @property
    def value_until_time_3(self):
        """Get value_until_time_3

        Returns:
            float: the value of `value_until_time_3` or None if not set
        """
        return self._data["Value Until Time 3"]

    @value_until_time_3.setter
    def value_until_time_3(self, value=None):
        """  Corresponds to IDD Field `value_until_time_3`

        Args:
            value (float): value for IDD Field `value_until_time_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_3`'.format(value))

        self._data["Value Until Time 3"] = value

    @property
    def time_4(self):
        """Get time_4

        Returns:
            str: the value of `time_4` or None if not set
        """
        return self._data["Time 4"]

    @time_4.setter
    def time_4(self, value=None):
        """  Corresponds to IDD Field `time_4`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_4`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_4`')

        self._data["Time 4"] = value

    @property
    def value_until_time_4(self):
        """Get value_until_time_4

        Returns:
            float: the value of `value_until_time_4` or None if not set
        """
        return self._data["Value Until Time 4"]

    @value_until_time_4.setter
    def value_until_time_4(self, value=None):
        """  Corresponds to IDD Field `value_until_time_4`

        Args:
            value (float): value for IDD Field `value_until_time_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_4`'.format(value))

        self._data["Value Until Time 4"] = value

    @property
    def time_5(self):
        """Get time_5

        Returns:
            str: the value of `time_5` or None if not set
        """
        return self._data["Time 5"]

    @time_5.setter
    def time_5(self, value=None):
        """  Corresponds to IDD Field `time_5`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_5`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_5`')

        self._data["Time 5"] = value

    @property
    def value_until_time_5(self):
        """Get value_until_time_5

        Returns:
            float: the value of `value_until_time_5` or None if not set
        """
        return self._data["Value Until Time 5"]

    @value_until_time_5.setter
    def value_until_time_5(self, value=None):
        """  Corresponds to IDD Field `value_until_time_5`

        Args:
            value (float): value for IDD Field `value_until_time_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_5`'.format(value))

        self._data["Value Until Time 5"] = value

    @property
    def time_6(self):
        """Get time_6

        Returns:
            str: the value of `time_6` or None if not set
        """
        return self._data["Time 6"]

    @time_6.setter
    def time_6(self, value=None):
        """  Corresponds to IDD Field `time_6`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_6`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_6`')

        self._data["Time 6"] = value

    @property
    def value_until_time_6(self):
        """Get value_until_time_6

        Returns:
            float: the value of `value_until_time_6` or None if not set
        """
        return self._data["Value Until Time 6"]

    @value_until_time_6.setter
    def value_until_time_6(self, value=None):
        """  Corresponds to IDD Field `value_until_time_6`

        Args:
            value (float): value for IDD Field `value_until_time_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_6`'.format(value))

        self._data["Value Until Time 6"] = value

    @property
    def time_7(self):
        """Get time_7

        Returns:
            str: the value of `time_7` or None if not set
        """
        return self._data["Time 7"]

    @time_7.setter
    def time_7(self, value=None):
        """  Corresponds to IDD Field `time_7`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_7`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_7`')

        self._data["Time 7"] = value

    @property
    def value_until_time_7(self):
        """Get value_until_time_7

        Returns:
            float: the value of `value_until_time_7` or None if not set
        """
        return self._data["Value Until Time 7"]

    @value_until_time_7.setter
    def value_until_time_7(self, value=None):
        """  Corresponds to IDD Field `value_until_time_7`

        Args:
            value (float): value for IDD Field `value_until_time_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_7`'.format(value))

        self._data["Value Until Time 7"] = value

    @property
    def time_8(self):
        """Get time_8

        Returns:
            str: the value of `time_8` or None if not set
        """
        return self._data["Time 8"]

    @time_8.setter
    def time_8(self, value=None):
        """  Corresponds to IDD Field `time_8`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_8`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_8`')

        self._data["Time 8"] = value

    @property
    def value_until_time_8(self):
        """Get value_until_time_8

        Returns:
            float: the value of `value_until_time_8` or None if not set
        """
        return self._data["Value Until Time 8"]

    @value_until_time_8.setter
    def value_until_time_8(self, value=None):
        """  Corresponds to IDD Field `value_until_time_8`

        Args:
            value (float): value for IDD Field `value_until_time_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_8`'.format(value))

        self._data["Value Until Time 8"] = value

    @property
    def time_9(self):
        """Get time_9

        Returns:
            str: the value of `time_9` or None if not set
        """
        return self._data["Time 9"]

    @time_9.setter
    def time_9(self, value=None):
        """  Corresponds to IDD Field `time_9`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_9`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_9`')

        self._data["Time 9"] = value

    @property
    def value_until_time_9(self):
        """Get value_until_time_9

        Returns:
            float: the value of `value_until_time_9` or None if not set
        """
        return self._data["Value Until Time 9"]

    @value_until_time_9.setter
    def value_until_time_9(self, value=None):
        """  Corresponds to IDD Field `value_until_time_9`

        Args:
            value (float): value for IDD Field `value_until_time_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_9`'.format(value))

        self._data["Value Until Time 9"] = value

    @property
    def time_10(self):
        """Get time_10

        Returns:
            str: the value of `time_10` or None if not set
        """
        return self._data["Time 10"]

    @time_10.setter
    def time_10(self, value=None):
        """  Corresponds to IDD Field `time_10`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_10`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_10`')

        self._data["Time 10"] = value

    @property
    def value_until_time_10(self):
        """Get value_until_time_10

        Returns:
            float: the value of `value_until_time_10` or None if not set
        """
        return self._data["Value Until Time 10"]

    @value_until_time_10.setter
    def value_until_time_10(self, value=None):
        """  Corresponds to IDD Field `value_until_time_10`

        Args:
            value (float): value for IDD Field `value_until_time_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_10`'.format(value))

        self._data["Value Until Time 10"] = value

    @property
    def time_11(self):
        """Get time_11

        Returns:
            str: the value of `time_11` or None if not set
        """
        return self._data["Time 11"]

    @time_11.setter
    def time_11(self, value=None):
        """  Corresponds to IDD Field `time_11`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_11`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_11`')

        self._data["Time 11"] = value

    @property
    def value_until_time_11(self):
        """Get value_until_time_11

        Returns:
            float: the value of `value_until_time_11` or None if not set
        """
        return self._data["Value Until Time 11"]

    @value_until_time_11.setter
    def value_until_time_11(self, value=None):
        """  Corresponds to IDD Field `value_until_time_11`

        Args:
            value (float): value for IDD Field `value_until_time_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_11`'.format(value))

        self._data["Value Until Time 11"] = value

    @property
    def time_12(self):
        """Get time_12

        Returns:
            str: the value of `time_12` or None if not set
        """
        return self._data["Time 12"]

    @time_12.setter
    def time_12(self, value=None):
        """  Corresponds to IDD Field `time_12`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_12`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_12`')

        self._data["Time 12"] = value

    @property
    def value_until_time_12(self):
        """Get value_until_time_12

        Returns:
            float: the value of `value_until_time_12` or None if not set
        """
        return self._data["Value Until Time 12"]

    @value_until_time_12.setter
    def value_until_time_12(self, value=None):
        """  Corresponds to IDD Field `value_until_time_12`

        Args:
            value (float): value for IDD Field `value_until_time_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_12`'.format(value))

        self._data["Value Until Time 12"] = value

    @property
    def time_13(self):
        """Get time_13

        Returns:
            str: the value of `time_13` or None if not set
        """
        return self._data["Time 13"]

    @time_13.setter
    def time_13(self, value=None):
        """  Corresponds to IDD Field `time_13`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_13`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_13`')

        self._data["Time 13"] = value

    @property
    def value_until_time_13(self):
        """Get value_until_time_13

        Returns:
            float: the value of `value_until_time_13` or None if not set
        """
        return self._data["Value Until Time 13"]

    @value_until_time_13.setter
    def value_until_time_13(self, value=None):
        """  Corresponds to IDD Field `value_until_time_13`

        Args:
            value (float): value for IDD Field `value_until_time_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_13`'.format(value))

        self._data["Value Until Time 13"] = value

    @property
    def time_14(self):
        """Get time_14

        Returns:
            str: the value of `time_14` or None if not set
        """
        return self._data["Time 14"]

    @time_14.setter
    def time_14(self, value=None):
        """  Corresponds to IDD Field `time_14`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_14`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_14`')

        self._data["Time 14"] = value

    @property
    def value_until_time_14(self):
        """Get value_until_time_14

        Returns:
            float: the value of `value_until_time_14` or None if not set
        """
        return self._data["Value Until Time 14"]

    @value_until_time_14.setter
    def value_until_time_14(self, value=None):
        """  Corresponds to IDD Field `value_until_time_14`

        Args:
            value (float): value for IDD Field `value_until_time_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_14`'.format(value))

        self._data["Value Until Time 14"] = value

    @property
    def time_15(self):
        """Get time_15

        Returns:
            str: the value of `time_15` or None if not set
        """
        return self._data["Time 15"]

    @time_15.setter
    def time_15(self, value=None):
        """  Corresponds to IDD Field `time_15`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_15`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_15`')

        self._data["Time 15"] = value

    @property
    def value_until_time_15(self):
        """Get value_until_time_15

        Returns:
            float: the value of `value_until_time_15` or None if not set
        """
        return self._data["Value Until Time 15"]

    @value_until_time_15.setter
    def value_until_time_15(self, value=None):
        """  Corresponds to IDD Field `value_until_time_15`

        Args:
            value (float): value for IDD Field `value_until_time_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_15`'.format(value))

        self._data["Value Until Time 15"] = value

    @property
    def time_16(self):
        """Get time_16

        Returns:
            str: the value of `time_16` or None if not set
        """
        return self._data["Time 16"]

    @time_16.setter
    def time_16(self, value=None):
        """  Corresponds to IDD Field `time_16`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_16`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_16`')

        self._data["Time 16"] = value

    @property
    def value_until_time_16(self):
        """Get value_until_time_16

        Returns:
            float: the value of `value_until_time_16` or None if not set
        """
        return self._data["Value Until Time 16"]

    @value_until_time_16.setter
    def value_until_time_16(self, value=None):
        """  Corresponds to IDD Field `value_until_time_16`

        Args:
            value (float): value for IDD Field `value_until_time_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_16`'.format(value))

        self._data["Value Until Time 16"] = value

    @property
    def time_17(self):
        """Get time_17

        Returns:
            str: the value of `time_17` or None if not set
        """
        return self._data["Time 17"]

    @time_17.setter
    def time_17(self, value=None):
        """  Corresponds to IDD Field `time_17`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_17`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_17`')

        self._data["Time 17"] = value

    @property
    def value_until_time_17(self):
        """Get value_until_time_17

        Returns:
            float: the value of `value_until_time_17` or None if not set
        """
        return self._data["Value Until Time 17"]

    @value_until_time_17.setter
    def value_until_time_17(self, value=None):
        """  Corresponds to IDD Field `value_until_time_17`

        Args:
            value (float): value for IDD Field `value_until_time_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_17`'.format(value))

        self._data["Value Until Time 17"] = value

    @property
    def time_18(self):
        """Get time_18

        Returns:
            str: the value of `time_18` or None if not set
        """
        return self._data["Time 18"]

    @time_18.setter
    def time_18(self, value=None):
        """  Corresponds to IDD Field `time_18`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_18`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_18`')

        self._data["Time 18"] = value

    @property
    def value_until_time_18(self):
        """Get value_until_time_18

        Returns:
            float: the value of `value_until_time_18` or None if not set
        """
        return self._data["Value Until Time 18"]

    @value_until_time_18.setter
    def value_until_time_18(self, value=None):
        """  Corresponds to IDD Field `value_until_time_18`

        Args:
            value (float): value for IDD Field `value_until_time_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_18`'.format(value))

        self._data["Value Until Time 18"] = value

    @property
    def time_19(self):
        """Get time_19

        Returns:
            str: the value of `time_19` or None if not set
        """
        return self._data["Time 19"]

    @time_19.setter
    def time_19(self, value=None):
        """  Corresponds to IDD Field `time_19`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_19`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_19`')

        self._data["Time 19"] = value

    @property
    def value_until_time_19(self):
        """Get value_until_time_19

        Returns:
            float: the value of `value_until_time_19` or None if not set
        """
        return self._data["Value Until Time 19"]

    @value_until_time_19.setter
    def value_until_time_19(self, value=None):
        """  Corresponds to IDD Field `value_until_time_19`

        Args:
            value (float): value for IDD Field `value_until_time_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_19`'.format(value))

        self._data["Value Until Time 19"] = value

    @property
    def time_20(self):
        """Get time_20

        Returns:
            str: the value of `time_20` or None if not set
        """
        return self._data["Time 20"]

    @time_20.setter
    def time_20(self, value=None):
        """  Corresponds to IDD Field `time_20`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_20`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_20`')

        self._data["Time 20"] = value

    @property
    def value_until_time_20(self):
        """Get value_until_time_20

        Returns:
            float: the value of `value_until_time_20` or None if not set
        """
        return self._data["Value Until Time 20"]

    @value_until_time_20.setter
    def value_until_time_20(self, value=None):
        """  Corresponds to IDD Field `value_until_time_20`

        Args:
            value (float): value for IDD Field `value_until_time_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_20`'.format(value))

        self._data["Value Until Time 20"] = value

    @property
    def time_21(self):
        """Get time_21

        Returns:
            str: the value of `time_21` or None if not set
        """
        return self._data["Time 21"]

    @time_21.setter
    def time_21(self, value=None):
        """  Corresponds to IDD Field `time_21`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_21`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_21`')

        self._data["Time 21"] = value

    @property
    def value_until_time_21(self):
        """Get value_until_time_21

        Returns:
            float: the value of `value_until_time_21` or None if not set
        """
        return self._data["Value Until Time 21"]

    @value_until_time_21.setter
    def value_until_time_21(self, value=None):
        """  Corresponds to IDD Field `value_until_time_21`

        Args:
            value (float): value for IDD Field `value_until_time_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_21`'.format(value))

        self._data["Value Until Time 21"] = value

    @property
    def time_22(self):
        """Get time_22

        Returns:
            str: the value of `time_22` or None if not set
        """
        return self._data["Time 22"]

    @time_22.setter
    def time_22(self, value=None):
        """  Corresponds to IDD Field `time_22`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_22`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_22`')

        self._data["Time 22"] = value

    @property
    def value_until_time_22(self):
        """Get value_until_time_22

        Returns:
            float: the value of `value_until_time_22` or None if not set
        """
        return self._data["Value Until Time 22"]

    @value_until_time_22.setter
    def value_until_time_22(self, value=None):
        """  Corresponds to IDD Field `value_until_time_22`

        Args:
            value (float): value for IDD Field `value_until_time_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_22`'.format(value))

        self._data["Value Until Time 22"] = value

    @property
    def time_23(self):
        """Get time_23

        Returns:
            str: the value of `time_23` or None if not set
        """
        return self._data["Time 23"]

    @time_23.setter
    def time_23(self, value=None):
        """  Corresponds to IDD Field `time_23`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_23`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_23`')

        self._data["Time 23"] = value

    @property
    def value_until_time_23(self):
        """Get value_until_time_23

        Returns:
            float: the value of `value_until_time_23` or None if not set
        """
        return self._data["Value Until Time 23"]

    @value_until_time_23.setter
    def value_until_time_23(self, value=None):
        """  Corresponds to IDD Field `value_until_time_23`

        Args:
            value (float): value for IDD Field `value_until_time_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_23`'.format(value))

        self._data["Value Until Time 23"] = value

    @property
    def time_24(self):
        """Get time_24

        Returns:
            str: the value of `time_24` or None if not set
        """
        return self._data["Time 24"]

    @time_24.setter
    def time_24(self, value=None):
        """  Corresponds to IDD Field `time_24`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_24`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_24`')

        self._data["Time 24"] = value

    @property
    def value_until_time_24(self):
        """Get value_until_time_24

        Returns:
            float: the value of `value_until_time_24` or None if not set
        """
        return self._data["Value Until Time 24"]

    @value_until_time_24.setter
    def value_until_time_24(self, value=None):
        """  Corresponds to IDD Field `value_until_time_24`

        Args:
            value (float): value for IDD Field `value_until_time_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_24`'.format(value))

        self._data["Value Until Time 24"] = value

    @property
    def time_25(self):
        """Get time_25

        Returns:
            str: the value of `time_25` or None if not set
        """
        return self._data["Time 25"]

    @time_25.setter
    def time_25(self, value=None):
        """  Corresponds to IDD Field `time_25`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_25`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_25`')

        self._data["Time 25"] = value

    @property
    def value_until_time_25(self):
        """Get value_until_time_25

        Returns:
            float: the value of `value_until_time_25` or None if not set
        """
        return self._data["Value Until Time 25"]

    @value_until_time_25.setter
    def value_until_time_25(self, value=None):
        """  Corresponds to IDD Field `value_until_time_25`

        Args:
            value (float): value for IDD Field `value_until_time_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_25`'.format(value))

        self._data["Value Until Time 25"] = value

    @property
    def time_26(self):
        """Get time_26

        Returns:
            str: the value of `time_26` or None if not set
        """
        return self._data["Time 26"]

    @time_26.setter
    def time_26(self, value=None):
        """  Corresponds to IDD Field `time_26`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_26`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_26`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_26`')

        self._data["Time 26"] = value

    @property
    def value_until_time_26(self):
        """Get value_until_time_26

        Returns:
            float: the value of `value_until_time_26` or None if not set
        """
        return self._data["Value Until Time 26"]

    @value_until_time_26.setter
    def value_until_time_26(self, value=None):
        """  Corresponds to IDD Field `value_until_time_26`

        Args:
            value (float): value for IDD Field `value_until_time_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_26`'.format(value))

        self._data["Value Until Time 26"] = value

    @property
    def time_27(self):
        """Get time_27

        Returns:
            str: the value of `time_27` or None if not set
        """
        return self._data["Time 27"]

    @time_27.setter
    def time_27(self, value=None):
        """  Corresponds to IDD Field `time_27`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_27`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_27`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_27`')

        self._data["Time 27"] = value

    @property
    def value_until_time_27(self):
        """Get value_until_time_27

        Returns:
            float: the value of `value_until_time_27` or None if not set
        """
        return self._data["Value Until Time 27"]

    @value_until_time_27.setter
    def value_until_time_27(self, value=None):
        """  Corresponds to IDD Field `value_until_time_27`

        Args:
            value (float): value for IDD Field `value_until_time_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_27`'.format(value))

        self._data["Value Until Time 27"] = value

    @property
    def time_28(self):
        """Get time_28

        Returns:
            str: the value of `time_28` or None if not set
        """
        return self._data["Time 28"]

    @time_28.setter
    def time_28(self, value=None):
        """  Corresponds to IDD Field `time_28`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_28`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_28`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_28`')

        self._data["Time 28"] = value

    @property
    def value_until_time_28(self):
        """Get value_until_time_28

        Returns:
            float: the value of `value_until_time_28` or None if not set
        """
        return self._data["Value Until Time 28"]

    @value_until_time_28.setter
    def value_until_time_28(self, value=None):
        """  Corresponds to IDD Field `value_until_time_28`

        Args:
            value (float): value for IDD Field `value_until_time_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_28`'.format(value))

        self._data["Value Until Time 28"] = value

    @property
    def time_29(self):
        """Get time_29

        Returns:
            str: the value of `time_29` or None if not set
        """
        return self._data["Time 29"]

    @time_29.setter
    def time_29(self, value=None):
        """  Corresponds to IDD Field `time_29`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_29`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_29`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_29`')

        self._data["Time 29"] = value

    @property
    def value_until_time_29(self):
        """Get value_until_time_29

        Returns:
            float: the value of `value_until_time_29` or None if not set
        """
        return self._data["Value Until Time 29"]

    @value_until_time_29.setter
    def value_until_time_29(self, value=None):
        """  Corresponds to IDD Field `value_until_time_29`

        Args:
            value (float): value for IDD Field `value_until_time_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_29`'.format(value))

        self._data["Value Until Time 29"] = value

    @property
    def time_30(self):
        """Get time_30

        Returns:
            str: the value of `time_30` or None if not set
        """
        return self._data["Time 30"]

    @time_30.setter
    def time_30(self, value=None):
        """  Corresponds to IDD Field `time_30`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_30`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_30`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_30`')

        self._data["Time 30"] = value

    @property
    def value_until_time_30(self):
        """Get value_until_time_30

        Returns:
            float: the value of `value_until_time_30` or None if not set
        """
        return self._data["Value Until Time 30"]

    @value_until_time_30.setter
    def value_until_time_30(self, value=None):
        """  Corresponds to IDD Field `value_until_time_30`

        Args:
            value (float): value for IDD Field `value_until_time_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_30`'.format(value))

        self._data["Value Until Time 30"] = value

    @property
    def time_31(self):
        """Get time_31

        Returns:
            str: the value of `time_31` or None if not set
        """
        return self._data["Time 31"]

    @time_31.setter
    def time_31(self, value=None):
        """  Corresponds to IDD Field `time_31`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_31`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_31`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_31`')

        self._data["Time 31"] = value

    @property
    def value_until_time_31(self):
        """Get value_until_time_31

        Returns:
            float: the value of `value_until_time_31` or None if not set
        """
        return self._data["Value Until Time 31"]

    @value_until_time_31.setter
    def value_until_time_31(self, value=None):
        """  Corresponds to IDD Field `value_until_time_31`

        Args:
            value (float): value for IDD Field `value_until_time_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_31`'.format(value))

        self._data["Value Until Time 31"] = value

    @property
    def time_32(self):
        """Get time_32

        Returns:
            str: the value of `time_32` or None if not set
        """
        return self._data["Time 32"]

    @time_32.setter
    def time_32(self, value=None):
        """  Corresponds to IDD Field `time_32`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_32`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_32`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_32`')

        self._data["Time 32"] = value

    @property
    def value_until_time_32(self):
        """Get value_until_time_32

        Returns:
            float: the value of `value_until_time_32` or None if not set
        """
        return self._data["Value Until Time 32"]

    @value_until_time_32.setter
    def value_until_time_32(self, value=None):
        """  Corresponds to IDD Field `value_until_time_32`

        Args:
            value (float): value for IDD Field `value_until_time_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_32`'.format(value))

        self._data["Value Until Time 32"] = value

    @property
    def time_33(self):
        """Get time_33

        Returns:
            str: the value of `time_33` or None if not set
        """
        return self._data["Time 33"]

    @time_33.setter
    def time_33(self, value=None):
        """  Corresponds to IDD Field `time_33`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_33`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_33`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_33`')

        self._data["Time 33"] = value

    @property
    def value_until_time_33(self):
        """Get value_until_time_33

        Returns:
            float: the value of `value_until_time_33` or None if not set
        """
        return self._data["Value Until Time 33"]

    @value_until_time_33.setter
    def value_until_time_33(self, value=None):
        """  Corresponds to IDD Field `value_until_time_33`

        Args:
            value (float): value for IDD Field `value_until_time_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_33`'.format(value))

        self._data["Value Until Time 33"] = value

    @property
    def time_34(self):
        """Get time_34

        Returns:
            str: the value of `time_34` or None if not set
        """
        return self._data["Time 34"]

    @time_34.setter
    def time_34(self, value=None):
        """  Corresponds to IDD Field `time_34`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_34`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_34`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_34`')

        self._data["Time 34"] = value

    @property
    def value_until_time_34(self):
        """Get value_until_time_34

        Returns:
            float: the value of `value_until_time_34` or None if not set
        """
        return self._data["Value Until Time 34"]

    @value_until_time_34.setter
    def value_until_time_34(self, value=None):
        """  Corresponds to IDD Field `value_until_time_34`

        Args:
            value (float): value for IDD Field `value_until_time_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_34`'.format(value))

        self._data["Value Until Time 34"] = value

    @property
    def time_35(self):
        """Get time_35

        Returns:
            str: the value of `time_35` or None if not set
        """
        return self._data["Time 35"]

    @time_35.setter
    def time_35(self, value=None):
        """  Corresponds to IDD Field `time_35`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_35`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_35`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_35`')

        self._data["Time 35"] = value

    @property
    def value_until_time_35(self):
        """Get value_until_time_35

        Returns:
            float: the value of `value_until_time_35` or None if not set
        """
        return self._data["Value Until Time 35"]

    @value_until_time_35.setter
    def value_until_time_35(self, value=None):
        """  Corresponds to IDD Field `value_until_time_35`

        Args:
            value (float): value for IDD Field `value_until_time_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_35`'.format(value))

        self._data["Value Until Time 35"] = value

    @property
    def time_36(self):
        """Get time_36

        Returns:
            str: the value of `time_36` or None if not set
        """
        return self._data["Time 36"]

    @time_36.setter
    def time_36(self, value=None):
        """  Corresponds to IDD Field `time_36`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_36`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_36`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_36`')

        self._data["Time 36"] = value

    @property
    def value_until_time_36(self):
        """Get value_until_time_36

        Returns:
            float: the value of `value_until_time_36` or None if not set
        """
        return self._data["Value Until Time 36"]

    @value_until_time_36.setter
    def value_until_time_36(self, value=None):
        """  Corresponds to IDD Field `value_until_time_36`

        Args:
            value (float): value for IDD Field `value_until_time_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_36`'.format(value))

        self._data["Value Until Time 36"] = value

    @property
    def time_37(self):
        """Get time_37

        Returns:
            str: the value of `time_37` or None if not set
        """
        return self._data["Time 37"]

    @time_37.setter
    def time_37(self, value=None):
        """  Corresponds to IDD Field `time_37`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_37`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_37`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_37`')

        self._data["Time 37"] = value

    @property
    def value_until_time_37(self):
        """Get value_until_time_37

        Returns:
            float: the value of `value_until_time_37` or None if not set
        """
        return self._data["Value Until Time 37"]

    @value_until_time_37.setter
    def value_until_time_37(self, value=None):
        """  Corresponds to IDD Field `value_until_time_37`

        Args:
            value (float): value for IDD Field `value_until_time_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_37`'.format(value))

        self._data["Value Until Time 37"] = value

    @property
    def time_38(self):
        """Get time_38

        Returns:
            str: the value of `time_38` or None if not set
        """
        return self._data["Time 38"]

    @time_38.setter
    def time_38(self, value=None):
        """  Corresponds to IDD Field `time_38`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_38`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_38`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_38`')

        self._data["Time 38"] = value

    @property
    def value_until_time_38(self):
        """Get value_until_time_38

        Returns:
            float: the value of `value_until_time_38` or None if not set
        """
        return self._data["Value Until Time 38"]

    @value_until_time_38.setter
    def value_until_time_38(self, value=None):
        """  Corresponds to IDD Field `value_until_time_38`

        Args:
            value (float): value for IDD Field `value_until_time_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_38`'.format(value))

        self._data["Value Until Time 38"] = value

    @property
    def time_39(self):
        """Get time_39

        Returns:
            str: the value of `time_39` or None if not set
        """
        return self._data["Time 39"]

    @time_39.setter
    def time_39(self, value=None):
        """  Corresponds to IDD Field `time_39`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_39`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_39`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_39`')

        self._data["Time 39"] = value

    @property
    def value_until_time_39(self):
        """Get value_until_time_39

        Returns:
            float: the value of `value_until_time_39` or None if not set
        """
        return self._data["Value Until Time 39"]

    @value_until_time_39.setter
    def value_until_time_39(self, value=None):
        """  Corresponds to IDD Field `value_until_time_39`

        Args:
            value (float): value for IDD Field `value_until_time_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_39`'.format(value))

        self._data["Value Until Time 39"] = value

    @property
    def time_40(self):
        """Get time_40

        Returns:
            str: the value of `time_40` or None if not set
        """
        return self._data["Time 40"]

    @time_40.setter
    def time_40(self, value=None):
        """  Corresponds to IDD Field `time_40`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_40`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_40`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_40`')

        self._data["Time 40"] = value

    @property
    def value_until_time_40(self):
        """Get value_until_time_40

        Returns:
            float: the value of `value_until_time_40` or None if not set
        """
        return self._data["Value Until Time 40"]

    @value_until_time_40.setter
    def value_until_time_40(self, value=None):
        """  Corresponds to IDD Field `value_until_time_40`

        Args:
            value (float): value for IDD Field `value_until_time_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_40`'.format(value))

        self._data["Value Until Time 40"] = value

    @property
    def time_41(self):
        """Get time_41

        Returns:
            str: the value of `time_41` or None if not set
        """
        return self._data["Time 41"]

    @time_41.setter
    def time_41(self, value=None):
        """  Corresponds to IDD Field `time_41`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_41`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_41`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_41`')

        self._data["Time 41"] = value

    @property
    def value_until_time_41(self):
        """Get value_until_time_41

        Returns:
            float: the value of `value_until_time_41` or None if not set
        """
        return self._data["Value Until Time 41"]

    @value_until_time_41.setter
    def value_until_time_41(self, value=None):
        """  Corresponds to IDD Field `value_until_time_41`

        Args:
            value (float): value for IDD Field `value_until_time_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_41`'.format(value))

        self._data["Value Until Time 41"] = value

    @property
    def time_42(self):
        """Get time_42

        Returns:
            str: the value of `time_42` or None if not set
        """
        return self._data["Time 42"]

    @time_42.setter
    def time_42(self, value=None):
        """  Corresponds to IDD Field `time_42`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_42`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_42`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_42`')

        self._data["Time 42"] = value

    @property
    def value_until_time_42(self):
        """Get value_until_time_42

        Returns:
            float: the value of `value_until_time_42` or None if not set
        """
        return self._data["Value Until Time 42"]

    @value_until_time_42.setter
    def value_until_time_42(self, value=None):
        """  Corresponds to IDD Field `value_until_time_42`

        Args:
            value (float): value for IDD Field `value_until_time_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_42`'.format(value))

        self._data["Value Until Time 42"] = value

    @property
    def time_43(self):
        """Get time_43

        Returns:
            str: the value of `time_43` or None if not set
        """
        return self._data["Time 43"]

    @time_43.setter
    def time_43(self, value=None):
        """  Corresponds to IDD Field `time_43`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_43`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_43`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_43`')

        self._data["Time 43"] = value

    @property
    def value_until_time_43(self):
        """Get value_until_time_43

        Returns:
            float: the value of `value_until_time_43` or None if not set
        """
        return self._data["Value Until Time 43"]

    @value_until_time_43.setter
    def value_until_time_43(self, value=None):
        """  Corresponds to IDD Field `value_until_time_43`

        Args:
            value (float): value for IDD Field `value_until_time_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_43`'.format(value))

        self._data["Value Until Time 43"] = value

    @property
    def time_44(self):
        """Get time_44

        Returns:
            str: the value of `time_44` or None if not set
        """
        return self._data["Time 44"]

    @time_44.setter
    def time_44(self, value=None):
        """  Corresponds to IDD Field `time_44`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_44`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_44`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_44`')

        self._data["Time 44"] = value

    @property
    def value_until_time_44(self):
        """Get value_until_time_44

        Returns:
            float: the value of `value_until_time_44` or None if not set
        """
        return self._data["Value Until Time 44"]

    @value_until_time_44.setter
    def value_until_time_44(self, value=None):
        """  Corresponds to IDD Field `value_until_time_44`

        Args:
            value (float): value for IDD Field `value_until_time_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_44`'.format(value))

        self._data["Value Until Time 44"] = value

    @property
    def time_45(self):
        """Get time_45

        Returns:
            str: the value of `time_45` or None if not set
        """
        return self._data["Time 45"]

    @time_45.setter
    def time_45(self, value=None):
        """  Corresponds to IDD Field `time_45`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_45`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_45`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_45`')

        self._data["Time 45"] = value

    @property
    def value_until_time_45(self):
        """Get value_until_time_45

        Returns:
            float: the value of `value_until_time_45` or None if not set
        """
        return self._data["Value Until Time 45"]

    @value_until_time_45.setter
    def value_until_time_45(self, value=None):
        """  Corresponds to IDD Field `value_until_time_45`

        Args:
            value (float): value for IDD Field `value_until_time_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_45`'.format(value))

        self._data["Value Until Time 45"] = value

    @property
    def time_46(self):
        """Get time_46

        Returns:
            str: the value of `time_46` or None if not set
        """
        return self._data["Time 46"]

    @time_46.setter
    def time_46(self, value=None):
        """  Corresponds to IDD Field `time_46`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_46`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_46`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_46`')

        self._data["Time 46"] = value

    @property
    def value_until_time_46(self):
        """Get value_until_time_46

        Returns:
            float: the value of `value_until_time_46` or None if not set
        """
        return self._data["Value Until Time 46"]

    @value_until_time_46.setter
    def value_until_time_46(self, value=None):
        """  Corresponds to IDD Field `value_until_time_46`

        Args:
            value (float): value for IDD Field `value_until_time_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_46`'.format(value))

        self._data["Value Until Time 46"] = value

    @property
    def time_47(self):
        """Get time_47

        Returns:
            str: the value of `time_47` or None if not set
        """
        return self._data["Time 47"]

    @time_47.setter
    def time_47(self, value=None):
        """  Corresponds to IDD Field `time_47`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_47`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_47`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_47`')

        self._data["Time 47"] = value

    @property
    def value_until_time_47(self):
        """Get value_until_time_47

        Returns:
            float: the value of `value_until_time_47` or None if not set
        """
        return self._data["Value Until Time 47"]

    @value_until_time_47.setter
    def value_until_time_47(self, value=None):
        """  Corresponds to IDD Field `value_until_time_47`

        Args:
            value (float): value for IDD Field `value_until_time_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_47`'.format(value))

        self._data["Value Until Time 47"] = value

    @property
    def time_48(self):
        """Get time_48

        Returns:
            str: the value of `time_48` or None if not set
        """
        return self._data["Time 48"]

    @time_48.setter
    def time_48(self, value=None):
        """  Corresponds to IDD Field `time_48`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_48`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_48`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_48`')

        self._data["Time 48"] = value

    @property
    def value_until_time_48(self):
        """Get value_until_time_48

        Returns:
            float: the value of `value_until_time_48` or None if not set
        """
        return self._data["Value Until Time 48"]

    @value_until_time_48.setter
    def value_until_time_48(self, value=None):
        """  Corresponds to IDD Field `value_until_time_48`

        Args:
            value (float): value for IDD Field `value_until_time_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_48`'.format(value))

        self._data["Value Until Time 48"] = value

    @property
    def time_49(self):
        """Get time_49

        Returns:
            str: the value of `time_49` or None if not set
        """
        return self._data["Time 49"]

    @time_49.setter
    def time_49(self, value=None):
        """  Corresponds to IDD Field `time_49`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_49`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_49`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_49`')

        self._data["Time 49"] = value

    @property
    def value_until_time_49(self):
        """Get value_until_time_49

        Returns:
            float: the value of `value_until_time_49` or None if not set
        """
        return self._data["Value Until Time 49"]

    @value_until_time_49.setter
    def value_until_time_49(self, value=None):
        """  Corresponds to IDD Field `value_until_time_49`

        Args:
            value (float): value for IDD Field `value_until_time_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_49`'.format(value))

        self._data["Value Until Time 49"] = value

    @property
    def time_50(self):
        """Get time_50

        Returns:
            str: the value of `time_50` or None if not set
        """
        return self._data["Time 50"]

    @time_50.setter
    def time_50(self, value=None):
        """  Corresponds to IDD Field `time_50`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_50`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_50`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_50`')

        self._data["Time 50"] = value

    @property
    def value_until_time_50(self):
        """Get value_until_time_50

        Returns:
            float: the value of `value_until_time_50` or None if not set
        """
        return self._data["Value Until Time 50"]

    @value_until_time_50.setter
    def value_until_time_50(self, value=None):
        """  Corresponds to IDD Field `value_until_time_50`

        Args:
            value (float): value for IDD Field `value_until_time_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_50`'.format(value))

        self._data["Value Until Time 50"] = value

    @property
    def time_51(self):
        """Get time_51

        Returns:
            str: the value of `time_51` or None if not set
        """
        return self._data["Time 51"]

    @time_51.setter
    def time_51(self, value=None):
        """  Corresponds to IDD Field `time_51`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_51`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_51`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_51`')

        self._data["Time 51"] = value

    @property
    def value_until_time_51(self):
        """Get value_until_time_51

        Returns:
            float: the value of `value_until_time_51` or None if not set
        """
        return self._data["Value Until Time 51"]

    @value_until_time_51.setter
    def value_until_time_51(self, value=None):
        """  Corresponds to IDD Field `value_until_time_51`

        Args:
            value (float): value for IDD Field `value_until_time_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_51`'.format(value))

        self._data["Value Until Time 51"] = value

    @property
    def time_52(self):
        """Get time_52

        Returns:
            str: the value of `time_52` or None if not set
        """
        return self._data["Time 52"]

    @time_52.setter
    def time_52(self, value=None):
        """  Corresponds to IDD Field `time_52`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_52`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_52`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_52`')

        self._data["Time 52"] = value

    @property
    def value_until_time_52(self):
        """Get value_until_time_52

        Returns:
            float: the value of `value_until_time_52` or None if not set
        """
        return self._data["Value Until Time 52"]

    @value_until_time_52.setter
    def value_until_time_52(self, value=None):
        """  Corresponds to IDD Field `value_until_time_52`

        Args:
            value (float): value for IDD Field `value_until_time_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_52`'.format(value))

        self._data["Value Until Time 52"] = value

    @property
    def time_53(self):
        """Get time_53

        Returns:
            str: the value of `time_53` or None if not set
        """
        return self._data["Time 53"]

    @time_53.setter
    def time_53(self, value=None):
        """  Corresponds to IDD Field `time_53`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_53`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_53`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_53`')

        self._data["Time 53"] = value

    @property
    def value_until_time_53(self):
        """Get value_until_time_53

        Returns:
            float: the value of `value_until_time_53` or None if not set
        """
        return self._data["Value Until Time 53"]

    @value_until_time_53.setter
    def value_until_time_53(self, value=None):
        """  Corresponds to IDD Field `value_until_time_53`

        Args:
            value (float): value for IDD Field `value_until_time_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_53`'.format(value))

        self._data["Value Until Time 53"] = value

    @property
    def time_54(self):
        """Get time_54

        Returns:
            str: the value of `time_54` or None if not set
        """
        return self._data["Time 54"]

    @time_54.setter
    def time_54(self, value=None):
        """  Corresponds to IDD Field `time_54`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_54`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_54`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_54`')

        self._data["Time 54"] = value

    @property
    def value_until_time_54(self):
        """Get value_until_time_54

        Returns:
            float: the value of `value_until_time_54` or None if not set
        """
        return self._data["Value Until Time 54"]

    @value_until_time_54.setter
    def value_until_time_54(self, value=None):
        """  Corresponds to IDD Field `value_until_time_54`

        Args:
            value (float): value for IDD Field `value_until_time_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_54`'.format(value))

        self._data["Value Until Time 54"] = value

    @property
    def time_55(self):
        """Get time_55

        Returns:
            str: the value of `time_55` or None if not set
        """
        return self._data["Time 55"]

    @time_55.setter
    def time_55(self, value=None):
        """  Corresponds to IDD Field `time_55`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_55`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_55`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_55`')

        self._data["Time 55"] = value

    @property
    def value_until_time_55(self):
        """Get value_until_time_55

        Returns:
            float: the value of `value_until_time_55` or None if not set
        """
        return self._data["Value Until Time 55"]

    @value_until_time_55.setter
    def value_until_time_55(self, value=None):
        """  Corresponds to IDD Field `value_until_time_55`

        Args:
            value (float): value for IDD Field `value_until_time_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_55`'.format(value))

        self._data["Value Until Time 55"] = value

    @property
    def time_56(self):
        """Get time_56

        Returns:
            str: the value of `time_56` or None if not set
        """
        return self._data["Time 56"]

    @time_56.setter
    def time_56(self, value=None):
        """  Corresponds to IDD Field `time_56`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_56`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_56`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_56`')

        self._data["Time 56"] = value

    @property
    def value_until_time_56(self):
        """Get value_until_time_56

        Returns:
            float: the value of `value_until_time_56` or None if not set
        """
        return self._data["Value Until Time 56"]

    @value_until_time_56.setter
    def value_until_time_56(self, value=None):
        """  Corresponds to IDD Field `value_until_time_56`

        Args:
            value (float): value for IDD Field `value_until_time_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_56`'.format(value))

        self._data["Value Until Time 56"] = value

    @property
    def time_57(self):
        """Get time_57

        Returns:
            str: the value of `time_57` or None if not set
        """
        return self._data["Time 57"]

    @time_57.setter
    def time_57(self, value=None):
        """  Corresponds to IDD Field `time_57`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_57`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_57`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_57`')

        self._data["Time 57"] = value

    @property
    def value_until_time_57(self):
        """Get value_until_time_57

        Returns:
            float: the value of `value_until_time_57` or None if not set
        """
        return self._data["Value Until Time 57"]

    @value_until_time_57.setter
    def value_until_time_57(self, value=None):
        """  Corresponds to IDD Field `value_until_time_57`

        Args:
            value (float): value for IDD Field `value_until_time_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_57`'.format(value))

        self._data["Value Until Time 57"] = value

    @property
    def time_58(self):
        """Get time_58

        Returns:
            str: the value of `time_58` or None if not set
        """
        return self._data["Time 58"]

    @time_58.setter
    def time_58(self, value=None):
        """  Corresponds to IDD Field `time_58`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_58`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_58`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_58`')

        self._data["Time 58"] = value

    @property
    def value_until_time_58(self):
        """Get value_until_time_58

        Returns:
            float: the value of `value_until_time_58` or None if not set
        """
        return self._data["Value Until Time 58"]

    @value_until_time_58.setter
    def value_until_time_58(self, value=None):
        """  Corresponds to IDD Field `value_until_time_58`

        Args:
            value (float): value for IDD Field `value_until_time_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_58`'.format(value))

        self._data["Value Until Time 58"] = value

    @property
    def time_59(self):
        """Get time_59

        Returns:
            str: the value of `time_59` or None if not set
        """
        return self._data["Time 59"]

    @time_59.setter
    def time_59(self, value=None):
        """  Corresponds to IDD Field `time_59`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_59`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_59`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_59`')

        self._data["Time 59"] = value

    @property
    def value_until_time_59(self):
        """Get value_until_time_59

        Returns:
            float: the value of `value_until_time_59` or None if not set
        """
        return self._data["Value Until Time 59"]

    @value_until_time_59.setter
    def value_until_time_59(self, value=None):
        """  Corresponds to IDD Field `value_until_time_59`

        Args:
            value (float): value for IDD Field `value_until_time_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_59`'.format(value))

        self._data["Value Until Time 59"] = value

    @property
    def time_60(self):
        """Get time_60

        Returns:
            str: the value of `time_60` or None if not set
        """
        return self._data["Time 60"]

    @time_60.setter
    def time_60(self, value=None):
        """  Corresponds to IDD Field `time_60`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_60`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_60`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_60`')

        self._data["Time 60"] = value

    @property
    def value_until_time_60(self):
        """Get value_until_time_60

        Returns:
            float: the value of `value_until_time_60` or None if not set
        """
        return self._data["Value Until Time 60"]

    @value_until_time_60.setter
    def value_until_time_60(self, value=None):
        """  Corresponds to IDD Field `value_until_time_60`

        Args:
            value (float): value for IDD Field `value_until_time_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_60`'.format(value))

        self._data["Value Until Time 60"] = value

    @property
    def time_61(self):
        """Get time_61

        Returns:
            str: the value of `time_61` or None if not set
        """
        return self._data["Time 61"]

    @time_61.setter
    def time_61(self, value=None):
        """  Corresponds to IDD Field `time_61`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_61`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_61`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_61`')

        self._data["Time 61"] = value

    @property
    def value_until_time_61(self):
        """Get value_until_time_61

        Returns:
            float: the value of `value_until_time_61` or None if not set
        """
        return self._data["Value Until Time 61"]

    @value_until_time_61.setter
    def value_until_time_61(self, value=None):
        """  Corresponds to IDD Field `value_until_time_61`

        Args:
            value (float): value for IDD Field `value_until_time_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_61`'.format(value))

        self._data["Value Until Time 61"] = value

    @property
    def time_62(self):
        """Get time_62

        Returns:
            str: the value of `time_62` or None if not set
        """
        return self._data["Time 62"]

    @time_62.setter
    def time_62(self, value=None):
        """  Corresponds to IDD Field `time_62`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_62`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_62`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_62`')

        self._data["Time 62"] = value

    @property
    def value_until_time_62(self):
        """Get value_until_time_62

        Returns:
            float: the value of `value_until_time_62` or None if not set
        """
        return self._data["Value Until Time 62"]

    @value_until_time_62.setter
    def value_until_time_62(self, value=None):
        """  Corresponds to IDD Field `value_until_time_62`

        Args:
            value (float): value for IDD Field `value_until_time_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_62`'.format(value))

        self._data["Value Until Time 62"] = value

    @property
    def time_63(self):
        """Get time_63

        Returns:
            str: the value of `time_63` or None if not set
        """
        return self._data["Time 63"]

    @time_63.setter
    def time_63(self, value=None):
        """  Corresponds to IDD Field `time_63`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_63`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_63`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_63`')

        self._data["Time 63"] = value

    @property
    def value_until_time_63(self):
        """Get value_until_time_63

        Returns:
            float: the value of `value_until_time_63` or None if not set
        """
        return self._data["Value Until Time 63"]

    @value_until_time_63.setter
    def value_until_time_63(self, value=None):
        """  Corresponds to IDD Field `value_until_time_63`

        Args:
            value (float): value for IDD Field `value_until_time_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_63`'.format(value))

        self._data["Value Until Time 63"] = value

    @property
    def time_64(self):
        """Get time_64

        Returns:
            str: the value of `time_64` or None if not set
        """
        return self._data["Time 64"]

    @time_64.setter
    def time_64(self, value=None):
        """  Corresponds to IDD Field `time_64`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_64`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_64`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_64`')

        self._data["Time 64"] = value

    @property
    def value_until_time_64(self):
        """Get value_until_time_64

        Returns:
            float: the value of `value_until_time_64` or None if not set
        """
        return self._data["Value Until Time 64"]

    @value_until_time_64.setter
    def value_until_time_64(self, value=None):
        """  Corresponds to IDD Field `value_until_time_64`

        Args:
            value (float): value for IDD Field `value_until_time_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_64`'.format(value))

        self._data["Value Until Time 64"] = value

    @property
    def time_65(self):
        """Get time_65

        Returns:
            str: the value of `time_65` or None if not set
        """
        return self._data["Time 65"]

    @time_65.setter
    def time_65(self, value=None):
        """  Corresponds to IDD Field `time_65`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_65`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_65`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_65`')

        self._data["Time 65"] = value

    @property
    def value_until_time_65(self):
        """Get value_until_time_65

        Returns:
            float: the value of `value_until_time_65` or None if not set
        """
        return self._data["Value Until Time 65"]

    @value_until_time_65.setter
    def value_until_time_65(self, value=None):
        """  Corresponds to IDD Field `value_until_time_65`

        Args:
            value (float): value for IDD Field `value_until_time_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_65`'.format(value))

        self._data["Value Until Time 65"] = value

    @property
    def time_66(self):
        """Get time_66

        Returns:
            str: the value of `time_66` or None if not set
        """
        return self._data["Time 66"]

    @time_66.setter
    def time_66(self, value=None):
        """  Corresponds to IDD Field `time_66`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_66`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_66`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_66`')

        self._data["Time 66"] = value

    @property
    def value_until_time_66(self):
        """Get value_until_time_66

        Returns:
            float: the value of `value_until_time_66` or None if not set
        """
        return self._data["Value Until Time 66"]

    @value_until_time_66.setter
    def value_until_time_66(self, value=None):
        """  Corresponds to IDD Field `value_until_time_66`

        Args:
            value (float): value for IDD Field `value_until_time_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_66`'.format(value))

        self._data["Value Until Time 66"] = value

    @property
    def time_67(self):
        """Get time_67

        Returns:
            str: the value of `time_67` or None if not set
        """
        return self._data["Time 67"]

    @time_67.setter
    def time_67(self, value=None):
        """  Corresponds to IDD Field `time_67`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_67`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_67`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_67`')

        self._data["Time 67"] = value

    @property
    def value_until_time_67(self):
        """Get value_until_time_67

        Returns:
            float: the value of `value_until_time_67` or None if not set
        """
        return self._data["Value Until Time 67"]

    @value_until_time_67.setter
    def value_until_time_67(self, value=None):
        """  Corresponds to IDD Field `value_until_time_67`

        Args:
            value (float): value for IDD Field `value_until_time_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_67`'.format(value))

        self._data["Value Until Time 67"] = value

    @property
    def time_68(self):
        """Get time_68

        Returns:
            str: the value of `time_68` or None if not set
        """
        return self._data["Time 68"]

    @time_68.setter
    def time_68(self, value=None):
        """  Corresponds to IDD Field `time_68`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_68`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_68`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_68`')

        self._data["Time 68"] = value

    @property
    def value_until_time_68(self):
        """Get value_until_time_68

        Returns:
            float: the value of `value_until_time_68` or None if not set
        """
        return self._data["Value Until Time 68"]

    @value_until_time_68.setter
    def value_until_time_68(self, value=None):
        """  Corresponds to IDD Field `value_until_time_68`

        Args:
            value (float): value for IDD Field `value_until_time_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_68`'.format(value))

        self._data["Value Until Time 68"] = value

    @property
    def time_69(self):
        """Get time_69

        Returns:
            str: the value of `time_69` or None if not set
        """
        return self._data["Time 69"]

    @time_69.setter
    def time_69(self, value=None):
        """  Corresponds to IDD Field `time_69`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_69`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_69`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_69`')

        self._data["Time 69"] = value

    @property
    def value_until_time_69(self):
        """Get value_until_time_69

        Returns:
            float: the value of `value_until_time_69` or None if not set
        """
        return self._data["Value Until Time 69"]

    @value_until_time_69.setter
    def value_until_time_69(self, value=None):
        """  Corresponds to IDD Field `value_until_time_69`

        Args:
            value (float): value for IDD Field `value_until_time_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_69`'.format(value))

        self._data["Value Until Time 69"] = value

    @property
    def time_70(self):
        """Get time_70

        Returns:
            str: the value of `time_70` or None if not set
        """
        return self._data["Time 70"]

    @time_70.setter
    def time_70(self, value=None):
        """  Corresponds to IDD Field `time_70`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_70`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_70`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_70`')

        self._data["Time 70"] = value

    @property
    def value_until_time_70(self):
        """Get value_until_time_70

        Returns:
            float: the value of `value_until_time_70` or None if not set
        """
        return self._data["Value Until Time 70"]

    @value_until_time_70.setter
    def value_until_time_70(self, value=None):
        """  Corresponds to IDD Field `value_until_time_70`

        Args:
            value (float): value for IDD Field `value_until_time_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_70`'.format(value))

        self._data["Value Until Time 70"] = value

    @property
    def time_71(self):
        """Get time_71

        Returns:
            str: the value of `time_71` or None if not set
        """
        return self._data["Time 71"]

    @time_71.setter
    def time_71(self, value=None):
        """  Corresponds to IDD Field `time_71`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_71`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_71`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_71`')

        self._data["Time 71"] = value

    @property
    def value_until_time_71(self):
        """Get value_until_time_71

        Returns:
            float: the value of `value_until_time_71` or None if not set
        """
        return self._data["Value Until Time 71"]

    @value_until_time_71.setter
    def value_until_time_71(self, value=None):
        """  Corresponds to IDD Field `value_until_time_71`

        Args:
            value (float): value for IDD Field `value_until_time_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_71`'.format(value))

        self._data["Value Until Time 71"] = value

    @property
    def time_72(self):
        """Get time_72

        Returns:
            str: the value of `time_72` or None if not set
        """
        return self._data["Time 72"]

    @time_72.setter
    def time_72(self, value=None):
        """  Corresponds to IDD Field `time_72`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_72`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_72`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_72`')

        self._data["Time 72"] = value

    @property
    def value_until_time_72(self):
        """Get value_until_time_72

        Returns:
            float: the value of `value_until_time_72` or None if not set
        """
        return self._data["Value Until Time 72"]

    @value_until_time_72.setter
    def value_until_time_72(self, value=None):
        """  Corresponds to IDD Field `value_until_time_72`

        Args:
            value (float): value for IDD Field `value_until_time_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_72`'.format(value))

        self._data["Value Until Time 72"] = value

    @property
    def time_73(self):
        """Get time_73

        Returns:
            str: the value of `time_73` or None if not set
        """
        return self._data["Time 73"]

    @time_73.setter
    def time_73(self, value=None):
        """  Corresponds to IDD Field `time_73`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_73`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_73`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_73`')

        self._data["Time 73"] = value

    @property
    def value_until_time_73(self):
        """Get value_until_time_73

        Returns:
            float: the value of `value_until_time_73` or None if not set
        """
        return self._data["Value Until Time 73"]

    @value_until_time_73.setter
    def value_until_time_73(self, value=None):
        """  Corresponds to IDD Field `value_until_time_73`

        Args:
            value (float): value for IDD Field `value_until_time_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_73`'.format(value))

        self._data["Value Until Time 73"] = value

    @property
    def time_74(self):
        """Get time_74

        Returns:
            str: the value of `time_74` or None if not set
        """
        return self._data["Time 74"]

    @time_74.setter
    def time_74(self, value=None):
        """  Corresponds to IDD Field `time_74`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_74`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_74`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_74`')

        self._data["Time 74"] = value

    @property
    def value_until_time_74(self):
        """Get value_until_time_74

        Returns:
            float: the value of `value_until_time_74` or None if not set
        """
        return self._data["Value Until Time 74"]

    @value_until_time_74.setter
    def value_until_time_74(self, value=None):
        """  Corresponds to IDD Field `value_until_time_74`

        Args:
            value (float): value for IDD Field `value_until_time_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_74`'.format(value))

        self._data["Value Until Time 74"] = value

    @property
    def time_75(self):
        """Get time_75

        Returns:
            str: the value of `time_75` or None if not set
        """
        return self._data["Time 75"]

    @time_75.setter
    def time_75(self, value=None):
        """  Corresponds to IDD Field `time_75`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_75`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_75`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_75`')

        self._data["Time 75"] = value

    @property
    def value_until_time_75(self):
        """Get value_until_time_75

        Returns:
            float: the value of `value_until_time_75` or None if not set
        """
        return self._data["Value Until Time 75"]

    @value_until_time_75.setter
    def value_until_time_75(self, value=None):
        """  Corresponds to IDD Field `value_until_time_75`

        Args:
            value (float): value for IDD Field `value_until_time_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_75`'.format(value))

        self._data["Value Until Time 75"] = value

    @property
    def time_76(self):
        """Get time_76

        Returns:
            str: the value of `time_76` or None if not set
        """
        return self._data["Time 76"]

    @time_76.setter
    def time_76(self, value=None):
        """  Corresponds to IDD Field `time_76`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_76`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_76`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_76`')

        self._data["Time 76"] = value

    @property
    def value_until_time_76(self):
        """Get value_until_time_76

        Returns:
            float: the value of `value_until_time_76` or None if not set
        """
        return self._data["Value Until Time 76"]

    @value_until_time_76.setter
    def value_until_time_76(self, value=None):
        """  Corresponds to IDD Field `value_until_time_76`

        Args:
            value (float): value for IDD Field `value_until_time_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_76`'.format(value))

        self._data["Value Until Time 76"] = value

    @property
    def time_77(self):
        """Get time_77

        Returns:
            str: the value of `time_77` or None if not set
        """
        return self._data["Time 77"]

    @time_77.setter
    def time_77(self, value=None):
        """  Corresponds to IDD Field `time_77`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_77`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_77`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_77`')

        self._data["Time 77"] = value

    @property
    def value_until_time_77(self):
        """Get value_until_time_77

        Returns:
            float: the value of `value_until_time_77` or None if not set
        """
        return self._data["Value Until Time 77"]

    @value_until_time_77.setter
    def value_until_time_77(self, value=None):
        """  Corresponds to IDD Field `value_until_time_77`

        Args:
            value (float): value for IDD Field `value_until_time_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_77`'.format(value))

        self._data["Value Until Time 77"] = value

    @property
    def time_78(self):
        """Get time_78

        Returns:
            str: the value of `time_78` or None if not set
        """
        return self._data["Time 78"]

    @time_78.setter
    def time_78(self, value=None):
        """  Corresponds to IDD Field `time_78`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_78`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_78`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_78`')

        self._data["Time 78"] = value

    @property
    def value_until_time_78(self):
        """Get value_until_time_78

        Returns:
            float: the value of `value_until_time_78` or None if not set
        """
        return self._data["Value Until Time 78"]

    @value_until_time_78.setter
    def value_until_time_78(self, value=None):
        """  Corresponds to IDD Field `value_until_time_78`

        Args:
            value (float): value for IDD Field `value_until_time_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_78`'.format(value))

        self._data["Value Until Time 78"] = value

    @property
    def time_79(self):
        """Get time_79

        Returns:
            str: the value of `time_79` or None if not set
        """
        return self._data["Time 79"]

    @time_79.setter
    def time_79(self, value=None):
        """  Corresponds to IDD Field `time_79`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_79`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_79`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_79`')

        self._data["Time 79"] = value

    @property
    def value_until_time_79(self):
        """Get value_until_time_79

        Returns:
            float: the value of `value_until_time_79` or None if not set
        """
        return self._data["Value Until Time 79"]

    @value_until_time_79.setter
    def value_until_time_79(self, value=None):
        """  Corresponds to IDD Field `value_until_time_79`

        Args:
            value (float): value for IDD Field `value_until_time_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_79`'.format(value))

        self._data["Value Until Time 79"] = value

    @property
    def time_80(self):
        """Get time_80

        Returns:
            str: the value of `time_80` or None if not set
        """
        return self._data["Time 80"]

    @time_80.setter
    def time_80(self, value=None):
        """  Corresponds to IDD Field `time_80`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_80`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_80`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_80`')

        self._data["Time 80"] = value

    @property
    def value_until_time_80(self):
        """Get value_until_time_80

        Returns:
            float: the value of `value_until_time_80` or None if not set
        """
        return self._data["Value Until Time 80"]

    @value_until_time_80.setter
    def value_until_time_80(self, value=None):
        """  Corresponds to IDD Field `value_until_time_80`

        Args:
            value (float): value for IDD Field `value_until_time_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_80`'.format(value))

        self._data["Value Until Time 80"] = value

    @property
    def time_81(self):
        """Get time_81

        Returns:
            str: the value of `time_81` or None if not set
        """
        return self._data["Time 81"]

    @time_81.setter
    def time_81(self, value=None):
        """  Corresponds to IDD Field `time_81`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_81`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_81`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_81`')

        self._data["Time 81"] = value

    @property
    def value_until_time_81(self):
        """Get value_until_time_81

        Returns:
            float: the value of `value_until_time_81` or None if not set
        """
        return self._data["Value Until Time 81"]

    @value_until_time_81.setter
    def value_until_time_81(self, value=None):
        """  Corresponds to IDD Field `value_until_time_81`

        Args:
            value (float): value for IDD Field `value_until_time_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_81`'.format(value))

        self._data["Value Until Time 81"] = value

    @property
    def time_82(self):
        """Get time_82

        Returns:
            str: the value of `time_82` or None if not set
        """
        return self._data["Time 82"]

    @time_82.setter
    def time_82(self, value=None):
        """  Corresponds to IDD Field `time_82`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_82`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_82`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_82`')

        self._data["Time 82"] = value

    @property
    def value_until_time_82(self):
        """Get value_until_time_82

        Returns:
            float: the value of `value_until_time_82` or None if not set
        """
        return self._data["Value Until Time 82"]

    @value_until_time_82.setter
    def value_until_time_82(self, value=None):
        """  Corresponds to IDD Field `value_until_time_82`

        Args:
            value (float): value for IDD Field `value_until_time_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_82`'.format(value))

        self._data["Value Until Time 82"] = value

    @property
    def time_83(self):
        """Get time_83

        Returns:
            str: the value of `time_83` or None if not set
        """
        return self._data["Time 83"]

    @time_83.setter
    def time_83(self, value=None):
        """  Corresponds to IDD Field `time_83`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_83`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_83`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_83`')

        self._data["Time 83"] = value

    @property
    def value_until_time_83(self):
        """Get value_until_time_83

        Returns:
            float: the value of `value_until_time_83` or None if not set
        """
        return self._data["Value Until Time 83"]

    @value_until_time_83.setter
    def value_until_time_83(self, value=None):
        """  Corresponds to IDD Field `value_until_time_83`

        Args:
            value (float): value for IDD Field `value_until_time_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_83`'.format(value))

        self._data["Value Until Time 83"] = value

    @property
    def time_84(self):
        """Get time_84

        Returns:
            str: the value of `time_84` or None if not set
        """
        return self._data["Time 84"]

    @time_84.setter
    def time_84(self, value=None):
        """  Corresponds to IDD Field `time_84`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_84`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_84`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_84`')

        self._data["Time 84"] = value

    @property
    def value_until_time_84(self):
        """Get value_until_time_84

        Returns:
            float: the value of `value_until_time_84` or None if not set
        """
        return self._data["Value Until Time 84"]

    @value_until_time_84.setter
    def value_until_time_84(self, value=None):
        """  Corresponds to IDD Field `value_until_time_84`

        Args:
            value (float): value for IDD Field `value_until_time_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_84`'.format(value))

        self._data["Value Until Time 84"] = value

    @property
    def time_85(self):
        """Get time_85

        Returns:
            str: the value of `time_85` or None if not set
        """
        return self._data["Time 85"]

    @time_85.setter
    def time_85(self, value=None):
        """  Corresponds to IDD Field `time_85`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_85`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_85`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_85`')

        self._data["Time 85"] = value

    @property
    def value_until_time_85(self):
        """Get value_until_time_85

        Returns:
            float: the value of `value_until_time_85` or None if not set
        """
        return self._data["Value Until Time 85"]

    @value_until_time_85.setter
    def value_until_time_85(self, value=None):
        """  Corresponds to IDD Field `value_until_time_85`

        Args:
            value (float): value for IDD Field `value_until_time_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_85`'.format(value))

        self._data["Value Until Time 85"] = value

    @property
    def time_86(self):
        """Get time_86

        Returns:
            str: the value of `time_86` or None if not set
        """
        return self._data["Time 86"]

    @time_86.setter
    def time_86(self, value=None):
        """  Corresponds to IDD Field `time_86`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_86`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_86`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_86`')

        self._data["Time 86"] = value

    @property
    def value_until_time_86(self):
        """Get value_until_time_86

        Returns:
            float: the value of `value_until_time_86` or None if not set
        """
        return self._data["Value Until Time 86"]

    @value_until_time_86.setter
    def value_until_time_86(self, value=None):
        """  Corresponds to IDD Field `value_until_time_86`

        Args:
            value (float): value for IDD Field `value_until_time_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_86`'.format(value))

        self._data["Value Until Time 86"] = value

    @property
    def time_87(self):
        """Get time_87

        Returns:
            str: the value of `time_87` or None if not set
        """
        return self._data["Time 87"]

    @time_87.setter
    def time_87(self, value=None):
        """  Corresponds to IDD Field `time_87`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_87`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_87`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_87`')

        self._data["Time 87"] = value

    @property
    def value_until_time_87(self):
        """Get value_until_time_87

        Returns:
            float: the value of `value_until_time_87` or None if not set
        """
        return self._data["Value Until Time 87"]

    @value_until_time_87.setter
    def value_until_time_87(self, value=None):
        """  Corresponds to IDD Field `value_until_time_87`

        Args:
            value (float): value for IDD Field `value_until_time_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_87`'.format(value))

        self._data["Value Until Time 87"] = value

    @property
    def time_88(self):
        """Get time_88

        Returns:
            str: the value of `time_88` or None if not set
        """
        return self._data["Time 88"]

    @time_88.setter
    def time_88(self, value=None):
        """  Corresponds to IDD Field `time_88`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_88`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_88`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_88`')

        self._data["Time 88"] = value

    @property
    def value_until_time_88(self):
        """Get value_until_time_88

        Returns:
            float: the value of `value_until_time_88` or None if not set
        """
        return self._data["Value Until Time 88"]

    @value_until_time_88.setter
    def value_until_time_88(self, value=None):
        """  Corresponds to IDD Field `value_until_time_88`

        Args:
            value (float): value for IDD Field `value_until_time_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_88`'.format(value))

        self._data["Value Until Time 88"] = value

    @property
    def time_89(self):
        """Get time_89

        Returns:
            str: the value of `time_89` or None if not set
        """
        return self._data["Time 89"]

    @time_89.setter
    def time_89(self, value=None):
        """  Corresponds to IDD Field `time_89`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_89`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_89`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_89`')

        self._data["Time 89"] = value

    @property
    def value_until_time_89(self):
        """Get value_until_time_89

        Returns:
            float: the value of `value_until_time_89` or None if not set
        """
        return self._data["Value Until Time 89"]

    @value_until_time_89.setter
    def value_until_time_89(self, value=None):
        """  Corresponds to IDD Field `value_until_time_89`

        Args:
            value (float): value for IDD Field `value_until_time_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_89`'.format(value))

        self._data["Value Until Time 89"] = value

    @property
    def time_90(self):
        """Get time_90

        Returns:
            str: the value of `time_90` or None if not set
        """
        return self._data["Time 90"]

    @time_90.setter
    def time_90(self, value=None):
        """  Corresponds to IDD Field `time_90`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_90`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_90`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_90`')

        self._data["Time 90"] = value

    @property
    def value_until_time_90(self):
        """Get value_until_time_90

        Returns:
            float: the value of `value_until_time_90` or None if not set
        """
        return self._data["Value Until Time 90"]

    @value_until_time_90.setter
    def value_until_time_90(self, value=None):
        """  Corresponds to IDD Field `value_until_time_90`

        Args:
            value (float): value for IDD Field `value_until_time_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_90`'.format(value))

        self._data["Value Until Time 90"] = value

    @property
    def time_91(self):
        """Get time_91

        Returns:
            str: the value of `time_91` or None if not set
        """
        return self._data["Time 91"]

    @time_91.setter
    def time_91(self, value=None):
        """  Corresponds to IDD Field `time_91`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_91`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_91`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_91`')

        self._data["Time 91"] = value

    @property
    def value_until_time_91(self):
        """Get value_until_time_91

        Returns:
            float: the value of `value_until_time_91` or None if not set
        """
        return self._data["Value Until Time 91"]

    @value_until_time_91.setter
    def value_until_time_91(self, value=None):
        """  Corresponds to IDD Field `value_until_time_91`

        Args:
            value (float): value for IDD Field `value_until_time_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_91`'.format(value))

        self._data["Value Until Time 91"] = value

    @property
    def time_92(self):
        """Get time_92

        Returns:
            str: the value of `time_92` or None if not set
        """
        return self._data["Time 92"]

    @time_92.setter
    def time_92(self, value=None):
        """  Corresponds to IDD Field `time_92`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_92`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_92`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_92`')

        self._data["Time 92"] = value

    @property
    def value_until_time_92(self):
        """Get value_until_time_92

        Returns:
            float: the value of `value_until_time_92` or None if not set
        """
        return self._data["Value Until Time 92"]

    @value_until_time_92.setter
    def value_until_time_92(self, value=None):
        """  Corresponds to IDD Field `value_until_time_92`

        Args:
            value (float): value for IDD Field `value_until_time_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_92`'.format(value))

        self._data["Value Until Time 92"] = value

    @property
    def time_93(self):
        """Get time_93

        Returns:
            str: the value of `time_93` or None if not set
        """
        return self._data["Time 93"]

    @time_93.setter
    def time_93(self, value=None):
        """  Corresponds to IDD Field `time_93`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_93`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_93`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_93`')

        self._data["Time 93"] = value

    @property
    def value_until_time_93(self):
        """Get value_until_time_93

        Returns:
            float: the value of `value_until_time_93` or None if not set
        """
        return self._data["Value Until Time 93"]

    @value_until_time_93.setter
    def value_until_time_93(self, value=None):
        """  Corresponds to IDD Field `value_until_time_93`

        Args:
            value (float): value for IDD Field `value_until_time_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_93`'.format(value))

        self._data["Value Until Time 93"] = value

    @property
    def time_94(self):
        """Get time_94

        Returns:
            str: the value of `time_94` or None if not set
        """
        return self._data["Time 94"]

    @time_94.setter
    def time_94(self, value=None):
        """  Corresponds to IDD Field `time_94`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_94`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_94`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_94`')

        self._data["Time 94"] = value

    @property
    def value_until_time_94(self):
        """Get value_until_time_94

        Returns:
            float: the value of `value_until_time_94` or None if not set
        """
        return self._data["Value Until Time 94"]

    @value_until_time_94.setter
    def value_until_time_94(self, value=None):
        """  Corresponds to IDD Field `value_until_time_94`

        Args:
            value (float): value for IDD Field `value_until_time_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_94`'.format(value))

        self._data["Value Until Time 94"] = value

    @property
    def time_95(self):
        """Get time_95

        Returns:
            str: the value of `time_95` or None if not set
        """
        return self._data["Time 95"]

    @time_95.setter
    def time_95(self, value=None):
        """  Corresponds to IDD Field `time_95`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_95`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_95`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_95`')

        self._data["Time 95"] = value

    @property
    def value_until_time_95(self):
        """Get value_until_time_95

        Returns:
            float: the value of `value_until_time_95` or None if not set
        """
        return self._data["Value Until Time 95"]

    @value_until_time_95.setter
    def value_until_time_95(self, value=None):
        """  Corresponds to IDD Field `value_until_time_95`

        Args:
            value (float): value for IDD Field `value_until_time_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_95`'.format(value))

        self._data["Value Until Time 95"] = value

    @property
    def time_96(self):
        """Get time_96

        Returns:
            str: the value of `time_96` or None if not set
        """
        return self._data["Time 96"]

    @time_96.setter
    def time_96(self, value=None):
        """  Corresponds to IDD Field `time_96`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_96`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_96`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_96`')

        self._data["Time 96"] = value

    @property
    def value_until_time_96(self):
        """Get value_until_time_96

        Returns:
            float: the value of `value_until_time_96` or None if not set
        """
        return self._data["Value Until Time 96"]

    @value_until_time_96.setter
    def value_until_time_96(self, value=None):
        """  Corresponds to IDD Field `value_until_time_96`

        Args:
            value (float): value for IDD Field `value_until_time_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_96`'.format(value))

        self._data["Value Until Time 96"] = value

    @property
    def time_97(self):
        """Get time_97

        Returns:
            str: the value of `time_97` or None if not set
        """
        return self._data["Time 97"]

    @time_97.setter
    def time_97(self, value=None):
        """  Corresponds to IDD Field `time_97`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_97`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_97`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_97`')

        self._data["Time 97"] = value

    @property
    def value_until_time_97(self):
        """Get value_until_time_97

        Returns:
            float: the value of `value_until_time_97` or None if not set
        """
        return self._data["Value Until Time 97"]

    @value_until_time_97.setter
    def value_until_time_97(self, value=None):
        """  Corresponds to IDD Field `value_until_time_97`

        Args:
            value (float): value for IDD Field `value_until_time_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_97`'.format(value))

        self._data["Value Until Time 97"] = value

    @property
    def time_98(self):
        """Get time_98

        Returns:
            str: the value of `time_98` or None if not set
        """
        return self._data["Time 98"]

    @time_98.setter
    def time_98(self, value=None):
        """  Corresponds to IDD Field `time_98`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_98`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_98`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_98`')

        self._data["Time 98"] = value

    @property
    def value_until_time_98(self):
        """Get value_until_time_98

        Returns:
            float: the value of `value_until_time_98` or None if not set
        """
        return self._data["Value Until Time 98"]

    @value_until_time_98.setter
    def value_until_time_98(self, value=None):
        """  Corresponds to IDD Field `value_until_time_98`

        Args:
            value (float): value for IDD Field `value_until_time_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_98`'.format(value))

        self._data["Value Until Time 98"] = value

    @property
    def time_99(self):
        """Get time_99

        Returns:
            str: the value of `time_99` or None if not set
        """
        return self._data["Time 99"]

    @time_99.setter
    def time_99(self, value=None):
        """  Corresponds to IDD Field `time_99`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_99`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_99`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_99`')

        self._data["Time 99"] = value

    @property
    def value_until_time_99(self):
        """Get value_until_time_99

        Returns:
            float: the value of `value_until_time_99` or None if not set
        """
        return self._data["Value Until Time 99"]

    @value_until_time_99.setter
    def value_until_time_99(self, value=None):
        """  Corresponds to IDD Field `value_until_time_99`

        Args:
            value (float): value for IDD Field `value_until_time_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_99`'.format(value))

        self._data["Value Until Time 99"] = value

    @property
    def time_100(self):
        """Get time_100

        Returns:
            str: the value of `time_100` or None if not set
        """
        return self._data["Time 100"]

    @time_100.setter
    def time_100(self, value=None):
        """  Corresponds to IDD Field `time_100`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_100`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_100`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_100`')

        self._data["Time 100"] = value

    @property
    def value_until_time_100(self):
        """Get value_until_time_100

        Returns:
            float: the value of `value_until_time_100` or None if not set
        """
        return self._data["Value Until Time 100"]

    @value_until_time_100.setter
    def value_until_time_100(self, value=None):
        """  Corresponds to IDD Field `value_until_time_100`

        Args:
            value (float): value for IDD Field `value_until_time_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_100`'.format(value))

        self._data["Value Until Time 100"] = value

    @property
    def time_101(self):
        """Get time_101

        Returns:
            str: the value of `time_101` or None if not set
        """
        return self._data["Time 101"]

    @time_101.setter
    def time_101(self, value=None):
        """  Corresponds to IDD Field `time_101`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_101`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_101`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_101`')

        self._data["Time 101"] = value

    @property
    def value_until_time_101(self):
        """Get value_until_time_101

        Returns:
            float: the value of `value_until_time_101` or None if not set
        """
        return self._data["Value Until Time 101"]

    @value_until_time_101.setter
    def value_until_time_101(self, value=None):
        """  Corresponds to IDD Field `value_until_time_101`

        Args:
            value (float): value for IDD Field `value_until_time_101`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_101`'.format(value))

        self._data["Value Until Time 101"] = value

    @property
    def time_102(self):
        """Get time_102

        Returns:
            str: the value of `time_102` or None if not set
        """
        return self._data["Time 102"]

    @time_102.setter
    def time_102(self, value=None):
        """  Corresponds to IDD Field `time_102`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_102`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_102`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_102`')

        self._data["Time 102"] = value

    @property
    def value_until_time_102(self):
        """Get value_until_time_102

        Returns:
            float: the value of `value_until_time_102` or None if not set
        """
        return self._data["Value Until Time 102"]

    @value_until_time_102.setter
    def value_until_time_102(self, value=None):
        """  Corresponds to IDD Field `value_until_time_102`

        Args:
            value (float): value for IDD Field `value_until_time_102`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_102`'.format(value))

        self._data["Value Until Time 102"] = value

    @property
    def time_103(self):
        """Get time_103

        Returns:
            str: the value of `time_103` or None if not set
        """
        return self._data["Time 103"]

    @time_103.setter
    def time_103(self, value=None):
        """  Corresponds to IDD Field `time_103`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_103`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_103`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_103`')

        self._data["Time 103"] = value

    @property
    def value_until_time_103(self):
        """Get value_until_time_103

        Returns:
            float: the value of `value_until_time_103` or None if not set
        """
        return self._data["Value Until Time 103"]

    @value_until_time_103.setter
    def value_until_time_103(self, value=None):
        """  Corresponds to IDD Field `value_until_time_103`

        Args:
            value (float): value for IDD Field `value_until_time_103`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_103`'.format(value))

        self._data["Value Until Time 103"] = value

    @property
    def time_104(self):
        """Get time_104

        Returns:
            str: the value of `time_104` or None if not set
        """
        return self._data["Time 104"]

    @time_104.setter
    def time_104(self, value=None):
        """  Corresponds to IDD Field `time_104`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_104`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_104`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_104`')

        self._data["Time 104"] = value

    @property
    def value_until_time_104(self):
        """Get value_until_time_104

        Returns:
            float: the value of `value_until_time_104` or None if not set
        """
        return self._data["Value Until Time 104"]

    @value_until_time_104.setter
    def value_until_time_104(self, value=None):
        """  Corresponds to IDD Field `value_until_time_104`

        Args:
            value (float): value for IDD Field `value_until_time_104`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_104`'.format(value))

        self._data["Value Until Time 104"] = value

    @property
    def time_105(self):
        """Get time_105

        Returns:
            str: the value of `time_105` or None if not set
        """
        return self._data["Time 105"]

    @time_105.setter
    def time_105(self, value=None):
        """  Corresponds to IDD Field `time_105`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_105`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_105`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_105`')

        self._data["Time 105"] = value

    @property
    def value_until_time_105(self):
        """Get value_until_time_105

        Returns:
            float: the value of `value_until_time_105` or None if not set
        """
        return self._data["Value Until Time 105"]

    @value_until_time_105.setter
    def value_until_time_105(self, value=None):
        """  Corresponds to IDD Field `value_until_time_105`

        Args:
            value (float): value for IDD Field `value_until_time_105`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_105`'.format(value))

        self._data["Value Until Time 105"] = value

    @property
    def time_106(self):
        """Get time_106

        Returns:
            str: the value of `time_106` or None if not set
        """
        return self._data["Time 106"]

    @time_106.setter
    def time_106(self, value=None):
        """  Corresponds to IDD Field `time_106`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_106`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_106`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_106`')

        self._data["Time 106"] = value

    @property
    def value_until_time_106(self):
        """Get value_until_time_106

        Returns:
            float: the value of `value_until_time_106` or None if not set
        """
        return self._data["Value Until Time 106"]

    @value_until_time_106.setter
    def value_until_time_106(self, value=None):
        """  Corresponds to IDD Field `value_until_time_106`

        Args:
            value (float): value for IDD Field `value_until_time_106`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_106`'.format(value))

        self._data["Value Until Time 106"] = value

    @property
    def time_107(self):
        """Get time_107

        Returns:
            str: the value of `time_107` or None if not set
        """
        return self._data["Time 107"]

    @time_107.setter
    def time_107(self, value=None):
        """  Corresponds to IDD Field `time_107`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_107`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_107`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_107`')

        self._data["Time 107"] = value

    @property
    def value_until_time_107(self):
        """Get value_until_time_107

        Returns:
            float: the value of `value_until_time_107` or None if not set
        """
        return self._data["Value Until Time 107"]

    @value_until_time_107.setter
    def value_until_time_107(self, value=None):
        """  Corresponds to IDD Field `value_until_time_107`

        Args:
            value (float): value for IDD Field `value_until_time_107`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_107`'.format(value))

        self._data["Value Until Time 107"] = value

    @property
    def time_108(self):
        """Get time_108

        Returns:
            str: the value of `time_108` or None if not set
        """
        return self._data["Time 108"]

    @time_108.setter
    def time_108(self, value=None):
        """  Corresponds to IDD Field `time_108`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_108`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_108`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_108`')

        self._data["Time 108"] = value

    @property
    def value_until_time_108(self):
        """Get value_until_time_108

        Returns:
            float: the value of `value_until_time_108` or None if not set
        """
        return self._data["Value Until Time 108"]

    @value_until_time_108.setter
    def value_until_time_108(self, value=None):
        """  Corresponds to IDD Field `value_until_time_108`

        Args:
            value (float): value for IDD Field `value_until_time_108`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_108`'.format(value))

        self._data["Value Until Time 108"] = value

    @property
    def time_109(self):
        """Get time_109

        Returns:
            str: the value of `time_109` or None if not set
        """
        return self._data["Time 109"]

    @time_109.setter
    def time_109(self, value=None):
        """  Corresponds to IDD Field `time_109`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_109`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_109`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_109`')

        self._data["Time 109"] = value

    @property
    def value_until_time_109(self):
        """Get value_until_time_109

        Returns:
            float: the value of `value_until_time_109` or None if not set
        """
        return self._data["Value Until Time 109"]

    @value_until_time_109.setter
    def value_until_time_109(self, value=None):
        """  Corresponds to IDD Field `value_until_time_109`

        Args:
            value (float): value for IDD Field `value_until_time_109`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_109`'.format(value))

        self._data["Value Until Time 109"] = value

    @property
    def time_110(self):
        """Get time_110

        Returns:
            str: the value of `time_110` or None if not set
        """
        return self._data["Time 110"]

    @time_110.setter
    def time_110(self, value=None):
        """  Corresponds to IDD Field `time_110`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_110`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_110`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_110`')

        self._data["Time 110"] = value

    @property
    def value_until_time_110(self):
        """Get value_until_time_110

        Returns:
            float: the value of `value_until_time_110` or None if not set
        """
        return self._data["Value Until Time 110"]

    @value_until_time_110.setter
    def value_until_time_110(self, value=None):
        """  Corresponds to IDD Field `value_until_time_110`

        Args:
            value (float): value for IDD Field `value_until_time_110`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_110`'.format(value))

        self._data["Value Until Time 110"] = value

    @property
    def time_111(self):
        """Get time_111

        Returns:
            str: the value of `time_111` or None if not set
        """
        return self._data["Time 111"]

    @time_111.setter
    def time_111(self, value=None):
        """  Corresponds to IDD Field `time_111`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_111`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_111`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_111`')

        self._data["Time 111"] = value

    @property
    def value_until_time_111(self):
        """Get value_until_time_111

        Returns:
            float: the value of `value_until_time_111` or None if not set
        """
        return self._data["Value Until Time 111"]

    @value_until_time_111.setter
    def value_until_time_111(self, value=None):
        """  Corresponds to IDD Field `value_until_time_111`

        Args:
            value (float): value for IDD Field `value_until_time_111`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_111`'.format(value))

        self._data["Value Until Time 111"] = value

    @property
    def time_112(self):
        """Get time_112

        Returns:
            str: the value of `time_112` or None if not set
        """
        return self._data["Time 112"]

    @time_112.setter
    def time_112(self, value=None):
        """  Corresponds to IDD Field `time_112`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_112`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_112`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_112`')

        self._data["Time 112"] = value

    @property
    def value_until_time_112(self):
        """Get value_until_time_112

        Returns:
            float: the value of `value_until_time_112` or None if not set
        """
        return self._data["Value Until Time 112"]

    @value_until_time_112.setter
    def value_until_time_112(self, value=None):
        """  Corresponds to IDD Field `value_until_time_112`

        Args:
            value (float): value for IDD Field `value_until_time_112`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_112`'.format(value))

        self._data["Value Until Time 112"] = value

    @property
    def time_113(self):
        """Get time_113

        Returns:
            str: the value of `time_113` or None if not set
        """
        return self._data["Time 113"]

    @time_113.setter
    def time_113(self, value=None):
        """  Corresponds to IDD Field `time_113`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_113`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_113`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_113`')

        self._data["Time 113"] = value

    @property
    def value_until_time_113(self):
        """Get value_until_time_113

        Returns:
            float: the value of `value_until_time_113` or None if not set
        """
        return self._data["Value Until Time 113"]

    @value_until_time_113.setter
    def value_until_time_113(self, value=None):
        """  Corresponds to IDD Field `value_until_time_113`

        Args:
            value (float): value for IDD Field `value_until_time_113`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_113`'.format(value))

        self._data["Value Until Time 113"] = value

    @property
    def time_114(self):
        """Get time_114

        Returns:
            str: the value of `time_114` or None if not set
        """
        return self._data["Time 114"]

    @time_114.setter
    def time_114(self, value=None):
        """  Corresponds to IDD Field `time_114`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_114`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_114`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_114`')

        self._data["Time 114"] = value

    @property
    def value_until_time_114(self):
        """Get value_until_time_114

        Returns:
            float: the value of `value_until_time_114` or None if not set
        """
        return self._data["Value Until Time 114"]

    @value_until_time_114.setter
    def value_until_time_114(self, value=None):
        """  Corresponds to IDD Field `value_until_time_114`

        Args:
            value (float): value for IDD Field `value_until_time_114`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_114`'.format(value))

        self._data["Value Until Time 114"] = value

    @property
    def time_115(self):
        """Get time_115

        Returns:
            str: the value of `time_115` or None if not set
        """
        return self._data["Time 115"]

    @time_115.setter
    def time_115(self, value=None):
        """  Corresponds to IDD Field `time_115`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_115`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_115`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_115`')

        self._data["Time 115"] = value

    @property
    def value_until_time_115(self):
        """Get value_until_time_115

        Returns:
            float: the value of `value_until_time_115` or None if not set
        """
        return self._data["Value Until Time 115"]

    @value_until_time_115.setter
    def value_until_time_115(self, value=None):
        """  Corresponds to IDD Field `value_until_time_115`

        Args:
            value (float): value for IDD Field `value_until_time_115`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_115`'.format(value))

        self._data["Value Until Time 115"] = value

    @property
    def time_116(self):
        """Get time_116

        Returns:
            str: the value of `time_116` or None if not set
        """
        return self._data["Time 116"]

    @time_116.setter
    def time_116(self, value=None):
        """  Corresponds to IDD Field `time_116`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_116`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_116`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_116`')

        self._data["Time 116"] = value

    @property
    def value_until_time_116(self):
        """Get value_until_time_116

        Returns:
            float: the value of `value_until_time_116` or None if not set
        """
        return self._data["Value Until Time 116"]

    @value_until_time_116.setter
    def value_until_time_116(self, value=None):
        """  Corresponds to IDD Field `value_until_time_116`

        Args:
            value (float): value for IDD Field `value_until_time_116`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_116`'.format(value))

        self._data["Value Until Time 116"] = value

    @property
    def time_117(self):
        """Get time_117

        Returns:
            str: the value of `time_117` or None if not set
        """
        return self._data["Time 117"]

    @time_117.setter
    def time_117(self, value=None):
        """  Corresponds to IDD Field `time_117`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_117`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_117`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_117`')

        self._data["Time 117"] = value

    @property
    def value_until_time_117(self):
        """Get value_until_time_117

        Returns:
            float: the value of `value_until_time_117` or None if not set
        """
        return self._data["Value Until Time 117"]

    @value_until_time_117.setter
    def value_until_time_117(self, value=None):
        """  Corresponds to IDD Field `value_until_time_117`

        Args:
            value (float): value for IDD Field `value_until_time_117`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_117`'.format(value))

        self._data["Value Until Time 117"] = value

    @property
    def time_118(self):
        """Get time_118

        Returns:
            str: the value of `time_118` or None if not set
        """
        return self._data["Time 118"]

    @time_118.setter
    def time_118(self, value=None):
        """  Corresponds to IDD Field `time_118`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_118`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_118`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_118`')

        self._data["Time 118"] = value

    @property
    def value_until_time_118(self):
        """Get value_until_time_118

        Returns:
            float: the value of `value_until_time_118` or None if not set
        """
        return self._data["Value Until Time 118"]

    @value_until_time_118.setter
    def value_until_time_118(self, value=None):
        """  Corresponds to IDD Field `value_until_time_118`

        Args:
            value (float): value for IDD Field `value_until_time_118`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_118`'.format(value))

        self._data["Value Until Time 118"] = value

    @property
    def time_119(self):
        """Get time_119

        Returns:
            str: the value of `time_119` or None if not set
        """
        return self._data["Time 119"]

    @time_119.setter
    def time_119(self, value=None):
        """  Corresponds to IDD Field `time_119`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_119`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_119`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_119`')

        self._data["Time 119"] = value

    @property
    def value_until_time_119(self):
        """Get value_until_time_119

        Returns:
            float: the value of `value_until_time_119` or None if not set
        """
        return self._data["Value Until Time 119"]

    @value_until_time_119.setter
    def value_until_time_119(self, value=None):
        """  Corresponds to IDD Field `value_until_time_119`

        Args:
            value (float): value for IDD Field `value_until_time_119`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_119`'.format(value))

        self._data["Value Until Time 119"] = value

    @property
    def time_120(self):
        """Get time_120

        Returns:
            str: the value of `time_120` or None if not set
        """
        return self._data["Time 120"]

    @time_120.setter
    def time_120(self, value=None):
        """  Corresponds to IDD Field `time_120`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_120`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_120`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_120`')

        self._data["Time 120"] = value

    @property
    def value_until_time_120(self):
        """Get value_until_time_120

        Returns:
            float: the value of `value_until_time_120` or None if not set
        """
        return self._data["Value Until Time 120"]

    @value_until_time_120.setter
    def value_until_time_120(self, value=None):
        """  Corresponds to IDD Field `value_until_time_120`

        Args:
            value (float): value for IDD Field `value_until_time_120`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_120`'.format(value))

        self._data["Value Until Time 120"] = value

    @property
    def time_121(self):
        """Get time_121

        Returns:
            str: the value of `time_121` or None if not set
        """
        return self._data["Time 121"]

    @time_121.setter
    def time_121(self, value=None):
        """  Corresponds to IDD Field `time_121`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_121`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_121`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_121`')

        self._data["Time 121"] = value

    @property
    def value_until_time_121(self):
        """Get value_until_time_121

        Returns:
            float: the value of `value_until_time_121` or None if not set
        """
        return self._data["Value Until Time 121"]

    @value_until_time_121.setter
    def value_until_time_121(self, value=None):
        """  Corresponds to IDD Field `value_until_time_121`

        Args:
            value (float): value for IDD Field `value_until_time_121`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_121`'.format(value))

        self._data["Value Until Time 121"] = value

    @property
    def time_122(self):
        """Get time_122

        Returns:
            str: the value of `time_122` or None if not set
        """
        return self._data["Time 122"]

    @time_122.setter
    def time_122(self, value=None):
        """  Corresponds to IDD Field `time_122`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_122`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_122`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_122`')

        self._data["Time 122"] = value

    @property
    def value_until_time_122(self):
        """Get value_until_time_122

        Returns:
            float: the value of `value_until_time_122` or None if not set
        """
        return self._data["Value Until Time 122"]

    @value_until_time_122.setter
    def value_until_time_122(self, value=None):
        """  Corresponds to IDD Field `value_until_time_122`

        Args:
            value (float): value for IDD Field `value_until_time_122`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_122`'.format(value))

        self._data["Value Until Time 122"] = value

    @property
    def time_123(self):
        """Get time_123

        Returns:
            str: the value of `time_123` or None if not set
        """
        return self._data["Time 123"]

    @time_123.setter
    def time_123(self, value=None):
        """  Corresponds to IDD Field `time_123`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_123`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_123`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_123`')

        self._data["Time 123"] = value

    @property
    def value_until_time_123(self):
        """Get value_until_time_123

        Returns:
            float: the value of `value_until_time_123` or None if not set
        """
        return self._data["Value Until Time 123"]

    @value_until_time_123.setter
    def value_until_time_123(self, value=None):
        """  Corresponds to IDD Field `value_until_time_123`

        Args:
            value (float): value for IDD Field `value_until_time_123`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_123`'.format(value))

        self._data["Value Until Time 123"] = value

    @property
    def time_124(self):
        """Get time_124

        Returns:
            str: the value of `time_124` or None if not set
        """
        return self._data["Time 124"]

    @time_124.setter
    def time_124(self, value=None):
        """  Corresponds to IDD Field `time_124`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_124`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_124`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_124`')

        self._data["Time 124"] = value

    @property
    def value_until_time_124(self):
        """Get value_until_time_124

        Returns:
            float: the value of `value_until_time_124` or None if not set
        """
        return self._data["Value Until Time 124"]

    @value_until_time_124.setter
    def value_until_time_124(self, value=None):
        """  Corresponds to IDD Field `value_until_time_124`

        Args:
            value (float): value for IDD Field `value_until_time_124`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_124`'.format(value))

        self._data["Value Until Time 124"] = value

    @property
    def time_125(self):
        """Get time_125

        Returns:
            str: the value of `time_125` or None if not set
        """
        return self._data["Time 125"]

    @time_125.setter
    def time_125(self, value=None):
        """  Corresponds to IDD Field `time_125`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_125`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_125`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_125`')

        self._data["Time 125"] = value

    @property
    def value_until_time_125(self):
        """Get value_until_time_125

        Returns:
            float: the value of `value_until_time_125` or None if not set
        """
        return self._data["Value Until Time 125"]

    @value_until_time_125.setter
    def value_until_time_125(self, value=None):
        """  Corresponds to IDD Field `value_until_time_125`

        Args:
            value (float): value for IDD Field `value_until_time_125`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_125`'.format(value))

        self._data["Value Until Time 125"] = value

    @property
    def time_126(self):
        """Get time_126

        Returns:
            str: the value of `time_126` or None if not set
        """
        return self._data["Time 126"]

    @time_126.setter
    def time_126(self, value=None):
        """  Corresponds to IDD Field `time_126`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_126`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_126`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_126`')

        self._data["Time 126"] = value

    @property
    def value_until_time_126(self):
        """Get value_until_time_126

        Returns:
            float: the value of `value_until_time_126` or None if not set
        """
        return self._data["Value Until Time 126"]

    @value_until_time_126.setter
    def value_until_time_126(self, value=None):
        """  Corresponds to IDD Field `value_until_time_126`

        Args:
            value (float): value for IDD Field `value_until_time_126`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_126`'.format(value))

        self._data["Value Until Time 126"] = value

    @property
    def time_127(self):
        """Get time_127

        Returns:
            str: the value of `time_127` or None if not set
        """
        return self._data["Time 127"]

    @time_127.setter
    def time_127(self, value=None):
        """  Corresponds to IDD Field `time_127`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_127`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_127`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_127`')

        self._data["Time 127"] = value

    @property
    def value_until_time_127(self):
        """Get value_until_time_127

        Returns:
            float: the value of `value_until_time_127` or None if not set
        """
        return self._data["Value Until Time 127"]

    @value_until_time_127.setter
    def value_until_time_127(self, value=None):
        """  Corresponds to IDD Field `value_until_time_127`

        Args:
            value (float): value for IDD Field `value_until_time_127`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_127`'.format(value))

        self._data["Value Until Time 127"] = value

    @property
    def time_128(self):
        """Get time_128

        Returns:
            str: the value of `time_128` or None if not set
        """
        return self._data["Time 128"]

    @time_128.setter
    def time_128(self, value=None):
        """  Corresponds to IDD Field `time_128`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_128`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_128`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_128`')

        self._data["Time 128"] = value

    @property
    def value_until_time_128(self):
        """Get value_until_time_128

        Returns:
            float: the value of `value_until_time_128` or None if not set
        """
        return self._data["Value Until Time 128"]

    @value_until_time_128.setter
    def value_until_time_128(self, value=None):
        """  Corresponds to IDD Field `value_until_time_128`

        Args:
            value (float): value for IDD Field `value_until_time_128`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_128`'.format(value))

        self._data["Value Until Time 128"] = value

    @property
    def time_129(self):
        """Get time_129

        Returns:
            str: the value of `time_129` or None if not set
        """
        return self._data["Time 129"]

    @time_129.setter
    def time_129(self, value=None):
        """  Corresponds to IDD Field `time_129`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_129`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_129`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_129`')

        self._data["Time 129"] = value

    @property
    def value_until_time_129(self):
        """Get value_until_time_129

        Returns:
            float: the value of `value_until_time_129` or None if not set
        """
        return self._data["Value Until Time 129"]

    @value_until_time_129.setter
    def value_until_time_129(self, value=None):
        """  Corresponds to IDD Field `value_until_time_129`

        Args:
            value (float): value for IDD Field `value_until_time_129`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_129`'.format(value))

        self._data["Value Until Time 129"] = value

    @property
    def time_130(self):
        """Get time_130

        Returns:
            str: the value of `time_130` or None if not set
        """
        return self._data["Time 130"]

    @time_130.setter
    def time_130(self, value=None):
        """  Corresponds to IDD Field `time_130`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_130`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_130`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_130`')

        self._data["Time 130"] = value

    @property
    def value_until_time_130(self):
        """Get value_until_time_130

        Returns:
            float: the value of `value_until_time_130` or None if not set
        """
        return self._data["Value Until Time 130"]

    @value_until_time_130.setter
    def value_until_time_130(self, value=None):
        """  Corresponds to IDD Field `value_until_time_130`

        Args:
            value (float): value for IDD Field `value_until_time_130`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_130`'.format(value))

        self._data["Value Until Time 130"] = value

    @property
    def time_131(self):
        """Get time_131

        Returns:
            str: the value of `time_131` or None if not set
        """
        return self._data["Time 131"]

    @time_131.setter
    def time_131(self, value=None):
        """  Corresponds to IDD Field `time_131`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_131`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_131`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_131`')

        self._data["Time 131"] = value

    @property
    def value_until_time_131(self):
        """Get value_until_time_131

        Returns:
            float: the value of `value_until_time_131` or None if not set
        """
        return self._data["Value Until Time 131"]

    @value_until_time_131.setter
    def value_until_time_131(self, value=None):
        """  Corresponds to IDD Field `value_until_time_131`

        Args:
            value (float): value for IDD Field `value_until_time_131`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_131`'.format(value))

        self._data["Value Until Time 131"] = value

    @property
    def time_132(self):
        """Get time_132

        Returns:
            str: the value of `time_132` or None if not set
        """
        return self._data["Time 132"]

    @time_132.setter
    def time_132(self, value=None):
        """  Corresponds to IDD Field `time_132`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_132`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_132`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_132`')

        self._data["Time 132"] = value

    @property
    def value_until_time_132(self):
        """Get value_until_time_132

        Returns:
            float: the value of `value_until_time_132` or None if not set
        """
        return self._data["Value Until Time 132"]

    @value_until_time_132.setter
    def value_until_time_132(self, value=None):
        """  Corresponds to IDD Field `value_until_time_132`

        Args:
            value (float): value for IDD Field `value_until_time_132`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_132`'.format(value))

        self._data["Value Until Time 132"] = value

    @property
    def time_133(self):
        """Get time_133

        Returns:
            str: the value of `time_133` or None if not set
        """
        return self._data["Time 133"]

    @time_133.setter
    def time_133(self, value=None):
        """  Corresponds to IDD Field `time_133`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_133`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_133`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_133`')

        self._data["Time 133"] = value

    @property
    def value_until_time_133(self):
        """Get value_until_time_133

        Returns:
            float: the value of `value_until_time_133` or None if not set
        """
        return self._data["Value Until Time 133"]

    @value_until_time_133.setter
    def value_until_time_133(self, value=None):
        """  Corresponds to IDD Field `value_until_time_133`

        Args:
            value (float): value for IDD Field `value_until_time_133`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_133`'.format(value))

        self._data["Value Until Time 133"] = value

    @property
    def time_134(self):
        """Get time_134

        Returns:
            str: the value of `time_134` or None if not set
        """
        return self._data["Time 134"]

    @time_134.setter
    def time_134(self, value=None):
        """  Corresponds to IDD Field `time_134`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_134`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_134`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_134`')

        self._data["Time 134"] = value

    @property
    def value_until_time_134(self):
        """Get value_until_time_134

        Returns:
            float: the value of `value_until_time_134` or None if not set
        """
        return self._data["Value Until Time 134"]

    @value_until_time_134.setter
    def value_until_time_134(self, value=None):
        """  Corresponds to IDD Field `value_until_time_134`

        Args:
            value (float): value for IDD Field `value_until_time_134`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_134`'.format(value))

        self._data["Value Until Time 134"] = value

    @property
    def time_135(self):
        """Get time_135

        Returns:
            str: the value of `time_135` or None if not set
        """
        return self._data["Time 135"]

    @time_135.setter
    def time_135(self, value=None):
        """  Corresponds to IDD Field `time_135`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_135`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_135`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_135`')

        self._data["Time 135"] = value

    @property
    def value_until_time_135(self):
        """Get value_until_time_135

        Returns:
            float: the value of `value_until_time_135` or None if not set
        """
        return self._data["Value Until Time 135"]

    @value_until_time_135.setter
    def value_until_time_135(self, value=None):
        """  Corresponds to IDD Field `value_until_time_135`

        Args:
            value (float): value for IDD Field `value_until_time_135`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_135`'.format(value))

        self._data["Value Until Time 135"] = value

    @property
    def time_136(self):
        """Get time_136

        Returns:
            str: the value of `time_136` or None if not set
        """
        return self._data["Time 136"]

    @time_136.setter
    def time_136(self, value=None):
        """  Corresponds to IDD Field `time_136`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_136`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_136`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_136`')

        self._data["Time 136"] = value

    @property
    def value_until_time_136(self):
        """Get value_until_time_136

        Returns:
            float: the value of `value_until_time_136` or None if not set
        """
        return self._data["Value Until Time 136"]

    @value_until_time_136.setter
    def value_until_time_136(self, value=None):
        """  Corresponds to IDD Field `value_until_time_136`

        Args:
            value (float): value for IDD Field `value_until_time_136`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_136`'.format(value))

        self._data["Value Until Time 136"] = value

    @property
    def time_137(self):
        """Get time_137

        Returns:
            str: the value of `time_137` or None if not set
        """
        return self._data["Time 137"]

    @time_137.setter
    def time_137(self, value=None):
        """  Corresponds to IDD Field `time_137`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_137`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_137`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_137`')

        self._data["Time 137"] = value

    @property
    def value_until_time_137(self):
        """Get value_until_time_137

        Returns:
            float: the value of `value_until_time_137` or None if not set
        """
        return self._data["Value Until Time 137"]

    @value_until_time_137.setter
    def value_until_time_137(self, value=None):
        """  Corresponds to IDD Field `value_until_time_137`

        Args:
            value (float): value for IDD Field `value_until_time_137`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_137`'.format(value))

        self._data["Value Until Time 137"] = value

    @property
    def time_138(self):
        """Get time_138

        Returns:
            str: the value of `time_138` or None if not set
        """
        return self._data["Time 138"]

    @time_138.setter
    def time_138(self, value=None):
        """  Corresponds to IDD Field `time_138`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_138`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_138`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_138`')

        self._data["Time 138"] = value

    @property
    def value_until_time_138(self):
        """Get value_until_time_138

        Returns:
            float: the value of `value_until_time_138` or None if not set
        """
        return self._data["Value Until Time 138"]

    @value_until_time_138.setter
    def value_until_time_138(self, value=None):
        """  Corresponds to IDD Field `value_until_time_138`

        Args:
            value (float): value for IDD Field `value_until_time_138`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_138`'.format(value))

        self._data["Value Until Time 138"] = value

    @property
    def time_139(self):
        """Get time_139

        Returns:
            str: the value of `time_139` or None if not set
        """
        return self._data["Time 139"]

    @time_139.setter
    def time_139(self, value=None):
        """  Corresponds to IDD Field `time_139`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_139`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_139`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_139`')

        self._data["Time 139"] = value

    @property
    def value_until_time_139(self):
        """Get value_until_time_139

        Returns:
            float: the value of `value_until_time_139` or None if not set
        """
        return self._data["Value Until Time 139"]

    @value_until_time_139.setter
    def value_until_time_139(self, value=None):
        """  Corresponds to IDD Field `value_until_time_139`

        Args:
            value (float): value for IDD Field `value_until_time_139`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_139`'.format(value))

        self._data["Value Until Time 139"] = value

    @property
    def time_140(self):
        """Get time_140

        Returns:
            str: the value of `time_140` or None if not set
        """
        return self._data["Time 140"]

    @time_140.setter
    def time_140(self, value=None):
        """  Corresponds to IDD Field `time_140`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_140`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_140`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_140`')

        self._data["Time 140"] = value

    @property
    def value_until_time_140(self):
        """Get value_until_time_140

        Returns:
            float: the value of `value_until_time_140` or None if not set
        """
        return self._data["Value Until Time 140"]

    @value_until_time_140.setter
    def value_until_time_140(self, value=None):
        """  Corresponds to IDD Field `value_until_time_140`

        Args:
            value (float): value for IDD Field `value_until_time_140`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_140`'.format(value))

        self._data["Value Until Time 140"] = value

    @property
    def time_141(self):
        """Get time_141

        Returns:
            str: the value of `time_141` or None if not set
        """
        return self._data["Time 141"]

    @time_141.setter
    def time_141(self, value=None):
        """  Corresponds to IDD Field `time_141`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_141`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_141`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_141`')

        self._data["Time 141"] = value

    @property
    def value_until_time_141(self):
        """Get value_until_time_141

        Returns:
            float: the value of `value_until_time_141` or None if not set
        """
        return self._data["Value Until Time 141"]

    @value_until_time_141.setter
    def value_until_time_141(self, value=None):
        """  Corresponds to IDD Field `value_until_time_141`

        Args:
            value (float): value for IDD Field `value_until_time_141`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_141`'.format(value))

        self._data["Value Until Time 141"] = value

    @property
    def time_142(self):
        """Get time_142

        Returns:
            str: the value of `time_142` or None if not set
        """
        return self._data["Time 142"]

    @time_142.setter
    def time_142(self, value=None):
        """  Corresponds to IDD Field `time_142`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_142`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_142`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_142`')

        self._data["Time 142"] = value

    @property
    def value_until_time_142(self):
        """Get value_until_time_142

        Returns:
            float: the value of `value_until_time_142` or None if not set
        """
        return self._data["Value Until Time 142"]

    @value_until_time_142.setter
    def value_until_time_142(self, value=None):
        """  Corresponds to IDD Field `value_until_time_142`

        Args:
            value (float): value for IDD Field `value_until_time_142`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_142`'.format(value))

        self._data["Value Until Time 142"] = value

    @property
    def time_143(self):
        """Get time_143

        Returns:
            str: the value of `time_143` or None if not set
        """
        return self._data["Time 143"]

    @time_143.setter
    def time_143(self, value=None):
        """  Corresponds to IDD Field `time_143`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_143`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_143`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_143`')

        self._data["Time 143"] = value

    @property
    def value_until_time_143(self):
        """Get value_until_time_143

        Returns:
            float: the value of `value_until_time_143` or None if not set
        """
        return self._data["Value Until Time 143"]

    @value_until_time_143.setter
    def value_until_time_143(self, value=None):
        """  Corresponds to IDD Field `value_until_time_143`

        Args:
            value (float): value for IDD Field `value_until_time_143`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_143`'.format(value))

        self._data["Value Until Time 143"] = value

    @property
    def time_144(self):
        """Get time_144

        Returns:
            str: the value of `time_144` or None if not set
        """
        return self._data["Time 144"]

    @time_144.setter
    def time_144(self, value=None):
        """  Corresponds to IDD Field `time_144`
        "until" includes the time entered.

        Args:
            value (str): value for IDD Field `time_144`
                Unit: hh:mm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_144`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_144`')

        self._data["Time 144"] = value

    @property
    def value_until_time_144(self):
        """Get value_until_time_144

        Returns:
            float: the value of `value_until_time_144` or None if not set
        """
        return self._data["Value Until Time 144"]

    @value_until_time_144.setter
    def value_until_time_144(self, value=None):
        """  Corresponds to IDD Field `value_until_time_144`

        Args:
            value (float): value for IDD Field `value_until_time_144`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_until_time_144`'.format(value))

        self._data["Value Until Time 144"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.schedule_type_limits_name))
        out.append(self._to_str(self.interpolate_to_timestep))
        out.append(self._to_str(self.time_1))
        out.append(self._to_str(self.value_until_time_1))
        out.append(self._to_str(self.time_2))
        out.append(self._to_str(self.value_until_time_2))
        out.append(self._to_str(self.time_3))
        out.append(self._to_str(self.value_until_time_3))
        out.append(self._to_str(self.time_4))
        out.append(self._to_str(self.value_until_time_4))
        out.append(self._to_str(self.time_5))
        out.append(self._to_str(self.value_until_time_5))
        out.append(self._to_str(self.time_6))
        out.append(self._to_str(self.value_until_time_6))
        out.append(self._to_str(self.time_7))
        out.append(self._to_str(self.value_until_time_7))
        out.append(self._to_str(self.time_8))
        out.append(self._to_str(self.value_until_time_8))
        out.append(self._to_str(self.time_9))
        out.append(self._to_str(self.value_until_time_9))
        out.append(self._to_str(self.time_10))
        out.append(self._to_str(self.value_until_time_10))
        out.append(self._to_str(self.time_11))
        out.append(self._to_str(self.value_until_time_11))
        out.append(self._to_str(self.time_12))
        out.append(self._to_str(self.value_until_time_12))
        out.append(self._to_str(self.time_13))
        out.append(self._to_str(self.value_until_time_13))
        out.append(self._to_str(self.time_14))
        out.append(self._to_str(self.value_until_time_14))
        out.append(self._to_str(self.time_15))
        out.append(self._to_str(self.value_until_time_15))
        out.append(self._to_str(self.time_16))
        out.append(self._to_str(self.value_until_time_16))
        out.append(self._to_str(self.time_17))
        out.append(self._to_str(self.value_until_time_17))
        out.append(self._to_str(self.time_18))
        out.append(self._to_str(self.value_until_time_18))
        out.append(self._to_str(self.time_19))
        out.append(self._to_str(self.value_until_time_19))
        out.append(self._to_str(self.time_20))
        out.append(self._to_str(self.value_until_time_20))
        out.append(self._to_str(self.time_21))
        out.append(self._to_str(self.value_until_time_21))
        out.append(self._to_str(self.time_22))
        out.append(self._to_str(self.value_until_time_22))
        out.append(self._to_str(self.time_23))
        out.append(self._to_str(self.value_until_time_23))
        out.append(self._to_str(self.time_24))
        out.append(self._to_str(self.value_until_time_24))
        out.append(self._to_str(self.time_25))
        out.append(self._to_str(self.value_until_time_25))
        out.append(self._to_str(self.time_26))
        out.append(self._to_str(self.value_until_time_26))
        out.append(self._to_str(self.time_27))
        out.append(self._to_str(self.value_until_time_27))
        out.append(self._to_str(self.time_28))
        out.append(self._to_str(self.value_until_time_28))
        out.append(self._to_str(self.time_29))
        out.append(self._to_str(self.value_until_time_29))
        out.append(self._to_str(self.time_30))
        out.append(self._to_str(self.value_until_time_30))
        out.append(self._to_str(self.time_31))
        out.append(self._to_str(self.value_until_time_31))
        out.append(self._to_str(self.time_32))
        out.append(self._to_str(self.value_until_time_32))
        out.append(self._to_str(self.time_33))
        out.append(self._to_str(self.value_until_time_33))
        out.append(self._to_str(self.time_34))
        out.append(self._to_str(self.value_until_time_34))
        out.append(self._to_str(self.time_35))
        out.append(self._to_str(self.value_until_time_35))
        out.append(self._to_str(self.time_36))
        out.append(self._to_str(self.value_until_time_36))
        out.append(self._to_str(self.time_37))
        out.append(self._to_str(self.value_until_time_37))
        out.append(self._to_str(self.time_38))
        out.append(self._to_str(self.value_until_time_38))
        out.append(self._to_str(self.time_39))
        out.append(self._to_str(self.value_until_time_39))
        out.append(self._to_str(self.time_40))
        out.append(self._to_str(self.value_until_time_40))
        out.append(self._to_str(self.time_41))
        out.append(self._to_str(self.value_until_time_41))
        out.append(self._to_str(self.time_42))
        out.append(self._to_str(self.value_until_time_42))
        out.append(self._to_str(self.time_43))
        out.append(self._to_str(self.value_until_time_43))
        out.append(self._to_str(self.time_44))
        out.append(self._to_str(self.value_until_time_44))
        out.append(self._to_str(self.time_45))
        out.append(self._to_str(self.value_until_time_45))
        out.append(self._to_str(self.time_46))
        out.append(self._to_str(self.value_until_time_46))
        out.append(self._to_str(self.time_47))
        out.append(self._to_str(self.value_until_time_47))
        out.append(self._to_str(self.time_48))
        out.append(self._to_str(self.value_until_time_48))
        out.append(self._to_str(self.time_49))
        out.append(self._to_str(self.value_until_time_49))
        out.append(self._to_str(self.time_50))
        out.append(self._to_str(self.value_until_time_50))
        out.append(self._to_str(self.time_51))
        out.append(self._to_str(self.value_until_time_51))
        out.append(self._to_str(self.time_52))
        out.append(self._to_str(self.value_until_time_52))
        out.append(self._to_str(self.time_53))
        out.append(self._to_str(self.value_until_time_53))
        out.append(self._to_str(self.time_54))
        out.append(self._to_str(self.value_until_time_54))
        out.append(self._to_str(self.time_55))
        out.append(self._to_str(self.value_until_time_55))
        out.append(self._to_str(self.time_56))
        out.append(self._to_str(self.value_until_time_56))
        out.append(self._to_str(self.time_57))
        out.append(self._to_str(self.value_until_time_57))
        out.append(self._to_str(self.time_58))
        out.append(self._to_str(self.value_until_time_58))
        out.append(self._to_str(self.time_59))
        out.append(self._to_str(self.value_until_time_59))
        out.append(self._to_str(self.time_60))
        out.append(self._to_str(self.value_until_time_60))
        out.append(self._to_str(self.time_61))
        out.append(self._to_str(self.value_until_time_61))
        out.append(self._to_str(self.time_62))
        out.append(self._to_str(self.value_until_time_62))
        out.append(self._to_str(self.time_63))
        out.append(self._to_str(self.value_until_time_63))
        out.append(self._to_str(self.time_64))
        out.append(self._to_str(self.value_until_time_64))
        out.append(self._to_str(self.time_65))
        out.append(self._to_str(self.value_until_time_65))
        out.append(self._to_str(self.time_66))
        out.append(self._to_str(self.value_until_time_66))
        out.append(self._to_str(self.time_67))
        out.append(self._to_str(self.value_until_time_67))
        out.append(self._to_str(self.time_68))
        out.append(self._to_str(self.value_until_time_68))
        out.append(self._to_str(self.time_69))
        out.append(self._to_str(self.value_until_time_69))
        out.append(self._to_str(self.time_70))
        out.append(self._to_str(self.value_until_time_70))
        out.append(self._to_str(self.time_71))
        out.append(self._to_str(self.value_until_time_71))
        out.append(self._to_str(self.time_72))
        out.append(self._to_str(self.value_until_time_72))
        out.append(self._to_str(self.time_73))
        out.append(self._to_str(self.value_until_time_73))
        out.append(self._to_str(self.time_74))
        out.append(self._to_str(self.value_until_time_74))
        out.append(self._to_str(self.time_75))
        out.append(self._to_str(self.value_until_time_75))
        out.append(self._to_str(self.time_76))
        out.append(self._to_str(self.value_until_time_76))
        out.append(self._to_str(self.time_77))
        out.append(self._to_str(self.value_until_time_77))
        out.append(self._to_str(self.time_78))
        out.append(self._to_str(self.value_until_time_78))
        out.append(self._to_str(self.time_79))
        out.append(self._to_str(self.value_until_time_79))
        out.append(self._to_str(self.time_80))
        out.append(self._to_str(self.value_until_time_80))
        out.append(self._to_str(self.time_81))
        out.append(self._to_str(self.value_until_time_81))
        out.append(self._to_str(self.time_82))
        out.append(self._to_str(self.value_until_time_82))
        out.append(self._to_str(self.time_83))
        out.append(self._to_str(self.value_until_time_83))
        out.append(self._to_str(self.time_84))
        out.append(self._to_str(self.value_until_time_84))
        out.append(self._to_str(self.time_85))
        out.append(self._to_str(self.value_until_time_85))
        out.append(self._to_str(self.time_86))
        out.append(self._to_str(self.value_until_time_86))
        out.append(self._to_str(self.time_87))
        out.append(self._to_str(self.value_until_time_87))
        out.append(self._to_str(self.time_88))
        out.append(self._to_str(self.value_until_time_88))
        out.append(self._to_str(self.time_89))
        out.append(self._to_str(self.value_until_time_89))
        out.append(self._to_str(self.time_90))
        out.append(self._to_str(self.value_until_time_90))
        out.append(self._to_str(self.time_91))
        out.append(self._to_str(self.value_until_time_91))
        out.append(self._to_str(self.time_92))
        out.append(self._to_str(self.value_until_time_92))
        out.append(self._to_str(self.time_93))
        out.append(self._to_str(self.value_until_time_93))
        out.append(self._to_str(self.time_94))
        out.append(self._to_str(self.value_until_time_94))
        out.append(self._to_str(self.time_95))
        out.append(self._to_str(self.value_until_time_95))
        out.append(self._to_str(self.time_96))
        out.append(self._to_str(self.value_until_time_96))
        out.append(self._to_str(self.time_97))
        out.append(self._to_str(self.value_until_time_97))
        out.append(self._to_str(self.time_98))
        out.append(self._to_str(self.value_until_time_98))
        out.append(self._to_str(self.time_99))
        out.append(self._to_str(self.value_until_time_99))
        out.append(self._to_str(self.time_100))
        out.append(self._to_str(self.value_until_time_100))
        out.append(self._to_str(self.time_101))
        out.append(self._to_str(self.value_until_time_101))
        out.append(self._to_str(self.time_102))
        out.append(self._to_str(self.value_until_time_102))
        out.append(self._to_str(self.time_103))
        out.append(self._to_str(self.value_until_time_103))
        out.append(self._to_str(self.time_104))
        out.append(self._to_str(self.value_until_time_104))
        out.append(self._to_str(self.time_105))
        out.append(self._to_str(self.value_until_time_105))
        out.append(self._to_str(self.time_106))
        out.append(self._to_str(self.value_until_time_106))
        out.append(self._to_str(self.time_107))
        out.append(self._to_str(self.value_until_time_107))
        out.append(self._to_str(self.time_108))
        out.append(self._to_str(self.value_until_time_108))
        out.append(self._to_str(self.time_109))
        out.append(self._to_str(self.value_until_time_109))
        out.append(self._to_str(self.time_110))
        out.append(self._to_str(self.value_until_time_110))
        out.append(self._to_str(self.time_111))
        out.append(self._to_str(self.value_until_time_111))
        out.append(self._to_str(self.time_112))
        out.append(self._to_str(self.value_until_time_112))
        out.append(self._to_str(self.time_113))
        out.append(self._to_str(self.value_until_time_113))
        out.append(self._to_str(self.time_114))
        out.append(self._to_str(self.value_until_time_114))
        out.append(self._to_str(self.time_115))
        out.append(self._to_str(self.value_until_time_115))
        out.append(self._to_str(self.time_116))
        out.append(self._to_str(self.value_until_time_116))
        out.append(self._to_str(self.time_117))
        out.append(self._to_str(self.value_until_time_117))
        out.append(self._to_str(self.time_118))
        out.append(self._to_str(self.value_until_time_118))
        out.append(self._to_str(self.time_119))
        out.append(self._to_str(self.value_until_time_119))
        out.append(self._to_str(self.time_120))
        out.append(self._to_str(self.value_until_time_120))
        out.append(self._to_str(self.time_121))
        out.append(self._to_str(self.value_until_time_121))
        out.append(self._to_str(self.time_122))
        out.append(self._to_str(self.value_until_time_122))
        out.append(self._to_str(self.time_123))
        out.append(self._to_str(self.value_until_time_123))
        out.append(self._to_str(self.time_124))
        out.append(self._to_str(self.value_until_time_124))
        out.append(self._to_str(self.time_125))
        out.append(self._to_str(self.value_until_time_125))
        out.append(self._to_str(self.time_126))
        out.append(self._to_str(self.value_until_time_126))
        out.append(self._to_str(self.time_127))
        out.append(self._to_str(self.value_until_time_127))
        out.append(self._to_str(self.time_128))
        out.append(self._to_str(self.value_until_time_128))
        out.append(self._to_str(self.time_129))
        out.append(self._to_str(self.value_until_time_129))
        out.append(self._to_str(self.time_130))
        out.append(self._to_str(self.value_until_time_130))
        out.append(self._to_str(self.time_131))
        out.append(self._to_str(self.value_until_time_131))
        out.append(self._to_str(self.time_132))
        out.append(self._to_str(self.value_until_time_132))
        out.append(self._to_str(self.time_133))
        out.append(self._to_str(self.value_until_time_133))
        out.append(self._to_str(self.time_134))
        out.append(self._to_str(self.value_until_time_134))
        out.append(self._to_str(self.time_135))
        out.append(self._to_str(self.value_until_time_135))
        out.append(self._to_str(self.time_136))
        out.append(self._to_str(self.value_until_time_136))
        out.append(self._to_str(self.time_137))
        out.append(self._to_str(self.value_until_time_137))
        out.append(self._to_str(self.time_138))
        out.append(self._to_str(self.value_until_time_138))
        out.append(self._to_str(self.time_139))
        out.append(self._to_str(self.value_until_time_139))
        out.append(self._to_str(self.time_140))
        out.append(self._to_str(self.value_until_time_140))
        out.append(self._to_str(self.time_141))
        out.append(self._to_str(self.value_until_time_141))
        out.append(self._to_str(self.time_142))
        out.append(self._to_str(self.value_until_time_142))
        out.append(self._to_str(self.time_143))
        out.append(self._to_str(self.value_until_time_143))
        out.append(self._to_str(self.time_144))
        out.append(self._to_str(self.value_until_time_144))
        return ",".join(out)

class ScheduleDayList(object):
    """ Corresponds to IDD object `Schedule:Day:List`
        Schedule:Day:List will allow the user to list 24 hours worth of values, which can be sub-hourly in nature.
    """
    internal_name = "Schedule:Day:List"
    field_count = 78

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:Day:List`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Schedule Type Limits Name"] = None
        self._data["Interpolate to Timestep"] = None
        self._data["Minutes per Item"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None
        self._data["Value 1"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_type_limits_name = None
        else:
            self.schedule_type_limits_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interpolate_to_timestep = None
        else:
            self.interpolate_to_timestep = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minutes_per_item = None
        else:
            self.minutes_per_item = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def schedule_type_limits_name(self):
        """Get schedule_type_limits_name

        Returns:
            str: the value of `schedule_type_limits_name` or None if not set
        """
        return self._data["Schedule Type Limits Name"]

    @schedule_type_limits_name.setter
    def schedule_type_limits_name(self, value=None):
        """  Corresponds to IDD Field `schedule_type_limits_name`

        Args:
            value (str): value for IDD Field `schedule_type_limits_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_type_limits_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_type_limits_name`')

        self._data["Schedule Type Limits Name"] = value

    @property
    def interpolate_to_timestep(self):
        """Get interpolate_to_timestep

        Returns:
            str: the value of `interpolate_to_timestep` or None if not set
        """
        return self._data["Interpolate to Timestep"]

    @interpolate_to_timestep.setter
    def interpolate_to_timestep(self, value="No"):
        """  Corresponds to IDD Field `interpolate_to_timestep`
        when the interval does not match the user specified timestep a "Yes" choice will average between the intervals request (to
        timestep resolution.  a "No" choice will use the interval value at the simulation timestep without regard to if it matches
        the boundary or not.

        Args:
            value (str): value for IDD Field `interpolate_to_timestep`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `interpolate_to_timestep`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `interpolate_to_timestep`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `interpolate_to_timestep`'.format(value))

        self._data["Interpolate to Timestep"] = value

    @property
    def minutes_per_item(self):
        """Get minutes_per_item

        Returns:
            int: the value of `minutes_per_item` or None if not set
        """
        return self._data["Minutes per Item"]

    @minutes_per_item.setter
    def minutes_per_item(self, value=None):
        """  Corresponds to IDD Field `minutes_per_item`
        Must be evenly divisible into 60

        Args:
            value (int): value for IDD Field `minutes_per_item`
                value >= 1
                value <= 60
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `minutes_per_item`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `minutes_per_item`')
            if value > 60:
                raise ValueError('value need to be smaller 60 '
                                 'for field `minutes_per_item`')

        self._data["Minutes per Item"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=0.0 ):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.schedule_type_limits_name))
        out.append(self._to_str(self.interpolate_to_timestep))
        out.append(self._to_str(self.minutes_per_item))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_1))
        return ",".join(out)

class ScheduleWeekDaily(object):
    """ Corresponds to IDD object `Schedule:Week:Daily`
        A Schedule:Week:Daily contains 12 Schedule:Day:Hourly objects, one for each day type.
    """
    internal_name = "Schedule:Week:Daily"
    field_count = 13

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:Week:Daily`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Sunday Schedule:Day Name"] = None
        self._data["Monday Schedule:Day Name"] = None
        self._data["Tuesday Schedule:Day Name"] = None
        self._data["Wednesday Schedule:Day Name"] = None
        self._data["Thursday Schedule:Day Name"] = None
        self._data["Friday Schedule:Day Name"] = None
        self._data["Saturday Schedule:Day Name"] = None
        self._data["Holiday Schedule:Day Name"] = None
        self._data["SummerDesignDay Schedule:Day Name"] = None
        self._data["WinterDesignDay Schedule:Day Name"] = None
        self._data["CustomDay1 Schedule:Day Name"] = None
        self._data["CustomDay2 Schedule:Day Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sunday_scheduleday_name = None
        else:
            self.sunday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.monday_scheduleday_name = None
        else:
            self.monday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tuesday_scheduleday_name = None
        else:
            self.tuesday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.wednesday_scheduleday_name = None
        else:
            self.wednesday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.thursday_scheduleday_name = None
        else:
            self.thursday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.friday_scheduleday_name = None
        else:
            self.friday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.saturday_scheduleday_name = None
        else:
            self.saturday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.holiday_scheduleday_name = None
        else:
            self.holiday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.summerdesignday_scheduleday_name = None
        else:
            self.summerdesignday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.winterdesignday_scheduleday_name = None
        else:
            self.winterdesignday_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.customday1_scheduleday_name = None
        else:
            self.customday1_scheduleday_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.customday2_scheduleday_name = None
        else:
            self.customday2_scheduleday_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def sunday_scheduleday_name(self):
        """Get sunday_scheduleday_name

        Returns:
            str: the value of `sunday_scheduleday_name` or None if not set
        """
        return self._data["Sunday Schedule:Day Name"]

    @sunday_scheduleday_name.setter
    def sunday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `sunday_scheduleday_name`

        Args:
            value (str): value for IDD Field `sunday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `sunday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sunday_scheduleday_name`')

        self._data["Sunday Schedule:Day Name"] = value

    @property
    def monday_scheduleday_name(self):
        """Get monday_scheduleday_name

        Returns:
            str: the value of `monday_scheduleday_name` or None if not set
        """
        return self._data["Monday Schedule:Day Name"]

    @monday_scheduleday_name.setter
    def monday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `monday_scheduleday_name`

        Args:
            value (str): value for IDD Field `monday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `monday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `monday_scheduleday_name`')

        self._data["Monday Schedule:Day Name"] = value

    @property
    def tuesday_scheduleday_name(self):
        """Get tuesday_scheduleday_name

        Returns:
            str: the value of `tuesday_scheduleday_name` or None if not set
        """
        return self._data["Tuesday Schedule:Day Name"]

    @tuesday_scheduleday_name.setter
    def tuesday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `tuesday_scheduleday_name`

        Args:
            value (str): value for IDD Field `tuesday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tuesday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tuesday_scheduleday_name`')

        self._data["Tuesday Schedule:Day Name"] = value

    @property
    def wednesday_scheduleday_name(self):
        """Get wednesday_scheduleday_name

        Returns:
            str: the value of `wednesday_scheduleday_name` or None if not set
        """
        return self._data["Wednesday Schedule:Day Name"]

    @wednesday_scheduleday_name.setter
    def wednesday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `wednesday_scheduleday_name`

        Args:
            value (str): value for IDD Field `wednesday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `wednesday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `wednesday_scheduleday_name`')

        self._data["Wednesday Schedule:Day Name"] = value

    @property
    def thursday_scheduleday_name(self):
        """Get thursday_scheduleday_name

        Returns:
            str: the value of `thursday_scheduleday_name` or None if not set
        """
        return self._data["Thursday Schedule:Day Name"]

    @thursday_scheduleday_name.setter
    def thursday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `thursday_scheduleday_name`

        Args:
            value (str): value for IDD Field `thursday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `thursday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thursday_scheduleday_name`')

        self._data["Thursday Schedule:Day Name"] = value

    @property
    def friday_scheduleday_name(self):
        """Get friday_scheduleday_name

        Returns:
            str: the value of `friday_scheduleday_name` or None if not set
        """
        return self._data["Friday Schedule:Day Name"]

    @friday_scheduleday_name.setter
    def friday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `friday_scheduleday_name`

        Args:
            value (str): value for IDD Field `friday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `friday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `friday_scheduleday_name`')

        self._data["Friday Schedule:Day Name"] = value

    @property
    def saturday_scheduleday_name(self):
        """Get saturday_scheduleday_name

        Returns:
            str: the value of `saturday_scheduleday_name` or None if not set
        """
        return self._data["Saturday Schedule:Day Name"]

    @saturday_scheduleday_name.setter
    def saturday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `saturday_scheduleday_name`

        Args:
            value (str): value for IDD Field `saturday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `saturday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `saturday_scheduleday_name`')

        self._data["Saturday Schedule:Day Name"] = value

    @property
    def holiday_scheduleday_name(self):
        """Get holiday_scheduleday_name

        Returns:
            str: the value of `holiday_scheduleday_name` or None if not set
        """
        return self._data["Holiday Schedule:Day Name"]

    @holiday_scheduleday_name.setter
    def holiday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `holiday_scheduleday_name`

        Args:
            value (str): value for IDD Field `holiday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `holiday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `holiday_scheduleday_name`')

        self._data["Holiday Schedule:Day Name"] = value

    @property
    def summerdesignday_scheduleday_name(self):
        """Get summerdesignday_scheduleday_name

        Returns:
            str: the value of `summerdesignday_scheduleday_name` or None if not set
        """
        return self._data["SummerDesignDay Schedule:Day Name"]

    @summerdesignday_scheduleday_name.setter
    def summerdesignday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `summerdesignday_scheduleday_name`

        Args:
            value (str): value for IDD Field `summerdesignday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `summerdesignday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `summerdesignday_scheduleday_name`')

        self._data["SummerDesignDay Schedule:Day Name"] = value

    @property
    def winterdesignday_scheduleday_name(self):
        """Get winterdesignday_scheduleday_name

        Returns:
            str: the value of `winterdesignday_scheduleday_name` or None if not set
        """
        return self._data["WinterDesignDay Schedule:Day Name"]

    @winterdesignday_scheduleday_name.setter
    def winterdesignday_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `winterdesignday_scheduleday_name`

        Args:
            value (str): value for IDD Field `winterdesignday_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `winterdesignday_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `winterdesignday_scheduleday_name`')

        self._data["WinterDesignDay Schedule:Day Name"] = value

    @property
    def customday1_scheduleday_name(self):
        """Get customday1_scheduleday_name

        Returns:
            str: the value of `customday1_scheduleday_name` or None if not set
        """
        return self._data["CustomDay1 Schedule:Day Name"]

    @customday1_scheduleday_name.setter
    def customday1_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `customday1_scheduleday_name`

        Args:
            value (str): value for IDD Field `customday1_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `customday1_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `customday1_scheduleday_name`')

        self._data["CustomDay1 Schedule:Day Name"] = value

    @property
    def customday2_scheduleday_name(self):
        """Get customday2_scheduleday_name

        Returns:
            str: the value of `customday2_scheduleday_name` or None if not set
        """
        return self._data["CustomDay2 Schedule:Day Name"]

    @customday2_scheduleday_name.setter
    def customday2_scheduleday_name(self, value=None):
        """  Corresponds to IDD Field `customday2_scheduleday_name`

        Args:
            value (str): value for IDD Field `customday2_scheduleday_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `customday2_scheduleday_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `customday2_scheduleday_name`')

        self._data["CustomDay2 Schedule:Day Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.sunday_scheduleday_name))
        out.append(self._to_str(self.monday_scheduleday_name))
        out.append(self._to_str(self.tuesday_scheduleday_name))
        out.append(self._to_str(self.wednesday_scheduleday_name))
        out.append(self._to_str(self.thursday_scheduleday_name))
        out.append(self._to_str(self.friday_scheduleday_name))
        out.append(self._to_str(self.saturday_scheduleday_name))
        out.append(self._to_str(self.holiday_scheduleday_name))
        out.append(self._to_str(self.summerdesignday_scheduleday_name))
        out.append(self._to_str(self.winterdesignday_scheduleday_name))
        out.append(self._to_str(self.customday1_scheduleday_name))
        out.append(self._to_str(self.customday2_scheduleday_name))
        return ",".join(out)

class ScheduleWeekCompact(object):
    """ Corresponds to IDD object `Schedule:Week:Compact`
        Compact definition for Schedule:Day:List
    """
    internal_name = "Schedule:Week:Compact"
    field_count = 11

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:Week:Compact`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["DayType List 1"] = None
        self._data["Schedule:Day Name 1"] = None
        self._data["DayType List 2"] = None
        self._data["Schedule:Day Name 2"] = None
        self._data["DayType List 3"] = None
        self._data["Schedule:Day Name 3"] = None
        self._data["DayType List 4"] = None
        self._data["Schedule:Day Name 4"] = None
        self._data["DayType List 5"] = None
        self._data["Schedule:Day Name 5"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.daytype_list_1 = None
        else:
            self.daytype_list_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleday_name_1 = None
        else:
            self.scheduleday_name_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.daytype_list_2 = None
        else:
            self.daytype_list_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleday_name_2 = None
        else:
            self.scheduleday_name_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.daytype_list_3 = None
        else:
            self.daytype_list_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleday_name_3 = None
        else:
            self.scheduleday_name_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.daytype_list_4 = None
        else:
            self.daytype_list_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleday_name_4 = None
        else:
            self.scheduleday_name_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.daytype_list_5 = None
        else:
            self.daytype_list_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleday_name_5 = None
        else:
            self.scheduleday_name_5 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def daytype_list_1(self):
        """Get daytype_list_1

        Returns:
            str: the value of `daytype_list_1` or None if not set
        """
        return self._data["DayType List 1"]

    @daytype_list_1.setter
    def daytype_list_1(self, value=None):
        """  Corresponds to IDD Field `daytype_list_1`
        "For" is an optional prefix/start of the For fields.  Choices can be combined on single line
        if separated by spaces. i.e. "Holiday Weekends"
        Should have a space after For, if it is included. i.e. "For Alldays"

        Args:
            value (str): value for IDD Field `daytype_list_1`
                Accepted values are:
                      - AllDays
                      - Weekdays
                      - Weekends
                      - Sunday
                      - Monday
                      - Tuesday
                      - Wednesday
                      - Thursday
                      - Friday
                      - Saturday
                      - Holiday
                      - SummerDesignDay
                      - WinterDesignDay
                      - CustomDay1
                      - CustomDay2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `daytype_list_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `daytype_list_1`')
            vals = set()
            vals.add("AllDays")
            vals.add("Weekdays")
            vals.add("Weekends")
            vals.add("Sunday")
            vals.add("Monday")
            vals.add("Tuesday")
            vals.add("Wednesday")
            vals.add("Thursday")
            vals.add("Friday")
            vals.add("Saturday")
            vals.add("Holiday")
            vals.add("SummerDesignDay")
            vals.add("WinterDesignDay")
            vals.add("CustomDay1")
            vals.add("CustomDay2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `daytype_list_1`'.format(value))

        self._data["DayType List 1"] = value

    @property
    def scheduleday_name_1(self):
        """Get scheduleday_name_1

        Returns:
            str: the value of `scheduleday_name_1` or None if not set
        """
        return self._data["Schedule:Day Name 1"]

    @scheduleday_name_1.setter
    def scheduleday_name_1(self, value=None):
        """  Corresponds to IDD Field `scheduleday_name_1`

        Args:
            value (str): value for IDD Field `scheduleday_name_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleday_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleday_name_1`')

        self._data["Schedule:Day Name 1"] = value

    @property
    def daytype_list_2(self):
        """Get daytype_list_2

        Returns:
            str: the value of `daytype_list_2` or None if not set
        """
        return self._data["DayType List 2"]

    @daytype_list_2.setter
    def daytype_list_2(self, value=None):
        """  Corresponds to IDD Field `daytype_list_2`

        Args:
            value (str): value for IDD Field `daytype_list_2`
                Accepted values are:
                      - AllOtherDays
                      - Weekdays
                      - Weekends
                      - Sunday
                      - Monday
                      - Tuesday
                      - Wednesday
                      - Thursday
                      - Friday
                      - Saturday
                      - Holiday
                      - SummerDesignDay
                      - WinterDesignDay
                      - CustomDay1
                      - CustomDay2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `daytype_list_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `daytype_list_2`')
            vals = set()
            vals.add("AllOtherDays")
            vals.add("Weekdays")
            vals.add("Weekends")
            vals.add("Sunday")
            vals.add("Monday")
            vals.add("Tuesday")
            vals.add("Wednesday")
            vals.add("Thursday")
            vals.add("Friday")
            vals.add("Saturday")
            vals.add("Holiday")
            vals.add("SummerDesignDay")
            vals.add("WinterDesignDay")
            vals.add("CustomDay1")
            vals.add("CustomDay2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `daytype_list_2`'.format(value))

        self._data["DayType List 2"] = value

    @property
    def scheduleday_name_2(self):
        """Get scheduleday_name_2

        Returns:
            str: the value of `scheduleday_name_2` or None if not set
        """
        return self._data["Schedule:Day Name 2"]

    @scheduleday_name_2.setter
    def scheduleday_name_2(self, value=None):
        """  Corresponds to IDD Field `scheduleday_name_2`

        Args:
            value (str): value for IDD Field `scheduleday_name_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleday_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleday_name_2`')

        self._data["Schedule:Day Name 2"] = value

    @property
    def daytype_list_3(self):
        """Get daytype_list_3

        Returns:
            str: the value of `daytype_list_3` or None if not set
        """
        return self._data["DayType List 3"]

    @daytype_list_3.setter
    def daytype_list_3(self, value=None):
        """  Corresponds to IDD Field `daytype_list_3`

        Args:
            value (str): value for IDD Field `daytype_list_3`
                Accepted values are:
                      - AllOtherDays
                      - Weekdays
                      - Weekends
                      - Sunday
                      - Monday
                      - Tuesday
                      - Wednesday
                      - Thursday
                      - Friday
                      - Saturday
                      - Holiday
                      - SummerDesignDay
                      - WinterDesignDay
                      - CustomDay1
                      - CustomDay2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `daytype_list_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `daytype_list_3`')
            vals = set()
            vals.add("AllOtherDays")
            vals.add("Weekdays")
            vals.add("Weekends")
            vals.add("Sunday")
            vals.add("Monday")
            vals.add("Tuesday")
            vals.add("Wednesday")
            vals.add("Thursday")
            vals.add("Friday")
            vals.add("Saturday")
            vals.add("Holiday")
            vals.add("SummerDesignDay")
            vals.add("WinterDesignDay")
            vals.add("CustomDay1")
            vals.add("CustomDay2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `daytype_list_3`'.format(value))

        self._data["DayType List 3"] = value

    @property
    def scheduleday_name_3(self):
        """Get scheduleday_name_3

        Returns:
            str: the value of `scheduleday_name_3` or None if not set
        """
        return self._data["Schedule:Day Name 3"]

    @scheduleday_name_3.setter
    def scheduleday_name_3(self, value=None):
        """  Corresponds to IDD Field `scheduleday_name_3`

        Args:
            value (str): value for IDD Field `scheduleday_name_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleday_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleday_name_3`')

        self._data["Schedule:Day Name 3"] = value

    @property
    def daytype_list_4(self):
        """Get daytype_list_4

        Returns:
            str: the value of `daytype_list_4` or None if not set
        """
        return self._data["DayType List 4"]

    @daytype_list_4.setter
    def daytype_list_4(self, value=None):
        """  Corresponds to IDD Field `daytype_list_4`

        Args:
            value (str): value for IDD Field `daytype_list_4`
                Accepted values are:
                      - AllOtherDays
                      - Weekdays
                      - Weekends
                      - Sunday
                      - Monday
                      - Tuesday
                      - Wednesday
                      - Thursday
                      - Friday
                      - Saturday
                      - Holiday
                      - SummerDesignDay
                      - WinterDesignDay
                      - CustomDay1
                      - CustomDay2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `daytype_list_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `daytype_list_4`')
            vals = set()
            vals.add("AllOtherDays")
            vals.add("Weekdays")
            vals.add("Weekends")
            vals.add("Sunday")
            vals.add("Monday")
            vals.add("Tuesday")
            vals.add("Wednesday")
            vals.add("Thursday")
            vals.add("Friday")
            vals.add("Saturday")
            vals.add("Holiday")
            vals.add("SummerDesignDay")
            vals.add("WinterDesignDay")
            vals.add("CustomDay1")
            vals.add("CustomDay2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `daytype_list_4`'.format(value))

        self._data["DayType List 4"] = value

    @property
    def scheduleday_name_4(self):
        """Get scheduleday_name_4

        Returns:
            str: the value of `scheduleday_name_4` or None if not set
        """
        return self._data["Schedule:Day Name 4"]

    @scheduleday_name_4.setter
    def scheduleday_name_4(self, value=None):
        """  Corresponds to IDD Field `scheduleday_name_4`

        Args:
            value (str): value for IDD Field `scheduleday_name_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleday_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleday_name_4`')

        self._data["Schedule:Day Name 4"] = value

    @property
    def daytype_list_5(self):
        """Get daytype_list_5

        Returns:
            str: the value of `daytype_list_5` or None if not set
        """
        return self._data["DayType List 5"]

    @daytype_list_5.setter
    def daytype_list_5(self, value=None):
        """  Corresponds to IDD Field `daytype_list_5`

        Args:
            value (str): value for IDD Field `daytype_list_5`
                Accepted values are:
                      - AllOtherDays
                      - Weekdays
                      - Weekends
                      - Sunday
                      - Monday
                      - Tuesday
                      - Wednesday
                      - Thursday
                      - Friday
                      - Saturday
                      - Holiday
                      - SummerDesignDay
                      - WinterDesignDay
                      - CustomDay1
                      - CustomDay2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `daytype_list_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `daytype_list_5`')
            vals = set()
            vals.add("AllOtherDays")
            vals.add("Weekdays")
            vals.add("Weekends")
            vals.add("Sunday")
            vals.add("Monday")
            vals.add("Tuesday")
            vals.add("Wednesday")
            vals.add("Thursday")
            vals.add("Friday")
            vals.add("Saturday")
            vals.add("Holiday")
            vals.add("SummerDesignDay")
            vals.add("WinterDesignDay")
            vals.add("CustomDay1")
            vals.add("CustomDay2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `daytype_list_5`'.format(value))

        self._data["DayType List 5"] = value

    @property
    def scheduleday_name_5(self):
        """Get scheduleday_name_5

        Returns:
            str: the value of `scheduleday_name_5` or None if not set
        """
        return self._data["Schedule:Day Name 5"]

    @scheduleday_name_5.setter
    def scheduleday_name_5(self, value=None):
        """  Corresponds to IDD Field `scheduleday_name_5`

        Args:
            value (str): value for IDD Field `scheduleday_name_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleday_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleday_name_5`')

        self._data["Schedule:Day Name 5"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.daytype_list_1))
        out.append(self._to_str(self.scheduleday_name_1))
        out.append(self._to_str(self.daytype_list_2))
        out.append(self._to_str(self.scheduleday_name_2))
        out.append(self._to_str(self.daytype_list_3))
        out.append(self._to_str(self.scheduleday_name_3))
        out.append(self._to_str(self.daytype_list_4))
        out.append(self._to_str(self.scheduleday_name_4))
        out.append(self._to_str(self.daytype_list_5))
        out.append(self._to_str(self.scheduleday_name_5))
        return ",".join(out)

class ScheduleYear(object):
    """ Corresponds to IDD object `Schedule:Year`
        A Schedule:Year contains from 1 to 52 week schedules
    """
    internal_name = "Schedule:Year"
    field_count = 159

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:Year`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Schedule Type Limits Name"] = None
        self._data["Schedule:Week Name 1"] = None
        self._data["Start Month 1"] = None
        self._data["Start Day 1"] = None
        self._data["End Month 1"] = None
        self._data["End Day 1"] = None
        self._data["Schedule:Week Name 2"] = None
        self._data["Start Month 2"] = None
        self._data["Start Day 2"] = None
        self._data["End Month 2"] = None
        self._data["End Day 2"] = None
        self._data["Schedule:Week Name 3"] = None
        self._data["Start Month 3"] = None
        self._data["Start Day 3"] = None
        self._data["End Month 3"] = None
        self._data["End Day 3"] = None
        self._data["Schedule:Week Name 4"] = None
        self._data["Start Month 4"] = None
        self._data["Start Day 4"] = None
        self._data["End Month 4"] = None
        self._data["End Day 4"] = None
        self._data["Schedule:Week Name 5"] = None
        self._data["Start Month 5"] = None
        self._data["Start Day 5"] = None
        self._data["End Month 5"] = None
        self._data["End Day 5"] = None
        self._data["Schedule:Week Name 6"] = None
        self._data["Start Month 6"] = None
        self._data["Start Day 6"] = None
        self._data["End Month 6"] = None
        self._data["End Day 6"] = None
        self._data["Schedule:Week Name 7"] = None
        self._data["Start Month 7"] = None
        self._data["Start Day 7"] = None
        self._data["End Month 7"] = None
        self._data["End Day 7"] = None
        self._data["Schedule:Week Name 8"] = None
        self._data["Start Month 8"] = None
        self._data["Start Day 8"] = None
        self._data["End Month 8"] = None
        self._data["End Day 8"] = None
        self._data["Schedule:Week Name 9"] = None
        self._data["Start Month 9"] = None
        self._data["Start Day 9"] = None
        self._data["End Month 9"] = None
        self._data["End Day 9"] = None
        self._data["Schedule:Week Name 10"] = None
        self._data["Start Month 10"] = None
        self._data["Start Day 10"] = None
        self._data["End Month 10"] = None
        self._data["End Day 10"] = None
        self._data["Schedule:Week Name 11"] = None
        self._data["Start Month 11"] = None
        self._data["Start Day 11"] = None
        self._data["End Month 11"] = None
        self._data["End Day 11"] = None
        self._data["Schedule:Week Name 12"] = None
        self._data["Start Month 12"] = None
        self._data["Start Day 12"] = None
        self._data["End Month 12"] = None
        self._data["End Day 12"] = None
        self._data["Schedule:Week Name 13"] = None
        self._data["Start Month 13"] = None
        self._data["Start Day 13"] = None
        self._data["End Month 13"] = None
        self._data["End Day 13"] = None
        self._data["Schedule:Week Name 14"] = None
        self._data["Start Month 14"] = None
        self._data["Start Day 14"] = None
        self._data["End Month 14"] = None
        self._data["End Day 14"] = None
        self._data["Schedule:Week Name 15"] = None
        self._data["Start Month 15"] = None
        self._data["Start Day 15"] = None
        self._data["End Month 15"] = None
        self._data["End Day 15"] = None
        self._data["Schedule:Week Name 16"] = None
        self._data["Start Month 16"] = None
        self._data["Start Day 16"] = None
        self._data["End Month 16"] = None
        self._data["End Day 16"] = None
        self._data["Schedule:Week Name 17"] = None
        self._data["Start Month 17"] = None
        self._data["Start Day 17"] = None
        self._data["End Month 17"] = None
        self._data["End Day 17"] = None
        self._data["Schedule:Week Name 18"] = None
        self._data["Start Month 18"] = None
        self._data["Start Day 18"] = None
        self._data["End Month 18"] = None
        self._data["End Day 18"] = None
        self._data["Schedule:Week Name 19"] = None
        self._data["Start Month 19"] = None
        self._data["Start Day 19"] = None
        self._data["End Month 19"] = None
        self._data["End Day 19"] = None
        self._data["Schedule:Week Name 20"] = None
        self._data["Start Month 20"] = None
        self._data["Start Day 20"] = None
        self._data["End Month 20"] = None
        self._data["End Day 20"] = None
        self._data["Schedule:Week Name 21"] = None
        self._data["Start Month 21"] = None
        self._data["Start Day 21"] = None
        self._data["End Month 21"] = None
        self._data["End Day 21"] = None
        self._data["Schedule:Week Name 22"] = None
        self._data["Start Month 22"] = None
        self._data["Start Day 22"] = None
        self._data["End Month 22"] = None
        self._data["End Day 22"] = None
        self._data["Schedule:Week Name 23"] = None
        self._data["Start Month 23"] = None
        self._data["Start Day 23"] = None
        self._data["End Month 23"] = None
        self._data["End Day 23"] = None
        self._data["Schedule:Week Name 24"] = None
        self._data["Start Month 24"] = None
        self._data["Start Day 24"] = None
        self._data["End Month 24"] = None
        self._data["End Day 24"] = None
        self._data["Schedule:Week Name 25"] = None
        self._data["Start Month 25"] = None
        self._data["Start Day 25"] = None
        self._data["End Month 25"] = None
        self._data["End Day 25"] = None
        self._data["Schedule:Week Name 26"] = None
        self._data["Start Month 26"] = None
        self._data["Start Day 26"] = None
        self._data["End Month 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None
        self._data["End Day 26"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_type_limits_name = None
        else:
            self.schedule_type_limits_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_1 = None
        else:
            self.scheduleweek_name_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_1 = None
        else:
            self.start_month_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_1 = None
        else:
            self.start_day_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_1 = None
        else:
            self.end_month_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_1 = None
        else:
            self.end_day_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_2 = None
        else:
            self.scheduleweek_name_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_2 = None
        else:
            self.start_month_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_2 = None
        else:
            self.start_day_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_2 = None
        else:
            self.end_month_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_2 = None
        else:
            self.end_day_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_3 = None
        else:
            self.scheduleweek_name_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_3 = None
        else:
            self.start_month_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_3 = None
        else:
            self.start_day_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_3 = None
        else:
            self.end_month_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_3 = None
        else:
            self.end_day_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_4 = None
        else:
            self.scheduleweek_name_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_4 = None
        else:
            self.start_month_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_4 = None
        else:
            self.start_day_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_4 = None
        else:
            self.end_month_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_4 = None
        else:
            self.end_day_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_5 = None
        else:
            self.scheduleweek_name_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_5 = None
        else:
            self.start_month_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_5 = None
        else:
            self.start_day_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_5 = None
        else:
            self.end_month_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_5 = None
        else:
            self.end_day_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_6 = None
        else:
            self.scheduleweek_name_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_6 = None
        else:
            self.start_month_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_6 = None
        else:
            self.start_day_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_6 = None
        else:
            self.end_month_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_6 = None
        else:
            self.end_day_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_7 = None
        else:
            self.scheduleweek_name_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_7 = None
        else:
            self.start_month_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_7 = None
        else:
            self.start_day_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_7 = None
        else:
            self.end_month_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_7 = None
        else:
            self.end_day_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_8 = None
        else:
            self.scheduleweek_name_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_8 = None
        else:
            self.start_month_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_8 = None
        else:
            self.start_day_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_8 = None
        else:
            self.end_month_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_8 = None
        else:
            self.end_day_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_9 = None
        else:
            self.scheduleweek_name_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_9 = None
        else:
            self.start_month_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_9 = None
        else:
            self.start_day_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_9 = None
        else:
            self.end_month_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_9 = None
        else:
            self.end_day_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_10 = None
        else:
            self.scheduleweek_name_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_10 = None
        else:
            self.start_month_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_10 = None
        else:
            self.start_day_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_10 = None
        else:
            self.end_month_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_10 = None
        else:
            self.end_day_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_11 = None
        else:
            self.scheduleweek_name_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_11 = None
        else:
            self.start_month_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_11 = None
        else:
            self.start_day_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_11 = None
        else:
            self.end_month_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_11 = None
        else:
            self.end_day_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_12 = None
        else:
            self.scheduleweek_name_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_12 = None
        else:
            self.start_month_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_12 = None
        else:
            self.start_day_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_12 = None
        else:
            self.end_month_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_12 = None
        else:
            self.end_day_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_13 = None
        else:
            self.scheduleweek_name_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_13 = None
        else:
            self.start_month_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_13 = None
        else:
            self.start_day_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_13 = None
        else:
            self.end_month_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_13 = None
        else:
            self.end_day_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_14 = None
        else:
            self.scheduleweek_name_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_14 = None
        else:
            self.start_month_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_14 = None
        else:
            self.start_day_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_14 = None
        else:
            self.end_month_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_14 = None
        else:
            self.end_day_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_15 = None
        else:
            self.scheduleweek_name_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_15 = None
        else:
            self.start_month_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_15 = None
        else:
            self.start_day_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_15 = None
        else:
            self.end_month_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_15 = None
        else:
            self.end_day_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_16 = None
        else:
            self.scheduleweek_name_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_16 = None
        else:
            self.start_month_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_16 = None
        else:
            self.start_day_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_16 = None
        else:
            self.end_month_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_16 = None
        else:
            self.end_day_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_17 = None
        else:
            self.scheduleweek_name_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_17 = None
        else:
            self.start_month_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_17 = None
        else:
            self.start_day_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_17 = None
        else:
            self.end_month_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_17 = None
        else:
            self.end_day_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_18 = None
        else:
            self.scheduleweek_name_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_18 = None
        else:
            self.start_month_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_18 = None
        else:
            self.start_day_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_18 = None
        else:
            self.end_month_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_18 = None
        else:
            self.end_day_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_19 = None
        else:
            self.scheduleweek_name_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_19 = None
        else:
            self.start_month_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_19 = None
        else:
            self.start_day_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_19 = None
        else:
            self.end_month_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_19 = None
        else:
            self.end_day_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_20 = None
        else:
            self.scheduleweek_name_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_20 = None
        else:
            self.start_month_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_20 = None
        else:
            self.start_day_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_20 = None
        else:
            self.end_month_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_20 = None
        else:
            self.end_day_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_21 = None
        else:
            self.scheduleweek_name_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_21 = None
        else:
            self.start_month_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_21 = None
        else:
            self.start_day_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_21 = None
        else:
            self.end_month_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_21 = None
        else:
            self.end_day_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_22 = None
        else:
            self.scheduleweek_name_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_22 = None
        else:
            self.start_month_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_22 = None
        else:
            self.start_day_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_22 = None
        else:
            self.end_month_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_22 = None
        else:
            self.end_day_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_23 = None
        else:
            self.scheduleweek_name_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_23 = None
        else:
            self.start_month_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_23 = None
        else:
            self.start_day_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_23 = None
        else:
            self.end_month_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_23 = None
        else:
            self.end_day_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_24 = None
        else:
            self.scheduleweek_name_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_24 = None
        else:
            self.start_month_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_24 = None
        else:
            self.start_day_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_24 = None
        else:
            self.end_month_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_24 = None
        else:
            self.end_day_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_25 = None
        else:
            self.scheduleweek_name_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_25 = None
        else:
            self.start_month_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_25 = None
        else:
            self.start_day_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_25 = None
        else:
            self.end_month_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_25 = None
        else:
            self.end_day_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.scheduleweek_name_26 = None
        else:
            self.scheduleweek_name_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_month_26 = None
        else:
            self.start_month_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_day_26 = None
        else:
            self.start_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_month_26 = None
        else:
            self.end_month_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.end_day_26 = None
        else:
            self.end_day_26 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def schedule_type_limits_name(self):
        """Get schedule_type_limits_name

        Returns:
            str: the value of `schedule_type_limits_name` or None if not set
        """
        return self._data["Schedule Type Limits Name"]

    @schedule_type_limits_name.setter
    def schedule_type_limits_name(self, value=None):
        """  Corresponds to IDD Field `schedule_type_limits_name`

        Args:
            value (str): value for IDD Field `schedule_type_limits_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_type_limits_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_type_limits_name`')

        self._data["Schedule Type Limits Name"] = value

    @property
    def scheduleweek_name_1(self):
        """Get scheduleweek_name_1

        Returns:
            str: the value of `scheduleweek_name_1` or None if not set
        """
        return self._data["Schedule:Week Name 1"]

    @scheduleweek_name_1.setter
    def scheduleweek_name_1(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_1`

        Args:
            value (str): value for IDD Field `scheduleweek_name_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_1`')

        self._data["Schedule:Week Name 1"] = value

    @property
    def start_month_1(self):
        """Get start_month_1

        Returns:
            int: the value of `start_month_1` or None if not set
        """
        return self._data["Start Month 1"]

    @start_month_1.setter
    def start_month_1(self, value=None):
        """  Corresponds to IDD Field `start_month_1`

        Args:
            value (int): value for IDD Field `start_month_1`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_1`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_1`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_1`')

        self._data["Start Month 1"] = value

    @property
    def start_day_1(self):
        """Get start_day_1

        Returns:
            int: the value of `start_day_1` or None if not set
        """
        return self._data["Start Day 1"]

    @start_day_1.setter
    def start_day_1(self, value=None):
        """  Corresponds to IDD Field `start_day_1`

        Args:
            value (int): value for IDD Field `start_day_1`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_1`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_1`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_1`')

        self._data["Start Day 1"] = value

    @property
    def end_month_1(self):
        """Get end_month_1

        Returns:
            int: the value of `end_month_1` or None if not set
        """
        return self._data["End Month 1"]

    @end_month_1.setter
    def end_month_1(self, value=None):
        """  Corresponds to IDD Field `end_month_1`

        Args:
            value (int): value for IDD Field `end_month_1`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_1`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_1`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_1`')

        self._data["End Month 1"] = value

    @property
    def end_day_1(self):
        """Get end_day_1

        Returns:
            int: the value of `end_day_1` or None if not set
        """
        return self._data["End Day 1"]

    @end_day_1.setter
    def end_day_1(self, value=None):
        """  Corresponds to IDD Field `end_day_1`

        Args:
            value (int): value for IDD Field `end_day_1`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_1`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_1`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_1`')

        self._data["End Day 1"] = value

    @property
    def scheduleweek_name_2(self):
        """Get scheduleweek_name_2

        Returns:
            str: the value of `scheduleweek_name_2` or None if not set
        """
        return self._data["Schedule:Week Name 2"]

    @scheduleweek_name_2.setter
    def scheduleweek_name_2(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_2`

        Args:
            value (str): value for IDD Field `scheduleweek_name_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_2`')

        self._data["Schedule:Week Name 2"] = value

    @property
    def start_month_2(self):
        """Get start_month_2

        Returns:
            int: the value of `start_month_2` or None if not set
        """
        return self._data["Start Month 2"]

    @start_month_2.setter
    def start_month_2(self, value=None):
        """  Corresponds to IDD Field `start_month_2`

        Args:
            value (int): value for IDD Field `start_month_2`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_2`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_2`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_2`')

        self._data["Start Month 2"] = value

    @property
    def start_day_2(self):
        """Get start_day_2

        Returns:
            int: the value of `start_day_2` or None if not set
        """
        return self._data["Start Day 2"]

    @start_day_2.setter
    def start_day_2(self, value=None):
        """  Corresponds to IDD Field `start_day_2`

        Args:
            value (int): value for IDD Field `start_day_2`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_2`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_2`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_2`')

        self._data["Start Day 2"] = value

    @property
    def end_month_2(self):
        """Get end_month_2

        Returns:
            int: the value of `end_month_2` or None if not set
        """
        return self._data["End Month 2"]

    @end_month_2.setter
    def end_month_2(self, value=None):
        """  Corresponds to IDD Field `end_month_2`

        Args:
            value (int): value for IDD Field `end_month_2`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_2`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_2`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_2`')

        self._data["End Month 2"] = value

    @property
    def end_day_2(self):
        """Get end_day_2

        Returns:
            int: the value of `end_day_2` or None if not set
        """
        return self._data["End Day 2"]

    @end_day_2.setter
    def end_day_2(self, value=None):
        """  Corresponds to IDD Field `end_day_2`

        Args:
            value (int): value for IDD Field `end_day_2`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_2`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_2`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_2`')

        self._data["End Day 2"] = value

    @property
    def scheduleweek_name_3(self):
        """Get scheduleweek_name_3

        Returns:
            str: the value of `scheduleweek_name_3` or None if not set
        """
        return self._data["Schedule:Week Name 3"]

    @scheduleweek_name_3.setter
    def scheduleweek_name_3(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_3`

        Args:
            value (str): value for IDD Field `scheduleweek_name_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_3`')

        self._data["Schedule:Week Name 3"] = value

    @property
    def start_month_3(self):
        """Get start_month_3

        Returns:
            int: the value of `start_month_3` or None if not set
        """
        return self._data["Start Month 3"]

    @start_month_3.setter
    def start_month_3(self, value=None):
        """  Corresponds to IDD Field `start_month_3`

        Args:
            value (int): value for IDD Field `start_month_3`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_3`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_3`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_3`')

        self._data["Start Month 3"] = value

    @property
    def start_day_3(self):
        """Get start_day_3

        Returns:
            int: the value of `start_day_3` or None if not set
        """
        return self._data["Start Day 3"]

    @start_day_3.setter
    def start_day_3(self, value=None):
        """  Corresponds to IDD Field `start_day_3`

        Args:
            value (int): value for IDD Field `start_day_3`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_3`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_3`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_3`')

        self._data["Start Day 3"] = value

    @property
    def end_month_3(self):
        """Get end_month_3

        Returns:
            int: the value of `end_month_3` or None if not set
        """
        return self._data["End Month 3"]

    @end_month_3.setter
    def end_month_3(self, value=None):
        """  Corresponds to IDD Field `end_month_3`

        Args:
            value (int): value for IDD Field `end_month_3`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_3`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_3`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_3`')

        self._data["End Month 3"] = value

    @property
    def end_day_3(self):
        """Get end_day_3

        Returns:
            int: the value of `end_day_3` or None if not set
        """
        return self._data["End Day 3"]

    @end_day_3.setter
    def end_day_3(self, value=None):
        """  Corresponds to IDD Field `end_day_3`

        Args:
            value (int): value for IDD Field `end_day_3`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_3`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_3`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_3`')

        self._data["End Day 3"] = value

    @property
    def scheduleweek_name_4(self):
        """Get scheduleweek_name_4

        Returns:
            str: the value of `scheduleweek_name_4` or None if not set
        """
        return self._data["Schedule:Week Name 4"]

    @scheduleweek_name_4.setter
    def scheduleweek_name_4(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_4`

        Args:
            value (str): value for IDD Field `scheduleweek_name_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_4`')

        self._data["Schedule:Week Name 4"] = value

    @property
    def start_month_4(self):
        """Get start_month_4

        Returns:
            int: the value of `start_month_4` or None if not set
        """
        return self._data["Start Month 4"]

    @start_month_4.setter
    def start_month_4(self, value=None):
        """  Corresponds to IDD Field `start_month_4`

        Args:
            value (int): value for IDD Field `start_month_4`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_4`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_4`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_4`')

        self._data["Start Month 4"] = value

    @property
    def start_day_4(self):
        """Get start_day_4

        Returns:
            int: the value of `start_day_4` or None if not set
        """
        return self._data["Start Day 4"]

    @start_day_4.setter
    def start_day_4(self, value=None):
        """  Corresponds to IDD Field `start_day_4`

        Args:
            value (int): value for IDD Field `start_day_4`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_4`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_4`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_4`')

        self._data["Start Day 4"] = value

    @property
    def end_month_4(self):
        """Get end_month_4

        Returns:
            int: the value of `end_month_4` or None if not set
        """
        return self._data["End Month 4"]

    @end_month_4.setter
    def end_month_4(self, value=None):
        """  Corresponds to IDD Field `end_month_4`

        Args:
            value (int): value for IDD Field `end_month_4`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_4`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_4`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_4`')

        self._data["End Month 4"] = value

    @property
    def end_day_4(self):
        """Get end_day_4

        Returns:
            int: the value of `end_day_4` or None if not set
        """
        return self._data["End Day 4"]

    @end_day_4.setter
    def end_day_4(self, value=None):
        """  Corresponds to IDD Field `end_day_4`

        Args:
            value (int): value for IDD Field `end_day_4`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_4`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_4`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_4`')

        self._data["End Day 4"] = value

    @property
    def scheduleweek_name_5(self):
        """Get scheduleweek_name_5

        Returns:
            str: the value of `scheduleweek_name_5` or None if not set
        """
        return self._data["Schedule:Week Name 5"]

    @scheduleweek_name_5.setter
    def scheduleweek_name_5(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_5`

        Args:
            value (str): value for IDD Field `scheduleweek_name_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_5`')

        self._data["Schedule:Week Name 5"] = value

    @property
    def start_month_5(self):
        """Get start_month_5

        Returns:
            int: the value of `start_month_5` or None if not set
        """
        return self._data["Start Month 5"]

    @start_month_5.setter
    def start_month_5(self, value=None):
        """  Corresponds to IDD Field `start_month_5`

        Args:
            value (int): value for IDD Field `start_month_5`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_5`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_5`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_5`')

        self._data["Start Month 5"] = value

    @property
    def start_day_5(self):
        """Get start_day_5

        Returns:
            int: the value of `start_day_5` or None if not set
        """
        return self._data["Start Day 5"]

    @start_day_5.setter
    def start_day_5(self, value=None):
        """  Corresponds to IDD Field `start_day_5`

        Args:
            value (int): value for IDD Field `start_day_5`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_5`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_5`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_5`')

        self._data["Start Day 5"] = value

    @property
    def end_month_5(self):
        """Get end_month_5

        Returns:
            int: the value of `end_month_5` or None if not set
        """
        return self._data["End Month 5"]

    @end_month_5.setter
    def end_month_5(self, value=None):
        """  Corresponds to IDD Field `end_month_5`

        Args:
            value (int): value for IDD Field `end_month_5`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_5`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_5`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_5`')

        self._data["End Month 5"] = value

    @property
    def end_day_5(self):
        """Get end_day_5

        Returns:
            int: the value of `end_day_5` or None if not set
        """
        return self._data["End Day 5"]

    @end_day_5.setter
    def end_day_5(self, value=None):
        """  Corresponds to IDD Field `end_day_5`

        Args:
            value (int): value for IDD Field `end_day_5`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_5`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_5`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_5`')

        self._data["End Day 5"] = value

    @property
    def scheduleweek_name_6(self):
        """Get scheduleweek_name_6

        Returns:
            str: the value of `scheduleweek_name_6` or None if not set
        """
        return self._data["Schedule:Week Name 6"]

    @scheduleweek_name_6.setter
    def scheduleweek_name_6(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_6`

        Args:
            value (str): value for IDD Field `scheduleweek_name_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_6`')

        self._data["Schedule:Week Name 6"] = value

    @property
    def start_month_6(self):
        """Get start_month_6

        Returns:
            int: the value of `start_month_6` or None if not set
        """
        return self._data["Start Month 6"]

    @start_month_6.setter
    def start_month_6(self, value=None):
        """  Corresponds to IDD Field `start_month_6`

        Args:
            value (int): value for IDD Field `start_month_6`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_6`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_6`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_6`')

        self._data["Start Month 6"] = value

    @property
    def start_day_6(self):
        """Get start_day_6

        Returns:
            int: the value of `start_day_6` or None if not set
        """
        return self._data["Start Day 6"]

    @start_day_6.setter
    def start_day_6(self, value=None):
        """  Corresponds to IDD Field `start_day_6`

        Args:
            value (int): value for IDD Field `start_day_6`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_6`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_6`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_6`')

        self._data["Start Day 6"] = value

    @property
    def end_month_6(self):
        """Get end_month_6

        Returns:
            int: the value of `end_month_6` or None if not set
        """
        return self._data["End Month 6"]

    @end_month_6.setter
    def end_month_6(self, value=None):
        """  Corresponds to IDD Field `end_month_6`

        Args:
            value (int): value for IDD Field `end_month_6`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_6`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_6`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_6`')

        self._data["End Month 6"] = value

    @property
    def end_day_6(self):
        """Get end_day_6

        Returns:
            int: the value of `end_day_6` or None if not set
        """
        return self._data["End Day 6"]

    @end_day_6.setter
    def end_day_6(self, value=None):
        """  Corresponds to IDD Field `end_day_6`

        Args:
            value (int): value for IDD Field `end_day_6`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_6`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_6`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_6`')

        self._data["End Day 6"] = value

    @property
    def scheduleweek_name_7(self):
        """Get scheduleweek_name_7

        Returns:
            str: the value of `scheduleweek_name_7` or None if not set
        """
        return self._data["Schedule:Week Name 7"]

    @scheduleweek_name_7.setter
    def scheduleweek_name_7(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_7`

        Args:
            value (str): value for IDD Field `scheduleweek_name_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_7`')

        self._data["Schedule:Week Name 7"] = value

    @property
    def start_month_7(self):
        """Get start_month_7

        Returns:
            int: the value of `start_month_7` or None if not set
        """
        return self._data["Start Month 7"]

    @start_month_7.setter
    def start_month_7(self, value=None):
        """  Corresponds to IDD Field `start_month_7`

        Args:
            value (int): value for IDD Field `start_month_7`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_7`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_7`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_7`')

        self._data["Start Month 7"] = value

    @property
    def start_day_7(self):
        """Get start_day_7

        Returns:
            int: the value of `start_day_7` or None if not set
        """
        return self._data["Start Day 7"]

    @start_day_7.setter
    def start_day_7(self, value=None):
        """  Corresponds to IDD Field `start_day_7`

        Args:
            value (int): value for IDD Field `start_day_7`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_7`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_7`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_7`')

        self._data["Start Day 7"] = value

    @property
    def end_month_7(self):
        """Get end_month_7

        Returns:
            int: the value of `end_month_7` or None if not set
        """
        return self._data["End Month 7"]

    @end_month_7.setter
    def end_month_7(self, value=None):
        """  Corresponds to IDD Field `end_month_7`

        Args:
            value (int): value for IDD Field `end_month_7`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_7`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_7`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_7`')

        self._data["End Month 7"] = value

    @property
    def end_day_7(self):
        """Get end_day_7

        Returns:
            int: the value of `end_day_7` or None if not set
        """
        return self._data["End Day 7"]

    @end_day_7.setter
    def end_day_7(self, value=None):
        """  Corresponds to IDD Field `end_day_7`

        Args:
            value (int): value for IDD Field `end_day_7`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_7`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_7`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_7`')

        self._data["End Day 7"] = value

    @property
    def scheduleweek_name_8(self):
        """Get scheduleweek_name_8

        Returns:
            str: the value of `scheduleweek_name_8` or None if not set
        """
        return self._data["Schedule:Week Name 8"]

    @scheduleweek_name_8.setter
    def scheduleweek_name_8(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_8`

        Args:
            value (str): value for IDD Field `scheduleweek_name_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_8`')

        self._data["Schedule:Week Name 8"] = value

    @property
    def start_month_8(self):
        """Get start_month_8

        Returns:
            int: the value of `start_month_8` or None if not set
        """
        return self._data["Start Month 8"]

    @start_month_8.setter
    def start_month_8(self, value=None):
        """  Corresponds to IDD Field `start_month_8`

        Args:
            value (int): value for IDD Field `start_month_8`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_8`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_8`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_8`')

        self._data["Start Month 8"] = value

    @property
    def start_day_8(self):
        """Get start_day_8

        Returns:
            int: the value of `start_day_8` or None if not set
        """
        return self._data["Start Day 8"]

    @start_day_8.setter
    def start_day_8(self, value=None):
        """  Corresponds to IDD Field `start_day_8`

        Args:
            value (int): value for IDD Field `start_day_8`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_8`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_8`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_8`')

        self._data["Start Day 8"] = value

    @property
    def end_month_8(self):
        """Get end_month_8

        Returns:
            int: the value of `end_month_8` or None if not set
        """
        return self._data["End Month 8"]

    @end_month_8.setter
    def end_month_8(self, value=None):
        """  Corresponds to IDD Field `end_month_8`

        Args:
            value (int): value for IDD Field `end_month_8`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_8`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_8`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_8`')

        self._data["End Month 8"] = value

    @property
    def end_day_8(self):
        """Get end_day_8

        Returns:
            int: the value of `end_day_8` or None if not set
        """
        return self._data["End Day 8"]

    @end_day_8.setter
    def end_day_8(self, value=None):
        """  Corresponds to IDD Field `end_day_8`

        Args:
            value (int): value for IDD Field `end_day_8`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_8`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_8`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_8`')

        self._data["End Day 8"] = value

    @property
    def scheduleweek_name_9(self):
        """Get scheduleweek_name_9

        Returns:
            str: the value of `scheduleweek_name_9` or None if not set
        """
        return self._data["Schedule:Week Name 9"]

    @scheduleweek_name_9.setter
    def scheduleweek_name_9(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_9`

        Args:
            value (str): value for IDD Field `scheduleweek_name_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_9`')

        self._data["Schedule:Week Name 9"] = value

    @property
    def start_month_9(self):
        """Get start_month_9

        Returns:
            int: the value of `start_month_9` or None if not set
        """
        return self._data["Start Month 9"]

    @start_month_9.setter
    def start_month_9(self, value=None):
        """  Corresponds to IDD Field `start_month_9`

        Args:
            value (int): value for IDD Field `start_month_9`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_9`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_9`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_9`')

        self._data["Start Month 9"] = value

    @property
    def start_day_9(self):
        """Get start_day_9

        Returns:
            int: the value of `start_day_9` or None if not set
        """
        return self._data["Start Day 9"]

    @start_day_9.setter
    def start_day_9(self, value=None):
        """  Corresponds to IDD Field `start_day_9`

        Args:
            value (int): value for IDD Field `start_day_9`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_9`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_9`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_9`')

        self._data["Start Day 9"] = value

    @property
    def end_month_9(self):
        """Get end_month_9

        Returns:
            int: the value of `end_month_9` or None if not set
        """
        return self._data["End Month 9"]

    @end_month_9.setter
    def end_month_9(self, value=None):
        """  Corresponds to IDD Field `end_month_9`

        Args:
            value (int): value for IDD Field `end_month_9`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_9`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_9`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_9`')

        self._data["End Month 9"] = value

    @property
    def end_day_9(self):
        """Get end_day_9

        Returns:
            int: the value of `end_day_9` or None if not set
        """
        return self._data["End Day 9"]

    @end_day_9.setter
    def end_day_9(self, value=None):
        """  Corresponds to IDD Field `end_day_9`

        Args:
            value (int): value for IDD Field `end_day_9`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_9`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_9`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_9`')

        self._data["End Day 9"] = value

    @property
    def scheduleweek_name_10(self):
        """Get scheduleweek_name_10

        Returns:
            str: the value of `scheduleweek_name_10` or None if not set
        """
        return self._data["Schedule:Week Name 10"]

    @scheduleweek_name_10.setter
    def scheduleweek_name_10(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_10`

        Args:
            value (str): value for IDD Field `scheduleweek_name_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_10`')

        self._data["Schedule:Week Name 10"] = value

    @property
    def start_month_10(self):
        """Get start_month_10

        Returns:
            int: the value of `start_month_10` or None if not set
        """
        return self._data["Start Month 10"]

    @start_month_10.setter
    def start_month_10(self, value=None):
        """  Corresponds to IDD Field `start_month_10`

        Args:
            value (int): value for IDD Field `start_month_10`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_10`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_10`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_10`')

        self._data["Start Month 10"] = value

    @property
    def start_day_10(self):
        """Get start_day_10

        Returns:
            int: the value of `start_day_10` or None if not set
        """
        return self._data["Start Day 10"]

    @start_day_10.setter
    def start_day_10(self, value=None):
        """  Corresponds to IDD Field `start_day_10`

        Args:
            value (int): value for IDD Field `start_day_10`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_10`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_10`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_10`')

        self._data["Start Day 10"] = value

    @property
    def end_month_10(self):
        """Get end_month_10

        Returns:
            int: the value of `end_month_10` or None if not set
        """
        return self._data["End Month 10"]

    @end_month_10.setter
    def end_month_10(self, value=None):
        """  Corresponds to IDD Field `end_month_10`

        Args:
            value (int): value for IDD Field `end_month_10`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_10`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_10`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_10`')

        self._data["End Month 10"] = value

    @property
    def end_day_10(self):
        """Get end_day_10

        Returns:
            int: the value of `end_day_10` or None if not set
        """
        return self._data["End Day 10"]

    @end_day_10.setter
    def end_day_10(self, value=None):
        """  Corresponds to IDD Field `end_day_10`

        Args:
            value (int): value for IDD Field `end_day_10`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_10`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_10`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_10`')

        self._data["End Day 10"] = value

    @property
    def scheduleweek_name_11(self):
        """Get scheduleweek_name_11

        Returns:
            str: the value of `scheduleweek_name_11` or None if not set
        """
        return self._data["Schedule:Week Name 11"]

    @scheduleweek_name_11.setter
    def scheduleweek_name_11(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_11`

        Args:
            value (str): value for IDD Field `scheduleweek_name_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_11`')

        self._data["Schedule:Week Name 11"] = value

    @property
    def start_month_11(self):
        """Get start_month_11

        Returns:
            int: the value of `start_month_11` or None if not set
        """
        return self._data["Start Month 11"]

    @start_month_11.setter
    def start_month_11(self, value=None):
        """  Corresponds to IDD Field `start_month_11`

        Args:
            value (int): value for IDD Field `start_month_11`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_11`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_11`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_11`')

        self._data["Start Month 11"] = value

    @property
    def start_day_11(self):
        """Get start_day_11

        Returns:
            int: the value of `start_day_11` or None if not set
        """
        return self._data["Start Day 11"]

    @start_day_11.setter
    def start_day_11(self, value=None):
        """  Corresponds to IDD Field `start_day_11`

        Args:
            value (int): value for IDD Field `start_day_11`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_11`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_11`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_11`')

        self._data["Start Day 11"] = value

    @property
    def end_month_11(self):
        """Get end_month_11

        Returns:
            int: the value of `end_month_11` or None if not set
        """
        return self._data["End Month 11"]

    @end_month_11.setter
    def end_month_11(self, value=None):
        """  Corresponds to IDD Field `end_month_11`

        Args:
            value (int): value for IDD Field `end_month_11`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_11`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_11`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_11`')

        self._data["End Month 11"] = value

    @property
    def end_day_11(self):
        """Get end_day_11

        Returns:
            int: the value of `end_day_11` or None if not set
        """
        return self._data["End Day 11"]

    @end_day_11.setter
    def end_day_11(self, value=None):
        """  Corresponds to IDD Field `end_day_11`

        Args:
            value (int): value for IDD Field `end_day_11`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_11`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_11`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_11`')

        self._data["End Day 11"] = value

    @property
    def scheduleweek_name_12(self):
        """Get scheduleweek_name_12

        Returns:
            str: the value of `scheduleweek_name_12` or None if not set
        """
        return self._data["Schedule:Week Name 12"]

    @scheduleweek_name_12.setter
    def scheduleweek_name_12(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_12`

        Args:
            value (str): value for IDD Field `scheduleweek_name_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_12`')

        self._data["Schedule:Week Name 12"] = value

    @property
    def start_month_12(self):
        """Get start_month_12

        Returns:
            int: the value of `start_month_12` or None if not set
        """
        return self._data["Start Month 12"]

    @start_month_12.setter
    def start_month_12(self, value=None):
        """  Corresponds to IDD Field `start_month_12`

        Args:
            value (int): value for IDD Field `start_month_12`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_12`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_12`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_12`')

        self._data["Start Month 12"] = value

    @property
    def start_day_12(self):
        """Get start_day_12

        Returns:
            int: the value of `start_day_12` or None if not set
        """
        return self._data["Start Day 12"]

    @start_day_12.setter
    def start_day_12(self, value=None):
        """  Corresponds to IDD Field `start_day_12`

        Args:
            value (int): value for IDD Field `start_day_12`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_12`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_12`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_12`')

        self._data["Start Day 12"] = value

    @property
    def end_month_12(self):
        """Get end_month_12

        Returns:
            int: the value of `end_month_12` or None if not set
        """
        return self._data["End Month 12"]

    @end_month_12.setter
    def end_month_12(self, value=None):
        """  Corresponds to IDD Field `end_month_12`

        Args:
            value (int): value for IDD Field `end_month_12`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_12`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_12`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_12`')

        self._data["End Month 12"] = value

    @property
    def end_day_12(self):
        """Get end_day_12

        Returns:
            int: the value of `end_day_12` or None if not set
        """
        return self._data["End Day 12"]

    @end_day_12.setter
    def end_day_12(self, value=None):
        """  Corresponds to IDD Field `end_day_12`

        Args:
            value (int): value for IDD Field `end_day_12`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_12`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_12`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_12`')

        self._data["End Day 12"] = value

    @property
    def scheduleweek_name_13(self):
        """Get scheduleweek_name_13

        Returns:
            str: the value of `scheduleweek_name_13` or None if not set
        """
        return self._data["Schedule:Week Name 13"]

    @scheduleweek_name_13.setter
    def scheduleweek_name_13(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_13`

        Args:
            value (str): value for IDD Field `scheduleweek_name_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_13`')

        self._data["Schedule:Week Name 13"] = value

    @property
    def start_month_13(self):
        """Get start_month_13

        Returns:
            int: the value of `start_month_13` or None if not set
        """
        return self._data["Start Month 13"]

    @start_month_13.setter
    def start_month_13(self, value=None):
        """  Corresponds to IDD Field `start_month_13`

        Args:
            value (int): value for IDD Field `start_month_13`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_13`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_13`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_13`')

        self._data["Start Month 13"] = value

    @property
    def start_day_13(self):
        """Get start_day_13

        Returns:
            int: the value of `start_day_13` or None if not set
        """
        return self._data["Start Day 13"]

    @start_day_13.setter
    def start_day_13(self, value=None):
        """  Corresponds to IDD Field `start_day_13`

        Args:
            value (int): value for IDD Field `start_day_13`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_13`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_13`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_13`')

        self._data["Start Day 13"] = value

    @property
    def end_month_13(self):
        """Get end_month_13

        Returns:
            int: the value of `end_month_13` or None if not set
        """
        return self._data["End Month 13"]

    @end_month_13.setter
    def end_month_13(self, value=None):
        """  Corresponds to IDD Field `end_month_13`

        Args:
            value (int): value for IDD Field `end_month_13`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_13`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_13`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_13`')

        self._data["End Month 13"] = value

    @property
    def end_day_13(self):
        """Get end_day_13

        Returns:
            int: the value of `end_day_13` or None if not set
        """
        return self._data["End Day 13"]

    @end_day_13.setter
    def end_day_13(self, value=None):
        """  Corresponds to IDD Field `end_day_13`

        Args:
            value (int): value for IDD Field `end_day_13`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_13`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_13`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_13`')

        self._data["End Day 13"] = value

    @property
    def scheduleweek_name_14(self):
        """Get scheduleweek_name_14

        Returns:
            str: the value of `scheduleweek_name_14` or None if not set
        """
        return self._data["Schedule:Week Name 14"]

    @scheduleweek_name_14.setter
    def scheduleweek_name_14(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_14`

        Args:
            value (str): value for IDD Field `scheduleweek_name_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_14`')

        self._data["Schedule:Week Name 14"] = value

    @property
    def start_month_14(self):
        """Get start_month_14

        Returns:
            int: the value of `start_month_14` or None if not set
        """
        return self._data["Start Month 14"]

    @start_month_14.setter
    def start_month_14(self, value=None):
        """  Corresponds to IDD Field `start_month_14`

        Args:
            value (int): value for IDD Field `start_month_14`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_14`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_14`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_14`')

        self._data["Start Month 14"] = value

    @property
    def start_day_14(self):
        """Get start_day_14

        Returns:
            int: the value of `start_day_14` or None if not set
        """
        return self._data["Start Day 14"]

    @start_day_14.setter
    def start_day_14(self, value=None):
        """  Corresponds to IDD Field `start_day_14`

        Args:
            value (int): value for IDD Field `start_day_14`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_14`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_14`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_14`')

        self._data["Start Day 14"] = value

    @property
    def end_month_14(self):
        """Get end_month_14

        Returns:
            int: the value of `end_month_14` or None if not set
        """
        return self._data["End Month 14"]

    @end_month_14.setter
    def end_month_14(self, value=None):
        """  Corresponds to IDD Field `end_month_14`

        Args:
            value (int): value for IDD Field `end_month_14`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_14`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_14`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_14`')

        self._data["End Month 14"] = value

    @property
    def end_day_14(self):
        """Get end_day_14

        Returns:
            int: the value of `end_day_14` or None if not set
        """
        return self._data["End Day 14"]

    @end_day_14.setter
    def end_day_14(self, value=None):
        """  Corresponds to IDD Field `end_day_14`

        Args:
            value (int): value for IDD Field `end_day_14`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_14`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_14`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_14`')

        self._data["End Day 14"] = value

    @property
    def scheduleweek_name_15(self):
        """Get scheduleweek_name_15

        Returns:
            str: the value of `scheduleweek_name_15` or None if not set
        """
        return self._data["Schedule:Week Name 15"]

    @scheduleweek_name_15.setter
    def scheduleweek_name_15(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_15`

        Args:
            value (str): value for IDD Field `scheduleweek_name_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_15`')

        self._data["Schedule:Week Name 15"] = value

    @property
    def start_month_15(self):
        """Get start_month_15

        Returns:
            int: the value of `start_month_15` or None if not set
        """
        return self._data["Start Month 15"]

    @start_month_15.setter
    def start_month_15(self, value=None):
        """  Corresponds to IDD Field `start_month_15`

        Args:
            value (int): value for IDD Field `start_month_15`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_15`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_15`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_15`')

        self._data["Start Month 15"] = value

    @property
    def start_day_15(self):
        """Get start_day_15

        Returns:
            int: the value of `start_day_15` or None if not set
        """
        return self._data["Start Day 15"]

    @start_day_15.setter
    def start_day_15(self, value=None):
        """  Corresponds to IDD Field `start_day_15`

        Args:
            value (int): value for IDD Field `start_day_15`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_15`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_15`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_15`')

        self._data["Start Day 15"] = value

    @property
    def end_month_15(self):
        """Get end_month_15

        Returns:
            int: the value of `end_month_15` or None if not set
        """
        return self._data["End Month 15"]

    @end_month_15.setter
    def end_month_15(self, value=None):
        """  Corresponds to IDD Field `end_month_15`

        Args:
            value (int): value for IDD Field `end_month_15`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_15`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_15`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_15`')

        self._data["End Month 15"] = value

    @property
    def end_day_15(self):
        """Get end_day_15

        Returns:
            int: the value of `end_day_15` or None if not set
        """
        return self._data["End Day 15"]

    @end_day_15.setter
    def end_day_15(self, value=None):
        """  Corresponds to IDD Field `end_day_15`

        Args:
            value (int): value for IDD Field `end_day_15`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_15`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_15`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_15`')

        self._data["End Day 15"] = value

    @property
    def scheduleweek_name_16(self):
        """Get scheduleweek_name_16

        Returns:
            str: the value of `scheduleweek_name_16` or None if not set
        """
        return self._data["Schedule:Week Name 16"]

    @scheduleweek_name_16.setter
    def scheduleweek_name_16(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_16`

        Args:
            value (str): value for IDD Field `scheduleweek_name_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_16`')

        self._data["Schedule:Week Name 16"] = value

    @property
    def start_month_16(self):
        """Get start_month_16

        Returns:
            int: the value of `start_month_16` or None if not set
        """
        return self._data["Start Month 16"]

    @start_month_16.setter
    def start_month_16(self, value=None):
        """  Corresponds to IDD Field `start_month_16`

        Args:
            value (int): value for IDD Field `start_month_16`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_16`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_16`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_16`')

        self._data["Start Month 16"] = value

    @property
    def start_day_16(self):
        """Get start_day_16

        Returns:
            int: the value of `start_day_16` or None if not set
        """
        return self._data["Start Day 16"]

    @start_day_16.setter
    def start_day_16(self, value=None):
        """  Corresponds to IDD Field `start_day_16`

        Args:
            value (int): value for IDD Field `start_day_16`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_16`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_16`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_16`')

        self._data["Start Day 16"] = value

    @property
    def end_month_16(self):
        """Get end_month_16

        Returns:
            int: the value of `end_month_16` or None if not set
        """
        return self._data["End Month 16"]

    @end_month_16.setter
    def end_month_16(self, value=None):
        """  Corresponds to IDD Field `end_month_16`

        Args:
            value (int): value for IDD Field `end_month_16`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_16`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_16`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_16`')

        self._data["End Month 16"] = value

    @property
    def end_day_16(self):
        """Get end_day_16

        Returns:
            int: the value of `end_day_16` or None if not set
        """
        return self._data["End Day 16"]

    @end_day_16.setter
    def end_day_16(self, value=None):
        """  Corresponds to IDD Field `end_day_16`

        Args:
            value (int): value for IDD Field `end_day_16`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_16`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_16`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_16`')

        self._data["End Day 16"] = value

    @property
    def scheduleweek_name_17(self):
        """Get scheduleweek_name_17

        Returns:
            str: the value of `scheduleweek_name_17` or None if not set
        """
        return self._data["Schedule:Week Name 17"]

    @scheduleweek_name_17.setter
    def scheduleweek_name_17(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_17`

        Args:
            value (str): value for IDD Field `scheduleweek_name_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_17`')

        self._data["Schedule:Week Name 17"] = value

    @property
    def start_month_17(self):
        """Get start_month_17

        Returns:
            int: the value of `start_month_17` or None if not set
        """
        return self._data["Start Month 17"]

    @start_month_17.setter
    def start_month_17(self, value=None):
        """  Corresponds to IDD Field `start_month_17`

        Args:
            value (int): value for IDD Field `start_month_17`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_17`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_17`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_17`')

        self._data["Start Month 17"] = value

    @property
    def start_day_17(self):
        """Get start_day_17

        Returns:
            int: the value of `start_day_17` or None if not set
        """
        return self._data["Start Day 17"]

    @start_day_17.setter
    def start_day_17(self, value=None):
        """  Corresponds to IDD Field `start_day_17`

        Args:
            value (int): value for IDD Field `start_day_17`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_17`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_17`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_17`')

        self._data["Start Day 17"] = value

    @property
    def end_month_17(self):
        """Get end_month_17

        Returns:
            int: the value of `end_month_17` or None if not set
        """
        return self._data["End Month 17"]

    @end_month_17.setter
    def end_month_17(self, value=None):
        """  Corresponds to IDD Field `end_month_17`

        Args:
            value (int): value for IDD Field `end_month_17`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_17`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_17`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_17`')

        self._data["End Month 17"] = value

    @property
    def end_day_17(self):
        """Get end_day_17

        Returns:
            int: the value of `end_day_17` or None if not set
        """
        return self._data["End Day 17"]

    @end_day_17.setter
    def end_day_17(self, value=None):
        """  Corresponds to IDD Field `end_day_17`

        Args:
            value (int): value for IDD Field `end_day_17`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_17`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_17`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_17`')

        self._data["End Day 17"] = value

    @property
    def scheduleweek_name_18(self):
        """Get scheduleweek_name_18

        Returns:
            str: the value of `scheduleweek_name_18` or None if not set
        """
        return self._data["Schedule:Week Name 18"]

    @scheduleweek_name_18.setter
    def scheduleweek_name_18(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_18`

        Args:
            value (str): value for IDD Field `scheduleweek_name_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_18`')

        self._data["Schedule:Week Name 18"] = value

    @property
    def start_month_18(self):
        """Get start_month_18

        Returns:
            int: the value of `start_month_18` or None if not set
        """
        return self._data["Start Month 18"]

    @start_month_18.setter
    def start_month_18(self, value=None):
        """  Corresponds to IDD Field `start_month_18`

        Args:
            value (int): value for IDD Field `start_month_18`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_18`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_18`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_18`')

        self._data["Start Month 18"] = value

    @property
    def start_day_18(self):
        """Get start_day_18

        Returns:
            int: the value of `start_day_18` or None if not set
        """
        return self._data["Start Day 18"]

    @start_day_18.setter
    def start_day_18(self, value=None):
        """  Corresponds to IDD Field `start_day_18`

        Args:
            value (int): value for IDD Field `start_day_18`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_18`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_18`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_18`')

        self._data["Start Day 18"] = value

    @property
    def end_month_18(self):
        """Get end_month_18

        Returns:
            int: the value of `end_month_18` or None if not set
        """
        return self._data["End Month 18"]

    @end_month_18.setter
    def end_month_18(self, value=None):
        """  Corresponds to IDD Field `end_month_18`

        Args:
            value (int): value for IDD Field `end_month_18`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_18`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_18`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_18`')

        self._data["End Month 18"] = value

    @property
    def end_day_18(self):
        """Get end_day_18

        Returns:
            int: the value of `end_day_18` or None if not set
        """
        return self._data["End Day 18"]

    @end_day_18.setter
    def end_day_18(self, value=None):
        """  Corresponds to IDD Field `end_day_18`

        Args:
            value (int): value for IDD Field `end_day_18`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_18`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_18`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_18`')

        self._data["End Day 18"] = value

    @property
    def scheduleweek_name_19(self):
        """Get scheduleweek_name_19

        Returns:
            str: the value of `scheduleweek_name_19` or None if not set
        """
        return self._data["Schedule:Week Name 19"]

    @scheduleweek_name_19.setter
    def scheduleweek_name_19(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_19`

        Args:
            value (str): value for IDD Field `scheduleweek_name_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_19`')

        self._data["Schedule:Week Name 19"] = value

    @property
    def start_month_19(self):
        """Get start_month_19

        Returns:
            int: the value of `start_month_19` or None if not set
        """
        return self._data["Start Month 19"]

    @start_month_19.setter
    def start_month_19(self, value=None):
        """  Corresponds to IDD Field `start_month_19`

        Args:
            value (int): value for IDD Field `start_month_19`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_19`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_19`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_19`')

        self._data["Start Month 19"] = value

    @property
    def start_day_19(self):
        """Get start_day_19

        Returns:
            int: the value of `start_day_19` or None if not set
        """
        return self._data["Start Day 19"]

    @start_day_19.setter
    def start_day_19(self, value=None):
        """  Corresponds to IDD Field `start_day_19`

        Args:
            value (int): value for IDD Field `start_day_19`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_19`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_19`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_19`')

        self._data["Start Day 19"] = value

    @property
    def end_month_19(self):
        """Get end_month_19

        Returns:
            int: the value of `end_month_19` or None if not set
        """
        return self._data["End Month 19"]

    @end_month_19.setter
    def end_month_19(self, value=None):
        """  Corresponds to IDD Field `end_month_19`

        Args:
            value (int): value for IDD Field `end_month_19`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_19`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_19`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_19`')

        self._data["End Month 19"] = value

    @property
    def end_day_19(self):
        """Get end_day_19

        Returns:
            int: the value of `end_day_19` or None if not set
        """
        return self._data["End Day 19"]

    @end_day_19.setter
    def end_day_19(self, value=None):
        """  Corresponds to IDD Field `end_day_19`

        Args:
            value (int): value for IDD Field `end_day_19`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_19`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_19`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_19`')

        self._data["End Day 19"] = value

    @property
    def scheduleweek_name_20(self):
        """Get scheduleweek_name_20

        Returns:
            str: the value of `scheduleweek_name_20` or None if not set
        """
        return self._data["Schedule:Week Name 20"]

    @scheduleweek_name_20.setter
    def scheduleweek_name_20(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_20`

        Args:
            value (str): value for IDD Field `scheduleweek_name_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_20`')

        self._data["Schedule:Week Name 20"] = value

    @property
    def start_month_20(self):
        """Get start_month_20

        Returns:
            int: the value of `start_month_20` or None if not set
        """
        return self._data["Start Month 20"]

    @start_month_20.setter
    def start_month_20(self, value=None):
        """  Corresponds to IDD Field `start_month_20`

        Args:
            value (int): value for IDD Field `start_month_20`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_20`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_20`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_20`')

        self._data["Start Month 20"] = value

    @property
    def start_day_20(self):
        """Get start_day_20

        Returns:
            int: the value of `start_day_20` or None if not set
        """
        return self._data["Start Day 20"]

    @start_day_20.setter
    def start_day_20(self, value=None):
        """  Corresponds to IDD Field `start_day_20`

        Args:
            value (int): value for IDD Field `start_day_20`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_20`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_20`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_20`')

        self._data["Start Day 20"] = value

    @property
    def end_month_20(self):
        """Get end_month_20

        Returns:
            int: the value of `end_month_20` or None if not set
        """
        return self._data["End Month 20"]

    @end_month_20.setter
    def end_month_20(self, value=None):
        """  Corresponds to IDD Field `end_month_20`

        Args:
            value (int): value for IDD Field `end_month_20`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_20`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_20`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_20`')

        self._data["End Month 20"] = value

    @property
    def end_day_20(self):
        """Get end_day_20

        Returns:
            int: the value of `end_day_20` or None if not set
        """
        return self._data["End Day 20"]

    @end_day_20.setter
    def end_day_20(self, value=None):
        """  Corresponds to IDD Field `end_day_20`

        Args:
            value (int): value for IDD Field `end_day_20`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_20`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_20`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_20`')

        self._data["End Day 20"] = value

    @property
    def scheduleweek_name_21(self):
        """Get scheduleweek_name_21

        Returns:
            str: the value of `scheduleweek_name_21` or None if not set
        """
        return self._data["Schedule:Week Name 21"]

    @scheduleweek_name_21.setter
    def scheduleweek_name_21(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_21`

        Args:
            value (str): value for IDD Field `scheduleweek_name_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_21`')

        self._data["Schedule:Week Name 21"] = value

    @property
    def start_month_21(self):
        """Get start_month_21

        Returns:
            int: the value of `start_month_21` or None if not set
        """
        return self._data["Start Month 21"]

    @start_month_21.setter
    def start_month_21(self, value=None):
        """  Corresponds to IDD Field `start_month_21`

        Args:
            value (int): value for IDD Field `start_month_21`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_21`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_21`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_21`')

        self._data["Start Month 21"] = value

    @property
    def start_day_21(self):
        """Get start_day_21

        Returns:
            int: the value of `start_day_21` or None if not set
        """
        return self._data["Start Day 21"]

    @start_day_21.setter
    def start_day_21(self, value=None):
        """  Corresponds to IDD Field `start_day_21`

        Args:
            value (int): value for IDD Field `start_day_21`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_21`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_21`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_21`')

        self._data["Start Day 21"] = value

    @property
    def end_month_21(self):
        """Get end_month_21

        Returns:
            int: the value of `end_month_21` or None if not set
        """
        return self._data["End Month 21"]

    @end_month_21.setter
    def end_month_21(self, value=None):
        """  Corresponds to IDD Field `end_month_21`

        Args:
            value (int): value for IDD Field `end_month_21`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_21`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_21`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_21`')

        self._data["End Month 21"] = value

    @property
    def end_day_21(self):
        """Get end_day_21

        Returns:
            int: the value of `end_day_21` or None if not set
        """
        return self._data["End Day 21"]

    @end_day_21.setter
    def end_day_21(self, value=None):
        """  Corresponds to IDD Field `end_day_21`

        Args:
            value (int): value for IDD Field `end_day_21`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_21`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_21`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_21`')

        self._data["End Day 21"] = value

    @property
    def scheduleweek_name_22(self):
        """Get scheduleweek_name_22

        Returns:
            str: the value of `scheduleweek_name_22` or None if not set
        """
        return self._data["Schedule:Week Name 22"]

    @scheduleweek_name_22.setter
    def scheduleweek_name_22(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_22`

        Args:
            value (str): value for IDD Field `scheduleweek_name_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_22`')

        self._data["Schedule:Week Name 22"] = value

    @property
    def start_month_22(self):
        """Get start_month_22

        Returns:
            int: the value of `start_month_22` or None if not set
        """
        return self._data["Start Month 22"]

    @start_month_22.setter
    def start_month_22(self, value=None):
        """  Corresponds to IDD Field `start_month_22`

        Args:
            value (int): value for IDD Field `start_month_22`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_22`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_22`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_22`')

        self._data["Start Month 22"] = value

    @property
    def start_day_22(self):
        """Get start_day_22

        Returns:
            int: the value of `start_day_22` or None if not set
        """
        return self._data["Start Day 22"]

    @start_day_22.setter
    def start_day_22(self, value=None):
        """  Corresponds to IDD Field `start_day_22`

        Args:
            value (int): value for IDD Field `start_day_22`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_22`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_22`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_22`')

        self._data["Start Day 22"] = value

    @property
    def end_month_22(self):
        """Get end_month_22

        Returns:
            int: the value of `end_month_22` or None if not set
        """
        return self._data["End Month 22"]

    @end_month_22.setter
    def end_month_22(self, value=None):
        """  Corresponds to IDD Field `end_month_22`

        Args:
            value (int): value for IDD Field `end_month_22`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_22`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_22`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_22`')

        self._data["End Month 22"] = value

    @property
    def end_day_22(self):
        """Get end_day_22

        Returns:
            int: the value of `end_day_22` or None if not set
        """
        return self._data["End Day 22"]

    @end_day_22.setter
    def end_day_22(self, value=None):
        """  Corresponds to IDD Field `end_day_22`

        Args:
            value (int): value for IDD Field `end_day_22`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_22`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_22`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_22`')

        self._data["End Day 22"] = value

    @property
    def scheduleweek_name_23(self):
        """Get scheduleweek_name_23

        Returns:
            str: the value of `scheduleweek_name_23` or None if not set
        """
        return self._data["Schedule:Week Name 23"]

    @scheduleweek_name_23.setter
    def scheduleweek_name_23(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_23`

        Args:
            value (str): value for IDD Field `scheduleweek_name_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_23`')

        self._data["Schedule:Week Name 23"] = value

    @property
    def start_month_23(self):
        """Get start_month_23

        Returns:
            int: the value of `start_month_23` or None if not set
        """
        return self._data["Start Month 23"]

    @start_month_23.setter
    def start_month_23(self, value=None):
        """  Corresponds to IDD Field `start_month_23`

        Args:
            value (int): value for IDD Field `start_month_23`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_23`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_23`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_23`')

        self._data["Start Month 23"] = value

    @property
    def start_day_23(self):
        """Get start_day_23

        Returns:
            int: the value of `start_day_23` or None if not set
        """
        return self._data["Start Day 23"]

    @start_day_23.setter
    def start_day_23(self, value=None):
        """  Corresponds to IDD Field `start_day_23`

        Args:
            value (int): value for IDD Field `start_day_23`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_23`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_23`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_23`')

        self._data["Start Day 23"] = value

    @property
    def end_month_23(self):
        """Get end_month_23

        Returns:
            int: the value of `end_month_23` or None if not set
        """
        return self._data["End Month 23"]

    @end_month_23.setter
    def end_month_23(self, value=None):
        """  Corresponds to IDD Field `end_month_23`

        Args:
            value (int): value for IDD Field `end_month_23`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_23`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_23`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_23`')

        self._data["End Month 23"] = value

    @property
    def end_day_23(self):
        """Get end_day_23

        Returns:
            int: the value of `end_day_23` or None if not set
        """
        return self._data["End Day 23"]

    @end_day_23.setter
    def end_day_23(self, value=None):
        """  Corresponds to IDD Field `end_day_23`

        Args:
            value (int): value for IDD Field `end_day_23`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_23`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_23`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_23`')

        self._data["End Day 23"] = value

    @property
    def scheduleweek_name_24(self):
        """Get scheduleweek_name_24

        Returns:
            str: the value of `scheduleweek_name_24` or None if not set
        """
        return self._data["Schedule:Week Name 24"]

    @scheduleweek_name_24.setter
    def scheduleweek_name_24(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_24`

        Args:
            value (str): value for IDD Field `scheduleweek_name_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_24`')

        self._data["Schedule:Week Name 24"] = value

    @property
    def start_month_24(self):
        """Get start_month_24

        Returns:
            int: the value of `start_month_24` or None if not set
        """
        return self._data["Start Month 24"]

    @start_month_24.setter
    def start_month_24(self, value=None):
        """  Corresponds to IDD Field `start_month_24`

        Args:
            value (int): value for IDD Field `start_month_24`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_24`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_24`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_24`')

        self._data["Start Month 24"] = value

    @property
    def start_day_24(self):
        """Get start_day_24

        Returns:
            int: the value of `start_day_24` or None if not set
        """
        return self._data["Start Day 24"]

    @start_day_24.setter
    def start_day_24(self, value=None):
        """  Corresponds to IDD Field `start_day_24`

        Args:
            value (int): value for IDD Field `start_day_24`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_24`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_24`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_24`')

        self._data["Start Day 24"] = value

    @property
    def end_month_24(self):
        """Get end_month_24

        Returns:
            int: the value of `end_month_24` or None if not set
        """
        return self._data["End Month 24"]

    @end_month_24.setter
    def end_month_24(self, value=None):
        """  Corresponds to IDD Field `end_month_24`

        Args:
            value (int): value for IDD Field `end_month_24`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_24`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_24`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_24`')

        self._data["End Month 24"] = value

    @property
    def end_day_24(self):
        """Get end_day_24

        Returns:
            int: the value of `end_day_24` or None if not set
        """
        return self._data["End Day 24"]

    @end_day_24.setter
    def end_day_24(self, value=None):
        """  Corresponds to IDD Field `end_day_24`

        Args:
            value (int): value for IDD Field `end_day_24`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_24`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_24`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_24`')

        self._data["End Day 24"] = value

    @property
    def scheduleweek_name_25(self):
        """Get scheduleweek_name_25

        Returns:
            str: the value of `scheduleweek_name_25` or None if not set
        """
        return self._data["Schedule:Week Name 25"]

    @scheduleweek_name_25.setter
    def scheduleweek_name_25(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_25`

        Args:
            value (str): value for IDD Field `scheduleweek_name_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_25`')

        self._data["Schedule:Week Name 25"] = value

    @property
    def start_month_25(self):
        """Get start_month_25

        Returns:
            int: the value of `start_month_25` or None if not set
        """
        return self._data["Start Month 25"]

    @start_month_25.setter
    def start_month_25(self, value=None):
        """  Corresponds to IDD Field `start_month_25`

        Args:
            value (int): value for IDD Field `start_month_25`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_25`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_25`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_25`')

        self._data["Start Month 25"] = value

    @property
    def start_day_25(self):
        """Get start_day_25

        Returns:
            int: the value of `start_day_25` or None if not set
        """
        return self._data["Start Day 25"]

    @start_day_25.setter
    def start_day_25(self, value=None):
        """  Corresponds to IDD Field `start_day_25`

        Args:
            value (int): value for IDD Field `start_day_25`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_25`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_25`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_25`')

        self._data["Start Day 25"] = value

    @property
    def end_month_25(self):
        """Get end_month_25

        Returns:
            int: the value of `end_month_25` or None if not set
        """
        return self._data["End Month 25"]

    @end_month_25.setter
    def end_month_25(self, value=None):
        """  Corresponds to IDD Field `end_month_25`

        Args:
            value (int): value for IDD Field `end_month_25`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_25`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_25`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_25`')

        self._data["End Month 25"] = value

    @property
    def end_day_25(self):
        """Get end_day_25

        Returns:
            int: the value of `end_day_25` or None if not set
        """
        return self._data["End Day 25"]

    @end_day_25.setter
    def end_day_25(self, value=None):
        """  Corresponds to IDD Field `end_day_25`

        Args:
            value (int): value for IDD Field `end_day_25`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_25`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_25`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_25`')

        self._data["End Day 25"] = value

    @property
    def scheduleweek_name_26(self):
        """Get scheduleweek_name_26

        Returns:
            str: the value of `scheduleweek_name_26` or None if not set
        """
        return self._data["Schedule:Week Name 26"]

    @scheduleweek_name_26.setter
    def scheduleweek_name_26(self, value=None):
        """  Corresponds to IDD Field `scheduleweek_name_26`

        Args:
            value (str): value for IDD Field `scheduleweek_name_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `scheduleweek_name_26`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `scheduleweek_name_26`')

        self._data["Schedule:Week Name 26"] = value

    @property
    def start_month_26(self):
        """Get start_month_26

        Returns:
            int: the value of `start_month_26` or None if not set
        """
        return self._data["Start Month 26"]

    @start_month_26.setter
    def start_month_26(self, value=None):
        """  Corresponds to IDD Field `start_month_26`

        Args:
            value (int): value for IDD Field `start_month_26`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_month_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_month_26`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `start_month_26`')

        self._data["Start Month 26"] = value

    @property
    def start_day_26(self):
        """Get start_day_26

        Returns:
            int: the value of `start_day_26` or None if not set
        """
        return self._data["Start Day 26"]

    @start_day_26.setter
    def start_day_26(self, value=None):
        """  Corresponds to IDD Field `start_day_26`

        Args:
            value (int): value for IDD Field `start_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `start_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `start_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `start_day_26`')

        self._data["Start Day 26"] = value

    @property
    def end_month_26(self):
        """Get end_month_26

        Returns:
            int: the value of `end_month_26` or None if not set
        """
        return self._data["End Month 26"]

    @end_month_26.setter
    def end_month_26(self, value=None):
        """  Corresponds to IDD Field `end_month_26`

        Args:
            value (int): value for IDD Field `end_month_26`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_month_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_month_26`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `end_month_26`')

        self._data["End Month 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @property
    def end_day_26(self):
        """Get end_day_26

        Returns:
            int: the value of `end_day_26` or None if not set
        """
        return self._data["End Day 26"]

    @end_day_26.setter
    def end_day_26(self, value=None):
        """  Corresponds to IDD Field `end_day_26`
        Schedule:Week for Weeks 27-53 are condensed

        Args:
            value (int): value for IDD Field `end_day_26`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `end_day_26`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `end_day_26`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `end_day_26`')

        self._data["End Day 26"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.schedule_type_limits_name))
        out.append(self._to_str(self.scheduleweek_name_1))
        out.append(self._to_str(self.start_month_1))
        out.append(self._to_str(self.start_day_1))
        out.append(self._to_str(self.end_month_1))
        out.append(self._to_str(self.end_day_1))
        out.append(self._to_str(self.scheduleweek_name_2))
        out.append(self._to_str(self.start_month_2))
        out.append(self._to_str(self.start_day_2))
        out.append(self._to_str(self.end_month_2))
        out.append(self._to_str(self.end_day_2))
        out.append(self._to_str(self.scheduleweek_name_3))
        out.append(self._to_str(self.start_month_3))
        out.append(self._to_str(self.start_day_3))
        out.append(self._to_str(self.end_month_3))
        out.append(self._to_str(self.end_day_3))
        out.append(self._to_str(self.scheduleweek_name_4))
        out.append(self._to_str(self.start_month_4))
        out.append(self._to_str(self.start_day_4))
        out.append(self._to_str(self.end_month_4))
        out.append(self._to_str(self.end_day_4))
        out.append(self._to_str(self.scheduleweek_name_5))
        out.append(self._to_str(self.start_month_5))
        out.append(self._to_str(self.start_day_5))
        out.append(self._to_str(self.end_month_5))
        out.append(self._to_str(self.end_day_5))
        out.append(self._to_str(self.scheduleweek_name_6))
        out.append(self._to_str(self.start_month_6))
        out.append(self._to_str(self.start_day_6))
        out.append(self._to_str(self.end_month_6))
        out.append(self._to_str(self.end_day_6))
        out.append(self._to_str(self.scheduleweek_name_7))
        out.append(self._to_str(self.start_month_7))
        out.append(self._to_str(self.start_day_7))
        out.append(self._to_str(self.end_month_7))
        out.append(self._to_str(self.end_day_7))
        out.append(self._to_str(self.scheduleweek_name_8))
        out.append(self._to_str(self.start_month_8))
        out.append(self._to_str(self.start_day_8))
        out.append(self._to_str(self.end_month_8))
        out.append(self._to_str(self.end_day_8))
        out.append(self._to_str(self.scheduleweek_name_9))
        out.append(self._to_str(self.start_month_9))
        out.append(self._to_str(self.start_day_9))
        out.append(self._to_str(self.end_month_9))
        out.append(self._to_str(self.end_day_9))
        out.append(self._to_str(self.scheduleweek_name_10))
        out.append(self._to_str(self.start_month_10))
        out.append(self._to_str(self.start_day_10))
        out.append(self._to_str(self.end_month_10))
        out.append(self._to_str(self.end_day_10))
        out.append(self._to_str(self.scheduleweek_name_11))
        out.append(self._to_str(self.start_month_11))
        out.append(self._to_str(self.start_day_11))
        out.append(self._to_str(self.end_month_11))
        out.append(self._to_str(self.end_day_11))
        out.append(self._to_str(self.scheduleweek_name_12))
        out.append(self._to_str(self.start_month_12))
        out.append(self._to_str(self.start_day_12))
        out.append(self._to_str(self.end_month_12))
        out.append(self._to_str(self.end_day_12))
        out.append(self._to_str(self.scheduleweek_name_13))
        out.append(self._to_str(self.start_month_13))
        out.append(self._to_str(self.start_day_13))
        out.append(self._to_str(self.end_month_13))
        out.append(self._to_str(self.end_day_13))
        out.append(self._to_str(self.scheduleweek_name_14))
        out.append(self._to_str(self.start_month_14))
        out.append(self._to_str(self.start_day_14))
        out.append(self._to_str(self.end_month_14))
        out.append(self._to_str(self.end_day_14))
        out.append(self._to_str(self.scheduleweek_name_15))
        out.append(self._to_str(self.start_month_15))
        out.append(self._to_str(self.start_day_15))
        out.append(self._to_str(self.end_month_15))
        out.append(self._to_str(self.end_day_15))
        out.append(self._to_str(self.scheduleweek_name_16))
        out.append(self._to_str(self.start_month_16))
        out.append(self._to_str(self.start_day_16))
        out.append(self._to_str(self.end_month_16))
        out.append(self._to_str(self.end_day_16))
        out.append(self._to_str(self.scheduleweek_name_17))
        out.append(self._to_str(self.start_month_17))
        out.append(self._to_str(self.start_day_17))
        out.append(self._to_str(self.end_month_17))
        out.append(self._to_str(self.end_day_17))
        out.append(self._to_str(self.scheduleweek_name_18))
        out.append(self._to_str(self.start_month_18))
        out.append(self._to_str(self.start_day_18))
        out.append(self._to_str(self.end_month_18))
        out.append(self._to_str(self.end_day_18))
        out.append(self._to_str(self.scheduleweek_name_19))
        out.append(self._to_str(self.start_month_19))
        out.append(self._to_str(self.start_day_19))
        out.append(self._to_str(self.end_month_19))
        out.append(self._to_str(self.end_day_19))
        out.append(self._to_str(self.scheduleweek_name_20))
        out.append(self._to_str(self.start_month_20))
        out.append(self._to_str(self.start_day_20))
        out.append(self._to_str(self.end_month_20))
        out.append(self._to_str(self.end_day_20))
        out.append(self._to_str(self.scheduleweek_name_21))
        out.append(self._to_str(self.start_month_21))
        out.append(self._to_str(self.start_day_21))
        out.append(self._to_str(self.end_month_21))
        out.append(self._to_str(self.end_day_21))
        out.append(self._to_str(self.scheduleweek_name_22))
        out.append(self._to_str(self.start_month_22))
        out.append(self._to_str(self.start_day_22))
        out.append(self._to_str(self.end_month_22))
        out.append(self._to_str(self.end_day_22))
        out.append(self._to_str(self.scheduleweek_name_23))
        out.append(self._to_str(self.start_month_23))
        out.append(self._to_str(self.start_day_23))
        out.append(self._to_str(self.end_month_23))
        out.append(self._to_str(self.end_day_23))
        out.append(self._to_str(self.scheduleweek_name_24))
        out.append(self._to_str(self.start_month_24))
        out.append(self._to_str(self.start_day_24))
        out.append(self._to_str(self.end_month_24))
        out.append(self._to_str(self.end_day_24))
        out.append(self._to_str(self.scheduleweek_name_25))
        out.append(self._to_str(self.start_month_25))
        out.append(self._to_str(self.start_day_25))
        out.append(self._to_str(self.end_month_25))
        out.append(self._to_str(self.end_day_25))
        out.append(self._to_str(self.scheduleweek_name_26))
        out.append(self._to_str(self.start_month_26))
        out.append(self._to_str(self.start_day_26))
        out.append(self._to_str(self.end_month_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        out.append(self._to_str(self.end_day_26))
        return ",".join(out)

class ScheduleCompact(object):
    """ Corresponds to IDD object `Schedule:Compact`
        Irregular object.  Does not follow the usual definition for fields.  Fields A3... are:
        Through: Date
        For: Applicable days (ref: Schedule:Week:Compact)
        Interpolate: Yes/No (ref: Schedule:Day:Interval) -- optional, if not used will be "No"
        Until: <Time> (ref: Schedule:Day:Interval)
        <numeric value>
        words "Through","For","Interpolate","Until" must be included.
    """
    internal_name = "Schedule:Compact"
    field_count = 442

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:Compact`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Schedule Type Limits Name"] = None
        self._data["Field 1"] = None
        self._data["Field 2"] = None
        self._data["Field 3"] = None
        self._data["Field 4"] = None
        self._data["Field 5"] = None
        self._data["Field 6"] = None
        self._data["Field 7"] = None
        self._data["Field 8"] = None
        self._data["Field 9"] = None
        self._data["Field 10"] = None
        self._data["Field 11"] = None
        self._data["Field 12"] = None
        self._data["Field 13"] = None
        self._data["Field 14"] = None
        self._data["Field 15"] = None
        self._data["Field 16"] = None
        self._data["Field 17"] = None
        self._data["Field 18"] = None
        self._data["Field 19"] = None
        self._data["Field 20"] = None
        self._data["Field 21"] = None
        self._data["Field 22"] = None
        self._data["Field 23"] = None
        self._data["Field 24"] = None
        self._data["Field 25"] = None
        self._data["Field 26"] = None
        self._data["Field 27"] = None
        self._data["Field 28"] = None
        self._data["Field 29"] = None
        self._data["Field 30"] = None
        self._data["Field 31"] = None
        self._data["Field 32"] = None
        self._data["Field 33"] = None
        self._data["Field 34"] = None
        self._data["Field 35"] = None
        self._data["Field 36"] = None
        self._data["Field 37"] = None
        self._data["Field 38"] = None
        self._data["Field 39"] = None
        self._data["Field 40"] = None
        self._data["Field 41"] = None
        self._data["Field 42"] = None
        self._data["Field 43"] = None
        self._data["Field 44"] = None
        self._data["Field 45"] = None
        self._data["Field 46"] = None
        self._data["Field 47"] = None
        self._data["Field 48"] = None
        self._data["Field 49"] = None
        self._data["Field 50"] = None
        self._data["Field 51"] = None
        self._data["Field 52"] = None
        self._data["Field 53"] = None
        self._data["Field 54"] = None
        self._data["Field 55"] = None
        self._data["Field 56"] = None
        self._data["Field 57"] = None
        self._data["Field 58"] = None
        self._data["Field 59"] = None
        self._data["Field 60"] = None
        self._data["Field 61"] = None
        self._data["Field 62"] = None
        self._data["Field 63"] = None
        self._data["Field 64"] = None
        self._data["Field 65"] = None
        self._data["Field 66"] = None
        self._data["Field 67"] = None
        self._data["Field 68"] = None
        self._data["Field 69"] = None
        self._data["Field 70"] = None
        self._data["Field 71"] = None
        self._data["Field 72"] = None
        self._data["Field 73"] = None
        self._data["Field 74"] = None
        self._data["Field 75"] = None
        self._data["Field 76"] = None
        self._data["Field 77"] = None
        self._data["Field 78"] = None
        self._data["Field 79"] = None
        self._data["Field 80"] = None
        self._data["Field 81"] = None
        self._data["Field 82"] = None
        self._data["Field 83"] = None
        self._data["Field 84"] = None
        self._data["Field 85"] = None
        self._data["Field 86"] = None
        self._data["Field 87"] = None
        self._data["Field 88"] = None
        self._data["Field 89"] = None
        self._data["Field 90"] = None
        self._data["Field 91"] = None
        self._data["Field 92"] = None
        self._data["Field 93"] = None
        self._data["Field 94"] = None
        self._data["Field 95"] = None
        self._data["Field 96"] = None
        self._data["Field 97"] = None
        self._data["Field 98"] = None
        self._data["Field 99"] = None
        self._data["Field 100"] = None
        self._data["Field 101"] = None
        self._data["Field 102"] = None
        self._data["Field 103"] = None
        self._data["Field 104"] = None
        self._data["Field 105"] = None
        self._data["Field 106"] = None
        self._data["Field 107"] = None
        self._data["Field 108"] = None
        self._data["Field 109"] = None
        self._data["Field 110"] = None
        self._data["Field 111"] = None
        self._data["Field 112"] = None
        self._data["Field 113"] = None
        self._data["Field 114"] = None
        self._data["Field 115"] = None
        self._data["Field 116"] = None
        self._data["Field 117"] = None
        self._data["Field 118"] = None
        self._data["Field 119"] = None
        self._data["Field 120"] = None
        self._data["Field 121"] = None
        self._data["Field 122"] = None
        self._data["Field 123"] = None
        self._data["Field 124"] = None
        self._data["Field 125"] = None
        self._data["Field 126"] = None
        self._data["Field 127"] = None
        self._data["Field 128"] = None
        self._data["Field 129"] = None
        self._data["Field 130"] = None
        self._data["Field 131"] = None
        self._data["Field 132"] = None
        self._data["Field 133"] = None
        self._data["Field 134"] = None
        self._data["Field 135"] = None
        self._data["Field 136"] = None
        self._data["Field 137"] = None
        self._data["Field 138"] = None
        self._data["Field 139"] = None
        self._data["Field 140"] = None
        self._data["Field 141"] = None
        self._data["Field 142"] = None
        self._data["Field 143"] = None
        self._data["Field 144"] = None
        self._data["Field 145"] = None
        self._data["Field 146"] = None
        self._data["Field 147"] = None
        self._data["Field 148"] = None
        self._data["Field 149"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None
        self._data["Field 150"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_type_limits_name = None
        else:
            self.schedule_type_limits_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_1 = None
        else:
            self.field_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_2 = None
        else:
            self.field_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_3 = None
        else:
            self.field_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_4 = None
        else:
            self.field_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_5 = None
        else:
            self.field_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_6 = None
        else:
            self.field_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_7 = None
        else:
            self.field_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_8 = None
        else:
            self.field_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_9 = None
        else:
            self.field_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_10 = None
        else:
            self.field_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_11 = None
        else:
            self.field_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_12 = None
        else:
            self.field_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_13 = None
        else:
            self.field_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_14 = None
        else:
            self.field_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_15 = None
        else:
            self.field_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_16 = None
        else:
            self.field_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_17 = None
        else:
            self.field_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_18 = None
        else:
            self.field_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_19 = None
        else:
            self.field_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_20 = None
        else:
            self.field_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_21 = None
        else:
            self.field_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_22 = None
        else:
            self.field_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_23 = None
        else:
            self.field_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_24 = None
        else:
            self.field_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_25 = None
        else:
            self.field_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_26 = None
        else:
            self.field_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_27 = None
        else:
            self.field_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_28 = None
        else:
            self.field_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_29 = None
        else:
            self.field_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_30 = None
        else:
            self.field_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_31 = None
        else:
            self.field_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_32 = None
        else:
            self.field_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_33 = None
        else:
            self.field_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_34 = None
        else:
            self.field_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_35 = None
        else:
            self.field_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_36 = None
        else:
            self.field_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_37 = None
        else:
            self.field_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_38 = None
        else:
            self.field_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_39 = None
        else:
            self.field_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_40 = None
        else:
            self.field_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_41 = None
        else:
            self.field_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_42 = None
        else:
            self.field_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_43 = None
        else:
            self.field_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_44 = None
        else:
            self.field_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_45 = None
        else:
            self.field_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_46 = None
        else:
            self.field_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_47 = None
        else:
            self.field_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_48 = None
        else:
            self.field_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_49 = None
        else:
            self.field_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_50 = None
        else:
            self.field_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_51 = None
        else:
            self.field_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_52 = None
        else:
            self.field_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_53 = None
        else:
            self.field_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_54 = None
        else:
            self.field_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_55 = None
        else:
            self.field_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_56 = None
        else:
            self.field_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_57 = None
        else:
            self.field_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_58 = None
        else:
            self.field_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_59 = None
        else:
            self.field_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_60 = None
        else:
            self.field_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_61 = None
        else:
            self.field_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_62 = None
        else:
            self.field_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_63 = None
        else:
            self.field_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_64 = None
        else:
            self.field_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_65 = None
        else:
            self.field_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_66 = None
        else:
            self.field_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_67 = None
        else:
            self.field_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_68 = None
        else:
            self.field_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_69 = None
        else:
            self.field_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_70 = None
        else:
            self.field_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_71 = None
        else:
            self.field_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_72 = None
        else:
            self.field_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_73 = None
        else:
            self.field_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_74 = None
        else:
            self.field_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_75 = None
        else:
            self.field_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_76 = None
        else:
            self.field_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_77 = None
        else:
            self.field_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_78 = None
        else:
            self.field_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_79 = None
        else:
            self.field_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_80 = None
        else:
            self.field_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_81 = None
        else:
            self.field_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_82 = None
        else:
            self.field_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_83 = None
        else:
            self.field_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_84 = None
        else:
            self.field_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_85 = None
        else:
            self.field_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_86 = None
        else:
            self.field_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_87 = None
        else:
            self.field_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_88 = None
        else:
            self.field_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_89 = None
        else:
            self.field_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_90 = None
        else:
            self.field_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_91 = None
        else:
            self.field_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_92 = None
        else:
            self.field_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_93 = None
        else:
            self.field_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_94 = None
        else:
            self.field_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_95 = None
        else:
            self.field_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_96 = None
        else:
            self.field_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_97 = None
        else:
            self.field_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_98 = None
        else:
            self.field_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_99 = None
        else:
            self.field_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_100 = None
        else:
            self.field_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_101 = None
        else:
            self.field_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_102 = None
        else:
            self.field_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_103 = None
        else:
            self.field_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_104 = None
        else:
            self.field_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_105 = None
        else:
            self.field_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_106 = None
        else:
            self.field_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_107 = None
        else:
            self.field_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_108 = None
        else:
            self.field_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_109 = None
        else:
            self.field_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_110 = None
        else:
            self.field_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_111 = None
        else:
            self.field_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_112 = None
        else:
            self.field_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_113 = None
        else:
            self.field_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_114 = None
        else:
            self.field_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_115 = None
        else:
            self.field_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_116 = None
        else:
            self.field_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_117 = None
        else:
            self.field_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_118 = None
        else:
            self.field_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_119 = None
        else:
            self.field_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_120 = None
        else:
            self.field_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_121 = None
        else:
            self.field_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_122 = None
        else:
            self.field_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_123 = None
        else:
            self.field_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_124 = None
        else:
            self.field_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_125 = None
        else:
            self.field_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_126 = None
        else:
            self.field_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_127 = None
        else:
            self.field_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_128 = None
        else:
            self.field_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_129 = None
        else:
            self.field_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_130 = None
        else:
            self.field_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_131 = None
        else:
            self.field_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_132 = None
        else:
            self.field_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_133 = None
        else:
            self.field_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_134 = None
        else:
            self.field_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_135 = None
        else:
            self.field_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_136 = None
        else:
            self.field_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_137 = None
        else:
            self.field_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_138 = None
        else:
            self.field_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_139 = None
        else:
            self.field_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_140 = None
        else:
            self.field_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_141 = None
        else:
            self.field_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_142 = None
        else:
            self.field_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_143 = None
        else:
            self.field_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_144 = None
        else:
            self.field_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_145 = None
        else:
            self.field_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_146 = None
        else:
            self.field_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_147 = None
        else:
            self.field_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_148 = None
        else:
            self.field_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_149 = None
        else:
            self.field_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.field_150 = None
        else:
            self.field_150 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def schedule_type_limits_name(self):
        """Get schedule_type_limits_name

        Returns:
            str: the value of `schedule_type_limits_name` or None if not set
        """
        return self._data["Schedule Type Limits Name"]

    @schedule_type_limits_name.setter
    def schedule_type_limits_name(self, value=None):
        """  Corresponds to IDD Field `schedule_type_limits_name`

        Args:
            value (str): value for IDD Field `schedule_type_limits_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_type_limits_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_type_limits_name`')

        self._data["Schedule Type Limits Name"] = value

    @property
    def field_1(self):
        """Get field_1

        Returns:
            str: the value of `field_1` or None if not set
        """
        return self._data["Field 1"]

    @field_1.setter
    def field_1(self, value=None):
        """  Corresponds to IDD Field `field_1`

        Args:
            value (str): value for IDD Field `field_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_1`')

        self._data["Field 1"] = value

    @property
    def field_2(self):
        """Get field_2

        Returns:
            str: the value of `field_2` or None if not set
        """
        return self._data["Field 2"]

    @field_2.setter
    def field_2(self, value=None):
        """  Corresponds to IDD Field `field_2`

        Args:
            value (str): value for IDD Field `field_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_2`')

        self._data["Field 2"] = value

    @property
    def field_3(self):
        """Get field_3

        Returns:
            str: the value of `field_3` or None if not set
        """
        return self._data["Field 3"]

    @field_3.setter
    def field_3(self, value=None):
        """  Corresponds to IDD Field `field_3`

        Args:
            value (str): value for IDD Field `field_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_3`')

        self._data["Field 3"] = value

    @property
    def field_4(self):
        """Get field_4

        Returns:
            str: the value of `field_4` or None if not set
        """
        return self._data["Field 4"]

    @field_4.setter
    def field_4(self, value=None):
        """  Corresponds to IDD Field `field_4`

        Args:
            value (str): value for IDD Field `field_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_4`')

        self._data["Field 4"] = value

    @property
    def field_5(self):
        """Get field_5

        Returns:
            str: the value of `field_5` or None if not set
        """
        return self._data["Field 5"]

    @field_5.setter
    def field_5(self, value=None):
        """  Corresponds to IDD Field `field_5`

        Args:
            value (str): value for IDD Field `field_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_5`')

        self._data["Field 5"] = value

    @property
    def field_6(self):
        """Get field_6

        Returns:
            str: the value of `field_6` or None if not set
        """
        return self._data["Field 6"]

    @field_6.setter
    def field_6(self, value=None):
        """  Corresponds to IDD Field `field_6`

        Args:
            value (str): value for IDD Field `field_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_6`')

        self._data["Field 6"] = value

    @property
    def field_7(self):
        """Get field_7

        Returns:
            str: the value of `field_7` or None if not set
        """
        return self._data["Field 7"]

    @field_7.setter
    def field_7(self, value=None):
        """  Corresponds to IDD Field `field_7`

        Args:
            value (str): value for IDD Field `field_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_7`')

        self._data["Field 7"] = value

    @property
    def field_8(self):
        """Get field_8

        Returns:
            str: the value of `field_8` or None if not set
        """
        return self._data["Field 8"]

    @field_8.setter
    def field_8(self, value=None):
        """  Corresponds to IDD Field `field_8`

        Args:
            value (str): value for IDD Field `field_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_8`')

        self._data["Field 8"] = value

    @property
    def field_9(self):
        """Get field_9

        Returns:
            str: the value of `field_9` or None if not set
        """
        return self._data["Field 9"]

    @field_9.setter
    def field_9(self, value=None):
        """  Corresponds to IDD Field `field_9`

        Args:
            value (str): value for IDD Field `field_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_9`')

        self._data["Field 9"] = value

    @property
    def field_10(self):
        """Get field_10

        Returns:
            str: the value of `field_10` or None if not set
        """
        return self._data["Field 10"]

    @field_10.setter
    def field_10(self, value=None):
        """  Corresponds to IDD Field `field_10`

        Args:
            value (str): value for IDD Field `field_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_10`')

        self._data["Field 10"] = value

    @property
    def field_11(self):
        """Get field_11

        Returns:
            str: the value of `field_11` or None if not set
        """
        return self._data["Field 11"]

    @field_11.setter
    def field_11(self, value=None):
        """  Corresponds to IDD Field `field_11`

        Args:
            value (str): value for IDD Field `field_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_11`')

        self._data["Field 11"] = value

    @property
    def field_12(self):
        """Get field_12

        Returns:
            str: the value of `field_12` or None if not set
        """
        return self._data["Field 12"]

    @field_12.setter
    def field_12(self, value=None):
        """  Corresponds to IDD Field `field_12`

        Args:
            value (str): value for IDD Field `field_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_12`')

        self._data["Field 12"] = value

    @property
    def field_13(self):
        """Get field_13

        Returns:
            str: the value of `field_13` or None if not set
        """
        return self._data["Field 13"]

    @field_13.setter
    def field_13(self, value=None):
        """  Corresponds to IDD Field `field_13`

        Args:
            value (str): value for IDD Field `field_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_13`')

        self._data["Field 13"] = value

    @property
    def field_14(self):
        """Get field_14

        Returns:
            str: the value of `field_14` or None if not set
        """
        return self._data["Field 14"]

    @field_14.setter
    def field_14(self, value=None):
        """  Corresponds to IDD Field `field_14`

        Args:
            value (str): value for IDD Field `field_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_14`')

        self._data["Field 14"] = value

    @property
    def field_15(self):
        """Get field_15

        Returns:
            str: the value of `field_15` or None if not set
        """
        return self._data["Field 15"]

    @field_15.setter
    def field_15(self, value=None):
        """  Corresponds to IDD Field `field_15`

        Args:
            value (str): value for IDD Field `field_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_15`')

        self._data["Field 15"] = value

    @property
    def field_16(self):
        """Get field_16

        Returns:
            str: the value of `field_16` or None if not set
        """
        return self._data["Field 16"]

    @field_16.setter
    def field_16(self, value=None):
        """  Corresponds to IDD Field `field_16`

        Args:
            value (str): value for IDD Field `field_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_16`')

        self._data["Field 16"] = value

    @property
    def field_17(self):
        """Get field_17

        Returns:
            str: the value of `field_17` or None if not set
        """
        return self._data["Field 17"]

    @field_17.setter
    def field_17(self, value=None):
        """  Corresponds to IDD Field `field_17`

        Args:
            value (str): value for IDD Field `field_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_17`')

        self._data["Field 17"] = value

    @property
    def field_18(self):
        """Get field_18

        Returns:
            str: the value of `field_18` or None if not set
        """
        return self._data["Field 18"]

    @field_18.setter
    def field_18(self, value=None):
        """  Corresponds to IDD Field `field_18`

        Args:
            value (str): value for IDD Field `field_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_18`')

        self._data["Field 18"] = value

    @property
    def field_19(self):
        """Get field_19

        Returns:
            str: the value of `field_19` or None if not set
        """
        return self._data["Field 19"]

    @field_19.setter
    def field_19(self, value=None):
        """  Corresponds to IDD Field `field_19`

        Args:
            value (str): value for IDD Field `field_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_19`')

        self._data["Field 19"] = value

    @property
    def field_20(self):
        """Get field_20

        Returns:
            str: the value of `field_20` or None if not set
        """
        return self._data["Field 20"]

    @field_20.setter
    def field_20(self, value=None):
        """  Corresponds to IDD Field `field_20`

        Args:
            value (str): value for IDD Field `field_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_20`')

        self._data["Field 20"] = value

    @property
    def field_21(self):
        """Get field_21

        Returns:
            str: the value of `field_21` or None if not set
        """
        return self._data["Field 21"]

    @field_21.setter
    def field_21(self, value=None):
        """  Corresponds to IDD Field `field_21`

        Args:
            value (str): value for IDD Field `field_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_21`')

        self._data["Field 21"] = value

    @property
    def field_22(self):
        """Get field_22

        Returns:
            str: the value of `field_22` or None if not set
        """
        return self._data["Field 22"]

    @field_22.setter
    def field_22(self, value=None):
        """  Corresponds to IDD Field `field_22`

        Args:
            value (str): value for IDD Field `field_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_22`')

        self._data["Field 22"] = value

    @property
    def field_23(self):
        """Get field_23

        Returns:
            str: the value of `field_23` or None if not set
        """
        return self._data["Field 23"]

    @field_23.setter
    def field_23(self, value=None):
        """  Corresponds to IDD Field `field_23`

        Args:
            value (str): value for IDD Field `field_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_23`')

        self._data["Field 23"] = value

    @property
    def field_24(self):
        """Get field_24

        Returns:
            str: the value of `field_24` or None if not set
        """
        return self._data["Field 24"]

    @field_24.setter
    def field_24(self, value=None):
        """  Corresponds to IDD Field `field_24`

        Args:
            value (str): value for IDD Field `field_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_24`')

        self._data["Field 24"] = value

    @property
    def field_25(self):
        """Get field_25

        Returns:
            str: the value of `field_25` or None if not set
        """
        return self._data["Field 25"]

    @field_25.setter
    def field_25(self, value=None):
        """  Corresponds to IDD Field `field_25`

        Args:
            value (str): value for IDD Field `field_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_25`')

        self._data["Field 25"] = value

    @property
    def field_26(self):
        """Get field_26

        Returns:
            str: the value of `field_26` or None if not set
        """
        return self._data["Field 26"]

    @field_26.setter
    def field_26(self, value=None):
        """  Corresponds to IDD Field `field_26`

        Args:
            value (str): value for IDD Field `field_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_26`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_26`')

        self._data["Field 26"] = value

    @property
    def field_27(self):
        """Get field_27

        Returns:
            str: the value of `field_27` or None if not set
        """
        return self._data["Field 27"]

    @field_27.setter
    def field_27(self, value=None):
        """  Corresponds to IDD Field `field_27`

        Args:
            value (str): value for IDD Field `field_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_27`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_27`')

        self._data["Field 27"] = value

    @property
    def field_28(self):
        """Get field_28

        Returns:
            str: the value of `field_28` or None if not set
        """
        return self._data["Field 28"]

    @field_28.setter
    def field_28(self, value=None):
        """  Corresponds to IDD Field `field_28`

        Args:
            value (str): value for IDD Field `field_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_28`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_28`')

        self._data["Field 28"] = value

    @property
    def field_29(self):
        """Get field_29

        Returns:
            str: the value of `field_29` or None if not set
        """
        return self._data["Field 29"]

    @field_29.setter
    def field_29(self, value=None):
        """  Corresponds to IDD Field `field_29`

        Args:
            value (str): value for IDD Field `field_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_29`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_29`')

        self._data["Field 29"] = value

    @property
    def field_30(self):
        """Get field_30

        Returns:
            str: the value of `field_30` or None if not set
        """
        return self._data["Field 30"]

    @field_30.setter
    def field_30(self, value=None):
        """  Corresponds to IDD Field `field_30`

        Args:
            value (str): value for IDD Field `field_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_30`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_30`')

        self._data["Field 30"] = value

    @property
    def field_31(self):
        """Get field_31

        Returns:
            str: the value of `field_31` or None if not set
        """
        return self._data["Field 31"]

    @field_31.setter
    def field_31(self, value=None):
        """  Corresponds to IDD Field `field_31`

        Args:
            value (str): value for IDD Field `field_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_31`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_31`')

        self._data["Field 31"] = value

    @property
    def field_32(self):
        """Get field_32

        Returns:
            str: the value of `field_32` or None if not set
        """
        return self._data["Field 32"]

    @field_32.setter
    def field_32(self, value=None):
        """  Corresponds to IDD Field `field_32`

        Args:
            value (str): value for IDD Field `field_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_32`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_32`')

        self._data["Field 32"] = value

    @property
    def field_33(self):
        """Get field_33

        Returns:
            str: the value of `field_33` or None if not set
        """
        return self._data["Field 33"]

    @field_33.setter
    def field_33(self, value=None):
        """  Corresponds to IDD Field `field_33`

        Args:
            value (str): value for IDD Field `field_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_33`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_33`')

        self._data["Field 33"] = value

    @property
    def field_34(self):
        """Get field_34

        Returns:
            str: the value of `field_34` or None if not set
        """
        return self._data["Field 34"]

    @field_34.setter
    def field_34(self, value=None):
        """  Corresponds to IDD Field `field_34`

        Args:
            value (str): value for IDD Field `field_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_34`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_34`')

        self._data["Field 34"] = value

    @property
    def field_35(self):
        """Get field_35

        Returns:
            str: the value of `field_35` or None if not set
        """
        return self._data["Field 35"]

    @field_35.setter
    def field_35(self, value=None):
        """  Corresponds to IDD Field `field_35`

        Args:
            value (str): value for IDD Field `field_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_35`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_35`')

        self._data["Field 35"] = value

    @property
    def field_36(self):
        """Get field_36

        Returns:
            str: the value of `field_36` or None if not set
        """
        return self._data["Field 36"]

    @field_36.setter
    def field_36(self, value=None):
        """  Corresponds to IDD Field `field_36`

        Args:
            value (str): value for IDD Field `field_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_36`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_36`')

        self._data["Field 36"] = value

    @property
    def field_37(self):
        """Get field_37

        Returns:
            str: the value of `field_37` or None if not set
        """
        return self._data["Field 37"]

    @field_37.setter
    def field_37(self, value=None):
        """  Corresponds to IDD Field `field_37`

        Args:
            value (str): value for IDD Field `field_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_37`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_37`')

        self._data["Field 37"] = value

    @property
    def field_38(self):
        """Get field_38

        Returns:
            str: the value of `field_38` or None if not set
        """
        return self._data["Field 38"]

    @field_38.setter
    def field_38(self, value=None):
        """  Corresponds to IDD Field `field_38`

        Args:
            value (str): value for IDD Field `field_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_38`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_38`')

        self._data["Field 38"] = value

    @property
    def field_39(self):
        """Get field_39

        Returns:
            str: the value of `field_39` or None if not set
        """
        return self._data["Field 39"]

    @field_39.setter
    def field_39(self, value=None):
        """  Corresponds to IDD Field `field_39`

        Args:
            value (str): value for IDD Field `field_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_39`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_39`')

        self._data["Field 39"] = value

    @property
    def field_40(self):
        """Get field_40

        Returns:
            str: the value of `field_40` or None if not set
        """
        return self._data["Field 40"]

    @field_40.setter
    def field_40(self, value=None):
        """  Corresponds to IDD Field `field_40`

        Args:
            value (str): value for IDD Field `field_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_40`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_40`')

        self._data["Field 40"] = value

    @property
    def field_41(self):
        """Get field_41

        Returns:
            str: the value of `field_41` or None if not set
        """
        return self._data["Field 41"]

    @field_41.setter
    def field_41(self, value=None):
        """  Corresponds to IDD Field `field_41`

        Args:
            value (str): value for IDD Field `field_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_41`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_41`')

        self._data["Field 41"] = value

    @property
    def field_42(self):
        """Get field_42

        Returns:
            str: the value of `field_42` or None if not set
        """
        return self._data["Field 42"]

    @field_42.setter
    def field_42(self, value=None):
        """  Corresponds to IDD Field `field_42`

        Args:
            value (str): value for IDD Field `field_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_42`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_42`')

        self._data["Field 42"] = value

    @property
    def field_43(self):
        """Get field_43

        Returns:
            str: the value of `field_43` or None if not set
        """
        return self._data["Field 43"]

    @field_43.setter
    def field_43(self, value=None):
        """  Corresponds to IDD Field `field_43`

        Args:
            value (str): value for IDD Field `field_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_43`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_43`')

        self._data["Field 43"] = value

    @property
    def field_44(self):
        """Get field_44

        Returns:
            str: the value of `field_44` or None if not set
        """
        return self._data["Field 44"]

    @field_44.setter
    def field_44(self, value=None):
        """  Corresponds to IDD Field `field_44`

        Args:
            value (str): value for IDD Field `field_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_44`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_44`')

        self._data["Field 44"] = value

    @property
    def field_45(self):
        """Get field_45

        Returns:
            str: the value of `field_45` or None if not set
        """
        return self._data["Field 45"]

    @field_45.setter
    def field_45(self, value=None):
        """  Corresponds to IDD Field `field_45`

        Args:
            value (str): value for IDD Field `field_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_45`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_45`')

        self._data["Field 45"] = value

    @property
    def field_46(self):
        """Get field_46

        Returns:
            str: the value of `field_46` or None if not set
        """
        return self._data["Field 46"]

    @field_46.setter
    def field_46(self, value=None):
        """  Corresponds to IDD Field `field_46`

        Args:
            value (str): value for IDD Field `field_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_46`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_46`')

        self._data["Field 46"] = value

    @property
    def field_47(self):
        """Get field_47

        Returns:
            str: the value of `field_47` or None if not set
        """
        return self._data["Field 47"]

    @field_47.setter
    def field_47(self, value=None):
        """  Corresponds to IDD Field `field_47`

        Args:
            value (str): value for IDD Field `field_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_47`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_47`')

        self._data["Field 47"] = value

    @property
    def field_48(self):
        """Get field_48

        Returns:
            str: the value of `field_48` or None if not set
        """
        return self._data["Field 48"]

    @field_48.setter
    def field_48(self, value=None):
        """  Corresponds to IDD Field `field_48`

        Args:
            value (str): value for IDD Field `field_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_48`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_48`')

        self._data["Field 48"] = value

    @property
    def field_49(self):
        """Get field_49

        Returns:
            str: the value of `field_49` or None if not set
        """
        return self._data["Field 49"]

    @field_49.setter
    def field_49(self, value=None):
        """  Corresponds to IDD Field `field_49`

        Args:
            value (str): value for IDD Field `field_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_49`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_49`')

        self._data["Field 49"] = value

    @property
    def field_50(self):
        """Get field_50

        Returns:
            str: the value of `field_50` or None if not set
        """
        return self._data["Field 50"]

    @field_50.setter
    def field_50(self, value=None):
        """  Corresponds to IDD Field `field_50`

        Args:
            value (str): value for IDD Field `field_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_50`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_50`')

        self._data["Field 50"] = value

    @property
    def field_51(self):
        """Get field_51

        Returns:
            str: the value of `field_51` or None if not set
        """
        return self._data["Field 51"]

    @field_51.setter
    def field_51(self, value=None):
        """  Corresponds to IDD Field `field_51`

        Args:
            value (str): value for IDD Field `field_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_51`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_51`')

        self._data["Field 51"] = value

    @property
    def field_52(self):
        """Get field_52

        Returns:
            str: the value of `field_52` or None if not set
        """
        return self._data["Field 52"]

    @field_52.setter
    def field_52(self, value=None):
        """  Corresponds to IDD Field `field_52`

        Args:
            value (str): value for IDD Field `field_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_52`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_52`')

        self._data["Field 52"] = value

    @property
    def field_53(self):
        """Get field_53

        Returns:
            str: the value of `field_53` or None if not set
        """
        return self._data["Field 53"]

    @field_53.setter
    def field_53(self, value=None):
        """  Corresponds to IDD Field `field_53`

        Args:
            value (str): value for IDD Field `field_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_53`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_53`')

        self._data["Field 53"] = value

    @property
    def field_54(self):
        """Get field_54

        Returns:
            str: the value of `field_54` or None if not set
        """
        return self._data["Field 54"]

    @field_54.setter
    def field_54(self, value=None):
        """  Corresponds to IDD Field `field_54`

        Args:
            value (str): value for IDD Field `field_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_54`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_54`')

        self._data["Field 54"] = value

    @property
    def field_55(self):
        """Get field_55

        Returns:
            str: the value of `field_55` or None if not set
        """
        return self._data["Field 55"]

    @field_55.setter
    def field_55(self, value=None):
        """  Corresponds to IDD Field `field_55`

        Args:
            value (str): value for IDD Field `field_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_55`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_55`')

        self._data["Field 55"] = value

    @property
    def field_56(self):
        """Get field_56

        Returns:
            str: the value of `field_56` or None if not set
        """
        return self._data["Field 56"]

    @field_56.setter
    def field_56(self, value=None):
        """  Corresponds to IDD Field `field_56`

        Args:
            value (str): value for IDD Field `field_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_56`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_56`')

        self._data["Field 56"] = value

    @property
    def field_57(self):
        """Get field_57

        Returns:
            str: the value of `field_57` or None if not set
        """
        return self._data["Field 57"]

    @field_57.setter
    def field_57(self, value=None):
        """  Corresponds to IDD Field `field_57`

        Args:
            value (str): value for IDD Field `field_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_57`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_57`')

        self._data["Field 57"] = value

    @property
    def field_58(self):
        """Get field_58

        Returns:
            str: the value of `field_58` or None if not set
        """
        return self._data["Field 58"]

    @field_58.setter
    def field_58(self, value=None):
        """  Corresponds to IDD Field `field_58`

        Args:
            value (str): value for IDD Field `field_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_58`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_58`')

        self._data["Field 58"] = value

    @property
    def field_59(self):
        """Get field_59

        Returns:
            str: the value of `field_59` or None if not set
        """
        return self._data["Field 59"]

    @field_59.setter
    def field_59(self, value=None):
        """  Corresponds to IDD Field `field_59`

        Args:
            value (str): value for IDD Field `field_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_59`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_59`')

        self._data["Field 59"] = value

    @property
    def field_60(self):
        """Get field_60

        Returns:
            str: the value of `field_60` or None if not set
        """
        return self._data["Field 60"]

    @field_60.setter
    def field_60(self, value=None):
        """  Corresponds to IDD Field `field_60`

        Args:
            value (str): value for IDD Field `field_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_60`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_60`')

        self._data["Field 60"] = value

    @property
    def field_61(self):
        """Get field_61

        Returns:
            str: the value of `field_61` or None if not set
        """
        return self._data["Field 61"]

    @field_61.setter
    def field_61(self, value=None):
        """  Corresponds to IDD Field `field_61`

        Args:
            value (str): value for IDD Field `field_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_61`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_61`')

        self._data["Field 61"] = value

    @property
    def field_62(self):
        """Get field_62

        Returns:
            str: the value of `field_62` or None if not set
        """
        return self._data["Field 62"]

    @field_62.setter
    def field_62(self, value=None):
        """  Corresponds to IDD Field `field_62`

        Args:
            value (str): value for IDD Field `field_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_62`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_62`')

        self._data["Field 62"] = value

    @property
    def field_63(self):
        """Get field_63

        Returns:
            str: the value of `field_63` or None if not set
        """
        return self._data["Field 63"]

    @field_63.setter
    def field_63(self, value=None):
        """  Corresponds to IDD Field `field_63`

        Args:
            value (str): value for IDD Field `field_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_63`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_63`')

        self._data["Field 63"] = value

    @property
    def field_64(self):
        """Get field_64

        Returns:
            str: the value of `field_64` or None if not set
        """
        return self._data["Field 64"]

    @field_64.setter
    def field_64(self, value=None):
        """  Corresponds to IDD Field `field_64`

        Args:
            value (str): value for IDD Field `field_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_64`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_64`')

        self._data["Field 64"] = value

    @property
    def field_65(self):
        """Get field_65

        Returns:
            str: the value of `field_65` or None if not set
        """
        return self._data["Field 65"]

    @field_65.setter
    def field_65(self, value=None):
        """  Corresponds to IDD Field `field_65`

        Args:
            value (str): value for IDD Field `field_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_65`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_65`')

        self._data["Field 65"] = value

    @property
    def field_66(self):
        """Get field_66

        Returns:
            str: the value of `field_66` or None if not set
        """
        return self._data["Field 66"]

    @field_66.setter
    def field_66(self, value=None):
        """  Corresponds to IDD Field `field_66`

        Args:
            value (str): value for IDD Field `field_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_66`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_66`')

        self._data["Field 66"] = value

    @property
    def field_67(self):
        """Get field_67

        Returns:
            str: the value of `field_67` or None if not set
        """
        return self._data["Field 67"]

    @field_67.setter
    def field_67(self, value=None):
        """  Corresponds to IDD Field `field_67`

        Args:
            value (str): value for IDD Field `field_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_67`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_67`')

        self._data["Field 67"] = value

    @property
    def field_68(self):
        """Get field_68

        Returns:
            str: the value of `field_68` or None if not set
        """
        return self._data["Field 68"]

    @field_68.setter
    def field_68(self, value=None):
        """  Corresponds to IDD Field `field_68`

        Args:
            value (str): value for IDD Field `field_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_68`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_68`')

        self._data["Field 68"] = value

    @property
    def field_69(self):
        """Get field_69

        Returns:
            str: the value of `field_69` or None if not set
        """
        return self._data["Field 69"]

    @field_69.setter
    def field_69(self, value=None):
        """  Corresponds to IDD Field `field_69`

        Args:
            value (str): value for IDD Field `field_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_69`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_69`')

        self._data["Field 69"] = value

    @property
    def field_70(self):
        """Get field_70

        Returns:
            str: the value of `field_70` or None if not set
        """
        return self._data["Field 70"]

    @field_70.setter
    def field_70(self, value=None):
        """  Corresponds to IDD Field `field_70`

        Args:
            value (str): value for IDD Field `field_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_70`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_70`')

        self._data["Field 70"] = value

    @property
    def field_71(self):
        """Get field_71

        Returns:
            str: the value of `field_71` or None if not set
        """
        return self._data["Field 71"]

    @field_71.setter
    def field_71(self, value=None):
        """  Corresponds to IDD Field `field_71`

        Args:
            value (str): value for IDD Field `field_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_71`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_71`')

        self._data["Field 71"] = value

    @property
    def field_72(self):
        """Get field_72

        Returns:
            str: the value of `field_72` or None if not set
        """
        return self._data["Field 72"]

    @field_72.setter
    def field_72(self, value=None):
        """  Corresponds to IDD Field `field_72`

        Args:
            value (str): value for IDD Field `field_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_72`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_72`')

        self._data["Field 72"] = value

    @property
    def field_73(self):
        """Get field_73

        Returns:
            str: the value of `field_73` or None if not set
        """
        return self._data["Field 73"]

    @field_73.setter
    def field_73(self, value=None):
        """  Corresponds to IDD Field `field_73`

        Args:
            value (str): value for IDD Field `field_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_73`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_73`')

        self._data["Field 73"] = value

    @property
    def field_74(self):
        """Get field_74

        Returns:
            str: the value of `field_74` or None if not set
        """
        return self._data["Field 74"]

    @field_74.setter
    def field_74(self, value=None):
        """  Corresponds to IDD Field `field_74`

        Args:
            value (str): value for IDD Field `field_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_74`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_74`')

        self._data["Field 74"] = value

    @property
    def field_75(self):
        """Get field_75

        Returns:
            str: the value of `field_75` or None if not set
        """
        return self._data["Field 75"]

    @field_75.setter
    def field_75(self, value=None):
        """  Corresponds to IDD Field `field_75`

        Args:
            value (str): value for IDD Field `field_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_75`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_75`')

        self._data["Field 75"] = value

    @property
    def field_76(self):
        """Get field_76

        Returns:
            str: the value of `field_76` or None if not set
        """
        return self._data["Field 76"]

    @field_76.setter
    def field_76(self, value=None):
        """  Corresponds to IDD Field `field_76`

        Args:
            value (str): value for IDD Field `field_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_76`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_76`')

        self._data["Field 76"] = value

    @property
    def field_77(self):
        """Get field_77

        Returns:
            str: the value of `field_77` or None if not set
        """
        return self._data["Field 77"]

    @field_77.setter
    def field_77(self, value=None):
        """  Corresponds to IDD Field `field_77`

        Args:
            value (str): value for IDD Field `field_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_77`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_77`')

        self._data["Field 77"] = value

    @property
    def field_78(self):
        """Get field_78

        Returns:
            str: the value of `field_78` or None if not set
        """
        return self._data["Field 78"]

    @field_78.setter
    def field_78(self, value=None):
        """  Corresponds to IDD Field `field_78`

        Args:
            value (str): value for IDD Field `field_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_78`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_78`')

        self._data["Field 78"] = value

    @property
    def field_79(self):
        """Get field_79

        Returns:
            str: the value of `field_79` or None if not set
        """
        return self._data["Field 79"]

    @field_79.setter
    def field_79(self, value=None):
        """  Corresponds to IDD Field `field_79`

        Args:
            value (str): value for IDD Field `field_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_79`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_79`')

        self._data["Field 79"] = value

    @property
    def field_80(self):
        """Get field_80

        Returns:
            str: the value of `field_80` or None if not set
        """
        return self._data["Field 80"]

    @field_80.setter
    def field_80(self, value=None):
        """  Corresponds to IDD Field `field_80`

        Args:
            value (str): value for IDD Field `field_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_80`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_80`')

        self._data["Field 80"] = value

    @property
    def field_81(self):
        """Get field_81

        Returns:
            str: the value of `field_81` or None if not set
        """
        return self._data["Field 81"]

    @field_81.setter
    def field_81(self, value=None):
        """  Corresponds to IDD Field `field_81`

        Args:
            value (str): value for IDD Field `field_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_81`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_81`')

        self._data["Field 81"] = value

    @property
    def field_82(self):
        """Get field_82

        Returns:
            str: the value of `field_82` or None if not set
        """
        return self._data["Field 82"]

    @field_82.setter
    def field_82(self, value=None):
        """  Corresponds to IDD Field `field_82`

        Args:
            value (str): value for IDD Field `field_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_82`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_82`')

        self._data["Field 82"] = value

    @property
    def field_83(self):
        """Get field_83

        Returns:
            str: the value of `field_83` or None if not set
        """
        return self._data["Field 83"]

    @field_83.setter
    def field_83(self, value=None):
        """  Corresponds to IDD Field `field_83`

        Args:
            value (str): value for IDD Field `field_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_83`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_83`')

        self._data["Field 83"] = value

    @property
    def field_84(self):
        """Get field_84

        Returns:
            str: the value of `field_84` or None if not set
        """
        return self._data["Field 84"]

    @field_84.setter
    def field_84(self, value=None):
        """  Corresponds to IDD Field `field_84`

        Args:
            value (str): value for IDD Field `field_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_84`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_84`')

        self._data["Field 84"] = value

    @property
    def field_85(self):
        """Get field_85

        Returns:
            str: the value of `field_85` or None if not set
        """
        return self._data["Field 85"]

    @field_85.setter
    def field_85(self, value=None):
        """  Corresponds to IDD Field `field_85`

        Args:
            value (str): value for IDD Field `field_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_85`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_85`')

        self._data["Field 85"] = value

    @property
    def field_86(self):
        """Get field_86

        Returns:
            str: the value of `field_86` or None if not set
        """
        return self._data["Field 86"]

    @field_86.setter
    def field_86(self, value=None):
        """  Corresponds to IDD Field `field_86`

        Args:
            value (str): value for IDD Field `field_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_86`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_86`')

        self._data["Field 86"] = value

    @property
    def field_87(self):
        """Get field_87

        Returns:
            str: the value of `field_87` or None if not set
        """
        return self._data["Field 87"]

    @field_87.setter
    def field_87(self, value=None):
        """  Corresponds to IDD Field `field_87`

        Args:
            value (str): value for IDD Field `field_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_87`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_87`')

        self._data["Field 87"] = value

    @property
    def field_88(self):
        """Get field_88

        Returns:
            str: the value of `field_88` or None if not set
        """
        return self._data["Field 88"]

    @field_88.setter
    def field_88(self, value=None):
        """  Corresponds to IDD Field `field_88`

        Args:
            value (str): value for IDD Field `field_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_88`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_88`')

        self._data["Field 88"] = value

    @property
    def field_89(self):
        """Get field_89

        Returns:
            str: the value of `field_89` or None if not set
        """
        return self._data["Field 89"]

    @field_89.setter
    def field_89(self, value=None):
        """  Corresponds to IDD Field `field_89`

        Args:
            value (str): value for IDD Field `field_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_89`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_89`')

        self._data["Field 89"] = value

    @property
    def field_90(self):
        """Get field_90

        Returns:
            str: the value of `field_90` or None if not set
        """
        return self._data["Field 90"]

    @field_90.setter
    def field_90(self, value=None):
        """  Corresponds to IDD Field `field_90`

        Args:
            value (str): value for IDD Field `field_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_90`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_90`')

        self._data["Field 90"] = value

    @property
    def field_91(self):
        """Get field_91

        Returns:
            str: the value of `field_91` or None if not set
        """
        return self._data["Field 91"]

    @field_91.setter
    def field_91(self, value=None):
        """  Corresponds to IDD Field `field_91`

        Args:
            value (str): value for IDD Field `field_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_91`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_91`')

        self._data["Field 91"] = value

    @property
    def field_92(self):
        """Get field_92

        Returns:
            str: the value of `field_92` or None if not set
        """
        return self._data["Field 92"]

    @field_92.setter
    def field_92(self, value=None):
        """  Corresponds to IDD Field `field_92`

        Args:
            value (str): value for IDD Field `field_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_92`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_92`')

        self._data["Field 92"] = value

    @property
    def field_93(self):
        """Get field_93

        Returns:
            str: the value of `field_93` or None if not set
        """
        return self._data["Field 93"]

    @field_93.setter
    def field_93(self, value=None):
        """  Corresponds to IDD Field `field_93`

        Args:
            value (str): value for IDD Field `field_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_93`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_93`')

        self._data["Field 93"] = value

    @property
    def field_94(self):
        """Get field_94

        Returns:
            str: the value of `field_94` or None if not set
        """
        return self._data["Field 94"]

    @field_94.setter
    def field_94(self, value=None):
        """  Corresponds to IDD Field `field_94`

        Args:
            value (str): value for IDD Field `field_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_94`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_94`')

        self._data["Field 94"] = value

    @property
    def field_95(self):
        """Get field_95

        Returns:
            str: the value of `field_95` or None if not set
        """
        return self._data["Field 95"]

    @field_95.setter
    def field_95(self, value=None):
        """  Corresponds to IDD Field `field_95`

        Args:
            value (str): value for IDD Field `field_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_95`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_95`')

        self._data["Field 95"] = value

    @property
    def field_96(self):
        """Get field_96

        Returns:
            str: the value of `field_96` or None if not set
        """
        return self._data["Field 96"]

    @field_96.setter
    def field_96(self, value=None):
        """  Corresponds to IDD Field `field_96`

        Args:
            value (str): value for IDD Field `field_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_96`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_96`')

        self._data["Field 96"] = value

    @property
    def field_97(self):
        """Get field_97

        Returns:
            str: the value of `field_97` or None if not set
        """
        return self._data["Field 97"]

    @field_97.setter
    def field_97(self, value=None):
        """  Corresponds to IDD Field `field_97`

        Args:
            value (str): value for IDD Field `field_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_97`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_97`')

        self._data["Field 97"] = value

    @property
    def field_98(self):
        """Get field_98

        Returns:
            str: the value of `field_98` or None if not set
        """
        return self._data["Field 98"]

    @field_98.setter
    def field_98(self, value=None):
        """  Corresponds to IDD Field `field_98`

        Args:
            value (str): value for IDD Field `field_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_98`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_98`')

        self._data["Field 98"] = value

    @property
    def field_99(self):
        """Get field_99

        Returns:
            str: the value of `field_99` or None if not set
        """
        return self._data["Field 99"]

    @field_99.setter
    def field_99(self, value=None):
        """  Corresponds to IDD Field `field_99`

        Args:
            value (str): value for IDD Field `field_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_99`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_99`')

        self._data["Field 99"] = value

    @property
    def field_100(self):
        """Get field_100

        Returns:
            str: the value of `field_100` or None if not set
        """
        return self._data["Field 100"]

    @field_100.setter
    def field_100(self, value=None):
        """  Corresponds to IDD Field `field_100`

        Args:
            value (str): value for IDD Field `field_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_100`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_100`')

        self._data["Field 100"] = value

    @property
    def field_101(self):
        """Get field_101

        Returns:
            str: the value of `field_101` or None if not set
        """
        return self._data["Field 101"]

    @field_101.setter
    def field_101(self, value=None):
        """  Corresponds to IDD Field `field_101`

        Args:
            value (str): value for IDD Field `field_101`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_101`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_101`')

        self._data["Field 101"] = value

    @property
    def field_102(self):
        """Get field_102

        Returns:
            str: the value of `field_102` or None if not set
        """
        return self._data["Field 102"]

    @field_102.setter
    def field_102(self, value=None):
        """  Corresponds to IDD Field `field_102`

        Args:
            value (str): value for IDD Field `field_102`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_102`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_102`')

        self._data["Field 102"] = value

    @property
    def field_103(self):
        """Get field_103

        Returns:
            str: the value of `field_103` or None if not set
        """
        return self._data["Field 103"]

    @field_103.setter
    def field_103(self, value=None):
        """  Corresponds to IDD Field `field_103`

        Args:
            value (str): value for IDD Field `field_103`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_103`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_103`')

        self._data["Field 103"] = value

    @property
    def field_104(self):
        """Get field_104

        Returns:
            str: the value of `field_104` or None if not set
        """
        return self._data["Field 104"]

    @field_104.setter
    def field_104(self, value=None):
        """  Corresponds to IDD Field `field_104`

        Args:
            value (str): value for IDD Field `field_104`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_104`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_104`')

        self._data["Field 104"] = value

    @property
    def field_105(self):
        """Get field_105

        Returns:
            str: the value of `field_105` or None if not set
        """
        return self._data["Field 105"]

    @field_105.setter
    def field_105(self, value=None):
        """  Corresponds to IDD Field `field_105`

        Args:
            value (str): value for IDD Field `field_105`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_105`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_105`')

        self._data["Field 105"] = value

    @property
    def field_106(self):
        """Get field_106

        Returns:
            str: the value of `field_106` or None if not set
        """
        return self._data["Field 106"]

    @field_106.setter
    def field_106(self, value=None):
        """  Corresponds to IDD Field `field_106`

        Args:
            value (str): value for IDD Field `field_106`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_106`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_106`')

        self._data["Field 106"] = value

    @property
    def field_107(self):
        """Get field_107

        Returns:
            str: the value of `field_107` or None if not set
        """
        return self._data["Field 107"]

    @field_107.setter
    def field_107(self, value=None):
        """  Corresponds to IDD Field `field_107`

        Args:
            value (str): value for IDD Field `field_107`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_107`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_107`')

        self._data["Field 107"] = value

    @property
    def field_108(self):
        """Get field_108

        Returns:
            str: the value of `field_108` or None if not set
        """
        return self._data["Field 108"]

    @field_108.setter
    def field_108(self, value=None):
        """  Corresponds to IDD Field `field_108`

        Args:
            value (str): value for IDD Field `field_108`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_108`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_108`')

        self._data["Field 108"] = value

    @property
    def field_109(self):
        """Get field_109

        Returns:
            str: the value of `field_109` or None if not set
        """
        return self._data["Field 109"]

    @field_109.setter
    def field_109(self, value=None):
        """  Corresponds to IDD Field `field_109`

        Args:
            value (str): value for IDD Field `field_109`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_109`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_109`')

        self._data["Field 109"] = value

    @property
    def field_110(self):
        """Get field_110

        Returns:
            str: the value of `field_110` or None if not set
        """
        return self._data["Field 110"]

    @field_110.setter
    def field_110(self, value=None):
        """  Corresponds to IDD Field `field_110`

        Args:
            value (str): value for IDD Field `field_110`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_110`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_110`')

        self._data["Field 110"] = value

    @property
    def field_111(self):
        """Get field_111

        Returns:
            str: the value of `field_111` or None if not set
        """
        return self._data["Field 111"]

    @field_111.setter
    def field_111(self, value=None):
        """  Corresponds to IDD Field `field_111`

        Args:
            value (str): value for IDD Field `field_111`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_111`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_111`')

        self._data["Field 111"] = value

    @property
    def field_112(self):
        """Get field_112

        Returns:
            str: the value of `field_112` or None if not set
        """
        return self._data["Field 112"]

    @field_112.setter
    def field_112(self, value=None):
        """  Corresponds to IDD Field `field_112`

        Args:
            value (str): value for IDD Field `field_112`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_112`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_112`')

        self._data["Field 112"] = value

    @property
    def field_113(self):
        """Get field_113

        Returns:
            str: the value of `field_113` or None if not set
        """
        return self._data["Field 113"]

    @field_113.setter
    def field_113(self, value=None):
        """  Corresponds to IDD Field `field_113`

        Args:
            value (str): value for IDD Field `field_113`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_113`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_113`')

        self._data["Field 113"] = value

    @property
    def field_114(self):
        """Get field_114

        Returns:
            str: the value of `field_114` or None if not set
        """
        return self._data["Field 114"]

    @field_114.setter
    def field_114(self, value=None):
        """  Corresponds to IDD Field `field_114`

        Args:
            value (str): value for IDD Field `field_114`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_114`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_114`')

        self._data["Field 114"] = value

    @property
    def field_115(self):
        """Get field_115

        Returns:
            str: the value of `field_115` or None if not set
        """
        return self._data["Field 115"]

    @field_115.setter
    def field_115(self, value=None):
        """  Corresponds to IDD Field `field_115`

        Args:
            value (str): value for IDD Field `field_115`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_115`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_115`')

        self._data["Field 115"] = value

    @property
    def field_116(self):
        """Get field_116

        Returns:
            str: the value of `field_116` or None if not set
        """
        return self._data["Field 116"]

    @field_116.setter
    def field_116(self, value=None):
        """  Corresponds to IDD Field `field_116`

        Args:
            value (str): value for IDD Field `field_116`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_116`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_116`')

        self._data["Field 116"] = value

    @property
    def field_117(self):
        """Get field_117

        Returns:
            str: the value of `field_117` or None if not set
        """
        return self._data["Field 117"]

    @field_117.setter
    def field_117(self, value=None):
        """  Corresponds to IDD Field `field_117`

        Args:
            value (str): value for IDD Field `field_117`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_117`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_117`')

        self._data["Field 117"] = value

    @property
    def field_118(self):
        """Get field_118

        Returns:
            str: the value of `field_118` or None if not set
        """
        return self._data["Field 118"]

    @field_118.setter
    def field_118(self, value=None):
        """  Corresponds to IDD Field `field_118`

        Args:
            value (str): value for IDD Field `field_118`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_118`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_118`')

        self._data["Field 118"] = value

    @property
    def field_119(self):
        """Get field_119

        Returns:
            str: the value of `field_119` or None if not set
        """
        return self._data["Field 119"]

    @field_119.setter
    def field_119(self, value=None):
        """  Corresponds to IDD Field `field_119`

        Args:
            value (str): value for IDD Field `field_119`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_119`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_119`')

        self._data["Field 119"] = value

    @property
    def field_120(self):
        """Get field_120

        Returns:
            str: the value of `field_120` or None if not set
        """
        return self._data["Field 120"]

    @field_120.setter
    def field_120(self, value=None):
        """  Corresponds to IDD Field `field_120`

        Args:
            value (str): value for IDD Field `field_120`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_120`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_120`')

        self._data["Field 120"] = value

    @property
    def field_121(self):
        """Get field_121

        Returns:
            str: the value of `field_121` or None if not set
        """
        return self._data["Field 121"]

    @field_121.setter
    def field_121(self, value=None):
        """  Corresponds to IDD Field `field_121`

        Args:
            value (str): value for IDD Field `field_121`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_121`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_121`')

        self._data["Field 121"] = value

    @property
    def field_122(self):
        """Get field_122

        Returns:
            str: the value of `field_122` or None if not set
        """
        return self._data["Field 122"]

    @field_122.setter
    def field_122(self, value=None):
        """  Corresponds to IDD Field `field_122`

        Args:
            value (str): value for IDD Field `field_122`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_122`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_122`')

        self._data["Field 122"] = value

    @property
    def field_123(self):
        """Get field_123

        Returns:
            str: the value of `field_123` or None if not set
        """
        return self._data["Field 123"]

    @field_123.setter
    def field_123(self, value=None):
        """  Corresponds to IDD Field `field_123`

        Args:
            value (str): value for IDD Field `field_123`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_123`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_123`')

        self._data["Field 123"] = value

    @property
    def field_124(self):
        """Get field_124

        Returns:
            str: the value of `field_124` or None if not set
        """
        return self._data["Field 124"]

    @field_124.setter
    def field_124(self, value=None):
        """  Corresponds to IDD Field `field_124`

        Args:
            value (str): value for IDD Field `field_124`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_124`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_124`')

        self._data["Field 124"] = value

    @property
    def field_125(self):
        """Get field_125

        Returns:
            str: the value of `field_125` or None if not set
        """
        return self._data["Field 125"]

    @field_125.setter
    def field_125(self, value=None):
        """  Corresponds to IDD Field `field_125`

        Args:
            value (str): value for IDD Field `field_125`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_125`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_125`')

        self._data["Field 125"] = value

    @property
    def field_126(self):
        """Get field_126

        Returns:
            str: the value of `field_126` or None if not set
        """
        return self._data["Field 126"]

    @field_126.setter
    def field_126(self, value=None):
        """  Corresponds to IDD Field `field_126`

        Args:
            value (str): value for IDD Field `field_126`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_126`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_126`')

        self._data["Field 126"] = value

    @property
    def field_127(self):
        """Get field_127

        Returns:
            str: the value of `field_127` or None if not set
        """
        return self._data["Field 127"]

    @field_127.setter
    def field_127(self, value=None):
        """  Corresponds to IDD Field `field_127`

        Args:
            value (str): value for IDD Field `field_127`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_127`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_127`')

        self._data["Field 127"] = value

    @property
    def field_128(self):
        """Get field_128

        Returns:
            str: the value of `field_128` or None if not set
        """
        return self._data["Field 128"]

    @field_128.setter
    def field_128(self, value=None):
        """  Corresponds to IDD Field `field_128`

        Args:
            value (str): value for IDD Field `field_128`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_128`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_128`')

        self._data["Field 128"] = value

    @property
    def field_129(self):
        """Get field_129

        Returns:
            str: the value of `field_129` or None if not set
        """
        return self._data["Field 129"]

    @field_129.setter
    def field_129(self, value=None):
        """  Corresponds to IDD Field `field_129`

        Args:
            value (str): value for IDD Field `field_129`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_129`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_129`')

        self._data["Field 129"] = value

    @property
    def field_130(self):
        """Get field_130

        Returns:
            str: the value of `field_130` or None if not set
        """
        return self._data["Field 130"]

    @field_130.setter
    def field_130(self, value=None):
        """  Corresponds to IDD Field `field_130`

        Args:
            value (str): value for IDD Field `field_130`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_130`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_130`')

        self._data["Field 130"] = value

    @property
    def field_131(self):
        """Get field_131

        Returns:
            str: the value of `field_131` or None if not set
        """
        return self._data["Field 131"]

    @field_131.setter
    def field_131(self, value=None):
        """  Corresponds to IDD Field `field_131`

        Args:
            value (str): value for IDD Field `field_131`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_131`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_131`')

        self._data["Field 131"] = value

    @property
    def field_132(self):
        """Get field_132

        Returns:
            str: the value of `field_132` or None if not set
        """
        return self._data["Field 132"]

    @field_132.setter
    def field_132(self, value=None):
        """  Corresponds to IDD Field `field_132`

        Args:
            value (str): value for IDD Field `field_132`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_132`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_132`')

        self._data["Field 132"] = value

    @property
    def field_133(self):
        """Get field_133

        Returns:
            str: the value of `field_133` or None if not set
        """
        return self._data["Field 133"]

    @field_133.setter
    def field_133(self, value=None):
        """  Corresponds to IDD Field `field_133`

        Args:
            value (str): value for IDD Field `field_133`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_133`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_133`')

        self._data["Field 133"] = value

    @property
    def field_134(self):
        """Get field_134

        Returns:
            str: the value of `field_134` or None if not set
        """
        return self._data["Field 134"]

    @field_134.setter
    def field_134(self, value=None):
        """  Corresponds to IDD Field `field_134`

        Args:
            value (str): value for IDD Field `field_134`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_134`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_134`')

        self._data["Field 134"] = value

    @property
    def field_135(self):
        """Get field_135

        Returns:
            str: the value of `field_135` or None if not set
        """
        return self._data["Field 135"]

    @field_135.setter
    def field_135(self, value=None):
        """  Corresponds to IDD Field `field_135`

        Args:
            value (str): value for IDD Field `field_135`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_135`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_135`')

        self._data["Field 135"] = value

    @property
    def field_136(self):
        """Get field_136

        Returns:
            str: the value of `field_136` or None if not set
        """
        return self._data["Field 136"]

    @field_136.setter
    def field_136(self, value=None):
        """  Corresponds to IDD Field `field_136`

        Args:
            value (str): value for IDD Field `field_136`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_136`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_136`')

        self._data["Field 136"] = value

    @property
    def field_137(self):
        """Get field_137

        Returns:
            str: the value of `field_137` or None if not set
        """
        return self._data["Field 137"]

    @field_137.setter
    def field_137(self, value=None):
        """  Corresponds to IDD Field `field_137`

        Args:
            value (str): value for IDD Field `field_137`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_137`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_137`')

        self._data["Field 137"] = value

    @property
    def field_138(self):
        """Get field_138

        Returns:
            str: the value of `field_138` or None if not set
        """
        return self._data["Field 138"]

    @field_138.setter
    def field_138(self, value=None):
        """  Corresponds to IDD Field `field_138`

        Args:
            value (str): value for IDD Field `field_138`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_138`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_138`')

        self._data["Field 138"] = value

    @property
    def field_139(self):
        """Get field_139

        Returns:
            str: the value of `field_139` or None if not set
        """
        return self._data["Field 139"]

    @field_139.setter
    def field_139(self, value=None):
        """  Corresponds to IDD Field `field_139`

        Args:
            value (str): value for IDD Field `field_139`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_139`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_139`')

        self._data["Field 139"] = value

    @property
    def field_140(self):
        """Get field_140

        Returns:
            str: the value of `field_140` or None if not set
        """
        return self._data["Field 140"]

    @field_140.setter
    def field_140(self, value=None):
        """  Corresponds to IDD Field `field_140`

        Args:
            value (str): value for IDD Field `field_140`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_140`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_140`')

        self._data["Field 140"] = value

    @property
    def field_141(self):
        """Get field_141

        Returns:
            str: the value of `field_141` or None if not set
        """
        return self._data["Field 141"]

    @field_141.setter
    def field_141(self, value=None):
        """  Corresponds to IDD Field `field_141`

        Args:
            value (str): value for IDD Field `field_141`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_141`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_141`')

        self._data["Field 141"] = value

    @property
    def field_142(self):
        """Get field_142

        Returns:
            str: the value of `field_142` or None if not set
        """
        return self._data["Field 142"]

    @field_142.setter
    def field_142(self, value=None):
        """  Corresponds to IDD Field `field_142`

        Args:
            value (str): value for IDD Field `field_142`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_142`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_142`')

        self._data["Field 142"] = value

    @property
    def field_143(self):
        """Get field_143

        Returns:
            str: the value of `field_143` or None if not set
        """
        return self._data["Field 143"]

    @field_143.setter
    def field_143(self, value=None):
        """  Corresponds to IDD Field `field_143`

        Args:
            value (str): value for IDD Field `field_143`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_143`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_143`')

        self._data["Field 143"] = value

    @property
    def field_144(self):
        """Get field_144

        Returns:
            str: the value of `field_144` or None if not set
        """
        return self._data["Field 144"]

    @field_144.setter
    def field_144(self, value=None):
        """  Corresponds to IDD Field `field_144`

        Args:
            value (str): value for IDD Field `field_144`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_144`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_144`')

        self._data["Field 144"] = value

    @property
    def field_145(self):
        """Get field_145

        Returns:
            str: the value of `field_145` or None if not set
        """
        return self._data["Field 145"]

    @field_145.setter
    def field_145(self, value=None):
        """  Corresponds to IDD Field `field_145`

        Args:
            value (str): value for IDD Field `field_145`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_145`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_145`')

        self._data["Field 145"] = value

    @property
    def field_146(self):
        """Get field_146

        Returns:
            str: the value of `field_146` or None if not set
        """
        return self._data["Field 146"]

    @field_146.setter
    def field_146(self, value=None):
        """  Corresponds to IDD Field `field_146`

        Args:
            value (str): value for IDD Field `field_146`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_146`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_146`')

        self._data["Field 146"] = value

    @property
    def field_147(self):
        """Get field_147

        Returns:
            str: the value of `field_147` or None if not set
        """
        return self._data["Field 147"]

    @field_147.setter
    def field_147(self, value=None):
        """  Corresponds to IDD Field `field_147`

        Args:
            value (str): value for IDD Field `field_147`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_147`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_147`')

        self._data["Field 147"] = value

    @property
    def field_148(self):
        """Get field_148

        Returns:
            str: the value of `field_148` or None if not set
        """
        return self._data["Field 148"]

    @field_148.setter
    def field_148(self, value=None):
        """  Corresponds to IDD Field `field_148`

        Args:
            value (str): value for IDD Field `field_148`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_148`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_148`')

        self._data["Field 148"] = value

    @property
    def field_149(self):
        """Get field_149

        Returns:
            str: the value of `field_149` or None if not set
        """
        return self._data["Field 149"]

    @field_149.setter
    def field_149(self, value=None):
        """  Corresponds to IDD Field `field_149`

        Args:
            value (str): value for IDD Field `field_149`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_149`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_149`')

        self._data["Field 149"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @property
    def field_150(self):
        """Get field_150

        Returns:
            str: the value of `field_150` or None if not set
        """
        return self._data["Field 150"]

    @field_150.setter
    def field_150(self, value=None):
        """  Corresponds to IDD Field `field_150`

        Args:
            value (str): value for IDD Field `field_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `field_150`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `field_150`')

        self._data["Field 150"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.schedule_type_limits_name))
        out.append(self._to_str(self.field_1))
        out.append(self._to_str(self.field_2))
        out.append(self._to_str(self.field_3))
        out.append(self._to_str(self.field_4))
        out.append(self._to_str(self.field_5))
        out.append(self._to_str(self.field_6))
        out.append(self._to_str(self.field_7))
        out.append(self._to_str(self.field_8))
        out.append(self._to_str(self.field_9))
        out.append(self._to_str(self.field_10))
        out.append(self._to_str(self.field_11))
        out.append(self._to_str(self.field_12))
        out.append(self._to_str(self.field_13))
        out.append(self._to_str(self.field_14))
        out.append(self._to_str(self.field_15))
        out.append(self._to_str(self.field_16))
        out.append(self._to_str(self.field_17))
        out.append(self._to_str(self.field_18))
        out.append(self._to_str(self.field_19))
        out.append(self._to_str(self.field_20))
        out.append(self._to_str(self.field_21))
        out.append(self._to_str(self.field_22))
        out.append(self._to_str(self.field_23))
        out.append(self._to_str(self.field_24))
        out.append(self._to_str(self.field_25))
        out.append(self._to_str(self.field_26))
        out.append(self._to_str(self.field_27))
        out.append(self._to_str(self.field_28))
        out.append(self._to_str(self.field_29))
        out.append(self._to_str(self.field_30))
        out.append(self._to_str(self.field_31))
        out.append(self._to_str(self.field_32))
        out.append(self._to_str(self.field_33))
        out.append(self._to_str(self.field_34))
        out.append(self._to_str(self.field_35))
        out.append(self._to_str(self.field_36))
        out.append(self._to_str(self.field_37))
        out.append(self._to_str(self.field_38))
        out.append(self._to_str(self.field_39))
        out.append(self._to_str(self.field_40))
        out.append(self._to_str(self.field_41))
        out.append(self._to_str(self.field_42))
        out.append(self._to_str(self.field_43))
        out.append(self._to_str(self.field_44))
        out.append(self._to_str(self.field_45))
        out.append(self._to_str(self.field_46))
        out.append(self._to_str(self.field_47))
        out.append(self._to_str(self.field_48))
        out.append(self._to_str(self.field_49))
        out.append(self._to_str(self.field_50))
        out.append(self._to_str(self.field_51))
        out.append(self._to_str(self.field_52))
        out.append(self._to_str(self.field_53))
        out.append(self._to_str(self.field_54))
        out.append(self._to_str(self.field_55))
        out.append(self._to_str(self.field_56))
        out.append(self._to_str(self.field_57))
        out.append(self._to_str(self.field_58))
        out.append(self._to_str(self.field_59))
        out.append(self._to_str(self.field_60))
        out.append(self._to_str(self.field_61))
        out.append(self._to_str(self.field_62))
        out.append(self._to_str(self.field_63))
        out.append(self._to_str(self.field_64))
        out.append(self._to_str(self.field_65))
        out.append(self._to_str(self.field_66))
        out.append(self._to_str(self.field_67))
        out.append(self._to_str(self.field_68))
        out.append(self._to_str(self.field_69))
        out.append(self._to_str(self.field_70))
        out.append(self._to_str(self.field_71))
        out.append(self._to_str(self.field_72))
        out.append(self._to_str(self.field_73))
        out.append(self._to_str(self.field_74))
        out.append(self._to_str(self.field_75))
        out.append(self._to_str(self.field_76))
        out.append(self._to_str(self.field_77))
        out.append(self._to_str(self.field_78))
        out.append(self._to_str(self.field_79))
        out.append(self._to_str(self.field_80))
        out.append(self._to_str(self.field_81))
        out.append(self._to_str(self.field_82))
        out.append(self._to_str(self.field_83))
        out.append(self._to_str(self.field_84))
        out.append(self._to_str(self.field_85))
        out.append(self._to_str(self.field_86))
        out.append(self._to_str(self.field_87))
        out.append(self._to_str(self.field_88))
        out.append(self._to_str(self.field_89))
        out.append(self._to_str(self.field_90))
        out.append(self._to_str(self.field_91))
        out.append(self._to_str(self.field_92))
        out.append(self._to_str(self.field_93))
        out.append(self._to_str(self.field_94))
        out.append(self._to_str(self.field_95))
        out.append(self._to_str(self.field_96))
        out.append(self._to_str(self.field_97))
        out.append(self._to_str(self.field_98))
        out.append(self._to_str(self.field_99))
        out.append(self._to_str(self.field_100))
        out.append(self._to_str(self.field_101))
        out.append(self._to_str(self.field_102))
        out.append(self._to_str(self.field_103))
        out.append(self._to_str(self.field_104))
        out.append(self._to_str(self.field_105))
        out.append(self._to_str(self.field_106))
        out.append(self._to_str(self.field_107))
        out.append(self._to_str(self.field_108))
        out.append(self._to_str(self.field_109))
        out.append(self._to_str(self.field_110))
        out.append(self._to_str(self.field_111))
        out.append(self._to_str(self.field_112))
        out.append(self._to_str(self.field_113))
        out.append(self._to_str(self.field_114))
        out.append(self._to_str(self.field_115))
        out.append(self._to_str(self.field_116))
        out.append(self._to_str(self.field_117))
        out.append(self._to_str(self.field_118))
        out.append(self._to_str(self.field_119))
        out.append(self._to_str(self.field_120))
        out.append(self._to_str(self.field_121))
        out.append(self._to_str(self.field_122))
        out.append(self._to_str(self.field_123))
        out.append(self._to_str(self.field_124))
        out.append(self._to_str(self.field_125))
        out.append(self._to_str(self.field_126))
        out.append(self._to_str(self.field_127))
        out.append(self._to_str(self.field_128))
        out.append(self._to_str(self.field_129))
        out.append(self._to_str(self.field_130))
        out.append(self._to_str(self.field_131))
        out.append(self._to_str(self.field_132))
        out.append(self._to_str(self.field_133))
        out.append(self._to_str(self.field_134))
        out.append(self._to_str(self.field_135))
        out.append(self._to_str(self.field_136))
        out.append(self._to_str(self.field_137))
        out.append(self._to_str(self.field_138))
        out.append(self._to_str(self.field_139))
        out.append(self._to_str(self.field_140))
        out.append(self._to_str(self.field_141))
        out.append(self._to_str(self.field_142))
        out.append(self._to_str(self.field_143))
        out.append(self._to_str(self.field_144))
        out.append(self._to_str(self.field_145))
        out.append(self._to_str(self.field_146))
        out.append(self._to_str(self.field_147))
        out.append(self._to_str(self.field_148))
        out.append(self._to_str(self.field_149))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        out.append(self._to_str(self.field_150))
        return ",".join(out)

class ScheduleConstant(object):
    """ Corresponds to IDD object `Schedule:Constant`
        Constant hourly value for entire year.
    """
    internal_name = "Schedule:Constant"
    field_count = 3

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:Constant`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Schedule Type Limits Name"] = None
        self._data["Hourly Value"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_type_limits_name = None
        else:
            self.schedule_type_limits_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hourly_value = None
        else:
            self.hourly_value = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def schedule_type_limits_name(self):
        """Get schedule_type_limits_name

        Returns:
            str: the value of `schedule_type_limits_name` or None if not set
        """
        return self._data["Schedule Type Limits Name"]

    @schedule_type_limits_name.setter
    def schedule_type_limits_name(self, value=None):
        """  Corresponds to IDD Field `schedule_type_limits_name`

        Args:
            value (str): value for IDD Field `schedule_type_limits_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_type_limits_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_type_limits_name`')

        self._data["Schedule Type Limits Name"] = value

    @property
    def hourly_value(self):
        """Get hourly_value

        Returns:
            float: the value of `hourly_value` or None if not set
        """
        return self._data["Hourly Value"]

    @hourly_value.setter
    def hourly_value(self, value=0.0 ):
        """  Corresponds to IDD Field `hourly_value`

        Args:
            value (float): value for IDD Field `hourly_value`
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hourly_value`'.format(value))

        self._data["Hourly Value"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.schedule_type_limits_name))
        out.append(self._to_str(self.hourly_value))
        return ",".join(out)

class ScheduleFile(object):
    """ Corresponds to IDD object `Schedule:File`
        A Schedule:File points to a text computer file that has 8760-8784 hours of data.
    """
    internal_name = "Schedule:File"
    field_count = 9

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Schedule:File`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Schedule Type Limits Name"] = None
        self._data["File Name"] = None
        self._data["Column Number"] = None
        self._data["Rows to Skip at Top"] = None
        self._data["Number of Hours of Data"] = None
        self._data["Column Separator"] = None
        self._data["Interpolate to Timestep"] = None
        self._data["Minutes per Item"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_type_limits_name = None
        else:
            self.schedule_type_limits_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.file_name = None
        else:
            self.file_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.column_number = None
        else:
            self.column_number = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rows_to_skip_at_top = None
        else:
            self.rows_to_skip_at_top = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_hours_of_data = None
        else:
            self.number_of_hours_of_data = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.column_separator = None
        else:
            self.column_separator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interpolate_to_timestep = None
        else:
            self.interpolate_to_timestep = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minutes_per_item = None
        else:
            self.minutes_per_item = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def schedule_type_limits_name(self):
        """Get schedule_type_limits_name

        Returns:
            str: the value of `schedule_type_limits_name` or None if not set
        """
        return self._data["Schedule Type Limits Name"]

    @schedule_type_limits_name.setter
    def schedule_type_limits_name(self, value=None):
        """  Corresponds to IDD Field `schedule_type_limits_name`

        Args:
            value (str): value for IDD Field `schedule_type_limits_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_type_limits_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_type_limits_name`')

        self._data["Schedule Type Limits Name"] = value

    @property
    def file_name(self):
        """Get file_name

        Returns:
            str: the value of `file_name` or None if not set
        """
        return self._data["File Name"]

    @file_name.setter
    def file_name(self, value=None):
        """  Corresponds to IDD Field `file_name`

        Args:
            value (str): value for IDD Field `file_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `file_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `file_name`')

        self._data["File Name"] = value

    @property
    def column_number(self):
        """Get column_number

        Returns:
            int: the value of `column_number` or None if not set
        """
        return self._data["Column Number"]

    @column_number.setter
    def column_number(self, value=None):
        """  Corresponds to IDD Field `column_number`

        Args:
            value (int): value for IDD Field `column_number`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `column_number`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `column_number`')

        self._data["Column Number"] = value

    @property
    def rows_to_skip_at_top(self):
        """Get rows_to_skip_at_top

        Returns:
            int: the value of `rows_to_skip_at_top` or None if not set
        """
        return self._data["Rows to Skip at Top"]

    @rows_to_skip_at_top.setter
    def rows_to_skip_at_top(self, value=None):
        """  Corresponds to IDD Field `rows_to_skip_at_top`

        Args:
            value (int): value for IDD Field `rows_to_skip_at_top`
                value >= 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `rows_to_skip_at_top`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `rows_to_skip_at_top`')

        self._data["Rows to Skip at Top"] = value

    @property
    def number_of_hours_of_data(self):
        """Get number_of_hours_of_data

        Returns:
            float: the value of `number_of_hours_of_data` or None if not set
        """
        return self._data["Number of Hours of Data"]

    @number_of_hours_of_data.setter
    def number_of_hours_of_data(self, value=8760.0 ):
        """  Corresponds to IDD Field `number_of_hours_of_data`
        8760 hours does not account for leap years, 8784 does.
        should be either 8760 or 8784

        Args:
            value (float): value for IDD Field `number_of_hours_of_data`
                Default value: 8760.0
                value >= 8760.0
                value <= 8784.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_hours_of_data`'.format(value))
            if value < 8760.0:
                raise ValueError('value need to be greater or equal 8760.0 '
                                 'for field `number_of_hours_of_data`')
            if value > 8784.0:
                raise ValueError('value need to be smaller 8784.0 '
                                 'for field `number_of_hours_of_data`')

        self._data["Number of Hours of Data"] = value

    @property
    def column_separator(self):
        """Get column_separator

        Returns:
            str: the value of `column_separator` or None if not set
        """
        return self._data["Column Separator"]

    @column_separator.setter
    def column_separator(self, value="Comma"):
        """  Corresponds to IDD Field `column_separator`

        Args:
            value (str): value for IDD Field `column_separator`
                Accepted values are:
                      - Comma
                      - Tab
                      - Fixed
                      - Semicolon
                Default value: Comma
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `column_separator`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `column_separator`')
            vals = set()
            vals.add("Comma")
            vals.add("Tab")
            vals.add("Fixed")
            vals.add("Semicolon")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `column_separator`'.format(value))

        self._data["Column Separator"] = value

    @property
    def interpolate_to_timestep(self):
        """Get interpolate_to_timestep

        Returns:
            str: the value of `interpolate_to_timestep` or None if not set
        """
        return self._data["Interpolate to Timestep"]

    @interpolate_to_timestep.setter
    def interpolate_to_timestep(self, value="No"):
        """  Corresponds to IDD Field `interpolate_to_timestep`
        when the interval does not match the user specified timestep a "Yes" choice will average between the intervals request (to
        timestep resolution.  a "No" choice will use the interval value at the simulation timestep without regard to if it matches
        the boundary or not.

        Args:
            value (str): value for IDD Field `interpolate_to_timestep`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `interpolate_to_timestep`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `interpolate_to_timestep`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `interpolate_to_timestep`'.format(value))

        self._data["Interpolate to Timestep"] = value

    @property
    def minutes_per_item(self):
        """Get minutes_per_item

        Returns:
            int: the value of `minutes_per_item` or None if not set
        """
        return self._data["Minutes per Item"]

    @minutes_per_item.setter
    def minutes_per_item(self, value=None):
        """  Corresponds to IDD Field `minutes_per_item`
        Must be evenly divisible into 60

        Args:
            value (int): value for IDD Field `minutes_per_item`
                value >= 1
                value <= 60
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `minutes_per_item`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `minutes_per_item`')
            if value > 60:
                raise ValueError('value need to be smaller 60 '
                                 'for field `minutes_per_item`')

        self._data["Minutes per Item"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.schedule_type_limits_name))
        out.append(self._to_str(self.file_name))
        out.append(self._to_str(self.column_number))
        out.append(self._to_str(self.rows_to_skip_at_top))
        out.append(self._to_str(self.number_of_hours_of_data))
        out.append(self._to_str(self.column_separator))
        out.append(self._to_str(self.interpolate_to_timestep))
        out.append(self._to_str(self.minutes_per_item))
        return ",".join(out)