from collections import OrderedDict

class ZoneHvacIdealLoadsAirSystem(object):
    """ Corresponds to IDD object `ZoneHVAC:IdealLoadsAirSystem`
        Ideal system used to calculate loads without modeling a full HVAC system. All that is
        required for the ideal system are zone controls, zone equipment configurations, and
        the ideal loads system component. This component can be thought of as an ideal unit
        that mixes zone air with the specified amount of outdoor air and then adds or removes
        heat and moisture at 100% efficiency in order to meet the specified controls. Energy
        use is reported as DistrictHeating and DistrictCooling.
    """
    internal_name = "ZoneHVAC:IdealLoadsAirSystem"
    field_count = 27

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:IdealLoadsAirSystem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Supply Air Node Name"] = None
        self._data["Zone Exhaust Air Node Name"] = None
        self._data["Maximum Heating Supply Air Temperature"] = None
        self._data["Minimum Cooling Supply Air Temperature"] = None
        self._data["Maximum Heating Supply Air Humidity Ratio"] = None
        self._data["Minimum Cooling Supply Air Humidity Ratio"] = None
        self._data["Heating Limit"] = None
        self._data["Maximum Heating Air Flow Rate"] = None
        self._data["Maximum Sensible Heating Capacity"] = None
        self._data["Cooling Limit"] = None
        self._data["Maximum Cooling Air Flow Rate"] = None
        self._data["Maximum Total Cooling Capacity"] = None
        self._data["Heating Availability Schedule Name"] = None
        self._data["Cooling Availability Schedule Name"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Cooling Sensible Heat Ratio"] = None
        self._data["Humidification Control Type"] = None
        self._data["Design Specification Outdoor Air Object Name"] = None
        self._data["Outdoor Air Inlet Node Name"] = None
        self._data["Demand Controlled Ventilation Type"] = None
        self._data["Outdoor Air Economizer Type"] = None
        self._data["Heat Recovery Type"] = None
        self._data["Sensible Heat Recovery Effectiveness"] = None
        self._data["Latent Heat Recovery Effectiveness"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_supply_air_node_name = None
        else:
            self.zone_supply_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_exhaust_air_node_name = None
        else:
            self.zone_exhaust_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_supply_air_temperature = None
        else:
            self.maximum_heating_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_cooling_supply_air_temperature = None
        else:
            self.minimum_cooling_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_supply_air_humidity_ratio = None
        else:
            self.maximum_heating_supply_air_humidity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_cooling_supply_air_humidity_ratio = None
        else:
            self.minimum_cooling_supply_air_humidity_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_limit = None
        else:
            self.heating_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_heating_air_flow_rate = None
        else:
            self.maximum_heating_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_sensible_heating_capacity = None
        else:
            self.maximum_sensible_heating_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_limit = None
        else:
            self.cooling_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cooling_air_flow_rate = None
        else:
            self.maximum_cooling_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_total_cooling_capacity = None
        else:
            self.maximum_total_cooling_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_availability_schedule_name = None
        else:
            self.heating_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_availability_schedule_name = None
        else:
            self.cooling_availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_sensible_heat_ratio = None
        else:
            self.cooling_sensible_heat_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidification_control_type = None
        else:
            self.humidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_outdoor_air_object_name = None
        else:
            self.design_specification_outdoor_air_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_inlet_node_name = None
        else:
            self.outdoor_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_controlled_ventilation_type = None
        else:
            self.demand_controlled_ventilation_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_economizer_type = None
        else:
            self.outdoor_air_economizer_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_type = None
        else:
            self.heat_recovery_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sensible_heat_recovery_effectiveness = None
        else:
            self.sensible_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_heat_recovery_effectiveness = None
        else:
            self.latent_heat_recovery_effectiveness = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_supply_air_node_name(self):
        """Get zone_supply_air_node_name

        Returns:
            str: the value of `zone_supply_air_node_name` or None if not set
        """
        return self._data["Zone Supply Air Node Name"]

    @zone_supply_air_node_name.setter
    def zone_supply_air_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_supply_air_node_name`
        Must match a zone air inlet node name.

        Args:
            value (str): value for IDD Field `zone_supply_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_supply_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_supply_air_node_name`')

        self._data["Zone Supply Air Node Name"] = value

    @property
    def zone_exhaust_air_node_name(self):
        """Get zone_exhaust_air_node_name

        Returns:
            str: the value of `zone_exhaust_air_node_name` or None if not set
        """
        return self._data["Zone Exhaust Air Node Name"]

    @zone_exhaust_air_node_name.setter
    def zone_exhaust_air_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_exhaust_air_node_name`
        Should match a zone air exhaust node name.
        This field is optional, but is required if this
        this object is used with other forced air equipment.

        Args:
            value (str): value for IDD Field `zone_exhaust_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_exhaust_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_exhaust_air_node_name`')

        self._data["Zone Exhaust Air Node Name"] = value

    @property
    def maximum_heating_supply_air_temperature(self):
        """Get maximum_heating_supply_air_temperature

        Returns:
            float: the value of `maximum_heating_supply_air_temperature` or None if not set
        """
        return self._data["Maximum Heating Supply Air Temperature"]

    @maximum_heating_supply_air_temperature.setter
    def maximum_heating_supply_air_temperature(self, value=50.0 ):
        """  Corresponds to IDD Field `maximum_heating_supply_air_temperature`

        Args:
            value (float): value for IDD Field `maximum_heating_supply_air_temperature`
                Unit: C
                Default value: 50.0
                value > 0.0
                value < 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_supply_air_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_heating_supply_air_temperature`')
            if value >= 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_heating_supply_air_temperature`')

        self._data["Maximum Heating Supply Air Temperature"] = value

    @property
    def minimum_cooling_supply_air_temperature(self):
        """Get minimum_cooling_supply_air_temperature

        Returns:
            float: the value of `minimum_cooling_supply_air_temperature` or None if not set
        """
        return self._data["Minimum Cooling Supply Air Temperature"]

    @minimum_cooling_supply_air_temperature.setter
    def minimum_cooling_supply_air_temperature(self, value=13.0 ):
        """  Corresponds to IDD Field `minimum_cooling_supply_air_temperature`

        Args:
            value (float): value for IDD Field `minimum_cooling_supply_air_temperature`
                Unit: C
                Default value: 13.0
                value > -100.0
                value < 50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_cooling_supply_air_temperature`'.format(value))
            if value <= -100.0:
                raise ValueError('value need to be greater -100.0 '
                                 'for field `minimum_cooling_supply_air_temperature`')
            if value >= 50.0:
                raise ValueError('value need to be smaller 50.0 '
                                 'for field `minimum_cooling_supply_air_temperature`')

        self._data["Minimum Cooling Supply Air Temperature"] = value

    @property
    def maximum_heating_supply_air_humidity_ratio(self):
        """Get maximum_heating_supply_air_humidity_ratio

        Returns:
            float: the value of `maximum_heating_supply_air_humidity_ratio` or None if not set
        """
        return self._data["Maximum Heating Supply Air Humidity Ratio"]

    @maximum_heating_supply_air_humidity_ratio.setter
    def maximum_heating_supply_air_humidity_ratio(self, value=0.0156 ):
        """  Corresponds to IDD Field `maximum_heating_supply_air_humidity_ratio`

        Args:
            value (float): value for IDD Field `maximum_heating_supply_air_humidity_ratio`
                Unit: kgWater/kgDryAir
                Default value: 0.0156
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_supply_air_humidity_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_heating_supply_air_humidity_ratio`')

        self._data["Maximum Heating Supply Air Humidity Ratio"] = value

    @property
    def minimum_cooling_supply_air_humidity_ratio(self):
        """Get minimum_cooling_supply_air_humidity_ratio

        Returns:
            float: the value of `minimum_cooling_supply_air_humidity_ratio` or None if not set
        """
        return self._data["Minimum Cooling Supply Air Humidity Ratio"]

    @minimum_cooling_supply_air_humidity_ratio.setter
    def minimum_cooling_supply_air_humidity_ratio(self, value=0.0077 ):
        """  Corresponds to IDD Field `minimum_cooling_supply_air_humidity_ratio`

        Args:
            value (float): value for IDD Field `minimum_cooling_supply_air_humidity_ratio`
                Unit: kgWater/kgDryAir
                Default value: 0.0077
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_cooling_supply_air_humidity_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_cooling_supply_air_humidity_ratio`')

        self._data["Minimum Cooling Supply Air Humidity Ratio"] = value

    @property
    def heating_limit(self):
        """Get heating_limit

        Returns:
            str: the value of `heating_limit` or None if not set
        """
        return self._data["Heating Limit"]

    @heating_limit.setter
    def heating_limit(self, value="NoLimit"):
        """  Corresponds to IDD Field `heating_limit`

        Args:
            value (str): value for IDD Field `heating_limit`
                Accepted values are:
                      - NoLimit
                      - LimitFlowRate
                      - LimitCapacity
                      - LimitFlowRateAndCapacity
                Default value: NoLimit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_limit`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_limit`')
            vals = set()
            vals.add("NoLimit")
            vals.add("LimitFlowRate")
            vals.add("LimitCapacity")
            vals.add("LimitFlowRateAndCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_limit`'.format(value))

        self._data["Heating Limit"] = value

    @property
    def maximum_heating_air_flow_rate(self):
        """Get maximum_heating_air_flow_rate

        Returns:
            float: the value of `maximum_heating_air_flow_rate` or None if not set
        """
        return self._data["Maximum Heating Air Flow Rate"]

    @maximum_heating_air_flow_rate.setter
    def maximum_heating_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_heating_air_flow_rate`
        This field is ignored if Heating Limit = NoLimit
        If this field is blank, there is no limit.

        Args:
            value (float): value for IDD Field `maximum_heating_air_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_heating_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_heating_air_flow_rate`')

        self._data["Maximum Heating Air Flow Rate"] = value

    @property
    def maximum_sensible_heating_capacity(self):
        """Get maximum_sensible_heating_capacity

        Returns:
            float: the value of `maximum_sensible_heating_capacity` or None if not set
        """
        return self._data["Maximum Sensible Heating Capacity"]

    @maximum_sensible_heating_capacity.setter
    def maximum_sensible_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `maximum_sensible_heating_capacity`
        This field is ignored if Heating Limit = NoLimit
        If this field is blank, there is no limit.

        Args:
            value (float): value for IDD Field `maximum_sensible_heating_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_sensible_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_sensible_heating_capacity`')

        self._data["Maximum Sensible Heating Capacity"] = value

    @property
    def cooling_limit(self):
        """Get cooling_limit

        Returns:
            str: the value of `cooling_limit` or None if not set
        """
        return self._data["Cooling Limit"]

    @cooling_limit.setter
    def cooling_limit(self, value="NoLimit"):
        """  Corresponds to IDD Field `cooling_limit`

        Args:
            value (str): value for IDD Field `cooling_limit`
                Accepted values are:
                      - NoLimit
                      - LimitFlowRate
                      - LimitCapacity
                      - LimitFlowRateAndCapacity
                Default value: NoLimit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_limit`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_limit`')
            vals = set()
            vals.add("NoLimit")
            vals.add("LimitFlowRate")
            vals.add("LimitCapacity")
            vals.add("LimitFlowRateAndCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_limit`'.format(value))

        self._data["Cooling Limit"] = value

    @property
    def maximum_cooling_air_flow_rate(self):
        """Get maximum_cooling_air_flow_rate

        Returns:
            float: the value of `maximum_cooling_air_flow_rate` or None if not set
        """
        return self._data["Maximum Cooling Air Flow Rate"]

    @maximum_cooling_air_flow_rate.setter
    def maximum_cooling_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_cooling_air_flow_rate`
        This field is ignored if Cooling Limit = NoLimit
        This field is required if Outdoor Air Economizer Type is anything other than NoEconomizer.

        Args:
            value (float): value for IDD Field `maximum_cooling_air_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cooling_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cooling_air_flow_rate`')

        self._data["Maximum Cooling Air Flow Rate"] = value

    @property
    def maximum_total_cooling_capacity(self):
        """Get maximum_total_cooling_capacity

        Returns:
            float: the value of `maximum_total_cooling_capacity` or None if not set
        """
        return self._data["Maximum Total Cooling Capacity"]

    @maximum_total_cooling_capacity.setter
    def maximum_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `maximum_total_cooling_capacity`
        This field is ignored if Cooling Limit = NoLimit

        Args:
            value (float): value for IDD Field `maximum_total_cooling_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_total_cooling_capacity`')

        self._data["Maximum Total Cooling Capacity"] = value

    @property
    def heating_availability_schedule_name(self):
        """Get heating_availability_schedule_name

        Returns:
            str: the value of `heating_availability_schedule_name` or None if not set
        """
        return self._data["Heating Availability Schedule Name"]

    @heating_availability_schedule_name.setter
    def heating_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_availability_schedule_name`
        If blank, heating is always available.

        Args:
            value (str): value for IDD Field `heating_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_availability_schedule_name`')

        self._data["Heating Availability Schedule Name"] = value

    @property
    def cooling_availability_schedule_name(self):
        """Get cooling_availability_schedule_name

        Returns:
            str: the value of `cooling_availability_schedule_name` or None if not set
        """
        return self._data["Cooling Availability Schedule Name"]

    @cooling_availability_schedule_name.setter
    def cooling_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_availability_schedule_name`
        If blank, cooling is always available.

        Args:
            value (str): value for IDD Field `cooling_availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_availability_schedule_name`')

        self._data["Cooling Availability Schedule Name"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="ConstantSensibleHeatRatio"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        ConstantSensibleHeatRatio means that the ideal loads system
        will be controlled to meet the sensible cooling load, and the
        latent cooling rate will be computed using a constant
        sensible heat ratio (SHR)
        Humidistat means that there is a ZoneControl:Humidistat for this
        zone and the ideal loads system will attempt to satisfy the humidistat.
        None means that there is no dehumidification.
        ConstantSupplyHumidityRatio means that during cooling the supply air
        will always be at the Minimum Cooling Supply Humidity Ratio.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - ConstantSensibleHeatRatio
                      - Humidistat
                      - None
                      - ConstantSupplyHumidityRatio
                Default value: ConstantSensibleHeatRatio
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("ConstantSensibleHeatRatio")
            vals.add("Humidistat")
            vals.add("None")
            vals.add("ConstantSupplyHumidityRatio")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def cooling_sensible_heat_ratio(self):
        """Get cooling_sensible_heat_ratio

        Returns:
            float: the value of `cooling_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Sensible Heat Ratio"]

    @cooling_sensible_heat_ratio.setter
    def cooling_sensible_heat_ratio(self, value=0.7 ):
        """  Corresponds to IDD Field `cooling_sensible_heat_ratio`
        This field is applicable only when Dehumidification Control Type is ConstantSensibleHeatRatio

        Args:
            value (float): value for IDD Field `cooling_sensible_heat_ratio`
                Unit: dimensionless
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_sensible_heat_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_sensible_heat_ratio`')

        self._data["Cooling Sensible Heat Ratio"] = value

    @property
    def humidification_control_type(self):
        """Get humidification_control_type

        Returns:
            str: the value of `humidification_control_type` or None if not set
        """
        return self._data["Humidification Control Type"]

    @humidification_control_type.setter
    def humidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `humidification_control_type`
        None means that there is no humidification.
        Humidistat means that there is a ZoneControl:Humidistat for this
        zone and the ideal loads system will attempt to satisfy the humidistat.
        ConstantSupplyHumidityRatio means that during heating the supply air
        will always be at the Maximum Heating Supply Humidity Ratio.

        Args:
            value (str): value for IDD Field `humidification_control_type`
                Accepted values are:
                      - None
                      - Humidistat
                      - ConstantSupplyHumidityRatio
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("Humidistat")
            vals.add("ConstantSupplyHumidityRatio")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `humidification_control_type`'.format(value))

        self._data["Humidification Control Type"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """Get design_specification_outdoor_air_object_name

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self._data["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_outdoor_air_object_name`
        When the name of a DesignSpecification:OutdoorAir object is entered, the minimum
        outdoor air flow rate will be computed using these specifications. The outdoor air
        flow rate will also be affected by the next two fields.
        If this field is blank, there will be no outdoor air and the remaining fields will
        be ignored.

        Args:
            value (str): value for IDD Field `design_specification_outdoor_air_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_outdoor_air_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_outdoor_air_object_name`')

        self._data["Design Specification Outdoor Air Object Name"] = value

    @property
    def outdoor_air_inlet_node_name(self):
        """Get outdoor_air_inlet_node_name

        Returns:
            str: the value of `outdoor_air_inlet_node_name` or None if not set
        """
        return self._data["Outdoor Air Inlet Node Name"]

    @outdoor_air_inlet_node_name.setter
    def outdoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_inlet_node_name`
        This field is required if the system provides outdoor air
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `outdoor_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_inlet_node_name`')

        self._data["Outdoor Air Inlet Node Name"] = value

    @property
    def demand_controlled_ventilation_type(self):
        """Get demand_controlled_ventilation_type

        Returns:
            str: the value of `demand_controlled_ventilation_type` or None if not set
        """
        return self._data["Demand Controlled Ventilation Type"]

    @demand_controlled_ventilation_type.setter
    def demand_controlled_ventilation_type(self, value="None"):
        """  Corresponds to IDD Field `demand_controlled_ventilation_type`
        This field controls how the minimum outdoor air flow rate is calculated.
        None means that design occupancy will be uased to compute the minimum outdoor air flow rate
        OccupancySchedule means that current occupancy level will be used.
        CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow
        reate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon
        dioxide setpoint defined in a ZoneControl:ContaminantController object.

        Args:
            value (str): value for IDD Field `demand_controlled_ventilation_type`
                Accepted values are:
                      - None
                      - OccupancySchedule
                      - CO2Setpoint
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_controlled_ventilation_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_controlled_ventilation_type`')
            vals = set()
            vals.add("None")
            vals.add("OccupancySchedule")
            vals.add("CO2Setpoint")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demand_controlled_ventilation_type`'.format(value))

        self._data["Demand Controlled Ventilation Type"] = value

    @property
    def outdoor_air_economizer_type(self):
        """Get outdoor_air_economizer_type

        Returns:
            str: the value of `outdoor_air_economizer_type` or None if not set
        """
        return self._data["Outdoor Air Economizer Type"]

    @outdoor_air_economizer_type.setter
    def outdoor_air_economizer_type(self, value="NoEconomizer"):
        """  Corresponds to IDD Field `outdoor_air_economizer_type`
        DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow rate
        when there is a cooling load and the outdoor air temperature or enthalpy
        is below the zone exhaust air temperature or enthalpy.

        Args:
            value (str): value for IDD Field `outdoor_air_economizer_type`
                Accepted values are:
                      - NoEconomizer
                      - DifferentialDryBulb
                      - DifferentialEnthalpy
                Default value: NoEconomizer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_economizer_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_economizer_type`')
            vals = set()
            vals.add("NoEconomizer")
            vals.add("DifferentialDryBulb")
            vals.add("DifferentialEnthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_economizer_type`'.format(value))

        self._data["Outdoor Air Economizer Type"] = value

    @property
    def heat_recovery_type(self):
        """Get heat_recovery_type

        Returns:
            str: the value of `heat_recovery_type` or None if not set
        """
        return self._data["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """  Corresponds to IDD Field `heat_recovery_type`

        Args:
            value (str): value for IDD Field `heat_recovery_type`
                Accepted values are:
                      - None
                      - Sensible
                      - Enthalpy
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_type`')
            vals = set()
            vals.add("None")
            vals.add("Sensible")
            vals.add("Enthalpy")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_recovery_type`'.format(value))

        self._data["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """Get sensible_heat_recovery_effectiveness

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `sensible_heat_recovery_effectiveness`

        Args:
            value (float): value for IDD Field `sensible_heat_recovery_effectiveness`
                Unit: dimensionless
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_heat_recovery_effectiveness`')

        self._data["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """Get latent_heat_recovery_effectiveness

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set
        """
        return self._data["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65 ):
        """  Corresponds to IDD Field `latent_heat_recovery_effectiveness`
        Applicable only if Heat Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `latent_heat_recovery_effectiveness`
                Unit: dimensionless
                Default value: 0.65
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_heat_recovery_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_heat_recovery_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_heat_recovery_effectiveness`')

        self._data["Latent Heat Recovery Effectiveness"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_supply_air_node_name))
        out.append(self._to_str(self.zone_exhaust_air_node_name))
        out.append(self._to_str(self.maximum_heating_supply_air_temperature))
        out.append(self._to_str(self.minimum_cooling_supply_air_temperature))
        out.append(self._to_str(self.maximum_heating_supply_air_humidity_ratio))
        out.append(self._to_str(self.minimum_cooling_supply_air_humidity_ratio))
        out.append(self._to_str(self.heating_limit))
        out.append(self._to_str(self.maximum_heating_air_flow_rate))
        out.append(self._to_str(self.maximum_sensible_heating_capacity))
        out.append(self._to_str(self.cooling_limit))
        out.append(self._to_str(self.maximum_cooling_air_flow_rate))
        out.append(self._to_str(self.maximum_total_cooling_capacity))
        out.append(self._to_str(self.heating_availability_schedule_name))
        out.append(self._to_str(self.cooling_availability_schedule_name))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.cooling_sensible_heat_ratio))
        out.append(self._to_str(self.humidification_control_type))
        out.append(self._to_str(self.design_specification_outdoor_air_object_name))
        out.append(self._to_str(self.outdoor_air_inlet_node_name))
        out.append(self._to_str(self.demand_controlled_ventilation_type))
        out.append(self._to_str(self.outdoor_air_economizer_type))
        out.append(self._to_str(self.heat_recovery_type))
        out.append(self._to_str(self.sensible_heat_recovery_effectiveness))
        out.append(self._to_str(self.latent_heat_recovery_effectiveness))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacFourPipeFanCoil(object):
    """ Corresponds to IDD object `ZoneHVAC:FourPipeFanCoil`
        Four pipe fan coil system. Forced-convection hydronic heating-cooling unit with
        supply fan, hot water heating coil, chilled water cooling coil, and fixed-position
        outdoor air mixer.
    """
    internal_name = "ZoneHVAC:FourPipeFanCoil"
    field_count = 26

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:FourPipeFanCoil`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Capacity Control Method"] = None
        self._data["Maximum Supply Air Flow Rate"] = None
        self._data["Low Speed Supply Air Flow Ratio"] = None
        self._data["Medium Speed Supply Air Flow Ratio"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Outdoor Air Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Outdoor Air Mixer Object Type"] = None
        self._data["Outdoor Air Mixer Name"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Maximum Cold Water Flow Rate"] = None
        self._data["Minimum Cold Water Flow Rate"] = None
        self._data["Cooling Convergence Tolerance"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Maximum Hot Water Flow Rate"] = None
        self._data["Minimum Hot Water Flow Rate"] = None
        self._data["Heating Convergence Tolerance"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.capacity_control_method = None
        else:
            self.capacity_control_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_flow_rate = None
        else:
            self.maximum_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_speed_supply_air_flow_ratio = None
        else:
            self.low_speed_supply_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.medium_speed_supply_air_flow_ratio = None
        else:
            self.medium_speed_supply_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_schedule_name = None
        else:
            self.outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_object_type = None
        else:
            self.outdoor_air_mixer_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_name = None
        else:
            self.outdoor_air_mixer_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cold_water_flow_rate = None
        else:
            self.maximum_cold_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_cold_water_flow_rate = None
        else:
            self.minimum_cold_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_convergence_tolerance = None
        else:
            self.cooling_convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_hot_water_flow_rate = None
        else:
            self.maximum_hot_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_hot_water_flow_rate = None
        else:
            self.minimum_hot_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_convergence_tolerance = None
        else:
            self.heating_convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def capacity_control_method(self):
        """Get capacity_control_method

        Returns:
            str: the value of `capacity_control_method` or None if not set
        """
        return self._data["Capacity Control Method"]

    @capacity_control_method.setter
    def capacity_control_method(self, value=None):
        """  Corresponds to IDD Field `capacity_control_method`

        Args:
            value (str): value for IDD Field `capacity_control_method`
                Accepted values are:
                      - ConstantFanVariableFlow
                      - CyclingFan
                      - VariableFanVariableFlow
                      - VariableFanConstantFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `capacity_control_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_control_method`')
            vals = set()
            vals.add("ConstantFanVariableFlow")
            vals.add("CyclingFan")
            vals.add("VariableFanVariableFlow")
            vals.add("VariableFanConstantFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `capacity_control_method`'.format(value))

        self._data["Capacity Control Method"] = value

    @property
    def maximum_supply_air_flow_rate(self):
        """Get maximum_supply_air_flow_rate

        Returns:
            float: the value of `maximum_supply_air_flow_rate` or None if not set
        """
        return self._data["Maximum Supply Air Flow Rate"]

    @maximum_supply_air_flow_rate.setter
    def maximum_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_supply_air_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_flow_rate`'.format(value))

        self._data["Maximum Supply Air Flow Rate"] = value

    @property
    def low_speed_supply_air_flow_ratio(self):
        """Get low_speed_supply_air_flow_ratio

        Returns:
            float: the value of `low_speed_supply_air_flow_ratio` or None if not set
        """
        return self._data["Low Speed Supply Air Flow Ratio"]

    @low_speed_supply_air_flow_ratio.setter
    def low_speed_supply_air_flow_ratio(self, value=0.33 ):
        """  Corresponds to IDD Field `low_speed_supply_air_flow_ratio`

        Args:
            value (float): value for IDD Field `low_speed_supply_air_flow_ratio`
                Default value: 0.33
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_supply_air_flow_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `low_speed_supply_air_flow_ratio`')

        self._data["Low Speed Supply Air Flow Ratio"] = value

    @property
    def medium_speed_supply_air_flow_ratio(self):
        """Get medium_speed_supply_air_flow_ratio

        Returns:
            float: the value of `medium_speed_supply_air_flow_ratio` or None if not set
        """
        return self._data["Medium Speed Supply Air Flow Ratio"]

    @medium_speed_supply_air_flow_ratio.setter
    def medium_speed_supply_air_flow_ratio(self, value=0.66 ):
        """  Corresponds to IDD Field `medium_speed_supply_air_flow_ratio`
        Medium Speed Supply Air Flow Ratio should be greater
        than Low Speed Supply Air Flow Ratio

        Args:
            value (float): value for IDD Field `medium_speed_supply_air_flow_ratio`
                Default value: 0.66
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `medium_speed_supply_air_flow_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `medium_speed_supply_air_flow_ratio`')

        self._data["Medium Speed Supply Air Flow Ratio"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def outdoor_air_schedule_name(self):
        """Get outdoor_air_schedule_name

        Returns:
            str: the value of `outdoor_air_schedule_name` or None if not set
        """
        return self._data["Outdoor Air Schedule Name"]

    @outdoor_air_schedule_name.setter
    def outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_schedule_name`
        Value of schedule multiplies maximum outdoor air flow rate

        Args:
            value (str): value for IDD Field `outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_schedule_name`')

        self._data["Outdoor Air Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def outdoor_air_mixer_object_type(self):
        """Get outdoor_air_mixer_object_type

        Returns:
            str: the value of `outdoor_air_mixer_object_type` or None if not set
        """
        return self._data["Outdoor Air Mixer Object Type"]

    @outdoor_air_mixer_object_type.setter
    def outdoor_air_mixer_object_type(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_object_type`
        currently only one type OutdoorAir:Mixer object is available.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_object_type`
                Accepted values are:
                      - OutdoorAir:Mixer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_object_type`')
            vals = set()
            vals.add("OutdoorAir:Mixer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_mixer_object_type`'.format(value))

        self._data["Outdoor Air Mixer Object Type"] = value

    @property
    def outdoor_air_mixer_name(self):
        """Get outdoor_air_mixer_name

        Returns:
            str: the value of `outdoor_air_mixer_name` or None if not set
        """
        return self._data["Outdoor Air Mixer Name"]

    @outdoor_air_mixer_name.setter
    def outdoor_air_mixer_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_name`

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_name`')

        self._data["Outdoor Air Mixer Name"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Fan type must be according to capacity control method (see I/O)
        For ConstantFanVariableFlow a Fan:OnOff or Fan:ConstantVolume is valid.
        For CyclingFan, a Fan:OnOff is valid.
        For VariableFanVariableFlow or VariableFanConstantFlow a Fan:VariableVolume is valid.
        The fans inlet node should be the same as the outdoor air mixers mixed air node.

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                      - Fan:VariableVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            vals.add("Fan:VariableVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def maximum_cold_water_flow_rate(self):
        """Get maximum_cold_water_flow_rate

        Returns:
            float: the value of `maximum_cold_water_flow_rate` or None if not set
        """
        return self._data["Maximum Cold Water Flow Rate"]

    @maximum_cold_water_flow_rate.setter
    def maximum_cold_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_cold_water_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_cold_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cold_water_flow_rate`'.format(value))

        self._data["Maximum Cold Water Flow Rate"] = value

    @property
    def minimum_cold_water_flow_rate(self):
        """Get minimum_cold_water_flow_rate

        Returns:
            float: the value of `minimum_cold_water_flow_rate` or None if not set
        """
        return self._data["Minimum Cold Water Flow Rate"]

    @minimum_cold_water_flow_rate.setter
    def minimum_cold_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_cold_water_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_cold_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_cold_water_flow_rate`'.format(value))

        self._data["Minimum Cold Water Flow Rate"] = value

    @property
    def cooling_convergence_tolerance(self):
        """Get cooling_convergence_tolerance

        Returns:
            float: the value of `cooling_convergence_tolerance` or None if not set
        """
        return self._data["Cooling Convergence Tolerance"]

    @cooling_convergence_tolerance.setter
    def cooling_convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `cooling_convergence_tolerance`

        Args:
            value (float): value for IDD Field `cooling_convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_convergence_tolerance`')

        self._data["Cooling Convergence Tolerance"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Water")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def maximum_hot_water_flow_rate(self):
        """Get maximum_hot_water_flow_rate

        Returns:
            float: the value of `maximum_hot_water_flow_rate` or None if not set
        """
        return self._data["Maximum Hot Water Flow Rate"]

    @maximum_hot_water_flow_rate.setter
    def maximum_hot_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_hot_water_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_hot_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_hot_water_flow_rate`'.format(value))

        self._data["Maximum Hot Water Flow Rate"] = value

    @property
    def minimum_hot_water_flow_rate(self):
        """Get minimum_hot_water_flow_rate

        Returns:
            float: the value of `minimum_hot_water_flow_rate` or None if not set
        """
        return self._data["Minimum Hot Water Flow Rate"]

    @minimum_hot_water_flow_rate.setter
    def minimum_hot_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_hot_water_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_hot_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_hot_water_flow_rate`'.format(value))

        self._data["Minimum Hot Water Flow Rate"] = value

    @property
    def heating_convergence_tolerance(self):
        """Get heating_convergence_tolerance

        Returns:
            float: the value of `heating_convergence_tolerance` or None if not set
        """
        return self._data["Heating Convergence Tolerance"]

    @heating_convergence_tolerance.setter
    def heating_convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `heating_convergence_tolerance`

        Args:
            value (float): value for IDD Field `heating_convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_convergence_tolerance`')

        self._data["Heating Convergence Tolerance"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.capacity_control_method))
        out.append(self._to_str(self.maximum_supply_air_flow_rate))
        out.append(self._to_str(self.low_speed_supply_air_flow_ratio))
        out.append(self._to_str(self.medium_speed_supply_air_flow_ratio))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.outdoor_air_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.outdoor_air_mixer_object_type))
        out.append(self._to_str(self.outdoor_air_mixer_name))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.maximum_cold_water_flow_rate))
        out.append(self._to_str(self.minimum_cold_water_flow_rate))
        out.append(self._to_str(self.cooling_convergence_tolerance))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.maximum_hot_water_flow_rate))
        out.append(self._to_str(self.minimum_hot_water_flow_rate))
        out.append(self._to_str(self.heating_convergence_tolerance))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacWindowAirConditioner(object):
    """ Corresponds to IDD object `ZoneHVAC:WindowAirConditioner`
        Window air conditioner. Forced-convection cooling-only unit with supply fan, direct
        expansion (DX) cooling coil, and fixed-position outdoor air mixer.
    """
    internal_name = "ZoneHVAC:WindowAirConditioner"
    field_count = 17

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:WindowAirConditioner`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Maximum Supply Air Flow Rate"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Outdoor Air Mixer Object Type"] = None
        self._data["Outdoor Air Mixer Name"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["DX Cooling Coil Name"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Fan Placement"] = None
        self._data["Cooling Convergence Tolerance"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_flow_rate = None
        else:
            self.maximum_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_object_type = None
        else:
            self.outdoor_air_mixer_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_name = None
        else:
            self.outdoor_air_mixer_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dx_cooling_coil_name = None
        else:
            self.dx_cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_convergence_tolerance = None
        else:
            self.cooling_convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def maximum_supply_air_flow_rate(self):
        """Get maximum_supply_air_flow_rate

        Returns:
            float: the value of `maximum_supply_air_flow_rate` or None if not set
        """
        return self._data["Maximum Supply Air Flow Rate"]

    @maximum_supply_air_flow_rate.setter
    def maximum_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_supply_air_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_flow_rate`'.format(value))

        self._data["Maximum Supply Air Flow Rate"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def outdoor_air_mixer_object_type(self):
        """Get outdoor_air_mixer_object_type

        Returns:
            str: the value of `outdoor_air_mixer_object_type` or None if not set
        """
        return self._data["Outdoor Air Mixer Object Type"]

    @outdoor_air_mixer_object_type.setter
    def outdoor_air_mixer_object_type(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_object_type`
        currently only one OutdoorAir:Mixer object type is available.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_object_type`
                Accepted values are:
                      - OutdoorAir:Mixer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_object_type`')
            vals = set()
            vals.add("OutdoorAir:Mixer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_mixer_object_type`'.format(value))

        self._data["Outdoor Air Mixer Object Type"] = value

    @property
    def outdoor_air_mixer_name(self):
        """Get outdoor_air_mixer_name

        Returns:
            str: the value of `outdoor_air_mixer_name` or None if not set
        """
        return self._data["Outdoor Air Mixer Name"]

    @outdoor_air_mixer_name.setter
    def outdoor_air_mixer_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_name`

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_name`')

        self._data["Outdoor Air Mixer Name"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Fan:ConstantVolume only works when continuous fan operation is used the entire
        simulation (all supply air fan operating mode schedule values are greater than 0).
        If any fan operating mode schedule values are 0 a Fan:OnOff object must be used.

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Fan type Fan:ConstantVolume is used with continuous fan
        and fan type Fan:OnOff is used with cycling Fan.

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("CoilSystem:Cooling:DX:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def dx_cooling_coil_name(self):
        """Get dx_cooling_coil_name

        Returns:
            str: the value of `dx_cooling_coil_name` or None if not set
        """
        return self._data["DX Cooling Coil Name"]

    @dx_cooling_coil_name.setter
    def dx_cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `dx_cooling_coil_name`

        Args:
            value (str): value for IDD Field `dx_cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dx_cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dx_cooling_coil_name`')

        self._data["DX Cooling Coil Name"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote
        cycling fan operation (fan cycles with cooling coil). Schedule values greater
        than 0 denote constant fan operation (fan runs continually regardless of coil operation).
        The fan operating mode defaults to cycling fan operation if this field is left blank.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value=None):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def cooling_convergence_tolerance(self):
        """Get cooling_convergence_tolerance

        Returns:
            float: the value of `cooling_convergence_tolerance` or None if not set
        """
        return self._data["Cooling Convergence Tolerance"]

    @cooling_convergence_tolerance.setter
    def cooling_convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `cooling_convergence_tolerance`

        Args:
            value (float): value for IDD Field `cooling_convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_convergence_tolerance`')

        self._data["Cooling Convergence Tolerance"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.maximum_supply_air_flow_rate))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.outdoor_air_mixer_object_type))
        out.append(self._to_str(self.outdoor_air_mixer_name))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.dx_cooling_coil_name))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.cooling_convergence_tolerance))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacPackagedTerminalAirConditioner(object):
    """ Corresponds to IDD object `ZoneHVAC:PackagedTerminalAirConditioner`
        Packaged terminal air conditioner (PTAC).  Forced-convection heating-cooling unit
        with supply fan, direct expansion (DX) cooling coil, heating coil (gas, electric, hot
        water, or steam) and fixed-position outdoor air mixer.
    """
    internal_name = "ZoneHVAC:PackagedTerminalAirConditioner"
    field_count = 22

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:PackagedTerminalAirConditioner`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Outdoor Air Mixer Object Type"] = None
        self._data["Outdoor Air Mixer Name"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Outdoor Air Flow Rate During Cooling Operation"] = None
        self._data["Outdoor Air Flow Rate During Heating Operation"] = None
        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Fan Placement"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_object_type = None
        else:
            self.outdoor_air_mixer_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_name = None
        else:
            self.outdoor_air_mixer_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_cooling_operation = None
        else:
            self.outdoor_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_heating_operation = None
        else:
            self.outdoor_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Unique name for this packaged terminal air conditioner object.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Schedule values of 0 denote the unit is off.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`
        Air inlet node for the PTAC must be a zone air exhaust Node.

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`
        Air outlet node for the PTAC must be a zone air inlet node.

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def outdoor_air_mixer_object_type(self):
        """Get outdoor_air_mixer_object_type

        Returns:
            str: the value of `outdoor_air_mixer_object_type` or None if not set
        """
        return self._data["Outdoor Air Mixer Object Type"]

    @outdoor_air_mixer_object_type.setter
    def outdoor_air_mixer_object_type(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_object_type`
        currently only one OutdoorAir:Mixer object type is available.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_object_type`
                Accepted values are:
                      - OutdoorAir:Mixer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_object_type`')
            vals = set()
            vals.add("OutdoorAir:Mixer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_mixer_object_type`'.format(value))

        self._data["Outdoor Air Mixer Object Type"] = value

    @property
    def outdoor_air_mixer_name(self):
        """Get outdoor_air_mixer_name

        Returns:
            str: the value of `outdoor_air_mixer_name` or None if not set
        """
        return self._data["Outdoor Air Mixer Name"]

    @outdoor_air_mixer_name.setter
    def outdoor_air_mixer_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_name`
        Needs to match the name of the PTAC outdoor air mixer object.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_name`')

        self._data["Outdoor Air Mixer Name"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`
        Must be less than or equal to fan size.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`
        Must be less than or equal to fan size.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"]

    @supply_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Must be less than or equal to fan size.
        Only used when supply air fan operating mode schedule values specify continuous fan
        (schedule values greater than 0 specify continuous fan operation).
        This air flow rate is used when no heating or cooling is required and the cooling or
        heating coil is off. If this field is left blank or zero, the supply air flow rate
        from the previous on cycle (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def outdoor_air_flow_rate_during_cooling_operation(self):
        """Get outdoor_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Cooling Operation"]

    @outdoor_air_flow_rate_during_cooling_operation.setter
    def outdoor_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_cooling_operation`
        Must be less than or equal to supply air flow rate during cooling operation.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`')

        self._data["Outdoor Air Flow Rate During Cooling Operation"] = value

    @property
    def outdoor_air_flow_rate_during_heating_operation(self):
        """Get outdoor_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Heating Operation"]

    @outdoor_air_flow_rate_during_heating_operation.setter
    def outdoor_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_heating_operation`
        Must be less than or equal to supply air flow rate during heating operation.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`')

        self._data["Outdoor Air Flow Rate During Heating Operation"] = value

    @property
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"]

    @outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Only used when supply air fan operating mode schedule values specify continuous fan
        (schedule values greater than 0 specify continuous fan operation).
        This air flow rate is used when no heating or cooling is required and the cooling or
        heating coil is off. If this field is left blank or zero, the outdoor air flow rate
        from the previous on cycle (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Fan:ConstantVolume only works when continuous fan operation is used the entire
        simulation (all supply air fan operating mode schedule values are greater than 0).
        If any fan operating mode schedule values are 0 a Fan:OnOff object must be used.

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Needs to match in the fan object.

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        Select the type of heating coil.

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`
        Needs to match in the heating coil object.

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Select the type of Cooling Coil.
        Only works with Coil:Cooling:DX:SingleSpeed or
        CoilSystem:Cooling:DX:HeatExchangerAssisted or
        Coil:Cooling:DX:VariableSpeed.

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Cooling:DX:VariableSpeed
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("Coil:Cooling:DX:VariableSpeed")
            vals.add("CoilSystem:Cooling:DX:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`
        Needs to match a DX cooling coil object.

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `fan_placement`
        Select fan placement as either blow through or draw through.

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote
        cycling fan operation (fan cycles with cooling or heating coil). Schedule Name values greater
        than 0 denote constant fan operation (fan runs continually regardless of coil operation).

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.outdoor_air_mixer_object_type))
        out.append(self._to_str(self.outdoor_air_mixer_name))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacPackagedTerminalHeatPump(object):
    """ Corresponds to IDD object `ZoneHVAC:PackagedTerminalHeatPump`
        Packaged terminal heat pump (PTHP). Forced-convection heating-cooling unit with
        supply fan, direct expansion (DX) cooling coil, DX heating coil (air-to-air heat
        pump), supplemental heating coil (gas, electric, hot water, or steam), and
        fixed-position outdoor air mixer.
    """
    internal_name = "ZoneHVAC:PackagedTerminalHeatPump"
    field_count = 29

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:PackagedTerminalHeatPump`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Outdoor Air Mixer Object Type"] = None
        self._data["Outdoor Air Mixer Name"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Outdoor Air Flow Rate During Cooling Operation"] = None
        self._data["Outdoor Air Flow Rate During Heating Operation"] = None
        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Heating Convergence Tolerance"] = None
        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Cooling Convergence Tolerance"] = None
        self._data["Supplemental Heating Coil Object Type"] = None
        self._data["Supplemental Heating Coil Name"] = None
        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = None
        self._data["Fan Placement"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_object_type = None
        else:
            self.outdoor_air_mixer_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_name = None
        else:
            self.outdoor_air_mixer_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_cooling_operation = None
        else:
            self.outdoor_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_heating_operation = None
        else:
            self.outdoor_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_convergence_tolerance = None
        else:
            self.heating_convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = None
        else:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_convergence_tolerance = None
        else:
            self.cooling_convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_object_type = None
        else:
            self.supplemental_heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_name = None
        else:
            self.supplemental_heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature_from_supplemental_heater = None
        else:
            self.maximum_supply_air_temperature_from_supplemental_heater = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Unique name for this packaged terminal heat pump object.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        Schedule values of 0 denote the unit is off.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`
        Air inlet node for the PTHP must be a zone air exhaust node.

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`
        Air outlet node for the PTHP must be a zone air inlet node.

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def outdoor_air_mixer_object_type(self):
        """Get outdoor_air_mixer_object_type

        Returns:
            str: the value of `outdoor_air_mixer_object_type` or None if not set
        """
        return self._data["Outdoor Air Mixer Object Type"]

    @outdoor_air_mixer_object_type.setter
    def outdoor_air_mixer_object_type(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_object_type`
        currently only one OutdoorAir:Mixer object type is available.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_object_type`
                Accepted values are:
                      - OutdoorAir:Mixer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_object_type`')
            vals = set()
            vals.add("OutdoorAir:Mixer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_mixer_object_type`'.format(value))

        self._data["Outdoor Air Mixer Object Type"] = value

    @property
    def outdoor_air_mixer_name(self):
        """Get outdoor_air_mixer_name

        Returns:
            str: the value of `outdoor_air_mixer_name` or None if not set
        """
        return self._data["Outdoor Air Mixer Name"]

    @outdoor_air_mixer_name.setter
    def outdoor_air_mixer_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_name`
        Needs to match name of outdoor air mixer object.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_name`')

        self._data["Outdoor Air Mixer Name"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`
        Must be less than or equal to fan size.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`
        Must be less than or equal to fan size.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"]

    @supply_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Must be less than or equal to fan size.
        Only used when heat pump fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def outdoor_air_flow_rate_during_cooling_operation(self):
        """Get outdoor_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Cooling Operation"]

    @outdoor_air_flow_rate_during_cooling_operation.setter
    def outdoor_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_cooling_operation`
        Must be less than or equal to supply air flow rate during cooling operation.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`')

        self._data["Outdoor Air Flow Rate During Cooling Operation"] = value

    @property
    def outdoor_air_flow_rate_during_heating_operation(self):
        """Get outdoor_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Heating Operation"]

    @outdoor_air_flow_rate_during_heating_operation.setter
    def outdoor_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_heating_operation`
        Must be less than or equal to supply air flow rate during heating operation.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`')

        self._data["Outdoor Air Flow Rate During Heating Operation"] = value

    @property
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"]

    @outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Only used when heat pump Fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the outdoor air flow rate from the previous on cycle
        (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Fan:ConstantVolume only works with fan operating mode is continuous.

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Needs to match a fan object.

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        Only works with Coil:Heating:DX:SingleSpeed or
        Coil:Heating:DX:VariableSpeed.

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:DX:SingleSpeed
                      - Coil:Heating:DX:VariableSpeed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:DX:SingleSpeed")
            vals.add("Coil:Heating:DX:VariableSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`
        Needs to match in the DX Heating Coil object.

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def heating_convergence_tolerance(self):
        """Get heating_convergence_tolerance

        Returns:
            float: the value of `heating_convergence_tolerance` or None if not set
        """
        return self._data["Heating Convergence Tolerance"]

    @heating_convergence_tolerance.setter
    def heating_convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `heating_convergence_tolerance`
        Defines Heating convergence tolerence as a fraction of Heating load to be met.

        Args:
            value (float): value for IDD Field `heating_convergence_tolerance`
                Unit: dimensionless
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_convergence_tolerance`')

        self._data["Heating Convergence Tolerance"] = value

    @property
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self):
        """Get minimum_outdoor_drybulb_temperature_for_compressor_operation

        Returns:
            float: the value of `minimum_outdoor_drybulb_temperature_for_compressor_operation` or None if not set
        """
        return self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"]

    @minimum_outdoor_drybulb_temperature_for_compressor_operation.setter
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self, value=-8.0 ):
        """  Corresponds to IDD Field `minimum_outdoor_drybulb_temperature_for_compressor_operation`
        Needs to match the corresponding minimum outdoor temperature defined
        in the DX Heating Coil object.

        Args:
            value (float): value for IDD Field `minimum_outdoor_drybulb_temperature_for_compressor_operation`
                Unit: C
                Default value: -8.0
                value >= -20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_drybulb_temperature_for_compressor_operation`'.format(value))
            if value < -20.0:
                raise ValueError('value need to be greater or equal -20.0 '
                                 'for field `minimum_outdoor_drybulb_temperature_for_compressor_operation`')

        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Only works with Coil:Cooling:DX:SingleSpeed or
        CoilSystem:Cooling:DX:HeatExchangerAssisted or
        Coil:Cooling:DX:VariableSpeed.

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Cooling:DX:VariableSpeed
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("Coil:Cooling:DX:VariableSpeed")
            vals.add("CoilSystem:Cooling:DX:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`
        Needs to match in the DX Cooling Coil object.

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def cooling_convergence_tolerance(self):
        """Get cooling_convergence_tolerance

        Returns:
            float: the value of `cooling_convergence_tolerance` or None if not set
        """
        return self._data["Cooling Convergence Tolerance"]

    @cooling_convergence_tolerance.setter
    def cooling_convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `cooling_convergence_tolerance`
        Defines Cooling convergence tolerence as a fraction of the Cooling load to be met.

        Args:
            value (float): value for IDD Field `cooling_convergence_tolerance`
                Unit: dimensionless
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_convergence_tolerance`')

        self._data["Cooling Convergence Tolerance"] = value

    @property
    def supplemental_heating_coil_object_type(self):
        """Get supplemental_heating_coil_object_type

        Returns:
            str: the value of `supplemental_heating_coil_object_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Object Type"]

    @supplemental_heating_coil_object_type.setter
    def supplemental_heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_object_type`
        works with gas, electric, hot water and steam heating coil.

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_object_type`'.format(value))

        self._data["Supplemental Heating Coil Object Type"] = value

    @property
    def supplemental_heating_coil_name(self):
        """Get supplemental_heating_coil_name

        Returns:
            str: the value of `supplemental_heating_coil_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Name"]

    @supplemental_heating_coil_name.setter
    def supplemental_heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_name`
        Needs to match in the supplemental heating coil object.

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_name`')

        self._data["Supplemental Heating Coil Name"] = value

    @property
    def maximum_supply_air_temperature_from_supplemental_heater(self):
        """Get maximum_supply_air_temperature_from_supplemental_heater

        Returns:
            float: the value of `maximum_supply_air_temperature_from_supplemental_heater` or None if not set
        """
        return self._data["Maximum Supply Air Temperature from Supplemental Heater"]

    @maximum_supply_air_temperature_from_supplemental_heater.setter
    def maximum_supply_air_temperature_from_supplemental_heater(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_temperature_from_supplemental_heater`
        Supply air temperature from the supplemental heater will not exceed this value.

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature_from_supplemental_heater`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature_from_supplemental_heater`'.format(value))

        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self, value=21.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`
        Supplemental heater will not operate when outdoor temperature exceeds this value.

        Args:
            value (float): value for IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`
                Unit: C
                Default value: 21.0
                value <= 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`'.format(value))
            if value > 21.0:
                raise ValueError('value need to be smaller 21.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`')

        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `fan_placement`
        Select fan placement as either blow through or draw through.

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule that controls fan operation. Schedule values of 0 denote
        cycling fan operation (fan cycles with cooling or heating coil). Schedule Name values greater
        than 0 denote constant fan operation (fan runs continually regardless of coil operation).
        The fan operating mode defaults to cycling fan operation if this field is left blank.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.outdoor_air_mixer_object_type))
        out.append(self._to_str(self.outdoor_air_mixer_name))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.heating_convergence_tolerance))
        out.append(self._to_str(self.minimum_outdoor_drybulb_temperature_for_compressor_operation))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.cooling_convergence_tolerance))
        out.append(self._to_str(self.supplemental_heating_coil_object_type))
        out.append(self._to_str(self.supplemental_heating_coil_name))
        out.append(self._to_str(self.maximum_supply_air_temperature_from_supplemental_heater))
        out.append(self._to_str(self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacWaterToAirHeatPump(object):
    """ Corresponds to IDD object `ZoneHVAC:WaterToAirHeatPump`
        Water-to-air heat pump. Forced-convection heating-cooling unit with supply fan,
        water-to-air cooling and heating coils, supplemental heating coil (gas, electric, hot
        water, or steam), and fixed-position outdoor air mixer.
    """
    internal_name = "ZoneHVAC:WaterToAirHeatPump"
    field_count = 32

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:WaterToAirHeatPump`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Outdoor Air Mixer Object Type"] = None
        self._data["Outdoor Air Mixer Name"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Outdoor Air Flow Rate During Cooling Operation"] = None
        self._data["Outdoor Air Flow Rate During Heating Operation"] = None
        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Maximum Cycling Rate"] = None
        self._data["Heat Pump Time Constant"] = None
        self._data["Fraction of On-Cycle Power Use"] = None
        self._data["Heat Pump Fan Delay Time"] = None
        self._data["Supplemental Heating Coil Object Type"] = None
        self._data["Supplemental Heating Coil Name"] = None
        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = None
        self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"] = None
        self._data["Fan Placement"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Heat Pump Coil Water Flow Mode"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_object_type = None
        else:
            self.outdoor_air_mixer_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_name = None
        else:
            self.outdoor_air_mixer_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_cooling_operation = None
        else:
            self.outdoor_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_heating_operation = None
        else:
            self.outdoor_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cycling_rate = None
        else:
            self.maximum_cycling_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_time_constant = None
        else:
            self.heat_pump_time_constant = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_oncycle_power_use = None
        else:
            self.fraction_of_oncycle_power_use = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_fan_delay_time = None
        else:
            self.heat_pump_fan_delay_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_object_type = None
        else:
            self.supplemental_heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_name = None
        else:
            self.supplemental_heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature_from_supplemental_heater = None
        else:
            self.maximum_supply_air_temperature_from_supplemental_heater = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_drybulb_temperature_sensor_node_name = None
        else:
            self.outdoor_drybulb_temperature_sensor_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_coil_water_flow_mode = None
        else:
            self.heat_pump_coil_water_flow_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def outdoor_air_mixer_object_type(self):
        """Get outdoor_air_mixer_object_type

        Returns:
            str: the value of `outdoor_air_mixer_object_type` or None if not set
        """
        return self._data["Outdoor Air Mixer Object Type"]

    @outdoor_air_mixer_object_type.setter
    def outdoor_air_mixer_object_type(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_object_type`
        currently only one OutdoorAir:Mixer object type is available.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_object_type`
                Accepted values are:
                      - OutdoorAir:Mixer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_object_type`')
            vals = set()
            vals.add("OutdoorAir:Mixer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_mixer_object_type`'.format(value))

        self._data["Outdoor Air Mixer Object Type"] = value

    @property
    def outdoor_air_mixer_name(self):
        """Get outdoor_air_mixer_name

        Returns:
            str: the value of `outdoor_air_mixer_name` or None if not set
        """
        return self._data["Outdoor Air Mixer Name"]

    @outdoor_air_mixer_name.setter
    def outdoor_air_mixer_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_name`
        This optional field specifies the name of the outdoor air mixer object.
        When used, this name needs to match name of outdoor air mixer object.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_name`')

        self._data["Outdoor Air Mixer Name"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`
        Must be less than or equal to fan size.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`
        Must be less than or equal to fan size.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"]

    @supply_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Must be less than or equal to fan size.
        Only used when heat pump fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def outdoor_air_flow_rate_during_cooling_operation(self):
        """Get outdoor_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Cooling Operation"]

    @outdoor_air_flow_rate_during_cooling_operation.setter
    def outdoor_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_cooling_operation`
        Must be less than or equal to supply air flow rate during cooling operation.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`')

        self._data["Outdoor Air Flow Rate During Cooling Operation"] = value

    @property
    def outdoor_air_flow_rate_during_heating_operation(self):
        """Get outdoor_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Heating Operation"]

    @outdoor_air_flow_rate_during_heating_operation.setter
    def outdoor_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_heating_operation`
        Must be less than or equal to supply air flow rate during heating operation.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`')

        self._data["Outdoor Air Flow Rate During Heating Operation"] = value

    @property
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"]

    @outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Only used when heat pump Fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the outdoor air flow rate from the previous on cycle
        (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Only works with On/Off Fan

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Needs to match Fan:OnOff object

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:WaterToAirHeatPump:EquationFit
                      - Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:WaterToAirHeatPump:EquationFit")
            vals.add("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`
        Needs to match in the water-to-air heatpump heating coil object

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:WaterToAirHeatPump:EquationFit
                      - Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:WaterToAirHeatPump:EquationFit")
            vals.add("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`
        Needs to match in the water-to-air heatpump cooling coil object

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def maximum_cycling_rate(self):
        """Get maximum_cycling_rate

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set
        """
        return self._data["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=2.5 ):
        """  Corresponds to IDD Field `maximum_cycling_rate`
        The maximum on-off cycling rate for the compressor
        Suggested value is 2.5 for a typical heat pump

        Args:
            value (float): value for IDD Field `maximum_cycling_rate`
                Unit: cycles/hr
                Default value: 2.5
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `maximum_cycling_rate`')

        self._data["Maximum Cycling Rate"] = value

    @property
    def heat_pump_time_constant(self):
        """Get heat_pump_time_constant

        Returns:
            float: the value of `heat_pump_time_constant` or None if not set
        """
        return self._data["Heat Pump Time Constant"]

    @heat_pump_time_constant.setter
    def heat_pump_time_constant(self, value=60.0 ):
        """  Corresponds to IDD Field `heat_pump_time_constant`
        Time constant for the cooling coil's capacity to reach steady state after startup
        Suggested value is 60 for a typical heat pump

        Args:
            value (float): value for IDD Field `heat_pump_time_constant`
                Unit: s
                Default value: 60.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `heat_pump_time_constant`')

        self._data["Heat Pump Time Constant"] = value

    @property
    def fraction_of_oncycle_power_use(self):
        """Get fraction_of_oncycle_power_use

        Returns:
            float: the value of `fraction_of_oncycle_power_use` or None if not set
        """
        return self._data["Fraction of On-Cycle Power Use"]

    @fraction_of_oncycle_power_use.setter
    def fraction_of_oncycle_power_use(self, value=0.01 ):
        """  Corresponds to IDD Field `fraction_of_oncycle_power_use`
        The fraction of on-cycle power use to adjust the part load fraction based on
        the off-cycle power consumption due to crankcase heaters, controls, fans, and etc.
        Suggested value is 0.01 for a typical heat pump

        Args:
            value (float): value for IDD Field `fraction_of_oncycle_power_use`
                Default value: 0.01
                value >= 0.0
                value <= 0.05
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_oncycle_power_use`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_oncycle_power_use`')
            if value > 0.05:
                raise ValueError('value need to be smaller 0.05 '
                                 'for field `fraction_of_oncycle_power_use`')

        self._data["Fraction of On-Cycle Power Use"] = value

    @property
    def heat_pump_fan_delay_time(self):
        """Get heat_pump_fan_delay_time

        Returns:
            float: the value of `heat_pump_fan_delay_time` or None if not set
        """
        return self._data["Heat Pump Fan Delay Time"]

    @heat_pump_fan_delay_time.setter
    def heat_pump_fan_delay_time(self, value=60.0 ):
        """  Corresponds to IDD Field `heat_pump_fan_delay_time`
        Programmed time delay for heat pump fan to shut off after compressor cycle off.
        Only required when fan operating mode is cycling
        Enter 0 when fan operating mode is continuous

        Args:
            value (float): value for IDD Field `heat_pump_fan_delay_time`
                Unit: s
                Default value: 60.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_fan_delay_time`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_fan_delay_time`')

        self._data["Heat Pump Fan Delay Time"] = value

    @property
    def supplemental_heating_coil_object_type(self):
        """Get supplemental_heating_coil_object_type

        Returns:
            str: the value of `supplemental_heating_coil_object_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Object Type"]

    @supplemental_heating_coil_object_type.setter
    def supplemental_heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_object_type`
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_object_type`'.format(value))

        self._data["Supplemental Heating Coil Object Type"] = value

    @property
    def supplemental_heating_coil_name(self):
        """Get supplemental_heating_coil_name

        Returns:
            str: the value of `supplemental_heating_coil_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Name"]

    @supplemental_heating_coil_name.setter
    def supplemental_heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_name`
        Needs to match in the supplemental heating coil object

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_name`')

        self._data["Supplemental Heating Coil Name"] = value

    @property
    def maximum_supply_air_temperature_from_supplemental_heater(self):
        """Get maximum_supply_air_temperature_from_supplemental_heater

        Returns:
            float: the value of `maximum_supply_air_temperature_from_supplemental_heater` or None if not set
        """
        return self._data["Maximum Supply Air Temperature from Supplemental Heater"]

    @maximum_supply_air_temperature_from_supplemental_heater.setter
    def maximum_supply_air_temperature_from_supplemental_heater(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_temperature_from_supplemental_heater`

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature_from_supplemental_heater`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature_from_supplemental_heater`'.format(value))

        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self, value=21.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`

        Args:
            value (float): value for IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`
                Unit: C
                Default value: 21.0
                value <= 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`'.format(value))
            if value > 21.0:
                raise ValueError('value need to be smaller 21.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`')

        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = value

    @property
    def outdoor_drybulb_temperature_sensor_node_name(self):
        """Get outdoor_drybulb_temperature_sensor_node_name

        Returns:
            str: the value of `outdoor_drybulb_temperature_sensor_node_name` or None if not set
        """
        return self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"]

    @outdoor_drybulb_temperature_sensor_node_name.setter
    def outdoor_drybulb_temperature_sensor_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_drybulb_temperature_sensor_node_name`

        Args:
            value (str): value for IDD Field `outdoor_drybulb_temperature_sensor_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_drybulb_temperature_sensor_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_drybulb_temperature_sensor_node_name`')

        self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule that controls fan operation. Schedule values of 0 denote
        cycling fan operation (fan cycles with cooling or heating coil). Schedule values greater
        than 0 denote constant fan operation (fan runs continually regardless of coil operation).
        The fan operating mode defaults to cycling fan operation if this field is left blank.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def heat_pump_coil_water_flow_mode(self):
        """Get heat_pump_coil_water_flow_mode

        Returns:
            str: the value of `heat_pump_coil_water_flow_mode` or None if not set
        """
        return self._data["Heat Pump Coil Water Flow Mode"]

    @heat_pump_coil_water_flow_mode.setter
    def heat_pump_coil_water_flow_mode(self, value="Cycling"):
        """  Corresponds to IDD Field `heat_pump_coil_water_flow_mode`
        used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit
        Constant results in 100% water flow regardless of compressor PLR
        Cycling results in water flow that matches compressor PLR
        ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load

        Args:
            value (str): value for IDD Field `heat_pump_coil_water_flow_mode`
                Accepted values are:
                      - Constant
                      - Cycling
                      - ConstantOnDemand
                Default value: Cycling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_coil_water_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_coil_water_flow_mode`')
            vals = set()
            vals.add("Constant")
            vals.add("Cycling")
            vals.add("ConstantOnDemand")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_coil_water_flow_mode`'.format(value))

        self._data["Heat Pump Coil Water Flow Mode"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.outdoor_air_mixer_object_type))
        out.append(self._to_str(self.outdoor_air_mixer_name))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.maximum_cycling_rate))
        out.append(self._to_str(self.heat_pump_time_constant))
        out.append(self._to_str(self.fraction_of_oncycle_power_use))
        out.append(self._to_str(self.heat_pump_fan_delay_time))
        out.append(self._to_str(self.supplemental_heating_coil_object_type))
        out.append(self._to_str(self.supplemental_heating_coil_name))
        out.append(self._to_str(self.maximum_supply_air_temperature_from_supplemental_heater))
        out.append(self._to_str(self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation))
        out.append(self._to_str(self.outdoor_drybulb_temperature_sensor_node_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.heat_pump_coil_water_flow_mode))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacDehumidifierDx(object):
    """ Corresponds to IDD object `ZoneHVAC:Dehumidifier:DX`
        This object calculates the performance of zone (room) air dehumidifiers.
        Meant to model conventional direct expansion (DX) cooling-based room air
        dehumidifiers (reject 100% of condenser heat to the zone air), but this
        object might be able to be used to model other room air dehumidifier types.
    """
    internal_name = "ZoneHVAC:Dehumidifier:DX"
    field_count = 14

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:Dehumidifier:DX`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Rated Water Removal"] = None
        self._data["Rated Energy Factor"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Water Removal Curve Name"] = None
        self._data["Energy Factor Curve Name"] = None
        self._data["Part Load Fraction Correlation Curve Name"] = None
        self._data["Minimum Dry-Bulb Temperature for Dehumidifier Operation"] = None
        self._data["Maximum Dry-Bulb Temperature for Dehumidifier Operation"] = None
        self._data["Off-Cycle Parasitic Electric Load"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_water_removal = None
        else:
            self.rated_water_removal = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_energy_factor = None
        else:
            self.rated_energy_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_removal_curve_name = None
        else:
            self.water_removal_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.energy_factor_curve_name = None
        else:
            self.energy_factor_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.part_load_fraction_correlation_curve_name = None
        else:
            self.part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_drybulb_temperature_for_dehumidifier_operation = None
        else:
            self.minimum_drybulb_temperature_for_dehumidifier_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_drybulb_temperature_for_dehumidifier_operation = None
        else:
            self.maximum_drybulb_temperature_for_dehumidifier_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.offcycle_parasitic_electric_load = None
        else:
            self.offcycle_parasitic_electric_load = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Unique name for this direct expansion (DX) zone dehumidifier object.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        Schedule values of 0 denote the unit is off.
        Schedule values >0.0 (usually 1.0) indicate that the dehumidifier is available to operate.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`
        Air inlet node for the dehumidifier must be a zone air exhaust node.

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`
        Air outlet node for the dehumidifier must be a zone air inlet node.

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def rated_water_removal(self):
        """Get rated_water_removal

        Returns:
            float: the value of `rated_water_removal` or None if not set
        """
        return self._data["Rated Water Removal"]

    @rated_water_removal.setter
    def rated_water_removal(self, value=None):
        """  Corresponds to IDD Field `rated_water_removal`
        Rating point: air entering dehumidifier at 26.7 C (80 F) dry-bulb and 60% relative humidity.

        Args:
            value (float): value for IDD Field `rated_water_removal`
                Unit: L/day
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_water_removal`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_water_removal`')

        self._data["Rated Water Removal"] = value

    @property
    def rated_energy_factor(self):
        """Get rated_energy_factor

        Returns:
            float: the value of `rated_energy_factor` or None if not set
        """
        return self._data["Rated Energy Factor"]

    @rated_energy_factor.setter
    def rated_energy_factor(self, value=None):
        """  Corresponds to IDD Field `rated_energy_factor`
        Rating point: air entering dehumidifier at 26.7 C (80 F) dry-bulb and 60% relative humidity.

        Args:
            value (float): value for IDD Field `rated_energy_factor`
                Unit: L/kWh
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_energy_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_energy_factor`')

        self._data["Rated Energy Factor"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `rated_air_flow_rate`

        Args:
            value (float): value for IDD Field `rated_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_air_flow_rate`')

        self._data["Rated Air Flow Rate"] = value

    @property
    def water_removal_curve_name(self):
        """Get water_removal_curve_name

        Returns:
            str: the value of `water_removal_curve_name` or None if not set
        """
        return self._data["Water Removal Curve Name"]

    @water_removal_curve_name.setter
    def water_removal_curve_name(self, value=None):
        """  Corresponds to IDD Field `water_removal_curve_name`
        Table:TwoIndependentVariable object can also be used
        Name of a curve that describes the water removal rate (normalized to rated conditions)
        as a function of the dry-bulb temperature and relative humidity of the air
        entering the dehumidifier.
        Curve output = (actual water removal/rated water removal) = a + b*T + c*T**2 + d*RH +
        e*RH**2 + f*T*RH
        T = inlet air dry-bulb temperature (C)
        RH = inlet air RH (%)

        Args:
            value (str): value for IDD Field `water_removal_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_removal_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_removal_curve_name`')

        self._data["Water Removal Curve Name"] = value

    @property
    def energy_factor_curve_name(self):
        """Get energy_factor_curve_name

        Returns:
            str: the value of `energy_factor_curve_name` or None if not set
        """
        return self._data["Energy Factor Curve Name"]

    @energy_factor_curve_name.setter
    def energy_factor_curve_name(self, value=None):
        """  Corresponds to IDD Field `energy_factor_curve_name`
        Table:TwoIndependentVariable object can also be used
        Name of a curve that describes the energy factor (normalized to rated conditions)
        as a function of the dry-bulb temperature and relative humidity of the air
        entering the dehumidifier.
        Curve output = (actual energy factor/rated energy factor) = a + b*T + c*T**2 + d*RH +
        e*RH**2 + f*T*RH
        T = inlet air dry-bulb temperature (C)
        RH = inlet air RH (%)

        Args:
            value (str): value for IDD Field `energy_factor_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_factor_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_factor_curve_name`')

        self._data["Energy Factor Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `part_load_fraction_correlation_curve_name`
        Table:OneIndependentVariable can also be used
        Name of a curve that describes the part load fraction (PLF) of the system as
        a function of the part load ratio. Used to calculate dehumidifier run time fraction
        and electric power.
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (dehumidification load/steady state water removal capacity)

        Args:
            value (str): value for IDD Field `part_load_fraction_correlation_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_fraction_correlation_curve_name`')

        self._data["Part Load Fraction Correlation Curve Name"] = value

    @property
    def minimum_drybulb_temperature_for_dehumidifier_operation(self):
        """Get minimum_drybulb_temperature_for_dehumidifier_operation

        Returns:
            float: the value of `minimum_drybulb_temperature_for_dehumidifier_operation` or None if not set
        """
        return self._data["Minimum Dry-Bulb Temperature for Dehumidifier Operation"]

    @minimum_drybulb_temperature_for_dehumidifier_operation.setter
    def minimum_drybulb_temperature_for_dehumidifier_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `minimum_drybulb_temperature_for_dehumidifier_operation`
        Dehumidifier shut off if inlet air (zone) temperature is below this value.
        This value must be less than the Maximum Dry-Bulb Temperature for Dehumidifier Operation.

        Args:
            value (float): value for IDD Field `minimum_drybulb_temperature_for_dehumidifier_operation`
                Unit: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_drybulb_temperature_for_dehumidifier_operation`'.format(value))

        self._data["Minimum Dry-Bulb Temperature for Dehumidifier Operation"] = value

    @property
    def maximum_drybulb_temperature_for_dehumidifier_operation(self):
        """Get maximum_drybulb_temperature_for_dehumidifier_operation

        Returns:
            float: the value of `maximum_drybulb_temperature_for_dehumidifier_operation` or None if not set
        """
        return self._data["Maximum Dry-Bulb Temperature for Dehumidifier Operation"]

    @maximum_drybulb_temperature_for_dehumidifier_operation.setter
    def maximum_drybulb_temperature_for_dehumidifier_operation(self, value=35.0 ):
        """  Corresponds to IDD Field `maximum_drybulb_temperature_for_dehumidifier_operation`
        Dehumidifier shut off if inlet air (zone) temperature is above this value.
        This value must be greater than the Minimum Dry-Bulb Temperature for Dehumidifier Operation.

        Args:
            value (float): value for IDD Field `maximum_drybulb_temperature_for_dehumidifier_operation`
                Unit: C
                Default value: 35.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_drybulb_temperature_for_dehumidifier_operation`'.format(value))

        self._data["Maximum Dry-Bulb Temperature for Dehumidifier Operation"] = value

    @property
    def offcycle_parasitic_electric_load(self):
        """Get offcycle_parasitic_electric_load

        Returns:
            float: the value of `offcycle_parasitic_electric_load` or None if not set
        """
        return self._data["Off-Cycle Parasitic Electric Load"]

    @offcycle_parasitic_electric_load.setter
    def offcycle_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `offcycle_parasitic_electric_load`
        Parasitic electric power consumed when the dehumidifier is available to operate, but
        does not operate (i.e., no high humidity load to be met).
        Off cycle parasitic power is 0 when the availability schedule is 0.
        This electric load is considered as a heat gain to the zone air.

        Args:
            value (float): value for IDD Field `offcycle_parasitic_electric_load`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `offcycle_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `offcycle_parasitic_electric_load`')

        self._data["Off-Cycle Parasitic Electric Load"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `condensate_collection_water_storage_tank_name`
        Name of storage tank used to collect water removed by the dehumidifier.

        Args:
            value (str): value for IDD Field `condensate_collection_water_storage_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')

        self._data["Condensate Collection Water Storage Tank Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.rated_water_removal))
        out.append(self._to_str(self.rated_energy_factor))
        out.append(self._to_str(self.rated_air_flow_rate))
        out.append(self._to_str(self.water_removal_curve_name))
        out.append(self._to_str(self.energy_factor_curve_name))
        out.append(self._to_str(self.part_load_fraction_correlation_curve_name))
        out.append(self._to_str(self.minimum_drybulb_temperature_for_dehumidifier_operation))
        out.append(self._to_str(self.maximum_drybulb_temperature_for_dehumidifier_operation))
        out.append(self._to_str(self.offcycle_parasitic_electric_load))
        out.append(self._to_str(self.condensate_collection_water_storage_tank_name))
        return ",".join(out)

class ZoneHvacEnergyRecoveryVentilator(object):
    """ Corresponds to IDD object `ZoneHVAC:EnergyRecoveryVentilator`
        This compound component models a stand-alone energy recovery ventilator (ERV)
        that conditions outdoor ventilation air and supplies that air directly to a zone.
        The ERV unit is modeled as a collection of components: air-to-air heat exchanger,
        supply air fan, exhaust air fan and an optional controller to avoid overheating
        of the supply air (economizer or free cooling operation).
    """
    internal_name = "ZoneHVAC:EnergyRecoveryVentilator"
    field_count = 11

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:EnergyRecoveryVentilator`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Heat Exchanger Name"] = None
        self._data["Supply Air Flow Rate"] = None
        self._data["Exhaust Air Flow Rate"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Exhaust Air Fan Name"] = None
        self._data["Controller Name"] = None
        self._data["Ventilation Rate per Unit Floor Area"] = None
        self._data["Ventilation Rate per Occupant"] = None
        self._data["Availability Manager List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_exchanger_name = None
        else:
            self.heat_exchanger_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate = None
        else:
            self.supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_flow_rate = None
        else:
            self.exhaust_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_fan_name = None
        else:
            self.exhaust_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_name = None
        else:
            self.controller_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ventilation_rate_per_unit_floor_area = None
        else:
            self.ventilation_rate_per_unit_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ventilation_rate_per_occupant = None
        else:
            self.ventilation_rate_per_occupant = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def heat_exchanger_name(self):
        """Get heat_exchanger_name

        Returns:
            str: the value of `heat_exchanger_name` or None if not set
        """
        return self._data["Heat Exchanger Name"]

    @heat_exchanger_name.setter
    def heat_exchanger_name(self, value=None):
        """  Corresponds to IDD Field `heat_exchanger_name`
        Heat exchanger type must be HeatExchanger:AirToAir:SensibleAndLatent

        Args:
            value (str): value for IDD Field `heat_exchanger_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_name`')

        self._data["Heat Exchanger Name"] = value

    @property
    def supply_air_flow_rate(self):
        """Get supply_air_flow_rate

        Returns:
            float: the value of `supply_air_flow_rate` or None if not set
        """
        return self._data["Supply Air Flow Rate"]

    @supply_air_flow_rate.setter
    def supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate`
        This flow rate must match the supply fan's air flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate`')

        self._data["Supply Air Flow Rate"] = value

    @property
    def exhaust_air_flow_rate(self):
        """Get exhaust_air_flow_rate

        Returns:
            float: the value of `exhaust_air_flow_rate` or None if not set
        """
        return self._data["Exhaust Air Flow Rate"]

    @exhaust_air_flow_rate.setter
    def exhaust_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_flow_rate`
        This flow rate must match the supply fan air flow rate.

        Args:
            value (float): value for IDD Field `exhaust_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `exhaust_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `exhaust_air_flow_rate`')

        self._data["Exhaust Air Flow Rate"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Fan type must be Fan:OnOff

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def exhaust_air_fan_name(self):
        """Get exhaust_air_fan_name

        Returns:
            str: the value of `exhaust_air_fan_name` or None if not set
        """
        return self._data["Exhaust Air Fan Name"]

    @exhaust_air_fan_name.setter
    def exhaust_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_fan_name`
        Fan type must be Fan:OnOff

        Args:
            value (str): value for IDD Field `exhaust_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_fan_name`')

        self._data["Exhaust Air Fan Name"] = value

    @property
    def controller_name(self):
        """Get controller_name

        Returns:
            str: the value of `controller_name` or None if not set
        """
        return self._data["Controller Name"]

    @controller_name.setter
    def controller_name(self, value=None):
        """  Corresponds to IDD Field `controller_name`
        Enter the name of a ZoneHVAC:EnergyRecoveryVentilator:Controller object.

        Args:
            value (str): value for IDD Field `controller_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_name`')

        self._data["Controller Name"] = value

    @property
    def ventilation_rate_per_unit_floor_area(self):
        """Get ventilation_rate_per_unit_floor_area

        Returns:
            float: the value of `ventilation_rate_per_unit_floor_area` or None if not set
        """
        return self._data["Ventilation Rate per Unit Floor Area"]

    @ventilation_rate_per_unit_floor_area.setter
    def ventilation_rate_per_unit_floor_area(self, value=None):
        """  Corresponds to IDD Field `ventilation_rate_per_unit_floor_area`
        0.000508 m3/s-m2 corresponds to 0.1 ft3/min-ft2
        Used only when supply and exhaust air flow rates are autosized.

        Args:
            value (float): value for IDD Field `ventilation_rate_per_unit_floor_area`
                Unit: m3/s-m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ventilation_rate_per_unit_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ventilation_rate_per_unit_floor_area`')

        self._data["Ventilation Rate per Unit Floor Area"] = value

    @property
    def ventilation_rate_per_occupant(self):
        """Get ventilation_rate_per_occupant

        Returns:
            float: the value of `ventilation_rate_per_occupant` or None if not set
        """
        return self._data["Ventilation Rate per Occupant"]

    @ventilation_rate_per_occupant.setter
    def ventilation_rate_per_occupant(self, value=None):
        """  Corresponds to IDD Field `ventilation_rate_per_occupant`
        0.00236 m3/s-person corresponds to 5 ft3/min-person
        Used only when supply and exhaust air flow rates are autosized.

        Args:
            value (float): value for IDD Field `ventilation_rate_per_occupant`
                Unit: m3/s-person
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ventilation_rate_per_occupant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ventilation_rate_per_occupant`')

        self._data["Ventilation Rate per Occupant"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.heat_exchanger_name))
        out.append(self._to_str(self.supply_air_flow_rate))
        out.append(self._to_str(self.exhaust_air_flow_rate))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.exhaust_air_fan_name))
        out.append(self._to_str(self.controller_name))
        out.append(self._to_str(self.ventilation_rate_per_unit_floor_area))
        out.append(self._to_str(self.ventilation_rate_per_occupant))
        out.append(self._to_str(self.availability_manager_list_name))
        return ",".join(out)

class ZoneHvacEnergyRecoveryVentilatorController(object):
    """ Corresponds to IDD object `ZoneHVAC:EnergyRecoveryVentilator:Controller`
        This controller is used exclusively by the ZoneHVAC:EnergyRecoveryVentilator object
        to allow economizer (free cooling) operation when possible.
    """
    internal_name = "ZoneHVAC:EnergyRecoveryVentilator:Controller"
    field_count = 13

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:EnergyRecoveryVentilator:Controller`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Temperature High Limit"] = None
        self._data["Temperature Low Limit"] = None
        self._data["Enthalpy High Limit"] = None
        self._data["Dewpoint Temperature Limit"] = None
        self._data["Electronic Enthalpy Limit Curve Name"] = None
        self._data["Exhaust Air Temperature Limit"] = None
        self._data["Exhaust Air Enthalpy Limit"] = None
        self._data["Time of Day Economizer Flow Control Schedule Name"] = None
        self._data["High Humidity Control Flag"] = None
        self._data["Humidistat Control Zone Name"] = None
        self._data["High Humidity Outdoor Air Flow Ratio"] = None
        self._data["Control High Indoor Humidity Based on Outdoor Humidity Ratio"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_high_limit = None
        else:
            self.temperature_high_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_low_limit = None
        else:
            self.temperature_low_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.enthalpy_high_limit = None
        else:
            self.enthalpy_high_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dewpoint_temperature_limit = None
        else:
            self.dewpoint_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.electronic_enthalpy_limit_curve_name = None
        else:
            self.electronic_enthalpy_limit_curve_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_temperature_limit = None
        else:
            self.exhaust_air_temperature_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_enthalpy_limit = None
        else:
            self.exhaust_air_enthalpy_limit = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_of_day_economizer_flow_control_schedule_name = None
        else:
            self.time_of_day_economizer_flow_control_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_humidity_control_flag = None
        else:
            self.high_humidity_control_flag = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.humidistat_control_zone_name = None
        else:
            self.humidistat_control_zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_humidity_outdoor_air_flow_ratio = None
        else:
            self.high_humidity_outdoor_air_flow_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_high_indoor_humidity_based_on_outdoor_humidity_ratio = None
        else:
            self.control_high_indoor_humidity_based_on_outdoor_humidity_ratio = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def temperature_high_limit(self):
        """Get temperature_high_limit

        Returns:
            float: the value of `temperature_high_limit` or None if not set
        """
        return self._data["Temperature High Limit"]

    @temperature_high_limit.setter
    def temperature_high_limit(self, value=None):
        """  Corresponds to IDD Field `temperature_high_limit`
        Enter the maximum outdoor dry-bulb temperature limit for economizer operation.
        No input or blank input means this limit is not operative

        Args:
            value (float): value for IDD Field `temperature_high_limit`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_high_limit`'.format(value))

        self._data["Temperature High Limit"] = value

    @property
    def temperature_low_limit(self):
        """Get temperature_low_limit

        Returns:
            float: the value of `temperature_low_limit` or None if not set
        """
        return self._data["Temperature Low Limit"]

    @temperature_low_limit.setter
    def temperature_low_limit(self, value=None):
        """  Corresponds to IDD Field `temperature_low_limit`
        Enter the minimum outdoor dry-bulb temperature limit for economizer operation.
        No input or blank input means this limit is not operative

        Args:
            value (float): value for IDD Field `temperature_low_limit`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_low_limit`'.format(value))

        self._data["Temperature Low Limit"] = value

    @property
    def enthalpy_high_limit(self):
        """Get enthalpy_high_limit

        Returns:
            float: the value of `enthalpy_high_limit` or None if not set
        """
        return self._data["Enthalpy High Limit"]

    @enthalpy_high_limit.setter
    def enthalpy_high_limit(self, value=None):
        """  Corresponds to IDD Field `enthalpy_high_limit`
        Enter the maximum outdoor enthalpy limit for economizer operation.
        No input or blank input means this limit is not operative

        Args:
            value (float): value for IDD Field `enthalpy_high_limit`
                Unit: J/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `enthalpy_high_limit`'.format(value))

        self._data["Enthalpy High Limit"] = value

    @property
    def dewpoint_temperature_limit(self):
        """Get dewpoint_temperature_limit

        Returns:
            float: the value of `dewpoint_temperature_limit` or None if not set
        """
        return self._data["Dewpoint Temperature Limit"]

    @dewpoint_temperature_limit.setter
    def dewpoint_temperature_limit(self, value=None):
        """  Corresponds to IDD Field `dewpoint_temperature_limit`
        Enter the maximum outdoor dewpoint temperature limit for economizer operation.
        No input or blank input means this limit is not operative

        Args:
            value (float): value for IDD Field `dewpoint_temperature_limit`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dewpoint_temperature_limit`'.format(value))

        self._data["Dewpoint Temperature Limit"] = value

    @property
    def electronic_enthalpy_limit_curve_name(self):
        """Get electronic_enthalpy_limit_curve_name

        Returns:
            str: the value of `electronic_enthalpy_limit_curve_name` or None if not set
        """
        return self._data["Electronic Enthalpy Limit Curve Name"]

    @electronic_enthalpy_limit_curve_name.setter
    def electronic_enthalpy_limit_curve_name(self, value=None):
        """  Corresponds to IDD Field `electronic_enthalpy_limit_curve_name`
        Table:OneIndependentVariable object can also be used
        Enter the name of a quadratic or cubic curve which defines the maximum outdoor
        humidity ratio (function of outdoor dry-bulb temperature) for economizer operation.
        No input or blank input means this limit is not operative

        Args:
            value (str): value for IDD Field `electronic_enthalpy_limit_curve_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `electronic_enthalpy_limit_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electronic_enthalpy_limit_curve_name`')

        self._data["Electronic Enthalpy Limit Curve Name"] = value

    @property
    def exhaust_air_temperature_limit(self):
        """Get exhaust_air_temperature_limit

        Returns:
            str: the value of `exhaust_air_temperature_limit` or None if not set
        """
        return self._data["Exhaust Air Temperature Limit"]

    @exhaust_air_temperature_limit.setter
    def exhaust_air_temperature_limit(self, value="NoExhaustAirTemperatureLimit"):
        """  Corresponds to IDD Field `exhaust_air_temperature_limit`

        Args:
            value (str): value for IDD Field `exhaust_air_temperature_limit`
                Accepted values are:
                      - ExhaustAirTemperatureLimit
                      - NoExhaustAirTemperatureLimit
                Default value: NoExhaustAirTemperatureLimit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_temperature_limit`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_temperature_limit`')
            vals = set()
            vals.add("ExhaustAirTemperatureLimit")
            vals.add("NoExhaustAirTemperatureLimit")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `exhaust_air_temperature_limit`'.format(value))

        self._data["Exhaust Air Temperature Limit"] = value

    @property
    def exhaust_air_enthalpy_limit(self):
        """Get exhaust_air_enthalpy_limit

        Returns:
            str: the value of `exhaust_air_enthalpy_limit` or None if not set
        """
        return self._data["Exhaust Air Enthalpy Limit"]

    @exhaust_air_enthalpy_limit.setter
    def exhaust_air_enthalpy_limit(self, value="NoExhaustAirEnthalpyLimit"):
        """  Corresponds to IDD Field `exhaust_air_enthalpy_limit`

        Args:
            value (str): value for IDD Field `exhaust_air_enthalpy_limit`
                Accepted values are:
                      - ExhaustAirEnthalpyLimit
                      - NoExhaustAirEnthalpyLimit
                Default value: NoExhaustAirEnthalpyLimit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_enthalpy_limit`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_enthalpy_limit`')
            vals = set()
            vals.add("ExhaustAirEnthalpyLimit")
            vals.add("NoExhaustAirEnthalpyLimit")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `exhaust_air_enthalpy_limit`'.format(value))

        self._data["Exhaust Air Enthalpy Limit"] = value

    @property
    def time_of_day_economizer_flow_control_schedule_name(self):
        """Get time_of_day_economizer_flow_control_schedule_name

        Returns:
            str: the value of `time_of_day_economizer_flow_control_schedule_name` or None if not set
        """
        return self._data["Time of Day Economizer Flow Control Schedule Name"]

    @time_of_day_economizer_flow_control_schedule_name.setter
    def time_of_day_economizer_flow_control_schedule_name(self, value=None):
        """  Corresponds to IDD Field `time_of_day_economizer_flow_control_schedule_name`
        Schedule values greater than 0 indicate economizer operation is active. This
        schedule may be used with or without the High Humidity Control option.
        When used together, high humidity control has priority over economizer control.

        Args:
            value (str): value for IDD Field `time_of_day_economizer_flow_control_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_of_day_economizer_flow_control_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_of_day_economizer_flow_control_schedule_name`')

        self._data["Time of Day Economizer Flow Control Schedule Name"] = value

    @property
    def high_humidity_control_flag(self):
        """Get high_humidity_control_flag

        Returns:
            str: the value of `high_humidity_control_flag` or None if not set
        """
        return self._data["High Humidity Control Flag"]

    @high_humidity_control_flag.setter
    def high_humidity_control_flag(self, value="No"):
        """  Corresponds to IDD Field `high_humidity_control_flag`
        Select Yes to modify air flow rates based on a zone humidistat.
        Select No to disable this feature.

        Args:
            value (str): value for IDD Field `high_humidity_control_flag`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `high_humidity_control_flag`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `high_humidity_control_flag`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `high_humidity_control_flag`'.format(value))

        self._data["High Humidity Control Flag"] = value

    @property
    def humidistat_control_zone_name(self):
        """Get humidistat_control_zone_name

        Returns:
            str: the value of `humidistat_control_zone_name` or None if not set
        """
        return self._data["Humidistat Control Zone Name"]

    @humidistat_control_zone_name.setter
    def humidistat_control_zone_name(self, value=None):
        """  Corresponds to IDD Field `humidistat_control_zone_name`
        Enter the name of the zone where the humidistat is located.

        Args:
            value (str): value for IDD Field `humidistat_control_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `humidistat_control_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `humidistat_control_zone_name`')

        self._data["Humidistat Control Zone Name"] = value

    @property
    def high_humidity_outdoor_air_flow_ratio(self):
        """Get high_humidity_outdoor_air_flow_ratio

        Returns:
            float: the value of `high_humidity_outdoor_air_flow_ratio` or None if not set
        """
        return self._data["High Humidity Outdoor Air Flow Ratio"]

    @high_humidity_outdoor_air_flow_ratio.setter
    def high_humidity_outdoor_air_flow_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `high_humidity_outdoor_air_flow_ratio`
        Enter the ratio of supply (outdoor) air to the maximum supply air flow rate when modified
        air flow rates are active based on high indoor humidity.

        Args:
            value (float): value for IDD Field `high_humidity_outdoor_air_flow_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_humidity_outdoor_air_flow_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_humidity_outdoor_air_flow_ratio`')

        self._data["High Humidity Outdoor Air Flow Ratio"] = value

    @property
    def control_high_indoor_humidity_based_on_outdoor_humidity_ratio(self):
        """Get control_high_indoor_humidity_based_on_outdoor_humidity_ratio

        Returns:
            str: the value of `control_high_indoor_humidity_based_on_outdoor_humidity_ratio` or None if not set
        """
        return self._data["Control High Indoor Humidity Based on Outdoor Humidity Ratio"]

    @control_high_indoor_humidity_based_on_outdoor_humidity_ratio.setter
    def control_high_indoor_humidity_based_on_outdoor_humidity_ratio(self, value="Yes"):
        """  Corresponds to IDD Field `control_high_indoor_humidity_based_on_outdoor_humidity_ratio`
        If NO is selected, the air flow rate is modified any time indoor relative
        humidity is above humidistat setpoint. If YES is selected, outdoor air flow
        rate is modified any time indoor relative humidity is above the humidistat
        setpoint AND the outdoor humidity ratio is less than the indoor humidity ratio.

        Args:
            value (str): value for IDD Field `control_high_indoor_humidity_based_on_outdoor_humidity_ratio`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_high_indoor_humidity_based_on_outdoor_humidity_ratio`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_high_indoor_humidity_based_on_outdoor_humidity_ratio`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_high_indoor_humidity_based_on_outdoor_humidity_ratio`'.format(value))

        self._data["Control High Indoor Humidity Based on Outdoor Humidity Ratio"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.temperature_high_limit))
        out.append(self._to_str(self.temperature_low_limit))
        out.append(self._to_str(self.enthalpy_high_limit))
        out.append(self._to_str(self.dewpoint_temperature_limit))
        out.append(self._to_str(self.electronic_enthalpy_limit_curve_name))
        out.append(self._to_str(self.exhaust_air_temperature_limit))
        out.append(self._to_str(self.exhaust_air_enthalpy_limit))
        out.append(self._to_str(self.time_of_day_economizer_flow_control_schedule_name))
        out.append(self._to_str(self.high_humidity_control_flag))
        out.append(self._to_str(self.humidistat_control_zone_name))
        out.append(self._to_str(self.high_humidity_outdoor_air_flow_ratio))
        out.append(self._to_str(self.control_high_indoor_humidity_based_on_outdoor_humidity_ratio))
        return ",".join(out)

class ZoneHvacUnitVentilator(object):
    """ Corresponds to IDD object `ZoneHVAC:UnitVentilator`
        Unit ventilator. Forced-convection ventilation unit with supply fan (constant-volume
        or variable-volume), optional chilled water cooling coil, optional heating coil
        (gas, electric, hot water, or steam) and controllable outdoor air mixer.
    """
    internal_name = "ZoneHVAC:UnitVentilator"
    field_count = 25

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:UnitVentilator`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Maximum Supply Air Flow Rate"] = None
        self._data["Outdoor Air Control Type"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Outdoor Air Node Name"] = None
        self._data["Exhaust Air Node Name"] = None
        self._data["Mixed Air Node Name"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Coil Option"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Heating Convergence Tolerance"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Cooling Convergence Tolerance"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_flow_rate = None
        else:
            self.maximum_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_control_type = None
        else:
            self.outdoor_air_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_fraction_or_temperature_schedule_name = None
        else:
            self.maximum_outdoor_air_fraction_or_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_node_name = None
        else:
            self.outdoor_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_node_name = None
        else:
            self.exhaust_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.mixed_air_node_name = None
        else:
            self.mixed_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coil_option = None
        else:
            self.coil_option = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_convergence_tolerance = None
        else:
            self.heating_convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_convergence_tolerance = None
        else:
            self.cooling_convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def maximum_supply_air_flow_rate(self):
        """Get maximum_supply_air_flow_rate

        Returns:
            float: the value of `maximum_supply_air_flow_rate` or None if not set
        """
        return self._data["Maximum Supply Air Flow Rate"]

    @maximum_supply_air_flow_rate.setter
    def maximum_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_supply_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_supply_air_flow_rate`')

        self._data["Maximum Supply Air Flow Rate"] = value

    @property
    def outdoor_air_control_type(self):
        """Get outdoor_air_control_type

        Returns:
            str: the value of `outdoor_air_control_type` or None if not set
        """
        return self._data["Outdoor Air Control Type"]

    @outdoor_air_control_type.setter
    def outdoor_air_control_type(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_control_type`

        Args:
            value (str): value for IDD Field `outdoor_air_control_type`
                Accepted values are:
                      - FixedAmount
                      - VariablePercent
                      - FixedTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_control_type`')
            vals = set()
            vals.add("FixedAmount")
            vals.add("VariablePercent")
            vals.add("FixedTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_control_type`'.format(value))

        self._data["Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`
        schedule values multiply the minimum outdoor air flow rate

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def maximum_outdoor_air_fraction_or_temperature_schedule_name(self):
        """Get maximum_outdoor_air_fraction_or_temperature_schedule_name

        Returns:
            str: the value of `maximum_outdoor_air_fraction_or_temperature_schedule_name` or None if not set
        """
        return self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"]

    @maximum_outdoor_air_fraction_or_temperature_schedule_name.setter
    def maximum_outdoor_air_fraction_or_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_fraction_or_temperature_schedule_name`
        that this depends on the control type as to whether it is a fraction or temperature

        Args:
            value (str): value for IDD Field `maximum_outdoor_air_fraction_or_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `maximum_outdoor_air_fraction_or_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `maximum_outdoor_air_fraction_or_temperature_schedule_name`')

        self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def outdoor_air_node_name(self):
        """Get outdoor_air_node_name

        Returns:
            str: the value of `outdoor_air_node_name` or None if not set
        """
        return self._data["Outdoor Air Node Name"]

    @outdoor_air_node_name.setter
    def outdoor_air_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_node_name`

        Args:
            value (str): value for IDD Field `outdoor_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_node_name`')

        self._data["Outdoor Air Node Name"] = value

    @property
    def exhaust_air_node_name(self):
        """Get exhaust_air_node_name

        Returns:
            str: the value of `exhaust_air_node_name` or None if not set
        """
        return self._data["Exhaust Air Node Name"]

    @exhaust_air_node_name.setter
    def exhaust_air_node_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_node_name`

        Args:
            value (str): value for IDD Field `exhaust_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_node_name`')

        self._data["Exhaust Air Node Name"] = value

    @property
    def mixed_air_node_name(self):
        """Get mixed_air_node_name

        Returns:
            str: the value of `mixed_air_node_name` or None if not set
        """
        return self._data["Mixed Air Node Name"]

    @mixed_air_node_name.setter
    def mixed_air_node_name(self, value=None):
        """  Corresponds to IDD Field `mixed_air_node_name`
        inlet to coils

        Args:
            value (str): value for IDD Field `mixed_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `mixed_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `mixed_air_node_name`')

        self._data["Mixed Air Node Name"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Allowable fan types are Fan:ConstantVolume, Fan:OnOff and
        Fan:VariableVolume

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                      - Fan:VariableVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            vals.add("Fan:VariableVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def coil_option(self):
        """Get coil_option

        Returns:
            str: the value of `coil_option` or None if not set
        """
        return self._data["Coil Option"]

    @coil_option.setter
    def coil_option(self, value=None):
        """  Corresponds to IDD Field `coil_option`

        Args:
            value (str): value for IDD Field `coil_option`
                Accepted values are:
                      - None
                      - Heating
                      - Cooling
                      - HeatingAndCooling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `coil_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_option`')
            vals = set()
            vals.add("None")
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("HeatingAndCooling")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `coil_option`'.format(value))

        self._data["Coil Option"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule that controls fan operation. Schedule
        name values of 0 denote cycling fan operation (fan cycles with
        cooling/heating coil). Schedule values greater than 0 denote
        constant fan operation (fan runs continually regardless of coil
        operation). The fan operating mode defaults to cycling fan operation
        if this input field is left blank.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Water
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def heating_convergence_tolerance(self):
        """Get heating_convergence_tolerance

        Returns:
            float: the value of `heating_convergence_tolerance` or None if not set
        """
        return self._data["Heating Convergence Tolerance"]

    @heating_convergence_tolerance.setter
    def heating_convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `heating_convergence_tolerance`

        Args:
            value (float): value for IDD Field `heating_convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_convergence_tolerance`')

        self._data["Heating Convergence Tolerance"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def cooling_convergence_tolerance(self):
        """Get cooling_convergence_tolerance

        Returns:
            float: the value of `cooling_convergence_tolerance` or None if not set
        """
        return self._data["Cooling Convergence Tolerance"]

    @cooling_convergence_tolerance.setter
    def cooling_convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `cooling_convergence_tolerance`

        Args:
            value (float): value for IDD Field `cooling_convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_convergence_tolerance`')

        self._data["Cooling Convergence Tolerance"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.maximum_supply_air_flow_rate))
        out.append(self._to_str(self.outdoor_air_control_type))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.maximum_outdoor_air_fraction_or_temperature_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.outdoor_air_node_name))
        out.append(self._to_str(self.exhaust_air_node_name))
        out.append(self._to_str(self.mixed_air_node_name))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.coil_option))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.heating_convergence_tolerance))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.cooling_convergence_tolerance))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacUnitHeater(object):
    """ Corresponds to IDD object `ZoneHVAC:UnitHeater`
        Unit heater. Forced-convection heating-only unit with supply fan, heating coil
        (gas, electric, hot water, or steam) and fixed-position outdoor air mixer.
    """
    internal_name = "ZoneHVAC:UnitHeater"
    field_count = 16

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:UnitHeater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Maximum Supply Air Flow Rate"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Supply Air Fan Operation During No Heating"] = None
        self._data["Maximum Hot Water or Steam Flow Rate"] = None
        self._data["Minimum Hot Water or Steam Flow Rate"] = None
        self._data["Heating Convergence Tolerance"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_flow_rate = None
        else:
            self.maximum_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operation_during_no_heating = None
        else:
            self.supply_air_fan_operation_during_no_heating = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_hot_water_or_steam_flow_rate = None
        else:
            self.maximum_hot_water_or_steam_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_hot_water_or_steam_flow_rate = None
        else:
            self.minimum_hot_water_or_steam_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_convergence_tolerance = None
        else:
            self.heating_convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Allowable fan types are Fan:ConstantVolume, Fan:OnOff and
        Fan:VariableVolume

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                      - Fan:VariableVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            vals.add("Fan:VariableVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def maximum_supply_air_flow_rate(self):
        """Get maximum_supply_air_flow_rate

        Returns:
            float: the value of `maximum_supply_air_flow_rate` or None if not set
        """
        return self._data["Maximum Supply Air Flow Rate"]

    @maximum_supply_air_flow_rate.setter
    def maximum_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_supply_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_supply_air_flow_rate`')

        self._data["Maximum Supply Air Flow Rate"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Water
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule that controls fan operation. Schedule
        name values of 0 denote cycling fan operation (fan cycles with the
        heating coil). Schedule values greater than 0 denote constant fan
        operation (fan runs continually regardless of coil operation).
        The fan operating mode defaults to cycling fan operation if this
        input field is left blank.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def supply_air_fan_operation_during_no_heating(self):
        """Get supply_air_fan_operation_during_no_heating

        Returns:
            str: the value of `supply_air_fan_operation_during_no_heating` or None if not set
        """
        return self._data["Supply Air Fan Operation During No Heating"]

    @supply_air_fan_operation_during_no_heating.setter
    def supply_air_fan_operation_during_no_heating(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operation_during_no_heating`
        This choice field allows the user to define how the unit heater will operate
        under no heating load or cooling conditions. If the No is selected, then
        the fan will not run unless there is a heating load. If the fan does not run,
        this effectively shuts the unit heater system off when there is no heating load.
        If the Yes is selected, the unit heater is available and has a ConstantVolume
        fan, or has an OnOff fan with Supply Air Fan Operating Mode Schedule value
        greater than zero, then the fan will always run regardless of the zone load.

        Args:
            value (str): value for IDD Field `supply_air_fan_operation_during_no_heating`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operation_during_no_heating`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operation_during_no_heating`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_operation_during_no_heating`'.format(value))

        self._data["Supply Air Fan Operation During No Heating"] = value

    @property
    def maximum_hot_water_or_steam_flow_rate(self):
        """Get maximum_hot_water_or_steam_flow_rate

        Returns:
            float: the value of `maximum_hot_water_or_steam_flow_rate` or None if not set
        """
        return self._data["Maximum Hot Water or Steam Flow Rate"]

    @maximum_hot_water_or_steam_flow_rate.setter
    def maximum_hot_water_or_steam_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_hot_water_or_steam_flow_rate`
        Not used when heating coil is gas or electric

        Args:
            value (float): value for IDD Field `maximum_hot_water_or_steam_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_hot_water_or_steam_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_hot_water_or_steam_flow_rate`')

        self._data["Maximum Hot Water or Steam Flow Rate"] = value

    @property
    def minimum_hot_water_or_steam_flow_rate(self):
        """Get minimum_hot_water_or_steam_flow_rate

        Returns:
            float: the value of `minimum_hot_water_or_steam_flow_rate` or None if not set
        """
        return self._data["Minimum Hot Water or Steam Flow Rate"]

    @minimum_hot_water_or_steam_flow_rate.setter
    def minimum_hot_water_or_steam_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `minimum_hot_water_or_steam_flow_rate`
        Not used when heating coil is gas or electric

        Args:
            value (float): value for IDD Field `minimum_hot_water_or_steam_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_hot_water_or_steam_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_hot_water_or_steam_flow_rate`')

        self._data["Minimum Hot Water or Steam Flow Rate"] = value

    @property
    def heating_convergence_tolerance(self):
        """Get heating_convergence_tolerance

        Returns:
            float: the value of `heating_convergence_tolerance` or None if not set
        """
        return self._data["Heating Convergence Tolerance"]

    @heating_convergence_tolerance.setter
    def heating_convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `heating_convergence_tolerance`

        Args:
            value (float): value for IDD Field `heating_convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_convergence_tolerance`')

        self._data["Heating Convergence Tolerance"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.maximum_supply_air_flow_rate))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_air_fan_operation_during_no_heating))
        out.append(self._to_str(self.maximum_hot_water_or_steam_flow_rate))
        out.append(self._to_str(self.minimum_hot_water_or_steam_flow_rate))
        out.append(self._to_str(self.heating_convergence_tolerance))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacEvaporativeCoolerUnit(object):
    """ Corresponds to IDD object `ZoneHVAC:EvaporativeCoolerUnit`
        Zone evaporative cooler. Forced-convection cooling-only unit with supply fan,
        100% outdoor air supply.  Optional relief exaust node
    """
    internal_name = "ZoneHVAC:EvaporativeCoolerUnit"
    field_count = 18

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:EvaporativeCoolerUnit`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Outdoor Air Inlet Node Name"] = None
        self._data["Cooler Outlet Node Name"] = None
        self._data["Zone Relief Air Node Name"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Design Supply Air Flow Rate"] = None
        self._data["Fan Placement"] = None
        self._data["Cooler Unit Control Method"] = None
        self._data["Throttling Range Temperature Difference"] = None
        self._data["Cooling Load Control Threshold Heat Transfer Rate"] = None
        self._data["First Evaporative Cooler Object Type"] = None
        self._data["First Evaporative Cooler Object Name"] = None
        self._data["Second Evaporative Cooler Object Type"] = None
        self._data["Second Evaporative Cooler Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_inlet_node_name = None
        else:
            self.outdoor_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooler_outlet_node_name = None
        else:
            self.cooler_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_relief_air_node_name = None
        else:
            self.zone_relief_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_supply_air_flow_rate = None
        else:
            self.design_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooler_unit_control_method = None
        else:
            self.cooler_unit_control_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.throttling_range_temperature_difference = None
        else:
            self.throttling_range_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_load_control_threshold_heat_transfer_rate = None
        else:
            self.cooling_load_control_threshold_heat_transfer_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.first_evaporative_cooler_object_type = None
        else:
            self.first_evaporative_cooler_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.first_evaporative_cooler_object_name = None
        else:
            self.first_evaporative_cooler_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.second_evaporative_cooler_object_type = None
        else:
            self.second_evaporative_cooler_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.second_evaporative_cooler_name = None
        else:
            self.second_evaporative_cooler_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def outdoor_air_inlet_node_name(self):
        """Get outdoor_air_inlet_node_name

        Returns:
            str: the value of `outdoor_air_inlet_node_name` or None if not set
        """
        return self._data["Outdoor Air Inlet Node Name"]

    @outdoor_air_inlet_node_name.setter
    def outdoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_inlet_node_name`
        this is an outdoor air node

        Args:
            value (str): value for IDD Field `outdoor_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_inlet_node_name`')

        self._data["Outdoor Air Inlet Node Name"] = value

    @property
    def cooler_outlet_node_name(self):
        """Get cooler_outlet_node_name

        Returns:
            str: the value of `cooler_outlet_node_name` or None if not set
        """
        return self._data["Cooler Outlet Node Name"]

    @cooler_outlet_node_name.setter
    def cooler_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooler_outlet_node_name`
        this is a zone inlet node

        Args:
            value (str): value for IDD Field `cooler_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooler_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooler_outlet_node_name`')

        self._data["Cooler Outlet Node Name"] = value

    @property
    def zone_relief_air_node_name(self):
        """Get zone_relief_air_node_name

        Returns:
            str: the value of `zone_relief_air_node_name` or None if not set
        """
        return self._data["Zone Relief Air Node Name"]

    @zone_relief_air_node_name.setter
    def zone_relief_air_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_relief_air_node_name`
        this is a zone exhaust node, optional if flow is being balanced elsewhere

        Args:
            value (str): value for IDD Field `zone_relief_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_relief_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_relief_air_node_name`')

        self._data["Zone Relief Air Node Name"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:ConstantVolume
                      - Fan:OnOff
                      - Fan:VariableVolume
                      - Fan:ComponentModel
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:ConstantVolume")
            vals.add("Fan:OnOff")
            vals.add("Fan:VariableVolume")
            vals.add("Fan:ComponentModel")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def design_supply_air_flow_rate(self):
        """Get design_supply_air_flow_rate

        Returns:
            float: the value of `design_supply_air_flow_rate` or None if not set
        """
        return self._data["Design Supply Air Flow Rate"]

    @design_supply_air_flow_rate.setter
    def design_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `design_supply_air_flow_rate`

        Args:
            value (float): value for IDD Field `design_supply_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_supply_air_flow_rate`')

        self._data["Design Supply Air Flow Rate"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value=None):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def cooler_unit_control_method(self):
        """Get cooler_unit_control_method

        Returns:
            str: the value of `cooler_unit_control_method` or None if not set
        """
        return self._data["Cooler Unit Control Method"]

    @cooler_unit_control_method.setter
    def cooler_unit_control_method(self, value=None):
        """  Corresponds to IDD Field `cooler_unit_control_method`

        Args:
            value (str): value for IDD Field `cooler_unit_control_method`
                Accepted values are:
                      - ZoneTemperatureDeadbandOnOffCycling
                      - ZoneCoolingLoadOnOffCycling
                      - ZoneCoolingLoadVariableSpeedFan
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooler_unit_control_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooler_unit_control_method`')
            vals = set()
            vals.add("ZoneTemperatureDeadbandOnOffCycling")
            vals.add("ZoneCoolingLoadOnOffCycling")
            vals.add("ZoneCoolingLoadVariableSpeedFan")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooler_unit_control_method`'.format(value))

        self._data["Cooler Unit Control Method"] = value

    @property
    def throttling_range_temperature_difference(self):
        """Get throttling_range_temperature_difference

        Returns:
            float: the value of `throttling_range_temperature_difference` or None if not set
        """
        return self._data["Throttling Range Temperature Difference"]

    @throttling_range_temperature_difference.setter
    def throttling_range_temperature_difference(self, value=1.0 ):
        """  Corresponds to IDD Field `throttling_range_temperature_difference`
        used for ZoneTemperatureDeadbandOnOffCycling hystersis range for thermostatic control

        Args:
            value (float): value for IDD Field `throttling_range_temperature_difference`
                Unit: deltaC
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `throttling_range_temperature_difference`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `throttling_range_temperature_difference`')

        self._data["Throttling Range Temperature Difference"] = value

    @property
    def cooling_load_control_threshold_heat_transfer_rate(self):
        """Get cooling_load_control_threshold_heat_transfer_rate

        Returns:
            float: the value of `cooling_load_control_threshold_heat_transfer_rate` or None if not set
        """
        return self._data["Cooling Load Control Threshold Heat Transfer Rate"]

    @cooling_load_control_threshold_heat_transfer_rate.setter
    def cooling_load_control_threshold_heat_transfer_rate(self, value=100.0 ):
        """  Corresponds to IDD Field `cooling_load_control_threshold_heat_transfer_rate`
        Sign convention is that positive values indicate a cooling load

        Args:
            value (float): value for IDD Field `cooling_load_control_threshold_heat_transfer_rate`
                Unit: W
                Default value: 100.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_load_control_threshold_heat_transfer_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_load_control_threshold_heat_transfer_rate`')

        self._data["Cooling Load Control Threshold Heat Transfer Rate"] = value

    @property
    def first_evaporative_cooler_object_type(self):
        """Get first_evaporative_cooler_object_type

        Returns:
            str: the value of `first_evaporative_cooler_object_type` or None if not set
        """
        return self._data["First Evaporative Cooler Object Type"]

    @first_evaporative_cooler_object_type.setter
    def first_evaporative_cooler_object_type(self, value=None):
        """  Corresponds to IDD Field `first_evaporative_cooler_object_type`

        Args:
            value (str): value for IDD Field `first_evaporative_cooler_object_type`
                Accepted values are:
                      - EvaporativeCooler:Direct:CelDekPad
                      - EvaporativeCooler:Direct:ResearchSpecial
                      - EvaporativeCooler:Indirect:CelDekPad
                      - EvaporativeCooler:Indirect:WetCoil
                      - EvaporativeCooler:Indirect:ResearchSpecial
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `first_evaporative_cooler_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `first_evaporative_cooler_object_type`')
            vals = set()
            vals.add("EvaporativeCooler:Direct:CelDekPad")
            vals.add("EvaporativeCooler:Direct:ResearchSpecial")
            vals.add("EvaporativeCooler:Indirect:CelDekPad")
            vals.add("EvaporativeCooler:Indirect:WetCoil")
            vals.add("EvaporativeCooler:Indirect:ResearchSpecial")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `first_evaporative_cooler_object_type`'.format(value))

        self._data["First Evaporative Cooler Object Type"] = value

    @property
    def first_evaporative_cooler_object_name(self):
        """Get first_evaporative_cooler_object_name

        Returns:
            str: the value of `first_evaporative_cooler_object_name` or None if not set
        """
        return self._data["First Evaporative Cooler Object Name"]

    @first_evaporative_cooler_object_name.setter
    def first_evaporative_cooler_object_name(self, value=None):
        """  Corresponds to IDD Field `first_evaporative_cooler_object_name`

        Args:
            value (str): value for IDD Field `first_evaporative_cooler_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `first_evaporative_cooler_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `first_evaporative_cooler_object_name`')

        self._data["First Evaporative Cooler Object Name"] = value

    @property
    def second_evaporative_cooler_object_type(self):
        """Get second_evaporative_cooler_object_type

        Returns:
            str: the value of `second_evaporative_cooler_object_type` or None if not set
        """
        return self._data["Second Evaporative Cooler Object Type"]

    @second_evaporative_cooler_object_type.setter
    def second_evaporative_cooler_object_type(self, value=None):
        """  Corresponds to IDD Field `second_evaporative_cooler_object_type`
        optional, used for direct/indirect configurations
        second cooler must be immediately downstream of first cooler, if present

        Args:
            value (str): value for IDD Field `second_evaporative_cooler_object_type`
                Accepted values are:
                      - EvaporativeCooler:Direct:CelDekPad
                      - EvaporativeCooler:Direct:ResearchSpecial
                      - EvaporativeCooler:Indirect:CelDekPad
                      - EvaporativeCooler:Indirect:WetCoil
                      - EvaporativeCooler:Indirect:ResearchSpecial
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `second_evaporative_cooler_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `second_evaporative_cooler_object_type`')
            vals = set()
            vals.add("EvaporativeCooler:Direct:CelDekPad")
            vals.add("EvaporativeCooler:Direct:ResearchSpecial")
            vals.add("EvaporativeCooler:Indirect:CelDekPad")
            vals.add("EvaporativeCooler:Indirect:WetCoil")
            vals.add("EvaporativeCooler:Indirect:ResearchSpecial")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `second_evaporative_cooler_object_type`'.format(value))

        self._data["Second Evaporative Cooler Object Type"] = value

    @property
    def second_evaporative_cooler_name(self):
        """Get second_evaporative_cooler_name

        Returns:
            str: the value of `second_evaporative_cooler_name` or None if not set
        """
        return self._data["Second Evaporative Cooler Name"]

    @second_evaporative_cooler_name.setter
    def second_evaporative_cooler_name(self, value=None):
        """  Corresponds to IDD Field `second_evaporative_cooler_name`
        optional, used for direct/indirect configurations

        Args:
            value (str): value for IDD Field `second_evaporative_cooler_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `second_evaporative_cooler_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `second_evaporative_cooler_name`')

        self._data["Second Evaporative Cooler Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.outdoor_air_inlet_node_name))
        out.append(self._to_str(self.cooler_outlet_node_name))
        out.append(self._to_str(self.zone_relief_air_node_name))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.design_supply_air_flow_rate))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.cooler_unit_control_method))
        out.append(self._to_str(self.throttling_range_temperature_difference))
        out.append(self._to_str(self.cooling_load_control_threshold_heat_transfer_rate))
        out.append(self._to_str(self.first_evaporative_cooler_object_type))
        out.append(self._to_str(self.first_evaporative_cooler_object_name))
        out.append(self._to_str(self.second_evaporative_cooler_object_type))
        out.append(self._to_str(self.second_evaporative_cooler_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacOutdoorAirUnit(object):
    """ Corresponds to IDD object `ZoneHVAC:OutdoorAirUnit`
        The zone outdoor air unit models a single-zone dedicated outdoor air system (DOAS).
        Forced-convection 100% outdoor air unit with supply fan and optional equipment
        including exhaust fan, heating coil, cooling coil, and heat recovery.
    """
    internal_name = "ZoneHVAC:OutdoorAirUnit"
    field_count = 19

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:OutdoorAirUnit`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Outdoor Air Flow Rate"] = None
        self._data["Outdoor Air Schedule Name"] = None
        self._data["Supply Fan Name"] = None
        self._data["Supply Fan Placement"] = None
        self._data["Exhaust Fan Name"] = None
        self._data["Exhaust Air Flow Rate"] = None
        self._data["Exhaust Air Schedule Name"] = None
        self._data["Unit Control Type"] = None
        self._data["High Air Control Temperature Schedule Name"] = None
        self._data["Low Air Control Temperature Schedule Name"] = None
        self._data["Outdoor Air Node Name"] = None
        self._data["AirOutlet Node Name"] = None
        self._data["AirInlet Node Name"] = None
        self._data["Supply FanOutlet Node Name"] = None
        self._data["Outdoor Air Unit List Name"] = None
        self._data["Availability Manager List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate = None
        else:
            self.outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_schedule_name = None
        else:
            self.outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_name = None
        else:
            self.supply_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_placement = None
        else:
            self.supply_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_fan_name = None
        else:
            self.exhaust_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_flow_rate = None
        else:
            self.exhaust_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.exhaust_air_schedule_name = None
        else:
            self.exhaust_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.unit_control_type = None
        else:
            self.unit_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.high_air_control_temperature_schedule_name = None
        else:
            self.high_air_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.low_air_control_temperature_schedule_name = None
        else:
            self.low_air_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_node_name = None
        else:
            self.outdoor_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.airoutlet_node_name = None
        else:
            self.airoutlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.airinlet_node_name = None
        else:
            self.airinlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fanoutlet_node_name = None
        else:
            self.supply_fanoutlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_unit_list_name = None
        else:
            self.outdoor_air_unit_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        (name of zone system is serving)

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def outdoor_air_flow_rate(self):
        """Get outdoor_air_flow_rate

        Returns:
            float: the value of `outdoor_air_flow_rate` or None if not set
        """
        return self._data["Outdoor Air Flow Rate"]

    @outdoor_air_flow_rate.setter
    def outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `outdoor_air_flow_rate`')

        self._data["Outdoor Air Flow Rate"] = value

    @property
    def outdoor_air_schedule_name(self):
        """Get outdoor_air_schedule_name

        Returns:
            str: the value of `outdoor_air_schedule_name` or None if not set
        """
        return self._data["Outdoor Air Schedule Name"]

    @outdoor_air_schedule_name.setter
    def outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_schedule_name`

        Args:
            value (str): value for IDD Field `outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_schedule_name`')

        self._data["Outdoor Air Schedule Name"] = value

    @property
    def supply_fan_name(self):
        """Get supply_fan_name

        Returns:
            str: the value of `supply_fan_name` or None if not set
        """
        return self._data["Supply Fan Name"]

    @supply_fan_name.setter
    def supply_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_name`
        Allowable fan types are Fan:ConstantVolume and
        Fan:VariableVolume

        Args:
            value (str): value for IDD Field `supply_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_name`')

        self._data["Supply Fan Name"] = value

    @property
    def supply_fan_placement(self):
        """Get supply_fan_placement

        Returns:
            str: the value of `supply_fan_placement` or None if not set
        """
        return self._data["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `supply_fan_placement`

        Args:
            value (str): value for IDD Field `supply_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_placement`'.format(value))

        self._data["Supply Fan Placement"] = value

    @property
    def exhaust_fan_name(self):
        """Get exhaust_fan_name

        Returns:
            str: the value of `exhaust_fan_name` or None if not set
        """
        return self._data["Exhaust Fan Name"]

    @exhaust_fan_name.setter
    def exhaust_fan_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_fan_name`
        Allowable fan types are Fan:ConstantVolume and
        Fan:VariableVolume

        Args:
            value (str): value for IDD Field `exhaust_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_fan_name`')

        self._data["Exhaust Fan Name"] = value

    @property
    def exhaust_air_flow_rate(self):
        """Get exhaust_air_flow_rate

        Returns:
            float: the value of `exhaust_air_flow_rate` or None if not set
        """
        return self._data["Exhaust Air Flow Rate"]

    @exhaust_air_flow_rate.setter
    def exhaust_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_flow_rate`

        Args:
            value (float): value for IDD Field `exhaust_air_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `exhaust_air_flow_rate`'.format(value))

        self._data["Exhaust Air Flow Rate"] = value

    @property
    def exhaust_air_schedule_name(self):
        """Get exhaust_air_schedule_name

        Returns:
            str: the value of `exhaust_air_schedule_name` or None if not set
        """
        return self._data["Exhaust Air Schedule Name"]

    @exhaust_air_schedule_name.setter
    def exhaust_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `exhaust_air_schedule_name`

        Args:
            value (str): value for IDD Field `exhaust_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_schedule_name`')

        self._data["Exhaust Air Schedule Name"] = value

    @property
    def unit_control_type(self):
        """Get unit_control_type

        Returns:
            str: the value of `unit_control_type` or None if not set
        """
        return self._data["Unit Control Type"]

    @unit_control_type.setter
    def unit_control_type(self, value="NeutralControl"):
        """  Corresponds to IDD Field `unit_control_type`

        Args:
            value (str): value for IDD Field `unit_control_type`
                Accepted values are:
                      - NeutralControl
                      - TemperatureControl
                Default value: NeutralControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `unit_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `unit_control_type`')
            vals = set()
            vals.add("NeutralControl")
            vals.add("TemperatureControl")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `unit_control_type`'.format(value))

        self._data["Unit Control Type"] = value

    @property
    def high_air_control_temperature_schedule_name(self):
        """Get high_air_control_temperature_schedule_name

        Returns:
            str: the value of `high_air_control_temperature_schedule_name` or None if not set
        """
        return self._data["High Air Control Temperature Schedule Name"]

    @high_air_control_temperature_schedule_name.setter
    def high_air_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `high_air_control_temperature_schedule_name`
        Air and control temperatures for cooling. If outdoor air temperature
        is above the high air control temperature, then the zone inlet air temperature
        is set to the high air control temperature. If the outdoor air is between high and low
        air control temperature, then there is no cooling/heating requirements.

        Args:
            value (str): value for IDD Field `high_air_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `high_air_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `high_air_control_temperature_schedule_name`')

        self._data["High Air Control Temperature Schedule Name"] = value

    @property
    def low_air_control_temperature_schedule_name(self):
        """Get low_air_control_temperature_schedule_name

        Returns:
            str: the value of `low_air_control_temperature_schedule_name` or None if not set
        """
        return self._data["Low Air Control Temperature Schedule Name"]

    @low_air_control_temperature_schedule_name.setter
    def low_air_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `low_air_control_temperature_schedule_name`
        Air and control temperatures for Heating. If outdoor air temperature
        is below the low air control temperature, then the zone inlet air temperature
        is set to the low air control temperature. If the outdoor air is between high and low
        air control temperature, then there is no cooling/heating requirements.

        Args:
            value (str): value for IDD Field `low_air_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_air_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_air_control_temperature_schedule_name`')

        self._data["Low Air Control Temperature Schedule Name"] = value

    @property
    def outdoor_air_node_name(self):
        """Get outdoor_air_node_name

        Returns:
            str: the value of `outdoor_air_node_name` or None if not set
        """
        return self._data["Outdoor Air Node Name"]

    @outdoor_air_node_name.setter
    def outdoor_air_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_node_name`

        Args:
            value (str): value for IDD Field `outdoor_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_node_name`')

        self._data["Outdoor Air Node Name"] = value

    @property
    def airoutlet_node_name(self):
        """Get airoutlet_node_name

        Returns:
            str: the value of `airoutlet_node_name` or None if not set
        """
        return self._data["AirOutlet Node Name"]

    @airoutlet_node_name.setter
    def airoutlet_node_name(self, value=None):
        """  Corresponds to IDD Field `airoutlet_node_name`

        Args:
            value (str): value for IDD Field `airoutlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `airoutlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `airoutlet_node_name`')

        self._data["AirOutlet Node Name"] = value

    @property
    def airinlet_node_name(self):
        """Get airinlet_node_name

        Returns:
            str: the value of `airinlet_node_name` or None if not set
        """
        return self._data["AirInlet Node Name"]

    @airinlet_node_name.setter
    def airinlet_node_name(self, value=None):
        """  Corresponds to IDD Field `airinlet_node_name`
        air leaves zone

        Args:
            value (str): value for IDD Field `airinlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `airinlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `airinlet_node_name`')

        self._data["AirInlet Node Name"] = value

    @property
    def supply_fanoutlet_node_name(self):
        """Get supply_fanoutlet_node_name

        Returns:
            str: the value of `supply_fanoutlet_node_name` or None if not set
        """
        return self._data["Supply FanOutlet Node Name"]

    @supply_fanoutlet_node_name.setter
    def supply_fanoutlet_node_name(self, value=None):
        """  Corresponds to IDD Field `supply_fanoutlet_node_name`

        Args:
            value (str): value for IDD Field `supply_fanoutlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fanoutlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fanoutlet_node_name`')

        self._data["Supply FanOutlet Node Name"] = value

    @property
    def outdoor_air_unit_list_name(self):
        """Get outdoor_air_unit_list_name

        Returns:
            str: the value of `outdoor_air_unit_list_name` or None if not set
        """
        return self._data["Outdoor Air Unit List Name"]

    @outdoor_air_unit_list_name.setter
    def outdoor_air_unit_list_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_unit_list_name`
        Enter the name of an ZoneHVAC:OutdoorAirUnit:EquipmentList object.

        Args:
            value (str): value for IDD Field `outdoor_air_unit_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_unit_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_unit_list_name`')

        self._data["Outdoor Air Unit List Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.outdoor_air_flow_rate))
        out.append(self._to_str(self.outdoor_air_schedule_name))
        out.append(self._to_str(self.supply_fan_name))
        out.append(self._to_str(self.supply_fan_placement))
        out.append(self._to_str(self.exhaust_fan_name))
        out.append(self._to_str(self.exhaust_air_flow_rate))
        out.append(self._to_str(self.exhaust_air_schedule_name))
        out.append(self._to_str(self.unit_control_type))
        out.append(self._to_str(self.high_air_control_temperature_schedule_name))
        out.append(self._to_str(self.low_air_control_temperature_schedule_name))
        out.append(self._to_str(self.outdoor_air_node_name))
        out.append(self._to_str(self.airoutlet_node_name))
        out.append(self._to_str(self.airinlet_node_name))
        out.append(self._to_str(self.supply_fanoutlet_node_name))
        out.append(self._to_str(self.outdoor_air_unit_list_name))
        out.append(self._to_str(self.availability_manager_list_name))
        return ",".join(out)

class ZoneHvacOutdoorAirUnitEquipmentList(object):
    """ Corresponds to IDD object `ZoneHVAC:OutdoorAirUnit:EquipmentList`
        Equipment list for components in a ZoneHVAC:OutdoorAirUnit. Components are simulated
        sequentially in the order given in the equipment list.
    """
    internal_name = "ZoneHVAC:OutdoorAirUnit:EquipmentList"
    field_count = 17

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:OutdoorAirUnit:EquipmentList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Component 1 Object Type"] = None
        self._data["Component 1 Name"] = None
        self._data["Component 2 Object Type"] = None
        self._data["Component 2 Name"] = None
        self._data["Component 3 Object Type"] = None
        self._data["Component 3 Name"] = None
        self._data["Component 4 Object Type"] = None
        self._data["Component 4 Name"] = None
        self._data["Component 5 Object Type"] = None
        self._data["Component 5 Name"] = None
        self._data["Component 6 Object Type"] = None
        self._data["Component 6 Name"] = None
        self._data["Component 7 Object Type"] = None
        self._data["Component 7 Name"] = None
        self._data["Component 8 Object Type"] = None
        self._data["Component 8 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_object_type = None
        else:
            self.component_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_name = None
        else:
            self.component_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_object_type = None
        else:
            self.component_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_name = None
        else:
            self.component_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_object_type = None
        else:
            self.component_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_name = None
        else:
            self.component_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_object_type = None
        else:
            self.component_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_name = None
        else:
            self.component_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_object_type = None
        else:
            self.component_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_name = None
        else:
            self.component_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_object_type = None
        else:
            self.component_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_name = None
        else:
            self.component_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_object_type = None
        else:
            self.component_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_name = None
        else:
            self.component_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_object_type = None
        else:
            self.component_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_name = None
        else:
            self.component_8_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def component_1_object_type(self):
        """Get component_1_object_type

        Returns:
            str: the value of `component_1_object_type` or None if not set
        """
        return self._data["Component 1 Object Type"]

    @component_1_object_type.setter
    def component_1_object_type(self, value=None):
        """  Corresponds to IDD Field `component_1_object_type`

        Args:
            value (str): value for IDD Field `component_1_object_type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                      - Coil:Heating:Water
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatexchangerAssisted
                      - CoilSystem:Cooling:DX
                      - CoilSystem:Heating:DX
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - Dehumidifier:Desiccant:NoFans
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_1_object_type`')
            vals = set()
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatexchangerAssisted")
            vals.add("CoilSystem:Cooling:DX")
            vals.add("CoilSystem:Heating:DX")
            vals.add("HeatExchanger:AirToAir:FlatPlate")
            vals.add("HeatExchanger:AirToAir:SensibleAndLatent")
            vals.add("Dehumidifier:Desiccant:NoFans")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_1_object_type`'.format(value))

        self._data["Component 1 Object Type"] = value

    @property
    def component_1_name(self):
        """Get component_1_name

        Returns:
            str: the value of `component_1_name` or None if not set
        """
        return self._data["Component 1 Name"]

    @component_1_name.setter
    def component_1_name(self, value=None):
        """  Corresponds to IDD Field `component_1_name`

        Args:
            value (str): value for IDD Field `component_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_1_name`')

        self._data["Component 1 Name"] = value

    @property
    def component_2_object_type(self):
        """Get component_2_object_type

        Returns:
            str: the value of `component_2_object_type` or None if not set
        """
        return self._data["Component 2 Object Type"]

    @component_2_object_type.setter
    def component_2_object_type(self, value=None):
        """  Corresponds to IDD Field `component_2_object_type`

        Args:
            value (str): value for IDD Field `component_2_object_type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                      - Coil:Heating:Water
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatexchangerAssisted
                      - CoilSystem:Cooling:DX
                      - CoilSystem:Heating:DX
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - Dehumidifier:Desiccant:NoFans
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_2_object_type`')
            vals = set()
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatexchangerAssisted")
            vals.add("CoilSystem:Cooling:DX")
            vals.add("CoilSystem:Heating:DX")
            vals.add("HeatExchanger:AirToAir:FlatPlate")
            vals.add("HeatExchanger:AirToAir:SensibleAndLatent")
            vals.add("Dehumidifier:Desiccant:NoFans")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_2_object_type`'.format(value))

        self._data["Component 2 Object Type"] = value

    @property
    def component_2_name(self):
        """Get component_2_name

        Returns:
            str: the value of `component_2_name` or None if not set
        """
        return self._data["Component 2 Name"]

    @component_2_name.setter
    def component_2_name(self, value=None):
        """  Corresponds to IDD Field `component_2_name`

        Args:
            value (str): value for IDD Field `component_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_2_name`')

        self._data["Component 2 Name"] = value

    @property
    def component_3_object_type(self):
        """Get component_3_object_type

        Returns:
            str: the value of `component_3_object_type` or None if not set
        """
        return self._data["Component 3 Object Type"]

    @component_3_object_type.setter
    def component_3_object_type(self, value=None):
        """  Corresponds to IDD Field `component_3_object_type`

        Args:
            value (str): value for IDD Field `component_3_object_type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                      - Coil:Heating:Water
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatexchangerAssisted
                      - CoilSystem:Cooling:DX
                      - CoilSystem:Heating:DX
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - Dehumidifier:Desiccant:NoFans
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_3_object_type`')
            vals = set()
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatexchangerAssisted")
            vals.add("CoilSystem:Cooling:DX")
            vals.add("CoilSystem:Heating:DX")
            vals.add("HeatExchanger:AirToAir:FlatPlate")
            vals.add("HeatExchanger:AirToAir:SensibleAndLatent")
            vals.add("Dehumidifier:Desiccant:NoFans")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_3_object_type`'.format(value))

        self._data["Component 3 Object Type"] = value

    @property
    def component_3_name(self):
        """Get component_3_name

        Returns:
            str: the value of `component_3_name` or None if not set
        """
        return self._data["Component 3 Name"]

    @component_3_name.setter
    def component_3_name(self, value=None):
        """  Corresponds to IDD Field `component_3_name`

        Args:
            value (str): value for IDD Field `component_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_3_name`')

        self._data["Component 3 Name"] = value

    @property
    def component_4_object_type(self):
        """Get component_4_object_type

        Returns:
            str: the value of `component_4_object_type` or None if not set
        """
        return self._data["Component 4 Object Type"]

    @component_4_object_type.setter
    def component_4_object_type(self, value=None):
        """  Corresponds to IDD Field `component_4_object_type`

        Args:
            value (str): value for IDD Field `component_4_object_type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                      - Coil:Heating:Water
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatexchangerAssisted
                      - CoilSystem:Cooling:DX
                      - CoilSystem:Heating:DX
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - Dehumidifier:Desiccant:NoFans
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_4_object_type`')
            vals = set()
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatexchangerAssisted")
            vals.add("CoilSystem:Cooling:DX")
            vals.add("CoilSystem:Heating:DX")
            vals.add("HeatExchanger:AirToAir:FlatPlate")
            vals.add("HeatExchanger:AirToAir:SensibleAndLatent")
            vals.add("Dehumidifier:Desiccant:NoFans")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_4_object_type`'.format(value))

        self._data["Component 4 Object Type"] = value

    @property
    def component_4_name(self):
        """Get component_4_name

        Returns:
            str: the value of `component_4_name` or None if not set
        """
        return self._data["Component 4 Name"]

    @component_4_name.setter
    def component_4_name(self, value=None):
        """  Corresponds to IDD Field `component_4_name`

        Args:
            value (str): value for IDD Field `component_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_4_name`')

        self._data["Component 4 Name"] = value

    @property
    def component_5_object_type(self):
        """Get component_5_object_type

        Returns:
            str: the value of `component_5_object_type` or None if not set
        """
        return self._data["Component 5 Object Type"]

    @component_5_object_type.setter
    def component_5_object_type(self, value=None):
        """  Corresponds to IDD Field `component_5_object_type`

        Args:
            value (str): value for IDD Field `component_5_object_type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                      - Coil:Heating:Water
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatexchangerAssisted
                      - CoilSystem:Cooling:DX
                      - CoilSystem:Heating:DX
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - Dehumidifier:Desiccant:NoFans
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_5_object_type`')
            vals = set()
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatexchangerAssisted")
            vals.add("CoilSystem:Cooling:DX")
            vals.add("CoilSystem:Heating:DX")
            vals.add("HeatExchanger:AirToAir:FlatPlate")
            vals.add("HeatExchanger:AirToAir:SensibleAndLatent")
            vals.add("Dehumidifier:Desiccant:NoFans")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_5_object_type`'.format(value))

        self._data["Component 5 Object Type"] = value

    @property
    def component_5_name(self):
        """Get component_5_name

        Returns:
            str: the value of `component_5_name` or None if not set
        """
        return self._data["Component 5 Name"]

    @component_5_name.setter
    def component_5_name(self, value=None):
        """  Corresponds to IDD Field `component_5_name`

        Args:
            value (str): value for IDD Field `component_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_5_name`')

        self._data["Component 5 Name"] = value

    @property
    def component_6_object_type(self):
        """Get component_6_object_type

        Returns:
            str: the value of `component_6_object_type` or None if not set
        """
        return self._data["Component 6 Object Type"]

    @component_6_object_type.setter
    def component_6_object_type(self, value=None):
        """  Corresponds to IDD Field `component_6_object_type`

        Args:
            value (str): value for IDD Field `component_6_object_type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                      - Coil:Heating:Water
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatexchangerAssisted
                      - CoilSystem:Cooling:DX
                      - CoilSystem:Heating:DX
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - Dehumidifier:Desiccant:NoFans
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_6_object_type`')
            vals = set()
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatexchangerAssisted")
            vals.add("CoilSystem:Cooling:DX")
            vals.add("CoilSystem:Heating:DX")
            vals.add("HeatExchanger:AirToAir:FlatPlate")
            vals.add("HeatExchanger:AirToAir:SensibleAndLatent")
            vals.add("Dehumidifier:Desiccant:NoFans")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_6_object_type`'.format(value))

        self._data["Component 6 Object Type"] = value

    @property
    def component_6_name(self):
        """Get component_6_name

        Returns:
            str: the value of `component_6_name` or None if not set
        """
        return self._data["Component 6 Name"]

    @component_6_name.setter
    def component_6_name(self, value=None):
        """  Corresponds to IDD Field `component_6_name`

        Args:
            value (str): value for IDD Field `component_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_6_name`')

        self._data["Component 6 Name"] = value

    @property
    def component_7_object_type(self):
        """Get component_7_object_type

        Returns:
            str: the value of `component_7_object_type` or None if not set
        """
        return self._data["Component 7 Object Type"]

    @component_7_object_type.setter
    def component_7_object_type(self, value=None):
        """  Corresponds to IDD Field `component_7_object_type`

        Args:
            value (str): value for IDD Field `component_7_object_type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                      - Coil:Heating:Water
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatexchangerAssisted
                      - CoilSystem:Cooling:DX
                      - CoilSystem:Heating:DX
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - Dehumidifier:Desiccant:NoFans
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_7_object_type`')
            vals = set()
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatexchangerAssisted")
            vals.add("CoilSystem:Cooling:DX")
            vals.add("CoilSystem:Heating:DX")
            vals.add("HeatExchanger:AirToAir:FlatPlate")
            vals.add("HeatExchanger:AirToAir:SensibleAndLatent")
            vals.add("Dehumidifier:Desiccant:NoFans")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_7_object_type`'.format(value))

        self._data["Component 7 Object Type"] = value

    @property
    def component_7_name(self):
        """Get component_7_name

        Returns:
            str: the value of `component_7_name` or None if not set
        """
        return self._data["Component 7 Name"]

    @component_7_name.setter
    def component_7_name(self, value=None):
        """  Corresponds to IDD Field `component_7_name`

        Args:
            value (str): value for IDD Field `component_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_7_name`')

        self._data["Component 7 Name"] = value

    @property
    def component_8_object_type(self):
        """Get component_8_object_type

        Returns:
            str: the value of `component_8_object_type` or None if not set
        """
        return self._data["Component 8 Object Type"]

    @component_8_object_type.setter
    def component_8_object_type(self, value=None):
        """  Corresponds to IDD Field `component_8_object_type`

        Args:
            value (str): value for IDD Field `component_8_object_type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                      - Coil:Heating:Water
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatexchangerAssisted
                      - CoilSystem:Cooling:DX
                      - CoilSystem:Heating:DX
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - Dehumidifier:Desiccant:NoFans
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_8_object_type`')
            vals = set()
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatexchangerAssisted")
            vals.add("CoilSystem:Cooling:DX")
            vals.add("CoilSystem:Heating:DX")
            vals.add("HeatExchanger:AirToAir:FlatPlate")
            vals.add("HeatExchanger:AirToAir:SensibleAndLatent")
            vals.add("Dehumidifier:Desiccant:NoFans")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_8_object_type`'.format(value))

        self._data["Component 8 Object Type"] = value

    @property
    def component_8_name(self):
        """Get component_8_name

        Returns:
            str: the value of `component_8_name` or None if not set
        """
        return self._data["Component 8 Name"]

    @component_8_name.setter
    def component_8_name(self, value=None):
        """  Corresponds to IDD Field `component_8_name`

        Args:
            value (str): value for IDD Field `component_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_8_name`')

        self._data["Component 8 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.component_1_object_type))
        out.append(self._to_str(self.component_1_name))
        out.append(self._to_str(self.component_2_object_type))
        out.append(self._to_str(self.component_2_name))
        out.append(self._to_str(self.component_3_object_type))
        out.append(self._to_str(self.component_3_name))
        out.append(self._to_str(self.component_4_object_type))
        out.append(self._to_str(self.component_4_name))
        out.append(self._to_str(self.component_5_object_type))
        out.append(self._to_str(self.component_5_name))
        out.append(self._to_str(self.component_6_object_type))
        out.append(self._to_str(self.component_6_name))
        out.append(self._to_str(self.component_7_object_type))
        out.append(self._to_str(self.component_7_name))
        out.append(self._to_str(self.component_8_object_type))
        out.append(self._to_str(self.component_8_name))
        return ",".join(out)

class ZoneHvacTerminalUnitVariableRefrigerantFlow(object):
    """ Corresponds to IDD object `ZoneHVAC:TerminalUnit:VariableRefrigerantFlow`
        Zone terminal unit with variable refrigerant flow (VRF) DX cooling and heating coils
        (air-to-air heat pump). The VRF terminal units are served by an
        AirConditioner:VariableRefrigerantFlow system.
    """
    internal_name = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
    field_count = 26

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:TerminalUnit:VariableRefrigerantFlow`
        """
        self._data = OrderedDict()
        self._data["Zone Terminal Unit Name"] = None
        self._data["Terminal Unit Availability Schedule"] = None
        self._data["Terminal Unit Air Inlet Node Name"] = None
        self._data["Terminal Unit Air Outlet Node Name"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate When No Cooling is Needed"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate When No Heating is Needed"] = None
        self._data["Outdoor Air Flow Rate During Cooling Operation"] = None
        self._data["Outdoor Air Flow Rate During Heating Operation"] = None
        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Supply Air Fan Placement"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Object Name"] = None
        self._data["Outside Air Mixer Object Type"] = None
        self._data["Outside Air Mixer Object Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Object Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Object Name"] = None
        self._data["Zone Terminal Unit On Parasitic Electric Energy Use"] = None
        self._data["Zone Terminal Unit Off Parasitic Electric Energy Use"] = None
        self._data["Rated Heating Capacity Sizing Ratio"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_terminal_unit_name = None
        else:
            self.zone_terminal_unit_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.terminal_unit_availability_schedule = None
        else:
            self.terminal_unit_availability_schedule = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.terminal_unit_air_inlet_node_name = None
        else:
            self.terminal_unit_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.terminal_unit_air_outlet_node_name = None
        else:
            self.terminal_unit_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_cooling_operation = None
        else:
            self.outdoor_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_heating_operation = None
        else:
            self.outdoor_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_placement = None
        else:
            self.supply_air_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_name = None
        else:
            self.supply_air_fan_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outside_air_mixer_object_type = None
        else:
            self.outside_air_mixer_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outside_air_mixer_object_name = None
        else:
            self.outside_air_mixer_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_name = None
        else:
            self.cooling_coil_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_name = None
        else:
            self.heating_coil_object_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_terminal_unit_on_parasitic_electric_energy_use = None
        else:
            self.zone_terminal_unit_on_parasitic_electric_energy_use = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_terminal_unit_off_parasitic_electric_energy_use = None
        else:
            self.zone_terminal_unit_off_parasitic_electric_energy_use = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_heating_capacity_sizing_ratio = None
        else:
            self.rated_heating_capacity_sizing_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def zone_terminal_unit_name(self):
        """Get zone_terminal_unit_name

        Returns:
            str: the value of `zone_terminal_unit_name` or None if not set
        """
        return self._data["Zone Terminal Unit Name"]

    @zone_terminal_unit_name.setter
    def zone_terminal_unit_name(self, value=None):
        """  Corresponds to IDD Field `zone_terminal_unit_name`

        Args:
            value (str): value for IDD Field `zone_terminal_unit_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_terminal_unit_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_terminal_unit_name`')

        self._data["Zone Terminal Unit Name"] = value

    @property
    def terminal_unit_availability_schedule(self):
        """Get terminal_unit_availability_schedule

        Returns:
            str: the value of `terminal_unit_availability_schedule` or None if not set
        """
        return self._data["Terminal Unit Availability Schedule"]

    @terminal_unit_availability_schedule.setter
    def terminal_unit_availability_schedule(self, value=None):
        """  Corresponds to IDD Field `terminal_unit_availability_schedule`
        The unit is available the entire simulation if this field is left blank
        Schedule values of 0 denote the unit is off.

        Args:
            value (str): value for IDD Field `terminal_unit_availability_schedule`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `terminal_unit_availability_schedule`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `terminal_unit_availability_schedule`')

        self._data["Terminal Unit Availability Schedule"] = value

    @property
    def terminal_unit_air_inlet_node_name(self):
        """Get terminal_unit_air_inlet_node_name

        Returns:
            str: the value of `terminal_unit_air_inlet_node_name` or None if not set
        """
        return self._data["Terminal Unit Air Inlet Node Name"]

    @terminal_unit_air_inlet_node_name.setter
    def terminal_unit_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `terminal_unit_air_inlet_node_name`
        the inlet node to the terminal unit

        Args:
            value (str): value for IDD Field `terminal_unit_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `terminal_unit_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `terminal_unit_air_inlet_node_name`')

        self._data["Terminal Unit Air Inlet Node Name"] = value

    @property
    def terminal_unit_air_outlet_node_name(self):
        """Get terminal_unit_air_outlet_node_name

        Returns:
            str: the value of `terminal_unit_air_outlet_node_name` or None if not set
        """
        return self._data["Terminal Unit Air Outlet Node Name"]

    @terminal_unit_air_outlet_node_name.setter
    def terminal_unit_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `terminal_unit_air_outlet_node_name`
        the outlet node of the terminal unit

        Args:
            value (str): value for IDD Field `terminal_unit_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `terminal_unit_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `terminal_unit_air_outlet_node_name`')

        self._data["Terminal Unit Air Outlet Node Name"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling is Needed"]

    @supply_air_flow_rate_when_no_cooling_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_is_needed`

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling is Needed"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Heating is Needed"]

    @supply_air_flow_rate_when_no_heating_is_needed.setter
    def supply_air_flow_rate_when_no_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_heating_is_needed`

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Heating is Needed"] = value

    @property
    def outdoor_air_flow_rate_during_cooling_operation(self):
        """Get outdoor_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Cooling Operation"]

    @outdoor_air_flow_rate_during_cooling_operation.setter
    def outdoor_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_cooling_operation`

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`')

        self._data["Outdoor Air Flow Rate During Cooling Operation"] = value

    @property
    def outdoor_air_flow_rate_during_heating_operation(self):
        """Get outdoor_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Heating Operation"]

    @outdoor_air_flow_rate_during_heating_operation.setter
    def outdoor_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_heating_operation`

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`')

        self._data["Outdoor Air Flow Rate During Heating Operation"] = value

    @property
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"]

    @outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def supply_air_fan_placement(self):
        """Get supply_air_fan_placement

        Returns:
            str: the value of `supply_air_fan_placement` or None if not set
        """
        return self._data["Supply Air Fan Placement"]

    @supply_air_fan_placement.setter
    def supply_air_fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `supply_air_fan_placement`
        Select fan placement as either blow through or draw through.

        Args:
            value (str): value for IDD Field `supply_air_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_placement`'.format(value))

        self._data["Supply Air Fan Placement"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value="Fan:ConstantVolume"):
        """  Corresponds to IDD Field `supply_air_fan_object_type`

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                Default value: Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_object_name(self):
        """Get supply_air_fan_object_name

        Returns:
            str: the value of `supply_air_fan_object_name` or None if not set
        """
        return self._data["Supply Air Fan Object Name"]

    @supply_air_fan_object_name.setter
    def supply_air_fan_object_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_name`

        Args:
            value (str): value for IDD Field `supply_air_fan_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_name`')

        self._data["Supply Air Fan Object Name"] = value

    @property
    def outside_air_mixer_object_type(self):
        """Get outside_air_mixer_object_type

        Returns:
            str: the value of `outside_air_mixer_object_type` or None if not set
        """
        return self._data["Outside Air Mixer Object Type"]

    @outside_air_mixer_object_type.setter
    def outside_air_mixer_object_type(self, value=None):
        """  Corresponds to IDD Field `outside_air_mixer_object_type`
        If this field is blank, and outside air mixer is not used.

        Args:
            value (str): value for IDD Field `outside_air_mixer_object_type`
                Accepted values are:
                      - OutdoorAir:Mixer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_air_mixer_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_air_mixer_object_type`')
            vals = set()
            vals.add("OutdoorAir:Mixer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outside_air_mixer_object_type`'.format(value))

        self._data["Outside Air Mixer Object Type"] = value

    @property
    def outside_air_mixer_object_name(self):
        """Get outside_air_mixer_object_name

        Returns:
            str: the value of `outside_air_mixer_object_name` or None if not set
        """
        return self._data["Outside Air Mixer Object Name"]

    @outside_air_mixer_object_name.setter
    def outside_air_mixer_object_name(self, value=None):
        """  Corresponds to IDD Field `outside_air_mixer_object_name`
        If this field is blank, and outside air mixer is not used.

        Args:
            value (str): value for IDD Field `outside_air_mixer_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_air_mixer_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_air_mixer_object_name`')

        self._data["Outside Air Mixer Object Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow
        This field may be left blank if heating-only mode is used

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:VariableRefrigerantFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:VariableRefrigerantFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_object_name(self):
        """Get cooling_coil_object_name

        Returns:
            str: the value of `cooling_coil_object_name` or None if not set
        """
        return self._data["Cooling Coil Object Name"]

    @cooling_coil_object_name.setter
    def cooling_coil_object_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_name`
        Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow
        This field may be left blank if heating-only mode is used

        Args:
            value (str): value for IDD Field `cooling_coil_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_name`')

        self._data["Cooling Coil Object Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow
        This field may be left blank if cooling-only mode is used

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:DX:VariableRefrigerantFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:DX:VariableRefrigerantFlow")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_object_name(self):
        """Get heating_coil_object_name

        Returns:
            str: the value of `heating_coil_object_name` or None if not set
        """
        return self._data["Heating Coil Object Name"]

    @heating_coil_object_name.setter
    def heating_coil_object_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_name`
        Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow
        This field may be left blank if cooling-only mode is used

        Args:
            value (str): value for IDD Field `heating_coil_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_name`')

        self._data["Heating Coil Object Name"] = value

    @property
    def zone_terminal_unit_on_parasitic_electric_energy_use(self):
        """Get zone_terminal_unit_on_parasitic_electric_energy_use

        Returns:
            float: the value of `zone_terminal_unit_on_parasitic_electric_energy_use` or None if not set
        """
        return self._data["Zone Terminal Unit On Parasitic Electric Energy Use"]

    @zone_terminal_unit_on_parasitic_electric_energy_use.setter
    def zone_terminal_unit_on_parasitic_electric_energy_use(self, value=0.0 ):
        """  Corresponds to IDD Field `zone_terminal_unit_on_parasitic_electric_energy_use`

        Args:
            value (float): value for IDD Field `zone_terminal_unit_on_parasitic_electric_energy_use`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_terminal_unit_on_parasitic_electric_energy_use`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_terminal_unit_on_parasitic_electric_energy_use`')

        self._data["Zone Terminal Unit On Parasitic Electric Energy Use"] = value

    @property
    def zone_terminal_unit_off_parasitic_electric_energy_use(self):
        """Get zone_terminal_unit_off_parasitic_electric_energy_use

        Returns:
            float: the value of `zone_terminal_unit_off_parasitic_electric_energy_use` or None if not set
        """
        return self._data["Zone Terminal Unit Off Parasitic Electric Energy Use"]

    @zone_terminal_unit_off_parasitic_electric_energy_use.setter
    def zone_terminal_unit_off_parasitic_electric_energy_use(self, value=0.0 ):
        """  Corresponds to IDD Field `zone_terminal_unit_off_parasitic_electric_energy_use`

        Args:
            value (float): value for IDD Field `zone_terminal_unit_off_parasitic_electric_energy_use`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `zone_terminal_unit_off_parasitic_electric_energy_use`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `zone_terminal_unit_off_parasitic_electric_energy_use`')

        self._data["Zone Terminal Unit Off Parasitic Electric Energy Use"] = value

    @property
    def rated_heating_capacity_sizing_ratio(self):
        """Get rated_heating_capacity_sizing_ratio

        Returns:
            float: the value of `rated_heating_capacity_sizing_ratio` or None if not set
        """
        return self._data["Rated Heating Capacity Sizing Ratio"]

    @rated_heating_capacity_sizing_ratio.setter
    def rated_heating_capacity_sizing_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `rated_heating_capacity_sizing_ratio`
        If this terminal unit's heating coil is autosized, the heating capacity is sized
        to be equal to the cooling capacity multiplied by this sizing ratio.
        This input applies to the terminal unit heating coil and overrides the sizing
        ratio entered in the AirConditioner:VariableRefrigerantFlow object.

        Args:
            value (float): value for IDD Field `rated_heating_capacity_sizing_ratio`
                Unit: W/W
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_heating_capacity_sizing_ratio`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `rated_heating_capacity_sizing_ratio`')

        self._data["Rated Heating Capacity Sizing Ratio"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_terminal_unit_name))
        out.append(self._to_str(self.terminal_unit_availability_schedule))
        out.append(self._to_str(self.terminal_unit_air_inlet_node_name))
        out.append(self._to_str(self.terminal_unit_air_outlet_node_name))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_is_needed))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_heating_is_needed))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.supply_air_fan_placement))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_object_name))
        out.append(self._to_str(self.outside_air_mixer_object_type))
        out.append(self._to_str(self.outside_air_mixer_object_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_object_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_object_name))
        out.append(self._to_str(self.zone_terminal_unit_on_parasitic_electric_energy_use))
        out.append(self._to_str(self.zone_terminal_unit_off_parasitic_electric_energy_use))
        out.append(self._to_str(self.rated_heating_capacity_sizing_ratio))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacBaseboardRadiantConvectiveWater(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:RadiantConvective:Water`
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:Baseboard:RadiantConvective:Water"
    field_count = 214

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:Baseboard:RadiantConvective:Water`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Rated Average Water Temperature"] = None
        self._data["Rated Water Mass Flow Rate"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Maximum Water Flow Rate"] = None
        self._data["Convergence Tolerance"] = None
        self._data["Fraction Radiant"] = None
        self._data["Fraction of Radiant Energy Incident on People"] = None
        self._data["Surface 1 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_average_water_temperature = None
        else:
            self.rated_average_water_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_water_mass_flow_rate = None
        else:
            self.rated_water_mass_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_water_flow_rate = None
        else:
            self.maximum_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.convergence_tolerance = None
        else:
            self.convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_radiant = None
        else:
            self.fraction_radiant = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_incident_on_people = None
        else:
            self.fraction_of_radiant_energy_incident_on_people = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_1 = None
        else:
            self.fraction_of_radiant_energy_to_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_2 = None
        else:
            self.fraction_of_radiant_energy_to_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_3 = None
        else:
            self.fraction_of_radiant_energy_to_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_4 = None
        else:
            self.fraction_of_radiant_energy_to_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_5 = None
        else:
            self.fraction_of_radiant_energy_to_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_6 = None
        else:
            self.fraction_of_radiant_energy_to_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_7 = None
        else:
            self.fraction_of_radiant_energy_to_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_8 = None
        else:
            self.fraction_of_radiant_energy_to_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_9 = None
        else:
            self.fraction_of_radiant_energy_to_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_10 = None
        else:
            self.fraction_of_radiant_energy_to_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_11 = None
        else:
            self.fraction_of_radiant_energy_to_surface_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_12 = None
        else:
            self.fraction_of_radiant_energy_to_surface_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_13 = None
        else:
            self.fraction_of_radiant_energy_to_surface_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_14 = None
        else:
            self.fraction_of_radiant_energy_to_surface_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_15 = None
        else:
            self.fraction_of_radiant_energy_to_surface_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_16 = None
        else:
            self.fraction_of_radiant_energy_to_surface_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_17 = None
        else:
            self.fraction_of_radiant_energy_to_surface_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_18 = None
        else:
            self.fraction_of_radiant_energy_to_surface_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_19 = None
        else:
            self.fraction_of_radiant_energy_to_surface_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_20 = None
        else:
            self.fraction_of_radiant_energy_to_surface_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_21 = None
        else:
            self.fraction_of_radiant_energy_to_surface_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_22 = None
        else:
            self.fraction_of_radiant_energy_to_surface_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_23 = None
        else:
            self.fraction_of_radiant_energy_to_surface_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_24 = None
        else:
            self.fraction_of_radiant_energy_to_surface_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_25 = None
        else:
            self.fraction_of_radiant_energy_to_surface_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_26 = None
        else:
            self.fraction_of_radiant_energy_to_surface_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_27 = None
        else:
            self.fraction_of_radiant_energy_to_surface_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_28 = None
        else:
            self.fraction_of_radiant_energy_to_surface_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_29 = None
        else:
            self.fraction_of_radiant_energy_to_surface_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_30 = None
        else:
            self.fraction_of_radiant_energy_to_surface_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_31 = None
        else:
            self.fraction_of_radiant_energy_to_surface_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_32 = None
        else:
            self.fraction_of_radiant_energy_to_surface_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_33 = None
        else:
            self.fraction_of_radiant_energy_to_surface_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_34 = None
        else:
            self.fraction_of_radiant_energy_to_surface_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_35 = None
        else:
            self.fraction_of_radiant_energy_to_surface_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_36 = None
        else:
            self.fraction_of_radiant_energy_to_surface_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_37 = None
        else:
            self.fraction_of_radiant_energy_to_surface_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_38 = None
        else:
            self.fraction_of_radiant_energy_to_surface_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_39 = None
        else:
            self.fraction_of_radiant_energy_to_surface_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_40 = None
        else:
            self.fraction_of_radiant_energy_to_surface_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_41 = None
        else:
            self.fraction_of_radiant_energy_to_surface_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_42 = None
        else:
            self.fraction_of_radiant_energy_to_surface_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_43 = None
        else:
            self.fraction_of_radiant_energy_to_surface_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_44 = None
        else:
            self.fraction_of_radiant_energy_to_surface_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_45 = None
        else:
            self.fraction_of_radiant_energy_to_surface_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_46 = None
        else:
            self.fraction_of_radiant_energy_to_surface_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_47 = None
        else:
            self.fraction_of_radiant_energy_to_surface_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_48 = None
        else:
            self.fraction_of_radiant_energy_to_surface_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_49 = None
        else:
            self.fraction_of_radiant_energy_to_surface_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_50 = None
        else:
            self.fraction_of_radiant_energy_to_surface_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_51 = None
        else:
            self.fraction_of_radiant_energy_to_surface_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_52 = None
        else:
            self.fraction_of_radiant_energy_to_surface_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_53 = None
        else:
            self.fraction_of_radiant_energy_to_surface_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_54 = None
        else:
            self.fraction_of_radiant_energy_to_surface_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_55 = None
        else:
            self.fraction_of_radiant_energy_to_surface_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_56 = None
        else:
            self.fraction_of_radiant_energy_to_surface_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_57 = None
        else:
            self.fraction_of_radiant_energy_to_surface_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_58 = None
        else:
            self.fraction_of_radiant_energy_to_surface_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_59 = None
        else:
            self.fraction_of_radiant_energy_to_surface_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_60 = None
        else:
            self.fraction_of_radiant_energy_to_surface_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_61 = None
        else:
            self.fraction_of_radiant_energy_to_surface_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_62 = None
        else:
            self.fraction_of_radiant_energy_to_surface_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_63 = None
        else:
            self.fraction_of_radiant_energy_to_surface_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_64 = None
        else:
            self.fraction_of_radiant_energy_to_surface_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_65 = None
        else:
            self.fraction_of_radiant_energy_to_surface_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_66 = None
        else:
            self.fraction_of_radiant_energy_to_surface_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_67 = None
        else:
            self.fraction_of_radiant_energy_to_surface_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_68 = None
        else:
            self.fraction_of_radiant_energy_to_surface_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_69 = None
        else:
            self.fraction_of_radiant_energy_to_surface_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_70 = None
        else:
            self.fraction_of_radiant_energy_to_surface_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_71 = None
        else:
            self.fraction_of_radiant_energy_to_surface_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_72 = None
        else:
            self.fraction_of_radiant_energy_to_surface_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_73 = None
        else:
            self.fraction_of_radiant_energy_to_surface_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_74 = None
        else:
            self.fraction_of_radiant_energy_to_surface_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_75 = None
        else:
            self.fraction_of_radiant_energy_to_surface_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_76 = None
        else:
            self.fraction_of_radiant_energy_to_surface_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_77 = None
        else:
            self.fraction_of_radiant_energy_to_surface_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_78 = None
        else:
            self.fraction_of_radiant_energy_to_surface_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_79 = None
        else:
            self.fraction_of_radiant_energy_to_surface_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_80 = None
        else:
            self.fraction_of_radiant_energy_to_surface_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_81 = None
        else:
            self.fraction_of_radiant_energy_to_surface_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_82 = None
        else:
            self.fraction_of_radiant_energy_to_surface_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_83 = None
        else:
            self.fraction_of_radiant_energy_to_surface_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_84 = None
        else:
            self.fraction_of_radiant_energy_to_surface_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_85 = None
        else:
            self.fraction_of_radiant_energy_to_surface_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_86 = None
        else:
            self.fraction_of_radiant_energy_to_surface_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_87 = None
        else:
            self.fraction_of_radiant_energy_to_surface_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_88 = None
        else:
            self.fraction_of_radiant_energy_to_surface_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_89 = None
        else:
            self.fraction_of_radiant_energy_to_surface_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_90 = None
        else:
            self.fraction_of_radiant_energy_to_surface_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_91 = None
        else:
            self.fraction_of_radiant_energy_to_surface_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_92 = None
        else:
            self.fraction_of_radiant_energy_to_surface_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_93 = None
        else:
            self.fraction_of_radiant_energy_to_surface_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_94 = None
        else:
            self.fraction_of_radiant_energy_to_surface_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_95 = None
        else:
            self.fraction_of_radiant_energy_to_surface_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_96 = None
        else:
            self.fraction_of_radiant_energy_to_surface_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_97 = None
        else:
            self.fraction_of_radiant_energy_to_surface_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_98 = None
        else:
            self.fraction_of_radiant_energy_to_surface_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_99 = None
        else:
            self.fraction_of_radiant_energy_to_surface_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_100 = None
        else:
            self.fraction_of_radiant_energy_to_surface_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def rated_average_water_temperature(self):
        """Get rated_average_water_temperature

        Returns:
            float: the value of `rated_average_water_temperature` or None if not set
        """
        return self._data["Rated Average Water Temperature"]

    @rated_average_water_temperature.setter
    def rated_average_water_temperature(self, value=87.78 ):
        """  Corresponds to IDD Field `rated_average_water_temperature`
        Rated average water temperature is the average of the inlet and outlet water temperatures
        at rated conditions.

        Args:
            value (float): value for IDD Field `rated_average_water_temperature`
                Unit: C
                Default value: 87.78
                value >= 20.0
                value <= 150.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_average_water_temperature`'.format(value))
            if value < 20.0:
                raise ValueError('value need to be greater or equal 20.0 '
                                 'for field `rated_average_water_temperature`')
            if value > 150.0:
                raise ValueError('value need to be smaller 150.0 '
                                 'for field `rated_average_water_temperature`')

        self._data["Rated Average Water Temperature"] = value

    @property
    def rated_water_mass_flow_rate(self):
        """Get rated_water_mass_flow_rate

        Returns:
            float: the value of `rated_water_mass_flow_rate` or None if not set
        """
        return self._data["Rated Water Mass Flow Rate"]

    @rated_water_mass_flow_rate.setter
    def rated_water_mass_flow_rate(self, value=0.063 ):
        """  Corresponds to IDD Field `rated_water_mass_flow_rate`
        Standard is I=B=R Rating document where all baseboards are rated at either 0.063 kg/s (1 gpm)
        or 0.252 kg/s (4 gpm).  It is recommended that users find data for the baseboard heater that
        corresponds to performance at 0.063 kg/s unless the flow rate is expected to be above 0.252 kg/s.
        If the flow rate is expected to be above 0.252 kg/s, this field should be 0.252 kg/s.

        Args:
            value (float): value for IDD Field `rated_water_mass_flow_rate`
                Unit: Kg/s
                Default value: 0.063
                value > 0.0
                value <= 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_water_mass_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_water_mass_flow_rate`')
            if value > 10.0:
                raise ValueError('value need to be smaller 10.0 '
                                 'for field `rated_water_mass_flow_rate`')

        self._data["Rated Water Mass Flow Rate"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `heating_design_capacity_method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `heating_design_capacity_method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            vals = set()
            vals.add("HeatingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_design_capacity_method`'.format(value))

        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity`
        Enter the design heating capacity. Required field when the heating design capacity method
        HeatingDesignCapacity. This input field is rated heating capacity. Users must multiply the
        actual finned length published in the literature to determine the rated capacity. Rated
        Capacity is for an inlet air dry-bulb temperature of 18.0C, the Rated Water Mass Flow Rate
        of 0.063kg/s or 0.252kg/s, and the Rated Average Water Temperature between 32.2C and 115.6C.

        Args:
            value (float): value for IDD Field `heating_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')

        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity_per_floor_area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `heating_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')

        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_autosized_heating_design_capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_heating_design_capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')

        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def maximum_water_flow_rate(self):
        """Get maximum_water_flow_rate

        Returns:
            float: the value of `maximum_water_flow_rate` or None if not set
        """
        return self._data["Maximum Water Flow Rate"]

    @maximum_water_flow_rate.setter
    def maximum_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_water_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_water_flow_rate`'.format(value))

        self._data["Maximum Water Flow Rate"] = value

    @property
    def convergence_tolerance(self):
        """Get convergence_tolerance

        Returns:
            float: the value of `convergence_tolerance` or None if not set
        """
        return self._data["Convergence Tolerance"]

    @convergence_tolerance.setter
    def convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `convergence_tolerance`

        Args:
            value (float): value for IDD Field `convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `convergence_tolerance`')

        self._data["Convergence Tolerance"] = value

    @property
    def fraction_radiant(self):
        """Get fraction_radiant

        Returns:
            float: the value of `fraction_radiant` or None if not set
        """
        return self._data["Fraction Radiant"]

    @fraction_radiant.setter
    def fraction_radiant(self, value=None):
        """  Corresponds to IDD Field `fraction_radiant`

        Args:
            value (float): value for IDD Field `fraction_radiant`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_radiant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_radiant`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_radiant`')

        self._data["Fraction Radiant"] = value

    @property
    def fraction_of_radiant_energy_incident_on_people(self):
        """Get fraction_of_radiant_energy_incident_on_people

        Returns:
            float: the value of `fraction_of_radiant_energy_incident_on_people` or None if not set
        """
        return self._data["Fraction of Radiant Energy Incident on People"]

    @fraction_of_radiant_energy_incident_on_people.setter
    def fraction_of_radiant_energy_incident_on_people(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_incident_on_people`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_incident_on_people`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_incident_on_people`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')

        self._data["Fraction of Radiant Energy Incident on People"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `surface_1_name`
        Radiant energy may be distributed to specific surfaces

        Args:
            value (str): value for IDD Field `surface_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')

        self._data["Surface 1 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_1(self):
        """Get fraction_of_radiant_energy_to_surface_1

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_1` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 1"]

    @fraction_of_radiant_energy_to_surface_1.setter
    def fraction_of_radiant_energy_to_surface_1(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_1`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')

        self._data["Fraction of Radiant Energy to Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `surface_2_name`

        Args:
            value (str): value for IDD Field `surface_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')

        self._data["Surface 2 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_2(self):
        """Get fraction_of_radiant_energy_to_surface_2

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_2` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 2"]

    @fraction_of_radiant_energy_to_surface_2.setter
    def fraction_of_radiant_energy_to_surface_2(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_2`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')

        self._data["Fraction of Radiant Energy to Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `surface_3_name`

        Args:
            value (str): value for IDD Field `surface_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')

        self._data["Surface 3 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_3(self):
        """Get fraction_of_radiant_energy_to_surface_3

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_3` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 3"]

    @fraction_of_radiant_energy_to_surface_3.setter
    def fraction_of_radiant_energy_to_surface_3(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_3`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')

        self._data["Fraction of Radiant Energy to Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `surface_4_name`

        Args:
            value (str): value for IDD Field `surface_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')

        self._data["Surface 4 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_4(self):
        """Get fraction_of_radiant_energy_to_surface_4

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_4` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 4"]

    @fraction_of_radiant_energy_to_surface_4.setter
    def fraction_of_radiant_energy_to_surface_4(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_4`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')

        self._data["Fraction of Radiant Energy to Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `surface_5_name`

        Args:
            value (str): value for IDD Field `surface_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')

        self._data["Surface 5 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_5(self):
        """Get fraction_of_radiant_energy_to_surface_5

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_5` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 5"]

    @fraction_of_radiant_energy_to_surface_5.setter
    def fraction_of_radiant_energy_to_surface_5(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_5`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')

        self._data["Fraction of Radiant Energy to Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `surface_6_name`

        Args:
            value (str): value for IDD Field `surface_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')

        self._data["Surface 6 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_6(self):
        """Get fraction_of_radiant_energy_to_surface_6

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_6` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 6"]

    @fraction_of_radiant_energy_to_surface_6.setter
    def fraction_of_radiant_energy_to_surface_6(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_6`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_6`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')

        self._data["Fraction of Radiant Energy to Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `surface_7_name`

        Args:
            value (str): value for IDD Field `surface_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')

        self._data["Surface 7 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_7(self):
        """Get fraction_of_radiant_energy_to_surface_7

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_7` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 7"]

    @fraction_of_radiant_energy_to_surface_7.setter
    def fraction_of_radiant_energy_to_surface_7(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_7`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_7`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')

        self._data["Fraction of Radiant Energy to Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `surface_8_name`

        Args:
            value (str): value for IDD Field `surface_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')

        self._data["Surface 8 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_8(self):
        """Get fraction_of_radiant_energy_to_surface_8

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_8` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 8"]

    @fraction_of_radiant_energy_to_surface_8.setter
    def fraction_of_radiant_energy_to_surface_8(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_8`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_8`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')

        self._data["Fraction of Radiant Energy to Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `surface_9_name`

        Args:
            value (str): value for IDD Field `surface_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')

        self._data["Surface 9 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_9(self):
        """Get fraction_of_radiant_energy_to_surface_9

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_9` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 9"]

    @fraction_of_radiant_energy_to_surface_9.setter
    def fraction_of_radiant_energy_to_surface_9(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_9`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_9`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')

        self._data["Fraction of Radiant Energy to Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `surface_10_name`

        Args:
            value (str): value for IDD Field `surface_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')

        self._data["Surface 10 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_10(self):
        """Get fraction_of_radiant_energy_to_surface_10

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_10` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 10"]

    @fraction_of_radiant_energy_to_surface_10.setter
    def fraction_of_radiant_energy_to_surface_10(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_10`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_10`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')

        self._data["Fraction of Radiant Energy to Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `surface_11_name`

        Args:
            value (str): value for IDD Field `surface_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')

        self._data["Surface 11 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_11(self):
        """Get fraction_of_radiant_energy_to_surface_11

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_11` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 11"]

    @fraction_of_radiant_energy_to_surface_11.setter
    def fraction_of_radiant_energy_to_surface_11(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_11`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_11`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')

        self._data["Fraction of Radiant Energy to Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `surface_12_name`

        Args:
            value (str): value for IDD Field `surface_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')

        self._data["Surface 12 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_12(self):
        """Get fraction_of_radiant_energy_to_surface_12

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_12` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 12"]

    @fraction_of_radiant_energy_to_surface_12.setter
    def fraction_of_radiant_energy_to_surface_12(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_12`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_12`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')

        self._data["Fraction of Radiant Energy to Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `surface_13_name`

        Args:
            value (str): value for IDD Field `surface_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')

        self._data["Surface 13 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_13(self):
        """Get fraction_of_radiant_energy_to_surface_13

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_13` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 13"]

    @fraction_of_radiant_energy_to_surface_13.setter
    def fraction_of_radiant_energy_to_surface_13(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_13`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_13`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')

        self._data["Fraction of Radiant Energy to Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `surface_14_name`

        Args:
            value (str): value for IDD Field `surface_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')

        self._data["Surface 14 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_14(self):
        """Get fraction_of_radiant_energy_to_surface_14

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_14` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 14"]

    @fraction_of_radiant_energy_to_surface_14.setter
    def fraction_of_radiant_energy_to_surface_14(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_14`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_14`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')

        self._data["Fraction of Radiant Energy to Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `surface_15_name`

        Args:
            value (str): value for IDD Field `surface_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')

        self._data["Surface 15 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_15(self):
        """Get fraction_of_radiant_energy_to_surface_15

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_15` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 15"]

    @fraction_of_radiant_energy_to_surface_15.setter
    def fraction_of_radiant_energy_to_surface_15(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_15`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_15`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')

        self._data["Fraction of Radiant Energy to Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `surface_16_name`

        Args:
            value (str): value for IDD Field `surface_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')

        self._data["Surface 16 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_16(self):
        """Get fraction_of_radiant_energy_to_surface_16

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_16` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 16"]

    @fraction_of_radiant_energy_to_surface_16.setter
    def fraction_of_radiant_energy_to_surface_16(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_16`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_16`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')

        self._data["Fraction of Radiant Energy to Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `surface_17_name`

        Args:
            value (str): value for IDD Field `surface_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')

        self._data["Surface 17 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_17(self):
        """Get fraction_of_radiant_energy_to_surface_17

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_17` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 17"]

    @fraction_of_radiant_energy_to_surface_17.setter
    def fraction_of_radiant_energy_to_surface_17(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_17`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_17`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')

        self._data["Fraction of Radiant Energy to Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `surface_18_name`

        Args:
            value (str): value for IDD Field `surface_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')

        self._data["Surface 18 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_18(self):
        """Get fraction_of_radiant_energy_to_surface_18

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_18` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 18"]

    @fraction_of_radiant_energy_to_surface_18.setter
    def fraction_of_radiant_energy_to_surface_18(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_18`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_18`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')

        self._data["Fraction of Radiant Energy to Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `surface_19_name`

        Args:
            value (str): value for IDD Field `surface_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')

        self._data["Surface 19 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_19(self):
        """Get fraction_of_radiant_energy_to_surface_19

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_19` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 19"]

    @fraction_of_radiant_energy_to_surface_19.setter
    def fraction_of_radiant_energy_to_surface_19(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_19`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_19`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')

        self._data["Fraction of Radiant Energy to Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `surface_20_name`

        Args:
            value (str): value for IDD Field `surface_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')

        self._data["Surface 20 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_20(self):
        """Get fraction_of_radiant_energy_to_surface_20

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_20` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 20"]

    @fraction_of_radiant_energy_to_surface_20.setter
    def fraction_of_radiant_energy_to_surface_20(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_20`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_20`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')

        self._data["Fraction of Radiant Energy to Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `surface_21_name`

        Args:
            value (str): value for IDD Field `surface_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')

        self._data["Surface 21 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_21(self):
        """Get fraction_of_radiant_energy_to_surface_21

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_21` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 21"]

    @fraction_of_radiant_energy_to_surface_21.setter
    def fraction_of_radiant_energy_to_surface_21(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_21`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_21`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')

        self._data["Fraction of Radiant Energy to Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `surface_22_name`

        Args:
            value (str): value for IDD Field `surface_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')

        self._data["Surface 22 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_22(self):
        """Get fraction_of_radiant_energy_to_surface_22

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_22` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 22"]

    @fraction_of_radiant_energy_to_surface_22.setter
    def fraction_of_radiant_energy_to_surface_22(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_22`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_22`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')

        self._data["Fraction of Radiant Energy to Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `surface_23_name`

        Args:
            value (str): value for IDD Field `surface_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')

        self._data["Surface 23 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_23(self):
        """Get fraction_of_radiant_energy_to_surface_23

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_23` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 23"]

    @fraction_of_radiant_energy_to_surface_23.setter
    def fraction_of_radiant_energy_to_surface_23(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_23`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_23`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')

        self._data["Fraction of Radiant Energy to Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `surface_24_name`

        Args:
            value (str): value for IDD Field `surface_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')

        self._data["Surface 24 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_24(self):
        """Get fraction_of_radiant_energy_to_surface_24

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_24` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 24"]

    @fraction_of_radiant_energy_to_surface_24.setter
    def fraction_of_radiant_energy_to_surface_24(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_24`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_24`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')

        self._data["Fraction of Radiant Energy to Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `surface_25_name`

        Args:
            value (str): value for IDD Field `surface_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')

        self._data["Surface 25 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_25(self):
        """Get fraction_of_radiant_energy_to_surface_25

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_25` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 25"]

    @fraction_of_radiant_energy_to_surface_25.setter
    def fraction_of_radiant_energy_to_surface_25(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_25`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_25`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')

        self._data["Fraction of Radiant Energy to Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `surface_26_name`

        Args:
            value (str): value for IDD Field `surface_26_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')

        self._data["Surface 26 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_26(self):
        """Get fraction_of_radiant_energy_to_surface_26

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_26` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 26"]

    @fraction_of_radiant_energy_to_surface_26.setter
    def fraction_of_radiant_energy_to_surface_26(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_26`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_26`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')

        self._data["Fraction of Radiant Energy to Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `surface_27_name`

        Args:
            value (str): value for IDD Field `surface_27_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')

        self._data["Surface 27 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_27(self):
        """Get fraction_of_radiant_energy_to_surface_27

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_27` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 27"]

    @fraction_of_radiant_energy_to_surface_27.setter
    def fraction_of_radiant_energy_to_surface_27(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_27`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_27`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')

        self._data["Fraction of Radiant Energy to Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `surface_28_name`

        Args:
            value (str): value for IDD Field `surface_28_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')

        self._data["Surface 28 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_28(self):
        """Get fraction_of_radiant_energy_to_surface_28

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_28` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 28"]

    @fraction_of_radiant_energy_to_surface_28.setter
    def fraction_of_radiant_energy_to_surface_28(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_28`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_28`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')

        self._data["Fraction of Radiant Energy to Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `surface_29_name`

        Args:
            value (str): value for IDD Field `surface_29_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')

        self._data["Surface 29 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_29(self):
        """Get fraction_of_radiant_energy_to_surface_29

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_29` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 29"]

    @fraction_of_radiant_energy_to_surface_29.setter
    def fraction_of_radiant_energy_to_surface_29(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_29`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_29`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')

        self._data["Fraction of Radiant Energy to Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `surface_30_name`

        Args:
            value (str): value for IDD Field `surface_30_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')

        self._data["Surface 30 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_30(self):
        """Get fraction_of_radiant_energy_to_surface_30

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_30` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 30"]

    @fraction_of_radiant_energy_to_surface_30.setter
    def fraction_of_radiant_energy_to_surface_30(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_30`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_30`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')

        self._data["Fraction of Radiant Energy to Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `surface_31_name`

        Args:
            value (str): value for IDD Field `surface_31_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')

        self._data["Surface 31 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_31(self):
        """Get fraction_of_radiant_energy_to_surface_31

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_31` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 31"]

    @fraction_of_radiant_energy_to_surface_31.setter
    def fraction_of_radiant_energy_to_surface_31(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_31`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_31`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')

        self._data["Fraction of Radiant Energy to Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `surface_32_name`

        Args:
            value (str): value for IDD Field `surface_32_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')

        self._data["Surface 32 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_32(self):
        """Get fraction_of_radiant_energy_to_surface_32

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_32` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 32"]

    @fraction_of_radiant_energy_to_surface_32.setter
    def fraction_of_radiant_energy_to_surface_32(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_32`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_32`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')

        self._data["Fraction of Radiant Energy to Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `surface_33_name`

        Args:
            value (str): value for IDD Field `surface_33_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')

        self._data["Surface 33 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_33(self):
        """Get fraction_of_radiant_energy_to_surface_33

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_33` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 33"]

    @fraction_of_radiant_energy_to_surface_33.setter
    def fraction_of_radiant_energy_to_surface_33(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_33`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_33`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')

        self._data["Fraction of Radiant Energy to Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `surface_34_name`

        Args:
            value (str): value for IDD Field `surface_34_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')

        self._data["Surface 34 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_34(self):
        """Get fraction_of_radiant_energy_to_surface_34

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_34` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 34"]

    @fraction_of_radiant_energy_to_surface_34.setter
    def fraction_of_radiant_energy_to_surface_34(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_34`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_34`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')

        self._data["Fraction of Radiant Energy to Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `surface_35_name`

        Args:
            value (str): value for IDD Field `surface_35_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')

        self._data["Surface 35 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_35(self):
        """Get fraction_of_radiant_energy_to_surface_35

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_35` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 35"]

    @fraction_of_radiant_energy_to_surface_35.setter
    def fraction_of_radiant_energy_to_surface_35(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_35`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_35`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')

        self._data["Fraction of Radiant Energy to Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `surface_36_name`

        Args:
            value (str): value for IDD Field `surface_36_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')

        self._data["Surface 36 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_36(self):
        """Get fraction_of_radiant_energy_to_surface_36

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_36` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 36"]

    @fraction_of_radiant_energy_to_surface_36.setter
    def fraction_of_radiant_energy_to_surface_36(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_36`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_36`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')

        self._data["Fraction of Radiant Energy to Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `surface_37_name`

        Args:
            value (str): value for IDD Field `surface_37_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')

        self._data["Surface 37 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_37(self):
        """Get fraction_of_radiant_energy_to_surface_37

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_37` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 37"]

    @fraction_of_radiant_energy_to_surface_37.setter
    def fraction_of_radiant_energy_to_surface_37(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_37`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_37`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')

        self._data["Fraction of Radiant Energy to Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `surface_38_name`

        Args:
            value (str): value for IDD Field `surface_38_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')

        self._data["Surface 38 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_38(self):
        """Get fraction_of_radiant_energy_to_surface_38

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_38` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 38"]

    @fraction_of_radiant_energy_to_surface_38.setter
    def fraction_of_radiant_energy_to_surface_38(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_38`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_38`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')

        self._data["Fraction of Radiant Energy to Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `surface_39_name`

        Args:
            value (str): value for IDD Field `surface_39_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')

        self._data["Surface 39 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_39(self):
        """Get fraction_of_radiant_energy_to_surface_39

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_39` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 39"]

    @fraction_of_radiant_energy_to_surface_39.setter
    def fraction_of_radiant_energy_to_surface_39(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_39`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_39`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')

        self._data["Fraction of Radiant Energy to Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `surface_40_name`

        Args:
            value (str): value for IDD Field `surface_40_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')

        self._data["Surface 40 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_40(self):
        """Get fraction_of_radiant_energy_to_surface_40

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_40` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 40"]

    @fraction_of_radiant_energy_to_surface_40.setter
    def fraction_of_radiant_energy_to_surface_40(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_40`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_40`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')

        self._data["Fraction of Radiant Energy to Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `surface_41_name`

        Args:
            value (str): value for IDD Field `surface_41_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')

        self._data["Surface 41 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_41(self):
        """Get fraction_of_radiant_energy_to_surface_41

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_41` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 41"]

    @fraction_of_radiant_energy_to_surface_41.setter
    def fraction_of_radiant_energy_to_surface_41(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_41`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_41`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')

        self._data["Fraction of Radiant Energy to Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `surface_42_name`

        Args:
            value (str): value for IDD Field `surface_42_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')

        self._data["Surface 42 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_42(self):
        """Get fraction_of_radiant_energy_to_surface_42

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_42` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 42"]

    @fraction_of_radiant_energy_to_surface_42.setter
    def fraction_of_radiant_energy_to_surface_42(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_42`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_42`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')

        self._data["Fraction of Radiant Energy to Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `surface_43_name`

        Args:
            value (str): value for IDD Field `surface_43_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')

        self._data["Surface 43 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_43(self):
        """Get fraction_of_radiant_energy_to_surface_43

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_43` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 43"]

    @fraction_of_radiant_energy_to_surface_43.setter
    def fraction_of_radiant_energy_to_surface_43(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_43`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_43`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')

        self._data["Fraction of Radiant Energy to Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `surface_44_name`

        Args:
            value (str): value for IDD Field `surface_44_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')

        self._data["Surface 44 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_44(self):
        """Get fraction_of_radiant_energy_to_surface_44

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_44` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 44"]

    @fraction_of_radiant_energy_to_surface_44.setter
    def fraction_of_radiant_energy_to_surface_44(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_44`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_44`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')

        self._data["Fraction of Radiant Energy to Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `surface_45_name`

        Args:
            value (str): value for IDD Field `surface_45_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')

        self._data["Surface 45 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_45(self):
        """Get fraction_of_radiant_energy_to_surface_45

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_45` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 45"]

    @fraction_of_radiant_energy_to_surface_45.setter
    def fraction_of_radiant_energy_to_surface_45(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_45`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_45`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')

        self._data["Fraction of Radiant Energy to Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `surface_46_name`

        Args:
            value (str): value for IDD Field `surface_46_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')

        self._data["Surface 46 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_46(self):
        """Get fraction_of_radiant_energy_to_surface_46

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_46` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 46"]

    @fraction_of_radiant_energy_to_surface_46.setter
    def fraction_of_radiant_energy_to_surface_46(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_46`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_46`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')

        self._data["Fraction of Radiant Energy to Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `surface_47_name`

        Args:
            value (str): value for IDD Field `surface_47_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')

        self._data["Surface 47 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_47(self):
        """Get fraction_of_radiant_energy_to_surface_47

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_47` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 47"]

    @fraction_of_radiant_energy_to_surface_47.setter
    def fraction_of_radiant_energy_to_surface_47(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_47`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_47`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')

        self._data["Fraction of Radiant Energy to Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `surface_48_name`

        Args:
            value (str): value for IDD Field `surface_48_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')

        self._data["Surface 48 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_48(self):
        """Get fraction_of_radiant_energy_to_surface_48

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_48` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 48"]

    @fraction_of_radiant_energy_to_surface_48.setter
    def fraction_of_radiant_energy_to_surface_48(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_48`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_48`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')

        self._data["Fraction of Radiant Energy to Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `surface_49_name`

        Args:
            value (str): value for IDD Field `surface_49_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')

        self._data["Surface 49 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_49(self):
        """Get fraction_of_radiant_energy_to_surface_49

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_49` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 49"]

    @fraction_of_radiant_energy_to_surface_49.setter
    def fraction_of_radiant_energy_to_surface_49(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_49`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_49`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')

        self._data["Fraction of Radiant Energy to Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `surface_50_name`

        Args:
            value (str): value for IDD Field `surface_50_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')

        self._data["Surface 50 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_50(self):
        """Get fraction_of_radiant_energy_to_surface_50

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_50` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 50"]

    @fraction_of_radiant_energy_to_surface_50.setter
    def fraction_of_radiant_energy_to_surface_50(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_50`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_50`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')

        self._data["Fraction of Radiant Energy to Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `surface_51_name`

        Args:
            value (str): value for IDD Field `surface_51_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')

        self._data["Surface 51 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_51(self):
        """Get fraction_of_radiant_energy_to_surface_51

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_51` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 51"]

    @fraction_of_radiant_energy_to_surface_51.setter
    def fraction_of_radiant_energy_to_surface_51(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_51`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_51`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')

        self._data["Fraction of Radiant Energy to Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `surface_52_name`

        Args:
            value (str): value for IDD Field `surface_52_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')

        self._data["Surface 52 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_52(self):
        """Get fraction_of_radiant_energy_to_surface_52

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_52` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 52"]

    @fraction_of_radiant_energy_to_surface_52.setter
    def fraction_of_radiant_energy_to_surface_52(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_52`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_52`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')

        self._data["Fraction of Radiant Energy to Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `surface_53_name`

        Args:
            value (str): value for IDD Field `surface_53_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')

        self._data["Surface 53 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_53(self):
        """Get fraction_of_radiant_energy_to_surface_53

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_53` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 53"]

    @fraction_of_radiant_energy_to_surface_53.setter
    def fraction_of_radiant_energy_to_surface_53(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_53`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_53`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')

        self._data["Fraction of Radiant Energy to Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `surface_54_name`

        Args:
            value (str): value for IDD Field `surface_54_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')

        self._data["Surface 54 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_54(self):
        """Get fraction_of_radiant_energy_to_surface_54

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_54` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 54"]

    @fraction_of_radiant_energy_to_surface_54.setter
    def fraction_of_radiant_energy_to_surface_54(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_54`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_54`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')

        self._data["Fraction of Radiant Energy to Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `surface_55_name`

        Args:
            value (str): value for IDD Field `surface_55_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')

        self._data["Surface 55 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_55(self):
        """Get fraction_of_radiant_energy_to_surface_55

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_55` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 55"]

    @fraction_of_radiant_energy_to_surface_55.setter
    def fraction_of_radiant_energy_to_surface_55(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_55`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_55`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')

        self._data["Fraction of Radiant Energy to Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `surface_56_name`

        Args:
            value (str): value for IDD Field `surface_56_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')

        self._data["Surface 56 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_56(self):
        """Get fraction_of_radiant_energy_to_surface_56

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_56` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 56"]

    @fraction_of_radiant_energy_to_surface_56.setter
    def fraction_of_radiant_energy_to_surface_56(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_56`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_56`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')

        self._data["Fraction of Radiant Energy to Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `surface_57_name`

        Args:
            value (str): value for IDD Field `surface_57_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')

        self._data["Surface 57 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_57(self):
        """Get fraction_of_radiant_energy_to_surface_57

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_57` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 57"]

    @fraction_of_radiant_energy_to_surface_57.setter
    def fraction_of_radiant_energy_to_surface_57(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_57`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_57`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')

        self._data["Fraction of Radiant Energy to Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `surface_58_name`

        Args:
            value (str): value for IDD Field `surface_58_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')

        self._data["Surface 58 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_58(self):
        """Get fraction_of_radiant_energy_to_surface_58

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_58` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 58"]

    @fraction_of_radiant_energy_to_surface_58.setter
    def fraction_of_radiant_energy_to_surface_58(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_58`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_58`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')

        self._data["Fraction of Radiant Energy to Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `surface_59_name`

        Args:
            value (str): value for IDD Field `surface_59_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')

        self._data["Surface 59 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_59(self):
        """Get fraction_of_radiant_energy_to_surface_59

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_59` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 59"]

    @fraction_of_radiant_energy_to_surface_59.setter
    def fraction_of_radiant_energy_to_surface_59(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_59`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_59`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')

        self._data["Fraction of Radiant Energy to Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `surface_60_name`

        Args:
            value (str): value for IDD Field `surface_60_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')

        self._data["Surface 60 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_60(self):
        """Get fraction_of_radiant_energy_to_surface_60

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_60` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 60"]

    @fraction_of_radiant_energy_to_surface_60.setter
    def fraction_of_radiant_energy_to_surface_60(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_60`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_60`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')

        self._data["Fraction of Radiant Energy to Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `surface_61_name`

        Args:
            value (str): value for IDD Field `surface_61_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')

        self._data["Surface 61 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_61(self):
        """Get fraction_of_radiant_energy_to_surface_61

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_61` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 61"]

    @fraction_of_radiant_energy_to_surface_61.setter
    def fraction_of_radiant_energy_to_surface_61(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_61`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_61`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')

        self._data["Fraction of Radiant Energy to Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `surface_62_name`

        Args:
            value (str): value for IDD Field `surface_62_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')

        self._data["Surface 62 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_62(self):
        """Get fraction_of_radiant_energy_to_surface_62

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_62` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 62"]

    @fraction_of_radiant_energy_to_surface_62.setter
    def fraction_of_radiant_energy_to_surface_62(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_62`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_62`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')

        self._data["Fraction of Radiant Energy to Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `surface_63_name`

        Args:
            value (str): value for IDD Field `surface_63_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')

        self._data["Surface 63 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_63(self):
        """Get fraction_of_radiant_energy_to_surface_63

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_63` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 63"]

    @fraction_of_radiant_energy_to_surface_63.setter
    def fraction_of_radiant_energy_to_surface_63(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_63`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_63`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')

        self._data["Fraction of Radiant Energy to Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `surface_64_name`

        Args:
            value (str): value for IDD Field `surface_64_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')

        self._data["Surface 64 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_64(self):
        """Get fraction_of_radiant_energy_to_surface_64

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_64` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 64"]

    @fraction_of_radiant_energy_to_surface_64.setter
    def fraction_of_radiant_energy_to_surface_64(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_64`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_64`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')

        self._data["Fraction of Radiant Energy to Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `surface_65_name`

        Args:
            value (str): value for IDD Field `surface_65_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')

        self._data["Surface 65 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_65(self):
        """Get fraction_of_radiant_energy_to_surface_65

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_65` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 65"]

    @fraction_of_radiant_energy_to_surface_65.setter
    def fraction_of_radiant_energy_to_surface_65(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_65`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_65`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')

        self._data["Fraction of Radiant Energy to Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `surface_66_name`

        Args:
            value (str): value for IDD Field `surface_66_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')

        self._data["Surface 66 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_66(self):
        """Get fraction_of_radiant_energy_to_surface_66

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_66` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 66"]

    @fraction_of_radiant_energy_to_surface_66.setter
    def fraction_of_radiant_energy_to_surface_66(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_66`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_66`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')

        self._data["Fraction of Radiant Energy to Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `surface_67_name`

        Args:
            value (str): value for IDD Field `surface_67_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')

        self._data["Surface 67 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_67(self):
        """Get fraction_of_radiant_energy_to_surface_67

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_67` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 67"]

    @fraction_of_radiant_energy_to_surface_67.setter
    def fraction_of_radiant_energy_to_surface_67(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_67`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_67`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')

        self._data["Fraction of Radiant Energy to Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `surface_68_name`

        Args:
            value (str): value for IDD Field `surface_68_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')

        self._data["Surface 68 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_68(self):
        """Get fraction_of_radiant_energy_to_surface_68

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_68` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 68"]

    @fraction_of_radiant_energy_to_surface_68.setter
    def fraction_of_radiant_energy_to_surface_68(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_68`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_68`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')

        self._data["Fraction of Radiant Energy to Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `surface_69_name`

        Args:
            value (str): value for IDD Field `surface_69_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')

        self._data["Surface 69 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_69(self):
        """Get fraction_of_radiant_energy_to_surface_69

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_69` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 69"]

    @fraction_of_radiant_energy_to_surface_69.setter
    def fraction_of_radiant_energy_to_surface_69(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_69`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_69`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')

        self._data["Fraction of Radiant Energy to Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `surface_70_name`

        Args:
            value (str): value for IDD Field `surface_70_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')

        self._data["Surface 70 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_70(self):
        """Get fraction_of_radiant_energy_to_surface_70

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_70` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 70"]

    @fraction_of_radiant_energy_to_surface_70.setter
    def fraction_of_radiant_energy_to_surface_70(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_70`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_70`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')

        self._data["Fraction of Radiant Energy to Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `surface_71_name`

        Args:
            value (str): value for IDD Field `surface_71_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')

        self._data["Surface 71 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_71(self):
        """Get fraction_of_radiant_energy_to_surface_71

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_71` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 71"]

    @fraction_of_radiant_energy_to_surface_71.setter
    def fraction_of_radiant_energy_to_surface_71(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_71`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_71`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')

        self._data["Fraction of Radiant Energy to Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `surface_72_name`

        Args:
            value (str): value for IDD Field `surface_72_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')

        self._data["Surface 72 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_72(self):
        """Get fraction_of_radiant_energy_to_surface_72

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_72` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 72"]

    @fraction_of_radiant_energy_to_surface_72.setter
    def fraction_of_radiant_energy_to_surface_72(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_72`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_72`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')

        self._data["Fraction of Radiant Energy to Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `surface_73_name`

        Args:
            value (str): value for IDD Field `surface_73_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')

        self._data["Surface 73 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_73(self):
        """Get fraction_of_radiant_energy_to_surface_73

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_73` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 73"]

    @fraction_of_radiant_energy_to_surface_73.setter
    def fraction_of_radiant_energy_to_surface_73(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_73`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_73`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')

        self._data["Fraction of Radiant Energy to Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `surface_74_name`

        Args:
            value (str): value for IDD Field `surface_74_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')

        self._data["Surface 74 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_74(self):
        """Get fraction_of_radiant_energy_to_surface_74

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_74` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 74"]

    @fraction_of_radiant_energy_to_surface_74.setter
    def fraction_of_radiant_energy_to_surface_74(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_74`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_74`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')

        self._data["Fraction of Radiant Energy to Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `surface_75_name`

        Args:
            value (str): value for IDD Field `surface_75_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')

        self._data["Surface 75 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_75(self):
        """Get fraction_of_radiant_energy_to_surface_75

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_75` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 75"]

    @fraction_of_radiant_energy_to_surface_75.setter
    def fraction_of_radiant_energy_to_surface_75(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_75`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_75`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')

        self._data["Fraction of Radiant Energy to Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `surface_76_name`

        Args:
            value (str): value for IDD Field `surface_76_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')

        self._data["Surface 76 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_76(self):
        """Get fraction_of_radiant_energy_to_surface_76

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_76` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 76"]

    @fraction_of_radiant_energy_to_surface_76.setter
    def fraction_of_radiant_energy_to_surface_76(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_76`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_76`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')

        self._data["Fraction of Radiant Energy to Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `surface_77_name`

        Args:
            value (str): value for IDD Field `surface_77_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')

        self._data["Surface 77 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_77(self):
        """Get fraction_of_radiant_energy_to_surface_77

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_77` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 77"]

    @fraction_of_radiant_energy_to_surface_77.setter
    def fraction_of_radiant_energy_to_surface_77(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_77`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_77`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')

        self._data["Fraction of Radiant Energy to Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `surface_78_name`

        Args:
            value (str): value for IDD Field `surface_78_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')

        self._data["Surface 78 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_78(self):
        """Get fraction_of_radiant_energy_to_surface_78

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_78` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 78"]

    @fraction_of_radiant_energy_to_surface_78.setter
    def fraction_of_radiant_energy_to_surface_78(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_78`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_78`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')

        self._data["Fraction of Radiant Energy to Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `surface_79_name`

        Args:
            value (str): value for IDD Field `surface_79_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')

        self._data["Surface 79 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_79(self):
        """Get fraction_of_radiant_energy_to_surface_79

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_79` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 79"]

    @fraction_of_radiant_energy_to_surface_79.setter
    def fraction_of_radiant_energy_to_surface_79(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_79`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_79`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')

        self._data["Fraction of Radiant Energy to Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `surface_80_name`

        Args:
            value (str): value for IDD Field `surface_80_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')

        self._data["Surface 80 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_80(self):
        """Get fraction_of_radiant_energy_to_surface_80

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_80` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 80"]

    @fraction_of_radiant_energy_to_surface_80.setter
    def fraction_of_radiant_energy_to_surface_80(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_80`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_80`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')

        self._data["Fraction of Radiant Energy to Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `surface_81_name`

        Args:
            value (str): value for IDD Field `surface_81_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')

        self._data["Surface 81 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_81(self):
        """Get fraction_of_radiant_energy_to_surface_81

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_81` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 81"]

    @fraction_of_radiant_energy_to_surface_81.setter
    def fraction_of_radiant_energy_to_surface_81(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_81`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_81`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')

        self._data["Fraction of Radiant Energy to Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `surface_82_name`

        Args:
            value (str): value for IDD Field `surface_82_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')

        self._data["Surface 82 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_82(self):
        """Get fraction_of_radiant_energy_to_surface_82

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_82` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 82"]

    @fraction_of_radiant_energy_to_surface_82.setter
    def fraction_of_radiant_energy_to_surface_82(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_82`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_82`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')

        self._data["Fraction of Radiant Energy to Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `surface_83_name`

        Args:
            value (str): value for IDD Field `surface_83_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')

        self._data["Surface 83 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_83(self):
        """Get fraction_of_radiant_energy_to_surface_83

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_83` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 83"]

    @fraction_of_radiant_energy_to_surface_83.setter
    def fraction_of_radiant_energy_to_surface_83(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_83`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_83`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')

        self._data["Fraction of Radiant Energy to Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `surface_84_name`

        Args:
            value (str): value for IDD Field `surface_84_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')

        self._data["Surface 84 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_84(self):
        """Get fraction_of_radiant_energy_to_surface_84

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_84` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 84"]

    @fraction_of_radiant_energy_to_surface_84.setter
    def fraction_of_radiant_energy_to_surface_84(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_84`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_84`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')

        self._data["Fraction of Radiant Energy to Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `surface_85_name`

        Args:
            value (str): value for IDD Field `surface_85_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')

        self._data["Surface 85 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_85(self):
        """Get fraction_of_radiant_energy_to_surface_85

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_85` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 85"]

    @fraction_of_radiant_energy_to_surface_85.setter
    def fraction_of_radiant_energy_to_surface_85(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_85`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_85`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')

        self._data["Fraction of Radiant Energy to Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `surface_86_name`

        Args:
            value (str): value for IDD Field `surface_86_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')

        self._data["Surface 86 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_86(self):
        """Get fraction_of_radiant_energy_to_surface_86

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_86` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 86"]

    @fraction_of_radiant_energy_to_surface_86.setter
    def fraction_of_radiant_energy_to_surface_86(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_86`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_86`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')

        self._data["Fraction of Radiant Energy to Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `surface_87_name`

        Args:
            value (str): value for IDD Field `surface_87_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')

        self._data["Surface 87 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_87(self):
        """Get fraction_of_radiant_energy_to_surface_87

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_87` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 87"]

    @fraction_of_radiant_energy_to_surface_87.setter
    def fraction_of_radiant_energy_to_surface_87(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_87`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_87`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')

        self._data["Fraction of Radiant Energy to Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `surface_88_name`

        Args:
            value (str): value for IDD Field `surface_88_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')

        self._data["Surface 88 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_88(self):
        """Get fraction_of_radiant_energy_to_surface_88

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_88` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 88"]

    @fraction_of_radiant_energy_to_surface_88.setter
    def fraction_of_radiant_energy_to_surface_88(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_88`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_88`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')

        self._data["Fraction of Radiant Energy to Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `surface_89_name`

        Args:
            value (str): value for IDD Field `surface_89_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')

        self._data["Surface 89 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_89(self):
        """Get fraction_of_radiant_energy_to_surface_89

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_89` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 89"]

    @fraction_of_radiant_energy_to_surface_89.setter
    def fraction_of_radiant_energy_to_surface_89(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_89`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_89`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')

        self._data["Fraction of Radiant Energy to Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `surface_90_name`

        Args:
            value (str): value for IDD Field `surface_90_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')

        self._data["Surface 90 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_90(self):
        """Get fraction_of_radiant_energy_to_surface_90

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_90` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 90"]

    @fraction_of_radiant_energy_to_surface_90.setter
    def fraction_of_radiant_energy_to_surface_90(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_90`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_90`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')

        self._data["Fraction of Radiant Energy to Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `surface_91_name`

        Args:
            value (str): value for IDD Field `surface_91_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')

        self._data["Surface 91 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_91(self):
        """Get fraction_of_radiant_energy_to_surface_91

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_91` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 91"]

    @fraction_of_radiant_energy_to_surface_91.setter
    def fraction_of_radiant_energy_to_surface_91(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_91`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_91`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')

        self._data["Fraction of Radiant Energy to Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `surface_92_name`

        Args:
            value (str): value for IDD Field `surface_92_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')

        self._data["Surface 92 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_92(self):
        """Get fraction_of_radiant_energy_to_surface_92

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_92` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 92"]

    @fraction_of_radiant_energy_to_surface_92.setter
    def fraction_of_radiant_energy_to_surface_92(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_92`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_92`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')

        self._data["Fraction of Radiant Energy to Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `surface_93_name`

        Args:
            value (str): value for IDD Field `surface_93_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')

        self._data["Surface 93 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_93(self):
        """Get fraction_of_radiant_energy_to_surface_93

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_93` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 93"]

    @fraction_of_radiant_energy_to_surface_93.setter
    def fraction_of_radiant_energy_to_surface_93(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_93`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_93`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')

        self._data["Fraction of Radiant Energy to Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `surface_94_name`

        Args:
            value (str): value for IDD Field `surface_94_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')

        self._data["Surface 94 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_94(self):
        """Get fraction_of_radiant_energy_to_surface_94

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_94` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 94"]

    @fraction_of_radiant_energy_to_surface_94.setter
    def fraction_of_radiant_energy_to_surface_94(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_94`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_94`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')

        self._data["Fraction of Radiant Energy to Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `surface_95_name`

        Args:
            value (str): value for IDD Field `surface_95_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')

        self._data["Surface 95 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_95(self):
        """Get fraction_of_radiant_energy_to_surface_95

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_95` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 95"]

    @fraction_of_radiant_energy_to_surface_95.setter
    def fraction_of_radiant_energy_to_surface_95(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_95`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_95`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')

        self._data["Fraction of Radiant Energy to Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `surface_96_name`

        Args:
            value (str): value for IDD Field `surface_96_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')

        self._data["Surface 96 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_96(self):
        """Get fraction_of_radiant_energy_to_surface_96

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_96` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 96"]

    @fraction_of_radiant_energy_to_surface_96.setter
    def fraction_of_radiant_energy_to_surface_96(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_96`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_96`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')

        self._data["Fraction of Radiant Energy to Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `surface_97_name`

        Args:
            value (str): value for IDD Field `surface_97_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')

        self._data["Surface 97 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_97(self):
        """Get fraction_of_radiant_energy_to_surface_97

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_97` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 97"]

    @fraction_of_radiant_energy_to_surface_97.setter
    def fraction_of_radiant_energy_to_surface_97(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_97`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_97`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')

        self._data["Fraction of Radiant Energy to Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `surface_98_name`

        Args:
            value (str): value for IDD Field `surface_98_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')

        self._data["Surface 98 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_98(self):
        """Get fraction_of_radiant_energy_to_surface_98

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_98` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 98"]

    @fraction_of_radiant_energy_to_surface_98.setter
    def fraction_of_radiant_energy_to_surface_98(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_98`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_98`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')

        self._data["Fraction of Radiant Energy to Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `surface_99_name`

        Args:
            value (str): value for IDD Field `surface_99_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')

        self._data["Surface 99 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_99(self):
        """Get fraction_of_radiant_energy_to_surface_99

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_99` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 99"]

    @fraction_of_radiant_energy_to_surface_99.setter
    def fraction_of_radiant_energy_to_surface_99(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_99`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_99`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')

        self._data["Fraction of Radiant Energy to Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `surface_100_name`

        Args:
            value (str): value for IDD Field `surface_100_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')

        self._data["Surface 100 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_100(self):
        """Get fraction_of_radiant_energy_to_surface_100

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_100` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 100"]

    @fraction_of_radiant_energy_to_surface_100.setter
    def fraction_of_radiant_energy_to_surface_100(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_100`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_100`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')

        self._data["Fraction of Radiant Energy to Surface 100"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.rated_average_water_temperature))
        out.append(self._to_str(self.rated_water_mass_flow_rate))
        out.append(self._to_str(self.heating_design_capacity_method))
        out.append(self._to_str(self.heating_design_capacity))
        out.append(self._to_str(self.heating_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_heating_design_capacity))
        out.append(self._to_str(self.maximum_water_flow_rate))
        out.append(self._to_str(self.convergence_tolerance))
        out.append(self._to_str(self.fraction_radiant))
        out.append(self._to_str(self.fraction_of_radiant_energy_incident_on_people))
        out.append(self._to_str(self.surface_1_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_1))
        out.append(self._to_str(self.surface_2_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_2))
        out.append(self._to_str(self.surface_3_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_3))
        out.append(self._to_str(self.surface_4_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_4))
        out.append(self._to_str(self.surface_5_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_5))
        out.append(self._to_str(self.surface_6_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_6))
        out.append(self._to_str(self.surface_7_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_7))
        out.append(self._to_str(self.surface_8_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_8))
        out.append(self._to_str(self.surface_9_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_9))
        out.append(self._to_str(self.surface_10_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_10))
        out.append(self._to_str(self.surface_11_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_11))
        out.append(self._to_str(self.surface_12_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_12))
        out.append(self._to_str(self.surface_13_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_13))
        out.append(self._to_str(self.surface_14_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_14))
        out.append(self._to_str(self.surface_15_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_15))
        out.append(self._to_str(self.surface_16_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_16))
        out.append(self._to_str(self.surface_17_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_17))
        out.append(self._to_str(self.surface_18_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_18))
        out.append(self._to_str(self.surface_19_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_19))
        out.append(self._to_str(self.surface_20_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_20))
        out.append(self._to_str(self.surface_21_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_21))
        out.append(self._to_str(self.surface_22_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_22))
        out.append(self._to_str(self.surface_23_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_23))
        out.append(self._to_str(self.surface_24_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_24))
        out.append(self._to_str(self.surface_25_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_25))
        out.append(self._to_str(self.surface_26_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_26))
        out.append(self._to_str(self.surface_27_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_27))
        out.append(self._to_str(self.surface_28_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_28))
        out.append(self._to_str(self.surface_29_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_29))
        out.append(self._to_str(self.surface_30_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_30))
        out.append(self._to_str(self.surface_31_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_31))
        out.append(self._to_str(self.surface_32_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_32))
        out.append(self._to_str(self.surface_33_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_33))
        out.append(self._to_str(self.surface_34_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_34))
        out.append(self._to_str(self.surface_35_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_35))
        out.append(self._to_str(self.surface_36_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_36))
        out.append(self._to_str(self.surface_37_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_37))
        out.append(self._to_str(self.surface_38_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_38))
        out.append(self._to_str(self.surface_39_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_39))
        out.append(self._to_str(self.surface_40_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_40))
        out.append(self._to_str(self.surface_41_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_41))
        out.append(self._to_str(self.surface_42_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_42))
        out.append(self._to_str(self.surface_43_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_43))
        out.append(self._to_str(self.surface_44_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_44))
        out.append(self._to_str(self.surface_45_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_45))
        out.append(self._to_str(self.surface_46_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_46))
        out.append(self._to_str(self.surface_47_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_47))
        out.append(self._to_str(self.surface_48_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_48))
        out.append(self._to_str(self.surface_49_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_49))
        out.append(self._to_str(self.surface_50_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_50))
        out.append(self._to_str(self.surface_51_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_51))
        out.append(self._to_str(self.surface_52_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_52))
        out.append(self._to_str(self.surface_53_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_53))
        out.append(self._to_str(self.surface_54_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_54))
        out.append(self._to_str(self.surface_55_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_55))
        out.append(self._to_str(self.surface_56_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_56))
        out.append(self._to_str(self.surface_57_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_57))
        out.append(self._to_str(self.surface_58_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_58))
        out.append(self._to_str(self.surface_59_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_59))
        out.append(self._to_str(self.surface_60_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_60))
        out.append(self._to_str(self.surface_61_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_61))
        out.append(self._to_str(self.surface_62_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_62))
        out.append(self._to_str(self.surface_63_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_63))
        out.append(self._to_str(self.surface_64_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_64))
        out.append(self._to_str(self.surface_65_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_65))
        out.append(self._to_str(self.surface_66_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_66))
        out.append(self._to_str(self.surface_67_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_67))
        out.append(self._to_str(self.surface_68_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_68))
        out.append(self._to_str(self.surface_69_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_69))
        out.append(self._to_str(self.surface_70_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_70))
        out.append(self._to_str(self.surface_71_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_71))
        out.append(self._to_str(self.surface_72_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_72))
        out.append(self._to_str(self.surface_73_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_73))
        out.append(self._to_str(self.surface_74_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_74))
        out.append(self._to_str(self.surface_75_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_75))
        out.append(self._to_str(self.surface_76_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_76))
        out.append(self._to_str(self.surface_77_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_77))
        out.append(self._to_str(self.surface_78_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_78))
        out.append(self._to_str(self.surface_79_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_79))
        out.append(self._to_str(self.surface_80_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_80))
        out.append(self._to_str(self.surface_81_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_81))
        out.append(self._to_str(self.surface_82_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_82))
        out.append(self._to_str(self.surface_83_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_83))
        out.append(self._to_str(self.surface_84_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_84))
        out.append(self._to_str(self.surface_85_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_85))
        out.append(self._to_str(self.surface_86_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_86))
        out.append(self._to_str(self.surface_87_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_87))
        out.append(self._to_str(self.surface_88_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_88))
        out.append(self._to_str(self.surface_89_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_89))
        out.append(self._to_str(self.surface_90_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_90))
        out.append(self._to_str(self.surface_91_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_91))
        out.append(self._to_str(self.surface_92_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_92))
        out.append(self._to_str(self.surface_93_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_93))
        out.append(self._to_str(self.surface_94_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_94))
        out.append(self._to_str(self.surface_95_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_95))
        out.append(self._to_str(self.surface_96_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_96))
        out.append(self._to_str(self.surface_97_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_97))
        out.append(self._to_str(self.surface_98_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_98))
        out.append(self._to_str(self.surface_99_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_99))
        out.append(self._to_str(self.surface_100_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_100))
        return ",".join(out)

class ZoneHvacBaseboardRadiantConvectiveSteam(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:RadiantConvective:Steam`
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
    field_count = 213

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:Baseboard:RadiantConvective:Steam`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Degree of SubCooling"] = None
        self._data["Maximum Steam Flow Rate"] = None
        self._data["Convergence Tolerance"] = None
        self._data["Fraction Radiant"] = None
        self._data["Fraction of Radiant Energy Incident on People"] = None
        self._data["Surface 1 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.degree_of_subcooling = None
        else:
            self.degree_of_subcooling = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_steam_flow_rate = None
        else:
            self.maximum_steam_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.convergence_tolerance = None
        else:
            self.convergence_tolerance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_radiant = None
        else:
            self.fraction_radiant = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_incident_on_people = None
        else:
            self.fraction_of_radiant_energy_incident_on_people = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_1 = None
        else:
            self.fraction_of_radiant_energy_to_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_2 = None
        else:
            self.fraction_of_radiant_energy_to_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_3 = None
        else:
            self.fraction_of_radiant_energy_to_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_4 = None
        else:
            self.fraction_of_radiant_energy_to_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_5 = None
        else:
            self.fraction_of_radiant_energy_to_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_6 = None
        else:
            self.fraction_of_radiant_energy_to_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_7 = None
        else:
            self.fraction_of_radiant_energy_to_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_8 = None
        else:
            self.fraction_of_radiant_energy_to_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_9 = None
        else:
            self.fraction_of_radiant_energy_to_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_10 = None
        else:
            self.fraction_of_radiant_energy_to_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_11 = None
        else:
            self.fraction_of_radiant_energy_to_surface_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_12 = None
        else:
            self.fraction_of_radiant_energy_to_surface_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_13 = None
        else:
            self.fraction_of_radiant_energy_to_surface_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_14 = None
        else:
            self.fraction_of_radiant_energy_to_surface_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_15 = None
        else:
            self.fraction_of_radiant_energy_to_surface_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_16 = None
        else:
            self.fraction_of_radiant_energy_to_surface_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_17 = None
        else:
            self.fraction_of_radiant_energy_to_surface_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_18 = None
        else:
            self.fraction_of_radiant_energy_to_surface_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_19 = None
        else:
            self.fraction_of_radiant_energy_to_surface_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_20 = None
        else:
            self.fraction_of_radiant_energy_to_surface_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_21 = None
        else:
            self.fraction_of_radiant_energy_to_surface_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_22 = None
        else:
            self.fraction_of_radiant_energy_to_surface_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_23 = None
        else:
            self.fraction_of_radiant_energy_to_surface_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_24 = None
        else:
            self.fraction_of_radiant_energy_to_surface_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_25 = None
        else:
            self.fraction_of_radiant_energy_to_surface_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_26 = None
        else:
            self.fraction_of_radiant_energy_to_surface_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_27 = None
        else:
            self.fraction_of_radiant_energy_to_surface_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_28 = None
        else:
            self.fraction_of_radiant_energy_to_surface_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_29 = None
        else:
            self.fraction_of_radiant_energy_to_surface_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_30 = None
        else:
            self.fraction_of_radiant_energy_to_surface_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_31 = None
        else:
            self.fraction_of_radiant_energy_to_surface_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_32 = None
        else:
            self.fraction_of_radiant_energy_to_surface_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_33 = None
        else:
            self.fraction_of_radiant_energy_to_surface_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_34 = None
        else:
            self.fraction_of_radiant_energy_to_surface_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_35 = None
        else:
            self.fraction_of_radiant_energy_to_surface_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_36 = None
        else:
            self.fraction_of_radiant_energy_to_surface_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_37 = None
        else:
            self.fraction_of_radiant_energy_to_surface_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_38 = None
        else:
            self.fraction_of_radiant_energy_to_surface_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_39 = None
        else:
            self.fraction_of_radiant_energy_to_surface_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_40 = None
        else:
            self.fraction_of_radiant_energy_to_surface_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_41 = None
        else:
            self.fraction_of_radiant_energy_to_surface_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_42 = None
        else:
            self.fraction_of_radiant_energy_to_surface_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_43 = None
        else:
            self.fraction_of_radiant_energy_to_surface_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_44 = None
        else:
            self.fraction_of_radiant_energy_to_surface_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_45 = None
        else:
            self.fraction_of_radiant_energy_to_surface_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_46 = None
        else:
            self.fraction_of_radiant_energy_to_surface_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_47 = None
        else:
            self.fraction_of_radiant_energy_to_surface_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_48 = None
        else:
            self.fraction_of_radiant_energy_to_surface_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_49 = None
        else:
            self.fraction_of_radiant_energy_to_surface_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_50 = None
        else:
            self.fraction_of_radiant_energy_to_surface_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_51 = None
        else:
            self.fraction_of_radiant_energy_to_surface_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_52 = None
        else:
            self.fraction_of_radiant_energy_to_surface_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_53 = None
        else:
            self.fraction_of_radiant_energy_to_surface_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_54 = None
        else:
            self.fraction_of_radiant_energy_to_surface_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_55 = None
        else:
            self.fraction_of_radiant_energy_to_surface_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_56 = None
        else:
            self.fraction_of_radiant_energy_to_surface_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_57 = None
        else:
            self.fraction_of_radiant_energy_to_surface_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_58 = None
        else:
            self.fraction_of_radiant_energy_to_surface_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_59 = None
        else:
            self.fraction_of_radiant_energy_to_surface_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_60 = None
        else:
            self.fraction_of_radiant_energy_to_surface_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_61 = None
        else:
            self.fraction_of_radiant_energy_to_surface_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_62 = None
        else:
            self.fraction_of_radiant_energy_to_surface_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_63 = None
        else:
            self.fraction_of_radiant_energy_to_surface_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_64 = None
        else:
            self.fraction_of_radiant_energy_to_surface_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_65 = None
        else:
            self.fraction_of_radiant_energy_to_surface_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_66 = None
        else:
            self.fraction_of_radiant_energy_to_surface_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_67 = None
        else:
            self.fraction_of_radiant_energy_to_surface_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_68 = None
        else:
            self.fraction_of_radiant_energy_to_surface_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_69 = None
        else:
            self.fraction_of_radiant_energy_to_surface_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_70 = None
        else:
            self.fraction_of_radiant_energy_to_surface_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_71 = None
        else:
            self.fraction_of_radiant_energy_to_surface_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_72 = None
        else:
            self.fraction_of_radiant_energy_to_surface_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_73 = None
        else:
            self.fraction_of_radiant_energy_to_surface_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_74 = None
        else:
            self.fraction_of_radiant_energy_to_surface_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_75 = None
        else:
            self.fraction_of_radiant_energy_to_surface_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_76 = None
        else:
            self.fraction_of_radiant_energy_to_surface_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_77 = None
        else:
            self.fraction_of_radiant_energy_to_surface_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_78 = None
        else:
            self.fraction_of_radiant_energy_to_surface_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_79 = None
        else:
            self.fraction_of_radiant_energy_to_surface_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_80 = None
        else:
            self.fraction_of_radiant_energy_to_surface_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_81 = None
        else:
            self.fraction_of_radiant_energy_to_surface_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_82 = None
        else:
            self.fraction_of_radiant_energy_to_surface_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_83 = None
        else:
            self.fraction_of_radiant_energy_to_surface_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_84 = None
        else:
            self.fraction_of_radiant_energy_to_surface_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_85 = None
        else:
            self.fraction_of_radiant_energy_to_surface_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_86 = None
        else:
            self.fraction_of_radiant_energy_to_surface_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_87 = None
        else:
            self.fraction_of_radiant_energy_to_surface_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_88 = None
        else:
            self.fraction_of_radiant_energy_to_surface_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_89 = None
        else:
            self.fraction_of_radiant_energy_to_surface_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_90 = None
        else:
            self.fraction_of_radiant_energy_to_surface_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_91 = None
        else:
            self.fraction_of_radiant_energy_to_surface_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_92 = None
        else:
            self.fraction_of_radiant_energy_to_surface_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_93 = None
        else:
            self.fraction_of_radiant_energy_to_surface_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_94 = None
        else:
            self.fraction_of_radiant_energy_to_surface_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_95 = None
        else:
            self.fraction_of_radiant_energy_to_surface_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_96 = None
        else:
            self.fraction_of_radiant_energy_to_surface_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_97 = None
        else:
            self.fraction_of_radiant_energy_to_surface_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_98 = None
        else:
            self.fraction_of_radiant_energy_to_surface_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_99 = None
        else:
            self.fraction_of_radiant_energy_to_surface_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_100 = None
        else:
            self.fraction_of_radiant_energy_to_surface_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `heating_design_capacity_method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `heating_design_capacity_method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            vals = set()
            vals.add("HeatingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_design_capacity_method`'.format(value))

        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float): value for IDD Field `heating_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')

        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity_per_floor_area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `heating_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')

        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_autosized_heating_design_capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_heating_design_capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')

        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def degree_of_subcooling(self):
        """Get degree_of_subcooling

        Returns:
            float: the value of `degree_of_subcooling` or None if not set
        """
        return self._data["Degree of SubCooling"]

    @degree_of_subcooling.setter
    def degree_of_subcooling(self, value=5.0 ):
        """  Corresponds to IDD Field `degree_of_subcooling`

        Args:
            value (float): value for IDD Field `degree_of_subcooling`
                Unit: deltaC
                Default value: 5.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `degree_of_subcooling`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `degree_of_subcooling`')

        self._data["Degree of SubCooling"] = value

    @property
    def maximum_steam_flow_rate(self):
        """Get maximum_steam_flow_rate

        Returns:
            float: the value of `maximum_steam_flow_rate` or None if not set
        """
        return self._data["Maximum Steam Flow Rate"]

    @maximum_steam_flow_rate.setter
    def maximum_steam_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_steam_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_steam_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_steam_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_steam_flow_rate`')

        self._data["Maximum Steam Flow Rate"] = value

    @property
    def convergence_tolerance(self):
        """Get convergence_tolerance

        Returns:
            float: the value of `convergence_tolerance` or None if not set
        """
        return self._data["Convergence Tolerance"]

    @convergence_tolerance.setter
    def convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `convergence_tolerance`

        Args:
            value (float): value for IDD Field `convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `convergence_tolerance`')

        self._data["Convergence Tolerance"] = value

    @property
    def fraction_radiant(self):
        """Get fraction_radiant

        Returns:
            float: the value of `fraction_radiant` or None if not set
        """
        return self._data["Fraction Radiant"]

    @fraction_radiant.setter
    def fraction_radiant(self, value=None):
        """  Corresponds to IDD Field `fraction_radiant`

        Args:
            value (float): value for IDD Field `fraction_radiant`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_radiant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_radiant`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_radiant`')

        self._data["Fraction Radiant"] = value

    @property
    def fraction_of_radiant_energy_incident_on_people(self):
        """Get fraction_of_radiant_energy_incident_on_people

        Returns:
            float: the value of `fraction_of_radiant_energy_incident_on_people` or None if not set
        """
        return self._data["Fraction of Radiant Energy Incident on People"]

    @fraction_of_radiant_energy_incident_on_people.setter
    def fraction_of_radiant_energy_incident_on_people(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_incident_on_people`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_incident_on_people`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_incident_on_people`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')

        self._data["Fraction of Radiant Energy Incident on People"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `surface_1_name`
        Radiant energy may be distributed to specific surfaces

        Args:
            value (str): value for IDD Field `surface_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')

        self._data["Surface 1 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_1(self):
        """Get fraction_of_radiant_energy_to_surface_1

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_1` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 1"]

    @fraction_of_radiant_energy_to_surface_1.setter
    def fraction_of_radiant_energy_to_surface_1(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_1`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')

        self._data["Fraction of Radiant Energy to Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `surface_2_name`

        Args:
            value (str): value for IDD Field `surface_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')

        self._data["Surface 2 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_2(self):
        """Get fraction_of_radiant_energy_to_surface_2

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_2` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 2"]

    @fraction_of_radiant_energy_to_surface_2.setter
    def fraction_of_radiant_energy_to_surface_2(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_2`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')

        self._data["Fraction of Radiant Energy to Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `surface_3_name`

        Args:
            value (str): value for IDD Field `surface_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')

        self._data["Surface 3 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_3(self):
        """Get fraction_of_radiant_energy_to_surface_3

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_3` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 3"]

    @fraction_of_radiant_energy_to_surface_3.setter
    def fraction_of_radiant_energy_to_surface_3(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_3`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')

        self._data["Fraction of Radiant Energy to Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `surface_4_name`

        Args:
            value (str): value for IDD Field `surface_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')

        self._data["Surface 4 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_4(self):
        """Get fraction_of_radiant_energy_to_surface_4

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_4` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 4"]

    @fraction_of_radiant_energy_to_surface_4.setter
    def fraction_of_radiant_energy_to_surface_4(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_4`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')

        self._data["Fraction of Radiant Energy to Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `surface_5_name`

        Args:
            value (str): value for IDD Field `surface_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')

        self._data["Surface 5 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_5(self):
        """Get fraction_of_radiant_energy_to_surface_5

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_5` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 5"]

    @fraction_of_radiant_energy_to_surface_5.setter
    def fraction_of_radiant_energy_to_surface_5(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_5`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')

        self._data["Fraction of Radiant Energy to Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `surface_6_name`

        Args:
            value (str): value for IDD Field `surface_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')

        self._data["Surface 6 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_6(self):
        """Get fraction_of_radiant_energy_to_surface_6

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_6` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 6"]

    @fraction_of_radiant_energy_to_surface_6.setter
    def fraction_of_radiant_energy_to_surface_6(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_6`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_6`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')

        self._data["Fraction of Radiant Energy to Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `surface_7_name`

        Args:
            value (str): value for IDD Field `surface_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')

        self._data["Surface 7 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_7(self):
        """Get fraction_of_radiant_energy_to_surface_7

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_7` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 7"]

    @fraction_of_radiant_energy_to_surface_7.setter
    def fraction_of_radiant_energy_to_surface_7(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_7`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_7`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')

        self._data["Fraction of Radiant Energy to Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `surface_8_name`

        Args:
            value (str): value for IDD Field `surface_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')

        self._data["Surface 8 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_8(self):
        """Get fraction_of_radiant_energy_to_surface_8

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_8` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 8"]

    @fraction_of_radiant_energy_to_surface_8.setter
    def fraction_of_radiant_energy_to_surface_8(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_8`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_8`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')

        self._data["Fraction of Radiant Energy to Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `surface_9_name`

        Args:
            value (str): value for IDD Field `surface_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')

        self._data["Surface 9 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_9(self):
        """Get fraction_of_radiant_energy_to_surface_9

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_9` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 9"]

    @fraction_of_radiant_energy_to_surface_9.setter
    def fraction_of_radiant_energy_to_surface_9(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_9`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_9`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')

        self._data["Fraction of Radiant Energy to Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `surface_10_name`

        Args:
            value (str): value for IDD Field `surface_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')

        self._data["Surface 10 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_10(self):
        """Get fraction_of_radiant_energy_to_surface_10

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_10` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 10"]

    @fraction_of_radiant_energy_to_surface_10.setter
    def fraction_of_radiant_energy_to_surface_10(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_10`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_10`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')

        self._data["Fraction of Radiant Energy to Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `surface_11_name`

        Args:
            value (str): value for IDD Field `surface_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')

        self._data["Surface 11 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_11(self):
        """Get fraction_of_radiant_energy_to_surface_11

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_11` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 11"]

    @fraction_of_radiant_energy_to_surface_11.setter
    def fraction_of_radiant_energy_to_surface_11(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_11`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_11`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')

        self._data["Fraction of Radiant Energy to Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `surface_12_name`

        Args:
            value (str): value for IDD Field `surface_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')

        self._data["Surface 12 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_12(self):
        """Get fraction_of_radiant_energy_to_surface_12

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_12` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 12"]

    @fraction_of_radiant_energy_to_surface_12.setter
    def fraction_of_radiant_energy_to_surface_12(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_12`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_12`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')

        self._data["Fraction of Radiant Energy to Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `surface_13_name`

        Args:
            value (str): value for IDD Field `surface_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')

        self._data["Surface 13 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_13(self):
        """Get fraction_of_radiant_energy_to_surface_13

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_13` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 13"]

    @fraction_of_radiant_energy_to_surface_13.setter
    def fraction_of_radiant_energy_to_surface_13(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_13`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_13`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')

        self._data["Fraction of Radiant Energy to Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `surface_14_name`

        Args:
            value (str): value for IDD Field `surface_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')

        self._data["Surface 14 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_14(self):
        """Get fraction_of_radiant_energy_to_surface_14

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_14` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 14"]

    @fraction_of_radiant_energy_to_surface_14.setter
    def fraction_of_radiant_energy_to_surface_14(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_14`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_14`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')

        self._data["Fraction of Radiant Energy to Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `surface_15_name`

        Args:
            value (str): value for IDD Field `surface_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')

        self._data["Surface 15 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_15(self):
        """Get fraction_of_radiant_energy_to_surface_15

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_15` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 15"]

    @fraction_of_radiant_energy_to_surface_15.setter
    def fraction_of_radiant_energy_to_surface_15(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_15`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_15`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')

        self._data["Fraction of Radiant Energy to Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `surface_16_name`

        Args:
            value (str): value for IDD Field `surface_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')

        self._data["Surface 16 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_16(self):
        """Get fraction_of_radiant_energy_to_surface_16

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_16` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 16"]

    @fraction_of_radiant_energy_to_surface_16.setter
    def fraction_of_radiant_energy_to_surface_16(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_16`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_16`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')

        self._data["Fraction of Radiant Energy to Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `surface_17_name`

        Args:
            value (str): value for IDD Field `surface_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')

        self._data["Surface 17 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_17(self):
        """Get fraction_of_radiant_energy_to_surface_17

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_17` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 17"]

    @fraction_of_radiant_energy_to_surface_17.setter
    def fraction_of_radiant_energy_to_surface_17(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_17`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_17`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')

        self._data["Fraction of Radiant Energy to Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `surface_18_name`

        Args:
            value (str): value for IDD Field `surface_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')

        self._data["Surface 18 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_18(self):
        """Get fraction_of_radiant_energy_to_surface_18

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_18` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 18"]

    @fraction_of_radiant_energy_to_surface_18.setter
    def fraction_of_radiant_energy_to_surface_18(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_18`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_18`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')

        self._data["Fraction of Radiant Energy to Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `surface_19_name`

        Args:
            value (str): value for IDD Field `surface_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')

        self._data["Surface 19 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_19(self):
        """Get fraction_of_radiant_energy_to_surface_19

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_19` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 19"]

    @fraction_of_radiant_energy_to_surface_19.setter
    def fraction_of_radiant_energy_to_surface_19(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_19`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_19`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')

        self._data["Fraction of Radiant Energy to Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `surface_20_name`

        Args:
            value (str): value for IDD Field `surface_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')

        self._data["Surface 20 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_20(self):
        """Get fraction_of_radiant_energy_to_surface_20

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_20` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 20"]

    @fraction_of_radiant_energy_to_surface_20.setter
    def fraction_of_radiant_energy_to_surface_20(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_20`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_20`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')

        self._data["Fraction of Radiant Energy to Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `surface_21_name`

        Args:
            value (str): value for IDD Field `surface_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')

        self._data["Surface 21 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_21(self):
        """Get fraction_of_radiant_energy_to_surface_21

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_21` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 21"]

    @fraction_of_radiant_energy_to_surface_21.setter
    def fraction_of_radiant_energy_to_surface_21(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_21`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_21`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')

        self._data["Fraction of Radiant Energy to Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `surface_22_name`

        Args:
            value (str): value for IDD Field `surface_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')

        self._data["Surface 22 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_22(self):
        """Get fraction_of_radiant_energy_to_surface_22

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_22` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 22"]

    @fraction_of_radiant_energy_to_surface_22.setter
    def fraction_of_radiant_energy_to_surface_22(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_22`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_22`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')

        self._data["Fraction of Radiant Energy to Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `surface_23_name`

        Args:
            value (str): value for IDD Field `surface_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')

        self._data["Surface 23 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_23(self):
        """Get fraction_of_radiant_energy_to_surface_23

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_23` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 23"]

    @fraction_of_radiant_energy_to_surface_23.setter
    def fraction_of_radiant_energy_to_surface_23(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_23`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_23`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')

        self._data["Fraction of Radiant Energy to Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `surface_24_name`

        Args:
            value (str): value for IDD Field `surface_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')

        self._data["Surface 24 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_24(self):
        """Get fraction_of_radiant_energy_to_surface_24

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_24` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 24"]

    @fraction_of_radiant_energy_to_surface_24.setter
    def fraction_of_radiant_energy_to_surface_24(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_24`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_24`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')

        self._data["Fraction of Radiant Energy to Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `surface_25_name`

        Args:
            value (str): value for IDD Field `surface_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')

        self._data["Surface 25 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_25(self):
        """Get fraction_of_radiant_energy_to_surface_25

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_25` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 25"]

    @fraction_of_radiant_energy_to_surface_25.setter
    def fraction_of_radiant_energy_to_surface_25(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_25`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_25`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')

        self._data["Fraction of Radiant Energy to Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `surface_26_name`

        Args:
            value (str): value for IDD Field `surface_26_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')

        self._data["Surface 26 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_26(self):
        """Get fraction_of_radiant_energy_to_surface_26

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_26` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 26"]

    @fraction_of_radiant_energy_to_surface_26.setter
    def fraction_of_radiant_energy_to_surface_26(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_26`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_26`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')

        self._data["Fraction of Radiant Energy to Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `surface_27_name`

        Args:
            value (str): value for IDD Field `surface_27_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')

        self._data["Surface 27 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_27(self):
        """Get fraction_of_radiant_energy_to_surface_27

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_27` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 27"]

    @fraction_of_radiant_energy_to_surface_27.setter
    def fraction_of_radiant_energy_to_surface_27(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_27`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_27`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')

        self._data["Fraction of Radiant Energy to Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `surface_28_name`

        Args:
            value (str): value for IDD Field `surface_28_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')

        self._data["Surface 28 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_28(self):
        """Get fraction_of_radiant_energy_to_surface_28

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_28` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 28"]

    @fraction_of_radiant_energy_to_surface_28.setter
    def fraction_of_radiant_energy_to_surface_28(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_28`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_28`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')

        self._data["Fraction of Radiant Energy to Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `surface_29_name`

        Args:
            value (str): value for IDD Field `surface_29_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')

        self._data["Surface 29 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_29(self):
        """Get fraction_of_radiant_energy_to_surface_29

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_29` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 29"]

    @fraction_of_radiant_energy_to_surface_29.setter
    def fraction_of_radiant_energy_to_surface_29(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_29`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_29`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')

        self._data["Fraction of Radiant Energy to Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `surface_30_name`

        Args:
            value (str): value for IDD Field `surface_30_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')

        self._data["Surface 30 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_30(self):
        """Get fraction_of_radiant_energy_to_surface_30

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_30` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 30"]

    @fraction_of_radiant_energy_to_surface_30.setter
    def fraction_of_radiant_energy_to_surface_30(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_30`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_30`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')

        self._data["Fraction of Radiant Energy to Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `surface_31_name`

        Args:
            value (str): value for IDD Field `surface_31_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')

        self._data["Surface 31 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_31(self):
        """Get fraction_of_radiant_energy_to_surface_31

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_31` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 31"]

    @fraction_of_radiant_energy_to_surface_31.setter
    def fraction_of_radiant_energy_to_surface_31(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_31`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_31`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')

        self._data["Fraction of Radiant Energy to Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `surface_32_name`

        Args:
            value (str): value for IDD Field `surface_32_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')

        self._data["Surface 32 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_32(self):
        """Get fraction_of_radiant_energy_to_surface_32

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_32` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 32"]

    @fraction_of_radiant_energy_to_surface_32.setter
    def fraction_of_radiant_energy_to_surface_32(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_32`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_32`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')

        self._data["Fraction of Radiant Energy to Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `surface_33_name`

        Args:
            value (str): value for IDD Field `surface_33_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')

        self._data["Surface 33 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_33(self):
        """Get fraction_of_radiant_energy_to_surface_33

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_33` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 33"]

    @fraction_of_radiant_energy_to_surface_33.setter
    def fraction_of_radiant_energy_to_surface_33(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_33`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_33`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')

        self._data["Fraction of Radiant Energy to Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `surface_34_name`

        Args:
            value (str): value for IDD Field `surface_34_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')

        self._data["Surface 34 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_34(self):
        """Get fraction_of_radiant_energy_to_surface_34

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_34` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 34"]

    @fraction_of_radiant_energy_to_surface_34.setter
    def fraction_of_radiant_energy_to_surface_34(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_34`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_34`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')

        self._data["Fraction of Radiant Energy to Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `surface_35_name`

        Args:
            value (str): value for IDD Field `surface_35_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')

        self._data["Surface 35 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_35(self):
        """Get fraction_of_radiant_energy_to_surface_35

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_35` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 35"]

    @fraction_of_radiant_energy_to_surface_35.setter
    def fraction_of_radiant_energy_to_surface_35(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_35`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_35`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')

        self._data["Fraction of Radiant Energy to Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `surface_36_name`

        Args:
            value (str): value for IDD Field `surface_36_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')

        self._data["Surface 36 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_36(self):
        """Get fraction_of_radiant_energy_to_surface_36

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_36` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 36"]

    @fraction_of_radiant_energy_to_surface_36.setter
    def fraction_of_radiant_energy_to_surface_36(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_36`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_36`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')

        self._data["Fraction of Radiant Energy to Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `surface_37_name`

        Args:
            value (str): value for IDD Field `surface_37_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')

        self._data["Surface 37 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_37(self):
        """Get fraction_of_radiant_energy_to_surface_37

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_37` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 37"]

    @fraction_of_radiant_energy_to_surface_37.setter
    def fraction_of_radiant_energy_to_surface_37(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_37`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_37`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')

        self._data["Fraction of Radiant Energy to Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `surface_38_name`

        Args:
            value (str): value for IDD Field `surface_38_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')

        self._data["Surface 38 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_38(self):
        """Get fraction_of_radiant_energy_to_surface_38

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_38` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 38"]

    @fraction_of_radiant_energy_to_surface_38.setter
    def fraction_of_radiant_energy_to_surface_38(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_38`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_38`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')

        self._data["Fraction of Radiant Energy to Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `surface_39_name`

        Args:
            value (str): value for IDD Field `surface_39_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')

        self._data["Surface 39 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_39(self):
        """Get fraction_of_radiant_energy_to_surface_39

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_39` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 39"]

    @fraction_of_radiant_energy_to_surface_39.setter
    def fraction_of_radiant_energy_to_surface_39(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_39`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_39`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')

        self._data["Fraction of Radiant Energy to Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `surface_40_name`

        Args:
            value (str): value for IDD Field `surface_40_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')

        self._data["Surface 40 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_40(self):
        """Get fraction_of_radiant_energy_to_surface_40

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_40` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 40"]

    @fraction_of_radiant_energy_to_surface_40.setter
    def fraction_of_radiant_energy_to_surface_40(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_40`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_40`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')

        self._data["Fraction of Radiant Energy to Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `surface_41_name`

        Args:
            value (str): value for IDD Field `surface_41_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')

        self._data["Surface 41 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_41(self):
        """Get fraction_of_radiant_energy_to_surface_41

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_41` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 41"]

    @fraction_of_radiant_energy_to_surface_41.setter
    def fraction_of_radiant_energy_to_surface_41(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_41`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_41`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')

        self._data["Fraction of Radiant Energy to Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `surface_42_name`

        Args:
            value (str): value for IDD Field `surface_42_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')

        self._data["Surface 42 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_42(self):
        """Get fraction_of_radiant_energy_to_surface_42

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_42` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 42"]

    @fraction_of_radiant_energy_to_surface_42.setter
    def fraction_of_radiant_energy_to_surface_42(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_42`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_42`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')

        self._data["Fraction of Radiant Energy to Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `surface_43_name`

        Args:
            value (str): value for IDD Field `surface_43_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')

        self._data["Surface 43 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_43(self):
        """Get fraction_of_radiant_energy_to_surface_43

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_43` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 43"]

    @fraction_of_radiant_energy_to_surface_43.setter
    def fraction_of_radiant_energy_to_surface_43(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_43`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_43`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')

        self._data["Fraction of Radiant Energy to Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `surface_44_name`

        Args:
            value (str): value for IDD Field `surface_44_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')

        self._data["Surface 44 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_44(self):
        """Get fraction_of_radiant_energy_to_surface_44

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_44` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 44"]

    @fraction_of_radiant_energy_to_surface_44.setter
    def fraction_of_radiant_energy_to_surface_44(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_44`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_44`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')

        self._data["Fraction of Radiant Energy to Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `surface_45_name`

        Args:
            value (str): value for IDD Field `surface_45_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')

        self._data["Surface 45 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_45(self):
        """Get fraction_of_radiant_energy_to_surface_45

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_45` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 45"]

    @fraction_of_radiant_energy_to_surface_45.setter
    def fraction_of_radiant_energy_to_surface_45(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_45`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_45`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')

        self._data["Fraction of Radiant Energy to Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `surface_46_name`

        Args:
            value (str): value for IDD Field `surface_46_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')

        self._data["Surface 46 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_46(self):
        """Get fraction_of_radiant_energy_to_surface_46

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_46` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 46"]

    @fraction_of_radiant_energy_to_surface_46.setter
    def fraction_of_radiant_energy_to_surface_46(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_46`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_46`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')

        self._data["Fraction of Radiant Energy to Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `surface_47_name`

        Args:
            value (str): value for IDD Field `surface_47_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')

        self._data["Surface 47 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_47(self):
        """Get fraction_of_radiant_energy_to_surface_47

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_47` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 47"]

    @fraction_of_radiant_energy_to_surface_47.setter
    def fraction_of_radiant_energy_to_surface_47(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_47`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_47`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')

        self._data["Fraction of Radiant Energy to Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `surface_48_name`

        Args:
            value (str): value for IDD Field `surface_48_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')

        self._data["Surface 48 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_48(self):
        """Get fraction_of_radiant_energy_to_surface_48

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_48` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 48"]

    @fraction_of_radiant_energy_to_surface_48.setter
    def fraction_of_radiant_energy_to_surface_48(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_48`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_48`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')

        self._data["Fraction of Radiant Energy to Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `surface_49_name`

        Args:
            value (str): value for IDD Field `surface_49_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')

        self._data["Surface 49 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_49(self):
        """Get fraction_of_radiant_energy_to_surface_49

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_49` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 49"]

    @fraction_of_radiant_energy_to_surface_49.setter
    def fraction_of_radiant_energy_to_surface_49(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_49`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_49`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')

        self._data["Fraction of Radiant Energy to Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `surface_50_name`

        Args:
            value (str): value for IDD Field `surface_50_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')

        self._data["Surface 50 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_50(self):
        """Get fraction_of_radiant_energy_to_surface_50

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_50` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 50"]

    @fraction_of_radiant_energy_to_surface_50.setter
    def fraction_of_radiant_energy_to_surface_50(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_50`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_50`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')

        self._data["Fraction of Radiant Energy to Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `surface_51_name`

        Args:
            value (str): value for IDD Field `surface_51_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')

        self._data["Surface 51 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_51(self):
        """Get fraction_of_radiant_energy_to_surface_51

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_51` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 51"]

    @fraction_of_radiant_energy_to_surface_51.setter
    def fraction_of_radiant_energy_to_surface_51(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_51`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_51`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')

        self._data["Fraction of Radiant Energy to Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `surface_52_name`

        Args:
            value (str): value for IDD Field `surface_52_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')

        self._data["Surface 52 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_52(self):
        """Get fraction_of_radiant_energy_to_surface_52

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_52` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 52"]

    @fraction_of_radiant_energy_to_surface_52.setter
    def fraction_of_radiant_energy_to_surface_52(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_52`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_52`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')

        self._data["Fraction of Radiant Energy to Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `surface_53_name`

        Args:
            value (str): value for IDD Field `surface_53_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')

        self._data["Surface 53 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_53(self):
        """Get fraction_of_radiant_energy_to_surface_53

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_53` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 53"]

    @fraction_of_radiant_energy_to_surface_53.setter
    def fraction_of_radiant_energy_to_surface_53(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_53`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_53`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')

        self._data["Fraction of Radiant Energy to Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `surface_54_name`

        Args:
            value (str): value for IDD Field `surface_54_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')

        self._data["Surface 54 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_54(self):
        """Get fraction_of_radiant_energy_to_surface_54

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_54` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 54"]

    @fraction_of_radiant_energy_to_surface_54.setter
    def fraction_of_radiant_energy_to_surface_54(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_54`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_54`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')

        self._data["Fraction of Radiant Energy to Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `surface_55_name`

        Args:
            value (str): value for IDD Field `surface_55_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')

        self._data["Surface 55 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_55(self):
        """Get fraction_of_radiant_energy_to_surface_55

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_55` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 55"]

    @fraction_of_radiant_energy_to_surface_55.setter
    def fraction_of_radiant_energy_to_surface_55(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_55`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_55`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')

        self._data["Fraction of Radiant Energy to Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `surface_56_name`

        Args:
            value (str): value for IDD Field `surface_56_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')

        self._data["Surface 56 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_56(self):
        """Get fraction_of_radiant_energy_to_surface_56

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_56` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 56"]

    @fraction_of_radiant_energy_to_surface_56.setter
    def fraction_of_radiant_energy_to_surface_56(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_56`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_56`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')

        self._data["Fraction of Radiant Energy to Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `surface_57_name`

        Args:
            value (str): value for IDD Field `surface_57_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')

        self._data["Surface 57 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_57(self):
        """Get fraction_of_radiant_energy_to_surface_57

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_57` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 57"]

    @fraction_of_radiant_energy_to_surface_57.setter
    def fraction_of_radiant_energy_to_surface_57(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_57`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_57`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')

        self._data["Fraction of Radiant Energy to Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `surface_58_name`

        Args:
            value (str): value for IDD Field `surface_58_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')

        self._data["Surface 58 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_58(self):
        """Get fraction_of_radiant_energy_to_surface_58

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_58` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 58"]

    @fraction_of_radiant_energy_to_surface_58.setter
    def fraction_of_radiant_energy_to_surface_58(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_58`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_58`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')

        self._data["Fraction of Radiant Energy to Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `surface_59_name`

        Args:
            value (str): value for IDD Field `surface_59_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')

        self._data["Surface 59 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_59(self):
        """Get fraction_of_radiant_energy_to_surface_59

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_59` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 59"]

    @fraction_of_radiant_energy_to_surface_59.setter
    def fraction_of_radiant_energy_to_surface_59(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_59`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_59`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')

        self._data["Fraction of Radiant Energy to Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `surface_60_name`

        Args:
            value (str): value for IDD Field `surface_60_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')

        self._data["Surface 60 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_60(self):
        """Get fraction_of_radiant_energy_to_surface_60

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_60` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 60"]

    @fraction_of_radiant_energy_to_surface_60.setter
    def fraction_of_radiant_energy_to_surface_60(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_60`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_60`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')

        self._data["Fraction of Radiant Energy to Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `surface_61_name`

        Args:
            value (str): value for IDD Field `surface_61_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')

        self._data["Surface 61 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_61(self):
        """Get fraction_of_radiant_energy_to_surface_61

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_61` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 61"]

    @fraction_of_radiant_energy_to_surface_61.setter
    def fraction_of_radiant_energy_to_surface_61(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_61`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_61`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')

        self._data["Fraction of Radiant Energy to Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `surface_62_name`

        Args:
            value (str): value for IDD Field `surface_62_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')

        self._data["Surface 62 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_62(self):
        """Get fraction_of_radiant_energy_to_surface_62

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_62` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 62"]

    @fraction_of_radiant_energy_to_surface_62.setter
    def fraction_of_radiant_energy_to_surface_62(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_62`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_62`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')

        self._data["Fraction of Radiant Energy to Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `surface_63_name`

        Args:
            value (str): value for IDD Field `surface_63_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')

        self._data["Surface 63 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_63(self):
        """Get fraction_of_radiant_energy_to_surface_63

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_63` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 63"]

    @fraction_of_radiant_energy_to_surface_63.setter
    def fraction_of_radiant_energy_to_surface_63(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_63`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_63`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')

        self._data["Fraction of Radiant Energy to Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `surface_64_name`

        Args:
            value (str): value for IDD Field `surface_64_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')

        self._data["Surface 64 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_64(self):
        """Get fraction_of_radiant_energy_to_surface_64

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_64` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 64"]

    @fraction_of_radiant_energy_to_surface_64.setter
    def fraction_of_radiant_energy_to_surface_64(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_64`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_64`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')

        self._data["Fraction of Radiant Energy to Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `surface_65_name`

        Args:
            value (str): value for IDD Field `surface_65_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')

        self._data["Surface 65 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_65(self):
        """Get fraction_of_radiant_energy_to_surface_65

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_65` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 65"]

    @fraction_of_radiant_energy_to_surface_65.setter
    def fraction_of_radiant_energy_to_surface_65(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_65`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_65`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')

        self._data["Fraction of Radiant Energy to Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `surface_66_name`

        Args:
            value (str): value for IDD Field `surface_66_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')

        self._data["Surface 66 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_66(self):
        """Get fraction_of_radiant_energy_to_surface_66

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_66` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 66"]

    @fraction_of_radiant_energy_to_surface_66.setter
    def fraction_of_radiant_energy_to_surface_66(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_66`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_66`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')

        self._data["Fraction of Radiant Energy to Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `surface_67_name`

        Args:
            value (str): value for IDD Field `surface_67_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')

        self._data["Surface 67 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_67(self):
        """Get fraction_of_radiant_energy_to_surface_67

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_67` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 67"]

    @fraction_of_radiant_energy_to_surface_67.setter
    def fraction_of_radiant_energy_to_surface_67(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_67`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_67`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')

        self._data["Fraction of Radiant Energy to Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `surface_68_name`

        Args:
            value (str): value for IDD Field `surface_68_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')

        self._data["Surface 68 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_68(self):
        """Get fraction_of_radiant_energy_to_surface_68

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_68` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 68"]

    @fraction_of_radiant_energy_to_surface_68.setter
    def fraction_of_radiant_energy_to_surface_68(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_68`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_68`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')

        self._data["Fraction of Radiant Energy to Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `surface_69_name`

        Args:
            value (str): value for IDD Field `surface_69_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')

        self._data["Surface 69 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_69(self):
        """Get fraction_of_radiant_energy_to_surface_69

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_69` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 69"]

    @fraction_of_radiant_energy_to_surface_69.setter
    def fraction_of_radiant_energy_to_surface_69(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_69`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_69`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')

        self._data["Fraction of Radiant Energy to Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `surface_70_name`

        Args:
            value (str): value for IDD Field `surface_70_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')

        self._data["Surface 70 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_70(self):
        """Get fraction_of_radiant_energy_to_surface_70

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_70` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 70"]

    @fraction_of_radiant_energy_to_surface_70.setter
    def fraction_of_radiant_energy_to_surface_70(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_70`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_70`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')

        self._data["Fraction of Radiant Energy to Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `surface_71_name`

        Args:
            value (str): value for IDD Field `surface_71_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')

        self._data["Surface 71 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_71(self):
        """Get fraction_of_radiant_energy_to_surface_71

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_71` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 71"]

    @fraction_of_radiant_energy_to_surface_71.setter
    def fraction_of_radiant_energy_to_surface_71(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_71`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_71`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')

        self._data["Fraction of Radiant Energy to Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `surface_72_name`

        Args:
            value (str): value for IDD Field `surface_72_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')

        self._data["Surface 72 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_72(self):
        """Get fraction_of_radiant_energy_to_surface_72

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_72` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 72"]

    @fraction_of_radiant_energy_to_surface_72.setter
    def fraction_of_radiant_energy_to_surface_72(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_72`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_72`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')

        self._data["Fraction of Radiant Energy to Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `surface_73_name`

        Args:
            value (str): value for IDD Field `surface_73_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')

        self._data["Surface 73 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_73(self):
        """Get fraction_of_radiant_energy_to_surface_73

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_73` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 73"]

    @fraction_of_radiant_energy_to_surface_73.setter
    def fraction_of_radiant_energy_to_surface_73(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_73`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_73`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')

        self._data["Fraction of Radiant Energy to Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `surface_74_name`

        Args:
            value (str): value for IDD Field `surface_74_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')

        self._data["Surface 74 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_74(self):
        """Get fraction_of_radiant_energy_to_surface_74

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_74` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 74"]

    @fraction_of_radiant_energy_to_surface_74.setter
    def fraction_of_radiant_energy_to_surface_74(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_74`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_74`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')

        self._data["Fraction of Radiant Energy to Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `surface_75_name`

        Args:
            value (str): value for IDD Field `surface_75_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')

        self._data["Surface 75 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_75(self):
        """Get fraction_of_radiant_energy_to_surface_75

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_75` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 75"]

    @fraction_of_radiant_energy_to_surface_75.setter
    def fraction_of_radiant_energy_to_surface_75(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_75`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_75`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')

        self._data["Fraction of Radiant Energy to Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `surface_76_name`

        Args:
            value (str): value for IDD Field `surface_76_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')

        self._data["Surface 76 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_76(self):
        """Get fraction_of_radiant_energy_to_surface_76

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_76` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 76"]

    @fraction_of_radiant_energy_to_surface_76.setter
    def fraction_of_radiant_energy_to_surface_76(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_76`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_76`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')

        self._data["Fraction of Radiant Energy to Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `surface_77_name`

        Args:
            value (str): value for IDD Field `surface_77_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')

        self._data["Surface 77 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_77(self):
        """Get fraction_of_radiant_energy_to_surface_77

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_77` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 77"]

    @fraction_of_radiant_energy_to_surface_77.setter
    def fraction_of_radiant_energy_to_surface_77(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_77`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_77`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')

        self._data["Fraction of Radiant Energy to Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `surface_78_name`

        Args:
            value (str): value for IDD Field `surface_78_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')

        self._data["Surface 78 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_78(self):
        """Get fraction_of_radiant_energy_to_surface_78

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_78` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 78"]

    @fraction_of_radiant_energy_to_surface_78.setter
    def fraction_of_radiant_energy_to_surface_78(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_78`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_78`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')

        self._data["Fraction of Radiant Energy to Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `surface_79_name`

        Args:
            value (str): value for IDD Field `surface_79_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')

        self._data["Surface 79 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_79(self):
        """Get fraction_of_radiant_energy_to_surface_79

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_79` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 79"]

    @fraction_of_radiant_energy_to_surface_79.setter
    def fraction_of_radiant_energy_to_surface_79(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_79`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_79`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')

        self._data["Fraction of Radiant Energy to Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `surface_80_name`

        Args:
            value (str): value for IDD Field `surface_80_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')

        self._data["Surface 80 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_80(self):
        """Get fraction_of_radiant_energy_to_surface_80

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_80` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 80"]

    @fraction_of_radiant_energy_to_surface_80.setter
    def fraction_of_radiant_energy_to_surface_80(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_80`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_80`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')

        self._data["Fraction of Radiant Energy to Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `surface_81_name`

        Args:
            value (str): value for IDD Field `surface_81_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')

        self._data["Surface 81 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_81(self):
        """Get fraction_of_radiant_energy_to_surface_81

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_81` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 81"]

    @fraction_of_radiant_energy_to_surface_81.setter
    def fraction_of_radiant_energy_to_surface_81(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_81`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_81`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')

        self._data["Fraction of Radiant Energy to Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `surface_82_name`

        Args:
            value (str): value for IDD Field `surface_82_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')

        self._data["Surface 82 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_82(self):
        """Get fraction_of_radiant_energy_to_surface_82

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_82` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 82"]

    @fraction_of_radiant_energy_to_surface_82.setter
    def fraction_of_radiant_energy_to_surface_82(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_82`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_82`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')

        self._data["Fraction of Radiant Energy to Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `surface_83_name`

        Args:
            value (str): value for IDD Field `surface_83_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')

        self._data["Surface 83 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_83(self):
        """Get fraction_of_radiant_energy_to_surface_83

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_83` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 83"]

    @fraction_of_radiant_energy_to_surface_83.setter
    def fraction_of_radiant_energy_to_surface_83(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_83`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_83`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')

        self._data["Fraction of Radiant Energy to Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `surface_84_name`

        Args:
            value (str): value for IDD Field `surface_84_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')

        self._data["Surface 84 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_84(self):
        """Get fraction_of_radiant_energy_to_surface_84

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_84` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 84"]

    @fraction_of_radiant_energy_to_surface_84.setter
    def fraction_of_radiant_energy_to_surface_84(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_84`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_84`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')

        self._data["Fraction of Radiant Energy to Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `surface_85_name`

        Args:
            value (str): value for IDD Field `surface_85_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')

        self._data["Surface 85 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_85(self):
        """Get fraction_of_radiant_energy_to_surface_85

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_85` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 85"]

    @fraction_of_radiant_energy_to_surface_85.setter
    def fraction_of_radiant_energy_to_surface_85(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_85`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_85`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')

        self._data["Fraction of Radiant Energy to Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `surface_86_name`

        Args:
            value (str): value for IDD Field `surface_86_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')

        self._data["Surface 86 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_86(self):
        """Get fraction_of_radiant_energy_to_surface_86

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_86` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 86"]

    @fraction_of_radiant_energy_to_surface_86.setter
    def fraction_of_radiant_energy_to_surface_86(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_86`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_86`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')

        self._data["Fraction of Radiant Energy to Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `surface_87_name`

        Args:
            value (str): value for IDD Field `surface_87_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')

        self._data["Surface 87 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_87(self):
        """Get fraction_of_radiant_energy_to_surface_87

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_87` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 87"]

    @fraction_of_radiant_energy_to_surface_87.setter
    def fraction_of_radiant_energy_to_surface_87(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_87`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_87`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')

        self._data["Fraction of Radiant Energy to Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `surface_88_name`

        Args:
            value (str): value for IDD Field `surface_88_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')

        self._data["Surface 88 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_88(self):
        """Get fraction_of_radiant_energy_to_surface_88

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_88` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 88"]

    @fraction_of_radiant_energy_to_surface_88.setter
    def fraction_of_radiant_energy_to_surface_88(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_88`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_88`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')

        self._data["Fraction of Radiant Energy to Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `surface_89_name`

        Args:
            value (str): value for IDD Field `surface_89_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')

        self._data["Surface 89 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_89(self):
        """Get fraction_of_radiant_energy_to_surface_89

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_89` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 89"]

    @fraction_of_radiant_energy_to_surface_89.setter
    def fraction_of_radiant_energy_to_surface_89(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_89`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_89`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')

        self._data["Fraction of Radiant Energy to Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `surface_90_name`

        Args:
            value (str): value for IDD Field `surface_90_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')

        self._data["Surface 90 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_90(self):
        """Get fraction_of_radiant_energy_to_surface_90

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_90` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 90"]

    @fraction_of_radiant_energy_to_surface_90.setter
    def fraction_of_radiant_energy_to_surface_90(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_90`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_90`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')

        self._data["Fraction of Radiant Energy to Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `surface_91_name`

        Args:
            value (str): value for IDD Field `surface_91_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')

        self._data["Surface 91 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_91(self):
        """Get fraction_of_radiant_energy_to_surface_91

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_91` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 91"]

    @fraction_of_radiant_energy_to_surface_91.setter
    def fraction_of_radiant_energy_to_surface_91(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_91`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_91`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')

        self._data["Fraction of Radiant Energy to Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `surface_92_name`

        Args:
            value (str): value for IDD Field `surface_92_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')

        self._data["Surface 92 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_92(self):
        """Get fraction_of_radiant_energy_to_surface_92

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_92` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 92"]

    @fraction_of_radiant_energy_to_surface_92.setter
    def fraction_of_radiant_energy_to_surface_92(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_92`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_92`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')

        self._data["Fraction of Radiant Energy to Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `surface_93_name`

        Args:
            value (str): value for IDD Field `surface_93_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')

        self._data["Surface 93 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_93(self):
        """Get fraction_of_radiant_energy_to_surface_93

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_93` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 93"]

    @fraction_of_radiant_energy_to_surface_93.setter
    def fraction_of_radiant_energy_to_surface_93(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_93`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_93`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')

        self._data["Fraction of Radiant Energy to Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `surface_94_name`

        Args:
            value (str): value for IDD Field `surface_94_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')

        self._data["Surface 94 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_94(self):
        """Get fraction_of_radiant_energy_to_surface_94

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_94` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 94"]

    @fraction_of_radiant_energy_to_surface_94.setter
    def fraction_of_radiant_energy_to_surface_94(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_94`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_94`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')

        self._data["Fraction of Radiant Energy to Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `surface_95_name`

        Args:
            value (str): value for IDD Field `surface_95_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')

        self._data["Surface 95 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_95(self):
        """Get fraction_of_radiant_energy_to_surface_95

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_95` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 95"]

    @fraction_of_radiant_energy_to_surface_95.setter
    def fraction_of_radiant_energy_to_surface_95(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_95`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_95`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')

        self._data["Fraction of Radiant Energy to Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `surface_96_name`

        Args:
            value (str): value for IDD Field `surface_96_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')

        self._data["Surface 96 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_96(self):
        """Get fraction_of_radiant_energy_to_surface_96

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_96` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 96"]

    @fraction_of_radiant_energy_to_surface_96.setter
    def fraction_of_radiant_energy_to_surface_96(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_96`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_96`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')

        self._data["Fraction of Radiant Energy to Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `surface_97_name`

        Args:
            value (str): value for IDD Field `surface_97_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')

        self._data["Surface 97 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_97(self):
        """Get fraction_of_radiant_energy_to_surface_97

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_97` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 97"]

    @fraction_of_radiant_energy_to_surface_97.setter
    def fraction_of_radiant_energy_to_surface_97(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_97`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_97`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')

        self._data["Fraction of Radiant Energy to Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `surface_98_name`

        Args:
            value (str): value for IDD Field `surface_98_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')

        self._data["Surface 98 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_98(self):
        """Get fraction_of_radiant_energy_to_surface_98

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_98` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 98"]

    @fraction_of_radiant_energy_to_surface_98.setter
    def fraction_of_radiant_energy_to_surface_98(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_98`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_98`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')

        self._data["Fraction of Radiant Energy to Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `surface_99_name`

        Args:
            value (str): value for IDD Field `surface_99_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')

        self._data["Surface 99 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_99(self):
        """Get fraction_of_radiant_energy_to_surface_99

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_99` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 99"]

    @fraction_of_radiant_energy_to_surface_99.setter
    def fraction_of_radiant_energy_to_surface_99(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_99`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_99`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')

        self._data["Fraction of Radiant Energy to Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `surface_100_name`

        Args:
            value (str): value for IDD Field `surface_100_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')

        self._data["Surface 100 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_100(self):
        """Get fraction_of_radiant_energy_to_surface_100

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_100` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 100"]

    @fraction_of_radiant_energy_to_surface_100.setter
    def fraction_of_radiant_energy_to_surface_100(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_100`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_100`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')

        self._data["Fraction of Radiant Energy to Surface 100"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.heating_design_capacity_method))
        out.append(self._to_str(self.heating_design_capacity))
        out.append(self._to_str(self.heating_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_heating_design_capacity))
        out.append(self._to_str(self.degree_of_subcooling))
        out.append(self._to_str(self.maximum_steam_flow_rate))
        out.append(self._to_str(self.convergence_tolerance))
        out.append(self._to_str(self.fraction_radiant))
        out.append(self._to_str(self.fraction_of_radiant_energy_incident_on_people))
        out.append(self._to_str(self.surface_1_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_1))
        out.append(self._to_str(self.surface_2_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_2))
        out.append(self._to_str(self.surface_3_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_3))
        out.append(self._to_str(self.surface_4_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_4))
        out.append(self._to_str(self.surface_5_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_5))
        out.append(self._to_str(self.surface_6_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_6))
        out.append(self._to_str(self.surface_7_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_7))
        out.append(self._to_str(self.surface_8_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_8))
        out.append(self._to_str(self.surface_9_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_9))
        out.append(self._to_str(self.surface_10_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_10))
        out.append(self._to_str(self.surface_11_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_11))
        out.append(self._to_str(self.surface_12_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_12))
        out.append(self._to_str(self.surface_13_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_13))
        out.append(self._to_str(self.surface_14_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_14))
        out.append(self._to_str(self.surface_15_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_15))
        out.append(self._to_str(self.surface_16_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_16))
        out.append(self._to_str(self.surface_17_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_17))
        out.append(self._to_str(self.surface_18_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_18))
        out.append(self._to_str(self.surface_19_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_19))
        out.append(self._to_str(self.surface_20_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_20))
        out.append(self._to_str(self.surface_21_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_21))
        out.append(self._to_str(self.surface_22_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_22))
        out.append(self._to_str(self.surface_23_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_23))
        out.append(self._to_str(self.surface_24_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_24))
        out.append(self._to_str(self.surface_25_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_25))
        out.append(self._to_str(self.surface_26_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_26))
        out.append(self._to_str(self.surface_27_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_27))
        out.append(self._to_str(self.surface_28_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_28))
        out.append(self._to_str(self.surface_29_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_29))
        out.append(self._to_str(self.surface_30_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_30))
        out.append(self._to_str(self.surface_31_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_31))
        out.append(self._to_str(self.surface_32_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_32))
        out.append(self._to_str(self.surface_33_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_33))
        out.append(self._to_str(self.surface_34_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_34))
        out.append(self._to_str(self.surface_35_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_35))
        out.append(self._to_str(self.surface_36_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_36))
        out.append(self._to_str(self.surface_37_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_37))
        out.append(self._to_str(self.surface_38_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_38))
        out.append(self._to_str(self.surface_39_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_39))
        out.append(self._to_str(self.surface_40_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_40))
        out.append(self._to_str(self.surface_41_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_41))
        out.append(self._to_str(self.surface_42_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_42))
        out.append(self._to_str(self.surface_43_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_43))
        out.append(self._to_str(self.surface_44_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_44))
        out.append(self._to_str(self.surface_45_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_45))
        out.append(self._to_str(self.surface_46_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_46))
        out.append(self._to_str(self.surface_47_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_47))
        out.append(self._to_str(self.surface_48_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_48))
        out.append(self._to_str(self.surface_49_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_49))
        out.append(self._to_str(self.surface_50_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_50))
        out.append(self._to_str(self.surface_51_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_51))
        out.append(self._to_str(self.surface_52_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_52))
        out.append(self._to_str(self.surface_53_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_53))
        out.append(self._to_str(self.surface_54_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_54))
        out.append(self._to_str(self.surface_55_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_55))
        out.append(self._to_str(self.surface_56_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_56))
        out.append(self._to_str(self.surface_57_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_57))
        out.append(self._to_str(self.surface_58_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_58))
        out.append(self._to_str(self.surface_59_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_59))
        out.append(self._to_str(self.surface_60_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_60))
        out.append(self._to_str(self.surface_61_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_61))
        out.append(self._to_str(self.surface_62_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_62))
        out.append(self._to_str(self.surface_63_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_63))
        out.append(self._to_str(self.surface_64_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_64))
        out.append(self._to_str(self.surface_65_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_65))
        out.append(self._to_str(self.surface_66_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_66))
        out.append(self._to_str(self.surface_67_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_67))
        out.append(self._to_str(self.surface_68_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_68))
        out.append(self._to_str(self.surface_69_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_69))
        out.append(self._to_str(self.surface_70_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_70))
        out.append(self._to_str(self.surface_71_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_71))
        out.append(self._to_str(self.surface_72_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_72))
        out.append(self._to_str(self.surface_73_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_73))
        out.append(self._to_str(self.surface_74_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_74))
        out.append(self._to_str(self.surface_75_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_75))
        out.append(self._to_str(self.surface_76_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_76))
        out.append(self._to_str(self.surface_77_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_77))
        out.append(self._to_str(self.surface_78_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_78))
        out.append(self._to_str(self.surface_79_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_79))
        out.append(self._to_str(self.surface_80_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_80))
        out.append(self._to_str(self.surface_81_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_81))
        out.append(self._to_str(self.surface_82_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_82))
        out.append(self._to_str(self.surface_83_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_83))
        out.append(self._to_str(self.surface_84_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_84))
        out.append(self._to_str(self.surface_85_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_85))
        out.append(self._to_str(self.surface_86_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_86))
        out.append(self._to_str(self.surface_87_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_87))
        out.append(self._to_str(self.surface_88_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_88))
        out.append(self._to_str(self.surface_89_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_89))
        out.append(self._to_str(self.surface_90_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_90))
        out.append(self._to_str(self.surface_91_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_91))
        out.append(self._to_str(self.surface_92_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_92))
        out.append(self._to_str(self.surface_93_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_93))
        out.append(self._to_str(self.surface_94_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_94))
        out.append(self._to_str(self.surface_95_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_95))
        out.append(self._to_str(self.surface_96_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_96))
        out.append(self._to_str(self.surface_97_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_97))
        out.append(self._to_str(self.surface_98_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_98))
        out.append(self._to_str(self.surface_99_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_99))
        out.append(self._to_str(self.surface_100_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_100))
        return ",".join(out)

class ZoneHvacBaseboardRadiantConvectiveElectric(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:RadiantConvective:Electric`
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
    field_count = 209

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:Baseboard:RadiantConvective:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Efficiency"] = None
        self._data["Fraction Radiant"] = None
        self._data["Fraction of Radiant Energy Incident on People"] = None
        self._data["Surface 1 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency = None
        else:
            self.efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_radiant = None
        else:
            self.fraction_radiant = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_incident_on_people = None
        else:
            self.fraction_of_radiant_energy_incident_on_people = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_1 = None
        else:
            self.fraction_of_radiant_energy_to_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_2 = None
        else:
            self.fraction_of_radiant_energy_to_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_3 = None
        else:
            self.fraction_of_radiant_energy_to_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_4 = None
        else:
            self.fraction_of_radiant_energy_to_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_5 = None
        else:
            self.fraction_of_radiant_energy_to_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_6 = None
        else:
            self.fraction_of_radiant_energy_to_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_7 = None
        else:
            self.fraction_of_radiant_energy_to_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_8 = None
        else:
            self.fraction_of_radiant_energy_to_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_9 = None
        else:
            self.fraction_of_radiant_energy_to_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_10 = None
        else:
            self.fraction_of_radiant_energy_to_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_11 = None
        else:
            self.fraction_of_radiant_energy_to_surface_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_12 = None
        else:
            self.fraction_of_radiant_energy_to_surface_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_13 = None
        else:
            self.fraction_of_radiant_energy_to_surface_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_14 = None
        else:
            self.fraction_of_radiant_energy_to_surface_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_15 = None
        else:
            self.fraction_of_radiant_energy_to_surface_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_16 = None
        else:
            self.fraction_of_radiant_energy_to_surface_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_17 = None
        else:
            self.fraction_of_radiant_energy_to_surface_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_18 = None
        else:
            self.fraction_of_radiant_energy_to_surface_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_19 = None
        else:
            self.fraction_of_radiant_energy_to_surface_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_20 = None
        else:
            self.fraction_of_radiant_energy_to_surface_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_21 = None
        else:
            self.fraction_of_radiant_energy_to_surface_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_22 = None
        else:
            self.fraction_of_radiant_energy_to_surface_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_23 = None
        else:
            self.fraction_of_radiant_energy_to_surface_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_24 = None
        else:
            self.fraction_of_radiant_energy_to_surface_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_25 = None
        else:
            self.fraction_of_radiant_energy_to_surface_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_26 = None
        else:
            self.fraction_of_radiant_energy_to_surface_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_27 = None
        else:
            self.fraction_of_radiant_energy_to_surface_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_28 = None
        else:
            self.fraction_of_radiant_energy_to_surface_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_29 = None
        else:
            self.fraction_of_radiant_energy_to_surface_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_30 = None
        else:
            self.fraction_of_radiant_energy_to_surface_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_31 = None
        else:
            self.fraction_of_radiant_energy_to_surface_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_32 = None
        else:
            self.fraction_of_radiant_energy_to_surface_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_33 = None
        else:
            self.fraction_of_radiant_energy_to_surface_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_34 = None
        else:
            self.fraction_of_radiant_energy_to_surface_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_35 = None
        else:
            self.fraction_of_radiant_energy_to_surface_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_36 = None
        else:
            self.fraction_of_radiant_energy_to_surface_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_37 = None
        else:
            self.fraction_of_radiant_energy_to_surface_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_38 = None
        else:
            self.fraction_of_radiant_energy_to_surface_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_39 = None
        else:
            self.fraction_of_radiant_energy_to_surface_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_40 = None
        else:
            self.fraction_of_radiant_energy_to_surface_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_41 = None
        else:
            self.fraction_of_radiant_energy_to_surface_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_42 = None
        else:
            self.fraction_of_radiant_energy_to_surface_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_43 = None
        else:
            self.fraction_of_radiant_energy_to_surface_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_44 = None
        else:
            self.fraction_of_radiant_energy_to_surface_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_45 = None
        else:
            self.fraction_of_radiant_energy_to_surface_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_46 = None
        else:
            self.fraction_of_radiant_energy_to_surface_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_47 = None
        else:
            self.fraction_of_radiant_energy_to_surface_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_48 = None
        else:
            self.fraction_of_radiant_energy_to_surface_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_49 = None
        else:
            self.fraction_of_radiant_energy_to_surface_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_50 = None
        else:
            self.fraction_of_radiant_energy_to_surface_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_51 = None
        else:
            self.fraction_of_radiant_energy_to_surface_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_52 = None
        else:
            self.fraction_of_radiant_energy_to_surface_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_53 = None
        else:
            self.fraction_of_radiant_energy_to_surface_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_54 = None
        else:
            self.fraction_of_radiant_energy_to_surface_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_55 = None
        else:
            self.fraction_of_radiant_energy_to_surface_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_56 = None
        else:
            self.fraction_of_radiant_energy_to_surface_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_57 = None
        else:
            self.fraction_of_radiant_energy_to_surface_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_58 = None
        else:
            self.fraction_of_radiant_energy_to_surface_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_59 = None
        else:
            self.fraction_of_radiant_energy_to_surface_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_60 = None
        else:
            self.fraction_of_radiant_energy_to_surface_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_61 = None
        else:
            self.fraction_of_radiant_energy_to_surface_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_62 = None
        else:
            self.fraction_of_radiant_energy_to_surface_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_63 = None
        else:
            self.fraction_of_radiant_energy_to_surface_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_64 = None
        else:
            self.fraction_of_radiant_energy_to_surface_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_65 = None
        else:
            self.fraction_of_radiant_energy_to_surface_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_66 = None
        else:
            self.fraction_of_radiant_energy_to_surface_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_67 = None
        else:
            self.fraction_of_radiant_energy_to_surface_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_68 = None
        else:
            self.fraction_of_radiant_energy_to_surface_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_69 = None
        else:
            self.fraction_of_radiant_energy_to_surface_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_70 = None
        else:
            self.fraction_of_radiant_energy_to_surface_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_71 = None
        else:
            self.fraction_of_radiant_energy_to_surface_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_72 = None
        else:
            self.fraction_of_radiant_energy_to_surface_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_73 = None
        else:
            self.fraction_of_radiant_energy_to_surface_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_74 = None
        else:
            self.fraction_of_radiant_energy_to_surface_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_75 = None
        else:
            self.fraction_of_radiant_energy_to_surface_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_76 = None
        else:
            self.fraction_of_radiant_energy_to_surface_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_77 = None
        else:
            self.fraction_of_radiant_energy_to_surface_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_78 = None
        else:
            self.fraction_of_radiant_energy_to_surface_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_79 = None
        else:
            self.fraction_of_radiant_energy_to_surface_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_80 = None
        else:
            self.fraction_of_radiant_energy_to_surface_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_81 = None
        else:
            self.fraction_of_radiant_energy_to_surface_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_82 = None
        else:
            self.fraction_of_radiant_energy_to_surface_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_83 = None
        else:
            self.fraction_of_radiant_energy_to_surface_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_84 = None
        else:
            self.fraction_of_radiant_energy_to_surface_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_85 = None
        else:
            self.fraction_of_radiant_energy_to_surface_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_86 = None
        else:
            self.fraction_of_radiant_energy_to_surface_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_87 = None
        else:
            self.fraction_of_radiant_energy_to_surface_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_88 = None
        else:
            self.fraction_of_radiant_energy_to_surface_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_89 = None
        else:
            self.fraction_of_radiant_energy_to_surface_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_90 = None
        else:
            self.fraction_of_radiant_energy_to_surface_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_91 = None
        else:
            self.fraction_of_radiant_energy_to_surface_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_92 = None
        else:
            self.fraction_of_radiant_energy_to_surface_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_93 = None
        else:
            self.fraction_of_radiant_energy_to_surface_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_94 = None
        else:
            self.fraction_of_radiant_energy_to_surface_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_95 = None
        else:
            self.fraction_of_radiant_energy_to_surface_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_96 = None
        else:
            self.fraction_of_radiant_energy_to_surface_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_97 = None
        else:
            self.fraction_of_radiant_energy_to_surface_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_98 = None
        else:
            self.fraction_of_radiant_energy_to_surface_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_99 = None
        else:
            self.fraction_of_radiant_energy_to_surface_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_100 = None
        else:
            self.fraction_of_radiant_energy_to_surface_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `heating_design_capacity_method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `heating_design_capacity_method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            vals = set()
            vals.add("HeatingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_design_capacity_method`'.format(value))

        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float): value for IDD Field `heating_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')

        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity_per_floor_area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `heating_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')

        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_autosized_heating_design_capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_heating_design_capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')

        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def efficiency(self):
        """Get efficiency

        Returns:
            float: the value of `efficiency` or None if not set
        """
        return self._data["Efficiency"]

    @efficiency.setter
    def efficiency(self, value=1.0 ):
        """  Corresponds to IDD Field `efficiency`

        Args:
            value (float): value for IDD Field `efficiency`
                Default value: 1.0
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency`')

        self._data["Efficiency"] = value

    @property
    def fraction_radiant(self):
        """Get fraction_radiant

        Returns:
            float: the value of `fraction_radiant` or None if not set
        """
        return self._data["Fraction Radiant"]

    @fraction_radiant.setter
    def fraction_radiant(self, value=None):
        """  Corresponds to IDD Field `fraction_radiant`

        Args:
            value (float): value for IDD Field `fraction_radiant`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_radiant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_radiant`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_radiant`')

        self._data["Fraction Radiant"] = value

    @property
    def fraction_of_radiant_energy_incident_on_people(self):
        """Get fraction_of_radiant_energy_incident_on_people

        Returns:
            float: the value of `fraction_of_radiant_energy_incident_on_people` or None if not set
        """
        return self._data["Fraction of Radiant Energy Incident on People"]

    @fraction_of_radiant_energy_incident_on_people.setter
    def fraction_of_radiant_energy_incident_on_people(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_incident_on_people`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_incident_on_people`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_incident_on_people`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')

        self._data["Fraction of Radiant Energy Incident on People"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `surface_1_name`
        Radiant energy may be distributed to specific surfaces

        Args:
            value (str): value for IDD Field `surface_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')

        self._data["Surface 1 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_1(self):
        """Get fraction_of_radiant_energy_to_surface_1

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_1` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 1"]

    @fraction_of_radiant_energy_to_surface_1.setter
    def fraction_of_radiant_energy_to_surface_1(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_1`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')

        self._data["Fraction of Radiant Energy to Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `surface_2_name`

        Args:
            value (str): value for IDD Field `surface_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')

        self._data["Surface 2 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_2(self):
        """Get fraction_of_radiant_energy_to_surface_2

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_2` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 2"]

    @fraction_of_radiant_energy_to_surface_2.setter
    def fraction_of_radiant_energy_to_surface_2(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_2`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')

        self._data["Fraction of Radiant Energy to Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `surface_3_name`

        Args:
            value (str): value for IDD Field `surface_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')

        self._data["Surface 3 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_3(self):
        """Get fraction_of_radiant_energy_to_surface_3

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_3` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 3"]

    @fraction_of_radiant_energy_to_surface_3.setter
    def fraction_of_radiant_energy_to_surface_3(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_3`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')

        self._data["Fraction of Radiant Energy to Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `surface_4_name`

        Args:
            value (str): value for IDD Field `surface_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')

        self._data["Surface 4 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_4(self):
        """Get fraction_of_radiant_energy_to_surface_4

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_4` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 4"]

    @fraction_of_radiant_energy_to_surface_4.setter
    def fraction_of_radiant_energy_to_surface_4(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_4`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')

        self._data["Fraction of Radiant Energy to Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `surface_5_name`

        Args:
            value (str): value for IDD Field `surface_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')

        self._data["Surface 5 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_5(self):
        """Get fraction_of_radiant_energy_to_surface_5

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_5` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 5"]

    @fraction_of_radiant_energy_to_surface_5.setter
    def fraction_of_radiant_energy_to_surface_5(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_5`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')

        self._data["Fraction of Radiant Energy to Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `surface_6_name`

        Args:
            value (str): value for IDD Field `surface_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')

        self._data["Surface 6 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_6(self):
        """Get fraction_of_radiant_energy_to_surface_6

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_6` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 6"]

    @fraction_of_radiant_energy_to_surface_6.setter
    def fraction_of_radiant_energy_to_surface_6(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_6`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_6`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')

        self._data["Fraction of Radiant Energy to Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `surface_7_name`

        Args:
            value (str): value for IDD Field `surface_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')

        self._data["Surface 7 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_7(self):
        """Get fraction_of_radiant_energy_to_surface_7

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_7` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 7"]

    @fraction_of_radiant_energy_to_surface_7.setter
    def fraction_of_radiant_energy_to_surface_7(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_7`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_7`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')

        self._data["Fraction of Radiant Energy to Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `surface_8_name`

        Args:
            value (str): value for IDD Field `surface_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')

        self._data["Surface 8 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_8(self):
        """Get fraction_of_radiant_energy_to_surface_8

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_8` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 8"]

    @fraction_of_radiant_energy_to_surface_8.setter
    def fraction_of_radiant_energy_to_surface_8(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_8`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_8`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')

        self._data["Fraction of Radiant Energy to Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `surface_9_name`

        Args:
            value (str): value for IDD Field `surface_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')

        self._data["Surface 9 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_9(self):
        """Get fraction_of_radiant_energy_to_surface_9

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_9` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 9"]

    @fraction_of_radiant_energy_to_surface_9.setter
    def fraction_of_radiant_energy_to_surface_9(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_9`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_9`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')

        self._data["Fraction of Radiant Energy to Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `surface_10_name`

        Args:
            value (str): value for IDD Field `surface_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')

        self._data["Surface 10 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_10(self):
        """Get fraction_of_radiant_energy_to_surface_10

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_10` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 10"]

    @fraction_of_radiant_energy_to_surface_10.setter
    def fraction_of_radiant_energy_to_surface_10(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_10`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_10`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')

        self._data["Fraction of Radiant Energy to Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `surface_11_name`

        Args:
            value (str): value for IDD Field `surface_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')

        self._data["Surface 11 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_11(self):
        """Get fraction_of_radiant_energy_to_surface_11

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_11` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 11"]

    @fraction_of_radiant_energy_to_surface_11.setter
    def fraction_of_radiant_energy_to_surface_11(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_11`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_11`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')

        self._data["Fraction of Radiant Energy to Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `surface_12_name`

        Args:
            value (str): value for IDD Field `surface_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')

        self._data["Surface 12 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_12(self):
        """Get fraction_of_radiant_energy_to_surface_12

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_12` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 12"]

    @fraction_of_radiant_energy_to_surface_12.setter
    def fraction_of_radiant_energy_to_surface_12(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_12`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_12`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')

        self._data["Fraction of Radiant Energy to Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `surface_13_name`

        Args:
            value (str): value for IDD Field `surface_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')

        self._data["Surface 13 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_13(self):
        """Get fraction_of_radiant_energy_to_surface_13

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_13` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 13"]

    @fraction_of_radiant_energy_to_surface_13.setter
    def fraction_of_radiant_energy_to_surface_13(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_13`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_13`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')

        self._data["Fraction of Radiant Energy to Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `surface_14_name`

        Args:
            value (str): value for IDD Field `surface_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')

        self._data["Surface 14 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_14(self):
        """Get fraction_of_radiant_energy_to_surface_14

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_14` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 14"]

    @fraction_of_radiant_energy_to_surface_14.setter
    def fraction_of_radiant_energy_to_surface_14(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_14`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_14`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')

        self._data["Fraction of Radiant Energy to Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `surface_15_name`

        Args:
            value (str): value for IDD Field `surface_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')

        self._data["Surface 15 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_15(self):
        """Get fraction_of_radiant_energy_to_surface_15

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_15` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 15"]

    @fraction_of_radiant_energy_to_surface_15.setter
    def fraction_of_radiant_energy_to_surface_15(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_15`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_15`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')

        self._data["Fraction of Radiant Energy to Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `surface_16_name`

        Args:
            value (str): value for IDD Field `surface_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')

        self._data["Surface 16 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_16(self):
        """Get fraction_of_radiant_energy_to_surface_16

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_16` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 16"]

    @fraction_of_radiant_energy_to_surface_16.setter
    def fraction_of_radiant_energy_to_surface_16(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_16`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_16`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')

        self._data["Fraction of Radiant Energy to Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `surface_17_name`

        Args:
            value (str): value for IDD Field `surface_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')

        self._data["Surface 17 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_17(self):
        """Get fraction_of_radiant_energy_to_surface_17

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_17` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 17"]

    @fraction_of_radiant_energy_to_surface_17.setter
    def fraction_of_radiant_energy_to_surface_17(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_17`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_17`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')

        self._data["Fraction of Radiant Energy to Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `surface_18_name`

        Args:
            value (str): value for IDD Field `surface_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')

        self._data["Surface 18 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_18(self):
        """Get fraction_of_radiant_energy_to_surface_18

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_18` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 18"]

    @fraction_of_radiant_energy_to_surface_18.setter
    def fraction_of_radiant_energy_to_surface_18(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_18`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_18`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')

        self._data["Fraction of Radiant Energy to Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `surface_19_name`

        Args:
            value (str): value for IDD Field `surface_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')

        self._data["Surface 19 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_19(self):
        """Get fraction_of_radiant_energy_to_surface_19

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_19` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 19"]

    @fraction_of_radiant_energy_to_surface_19.setter
    def fraction_of_radiant_energy_to_surface_19(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_19`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_19`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')

        self._data["Fraction of Radiant Energy to Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `surface_20_name`

        Args:
            value (str): value for IDD Field `surface_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')

        self._data["Surface 20 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_20(self):
        """Get fraction_of_radiant_energy_to_surface_20

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_20` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 20"]

    @fraction_of_radiant_energy_to_surface_20.setter
    def fraction_of_radiant_energy_to_surface_20(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_20`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_20`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')

        self._data["Fraction of Radiant Energy to Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `surface_21_name`

        Args:
            value (str): value for IDD Field `surface_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')

        self._data["Surface 21 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_21(self):
        """Get fraction_of_radiant_energy_to_surface_21

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_21` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 21"]

    @fraction_of_radiant_energy_to_surface_21.setter
    def fraction_of_radiant_energy_to_surface_21(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_21`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_21`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')

        self._data["Fraction of Radiant Energy to Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `surface_22_name`

        Args:
            value (str): value for IDD Field `surface_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')

        self._data["Surface 22 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_22(self):
        """Get fraction_of_radiant_energy_to_surface_22

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_22` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 22"]

    @fraction_of_radiant_energy_to_surface_22.setter
    def fraction_of_radiant_energy_to_surface_22(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_22`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_22`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')

        self._data["Fraction of Radiant Energy to Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `surface_23_name`

        Args:
            value (str): value for IDD Field `surface_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')

        self._data["Surface 23 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_23(self):
        """Get fraction_of_radiant_energy_to_surface_23

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_23` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 23"]

    @fraction_of_radiant_energy_to_surface_23.setter
    def fraction_of_radiant_energy_to_surface_23(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_23`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_23`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')

        self._data["Fraction of Radiant Energy to Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `surface_24_name`

        Args:
            value (str): value for IDD Field `surface_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')

        self._data["Surface 24 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_24(self):
        """Get fraction_of_radiant_energy_to_surface_24

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_24` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 24"]

    @fraction_of_radiant_energy_to_surface_24.setter
    def fraction_of_radiant_energy_to_surface_24(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_24`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_24`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')

        self._data["Fraction of Radiant Energy to Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `surface_25_name`

        Args:
            value (str): value for IDD Field `surface_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')

        self._data["Surface 25 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_25(self):
        """Get fraction_of_radiant_energy_to_surface_25

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_25` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 25"]

    @fraction_of_radiant_energy_to_surface_25.setter
    def fraction_of_radiant_energy_to_surface_25(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_25`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_25`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')

        self._data["Fraction of Radiant Energy to Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `surface_26_name`

        Args:
            value (str): value for IDD Field `surface_26_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')

        self._data["Surface 26 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_26(self):
        """Get fraction_of_radiant_energy_to_surface_26

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_26` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 26"]

    @fraction_of_radiant_energy_to_surface_26.setter
    def fraction_of_radiant_energy_to_surface_26(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_26`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_26`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')

        self._data["Fraction of Radiant Energy to Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `surface_27_name`

        Args:
            value (str): value for IDD Field `surface_27_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')

        self._data["Surface 27 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_27(self):
        """Get fraction_of_radiant_energy_to_surface_27

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_27` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 27"]

    @fraction_of_radiant_energy_to_surface_27.setter
    def fraction_of_radiant_energy_to_surface_27(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_27`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_27`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')

        self._data["Fraction of Radiant Energy to Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `surface_28_name`

        Args:
            value (str): value for IDD Field `surface_28_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')

        self._data["Surface 28 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_28(self):
        """Get fraction_of_radiant_energy_to_surface_28

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_28` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 28"]

    @fraction_of_radiant_energy_to_surface_28.setter
    def fraction_of_radiant_energy_to_surface_28(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_28`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_28`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')

        self._data["Fraction of Radiant Energy to Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `surface_29_name`

        Args:
            value (str): value for IDD Field `surface_29_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')

        self._data["Surface 29 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_29(self):
        """Get fraction_of_radiant_energy_to_surface_29

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_29` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 29"]

    @fraction_of_radiant_energy_to_surface_29.setter
    def fraction_of_radiant_energy_to_surface_29(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_29`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_29`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')

        self._data["Fraction of Radiant Energy to Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `surface_30_name`

        Args:
            value (str): value for IDD Field `surface_30_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')

        self._data["Surface 30 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_30(self):
        """Get fraction_of_radiant_energy_to_surface_30

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_30` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 30"]

    @fraction_of_radiant_energy_to_surface_30.setter
    def fraction_of_radiant_energy_to_surface_30(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_30`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_30`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')

        self._data["Fraction of Radiant Energy to Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `surface_31_name`

        Args:
            value (str): value for IDD Field `surface_31_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')

        self._data["Surface 31 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_31(self):
        """Get fraction_of_radiant_energy_to_surface_31

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_31` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 31"]

    @fraction_of_radiant_energy_to_surface_31.setter
    def fraction_of_radiant_energy_to_surface_31(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_31`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_31`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')

        self._data["Fraction of Radiant Energy to Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `surface_32_name`

        Args:
            value (str): value for IDD Field `surface_32_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')

        self._data["Surface 32 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_32(self):
        """Get fraction_of_radiant_energy_to_surface_32

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_32` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 32"]

    @fraction_of_radiant_energy_to_surface_32.setter
    def fraction_of_radiant_energy_to_surface_32(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_32`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_32`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')

        self._data["Fraction of Radiant Energy to Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `surface_33_name`

        Args:
            value (str): value for IDD Field `surface_33_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')

        self._data["Surface 33 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_33(self):
        """Get fraction_of_radiant_energy_to_surface_33

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_33` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 33"]

    @fraction_of_radiant_energy_to_surface_33.setter
    def fraction_of_radiant_energy_to_surface_33(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_33`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_33`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')

        self._data["Fraction of Radiant Energy to Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `surface_34_name`

        Args:
            value (str): value for IDD Field `surface_34_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')

        self._data["Surface 34 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_34(self):
        """Get fraction_of_radiant_energy_to_surface_34

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_34` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 34"]

    @fraction_of_radiant_energy_to_surface_34.setter
    def fraction_of_radiant_energy_to_surface_34(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_34`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_34`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')

        self._data["Fraction of Radiant Energy to Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `surface_35_name`

        Args:
            value (str): value for IDD Field `surface_35_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')

        self._data["Surface 35 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_35(self):
        """Get fraction_of_radiant_energy_to_surface_35

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_35` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 35"]

    @fraction_of_radiant_energy_to_surface_35.setter
    def fraction_of_radiant_energy_to_surface_35(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_35`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_35`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')

        self._data["Fraction of Radiant Energy to Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `surface_36_name`

        Args:
            value (str): value for IDD Field `surface_36_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')

        self._data["Surface 36 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_36(self):
        """Get fraction_of_radiant_energy_to_surface_36

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_36` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 36"]

    @fraction_of_radiant_energy_to_surface_36.setter
    def fraction_of_radiant_energy_to_surface_36(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_36`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_36`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')

        self._data["Fraction of Radiant Energy to Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `surface_37_name`

        Args:
            value (str): value for IDD Field `surface_37_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')

        self._data["Surface 37 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_37(self):
        """Get fraction_of_radiant_energy_to_surface_37

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_37` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 37"]

    @fraction_of_radiant_energy_to_surface_37.setter
    def fraction_of_radiant_energy_to_surface_37(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_37`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_37`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')

        self._data["Fraction of Radiant Energy to Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `surface_38_name`

        Args:
            value (str): value for IDD Field `surface_38_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')

        self._data["Surface 38 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_38(self):
        """Get fraction_of_radiant_energy_to_surface_38

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_38` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 38"]

    @fraction_of_radiant_energy_to_surface_38.setter
    def fraction_of_radiant_energy_to_surface_38(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_38`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_38`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')

        self._data["Fraction of Radiant Energy to Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `surface_39_name`

        Args:
            value (str): value for IDD Field `surface_39_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')

        self._data["Surface 39 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_39(self):
        """Get fraction_of_radiant_energy_to_surface_39

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_39` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 39"]

    @fraction_of_radiant_energy_to_surface_39.setter
    def fraction_of_radiant_energy_to_surface_39(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_39`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_39`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')

        self._data["Fraction of Radiant Energy to Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `surface_40_name`

        Args:
            value (str): value for IDD Field `surface_40_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')

        self._data["Surface 40 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_40(self):
        """Get fraction_of_radiant_energy_to_surface_40

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_40` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 40"]

    @fraction_of_radiant_energy_to_surface_40.setter
    def fraction_of_radiant_energy_to_surface_40(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_40`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_40`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')

        self._data["Fraction of Radiant Energy to Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `surface_41_name`

        Args:
            value (str): value for IDD Field `surface_41_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')

        self._data["Surface 41 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_41(self):
        """Get fraction_of_radiant_energy_to_surface_41

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_41` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 41"]

    @fraction_of_radiant_energy_to_surface_41.setter
    def fraction_of_radiant_energy_to_surface_41(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_41`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_41`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')

        self._data["Fraction of Radiant Energy to Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `surface_42_name`

        Args:
            value (str): value for IDD Field `surface_42_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')

        self._data["Surface 42 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_42(self):
        """Get fraction_of_radiant_energy_to_surface_42

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_42` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 42"]

    @fraction_of_radiant_energy_to_surface_42.setter
    def fraction_of_radiant_energy_to_surface_42(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_42`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_42`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')

        self._data["Fraction of Radiant Energy to Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `surface_43_name`

        Args:
            value (str): value for IDD Field `surface_43_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')

        self._data["Surface 43 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_43(self):
        """Get fraction_of_radiant_energy_to_surface_43

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_43` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 43"]

    @fraction_of_radiant_energy_to_surface_43.setter
    def fraction_of_radiant_energy_to_surface_43(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_43`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_43`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')

        self._data["Fraction of Radiant Energy to Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `surface_44_name`

        Args:
            value (str): value for IDD Field `surface_44_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')

        self._data["Surface 44 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_44(self):
        """Get fraction_of_radiant_energy_to_surface_44

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_44` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 44"]

    @fraction_of_radiant_energy_to_surface_44.setter
    def fraction_of_radiant_energy_to_surface_44(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_44`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_44`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')

        self._data["Fraction of Radiant Energy to Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `surface_45_name`

        Args:
            value (str): value for IDD Field `surface_45_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')

        self._data["Surface 45 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_45(self):
        """Get fraction_of_radiant_energy_to_surface_45

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_45` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 45"]

    @fraction_of_radiant_energy_to_surface_45.setter
    def fraction_of_radiant_energy_to_surface_45(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_45`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_45`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')

        self._data["Fraction of Radiant Energy to Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `surface_46_name`

        Args:
            value (str): value for IDD Field `surface_46_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')

        self._data["Surface 46 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_46(self):
        """Get fraction_of_radiant_energy_to_surface_46

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_46` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 46"]

    @fraction_of_radiant_energy_to_surface_46.setter
    def fraction_of_radiant_energy_to_surface_46(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_46`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_46`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')

        self._data["Fraction of Radiant Energy to Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `surface_47_name`

        Args:
            value (str): value for IDD Field `surface_47_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')

        self._data["Surface 47 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_47(self):
        """Get fraction_of_radiant_energy_to_surface_47

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_47` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 47"]

    @fraction_of_radiant_energy_to_surface_47.setter
    def fraction_of_radiant_energy_to_surface_47(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_47`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_47`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')

        self._data["Fraction of Radiant Energy to Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `surface_48_name`

        Args:
            value (str): value for IDD Field `surface_48_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')

        self._data["Surface 48 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_48(self):
        """Get fraction_of_radiant_energy_to_surface_48

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_48` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 48"]

    @fraction_of_radiant_energy_to_surface_48.setter
    def fraction_of_radiant_energy_to_surface_48(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_48`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_48`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')

        self._data["Fraction of Radiant Energy to Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `surface_49_name`

        Args:
            value (str): value for IDD Field `surface_49_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')

        self._data["Surface 49 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_49(self):
        """Get fraction_of_radiant_energy_to_surface_49

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_49` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 49"]

    @fraction_of_radiant_energy_to_surface_49.setter
    def fraction_of_radiant_energy_to_surface_49(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_49`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_49`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')

        self._data["Fraction of Radiant Energy to Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `surface_50_name`

        Args:
            value (str): value for IDD Field `surface_50_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')

        self._data["Surface 50 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_50(self):
        """Get fraction_of_radiant_energy_to_surface_50

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_50` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 50"]

    @fraction_of_radiant_energy_to_surface_50.setter
    def fraction_of_radiant_energy_to_surface_50(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_50`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_50`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')

        self._data["Fraction of Radiant Energy to Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `surface_51_name`

        Args:
            value (str): value for IDD Field `surface_51_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')

        self._data["Surface 51 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_51(self):
        """Get fraction_of_radiant_energy_to_surface_51

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_51` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 51"]

    @fraction_of_radiant_energy_to_surface_51.setter
    def fraction_of_radiant_energy_to_surface_51(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_51`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_51`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')

        self._data["Fraction of Radiant Energy to Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `surface_52_name`

        Args:
            value (str): value for IDD Field `surface_52_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')

        self._data["Surface 52 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_52(self):
        """Get fraction_of_radiant_energy_to_surface_52

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_52` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 52"]

    @fraction_of_radiant_energy_to_surface_52.setter
    def fraction_of_radiant_energy_to_surface_52(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_52`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_52`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')

        self._data["Fraction of Radiant Energy to Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `surface_53_name`

        Args:
            value (str): value for IDD Field `surface_53_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')

        self._data["Surface 53 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_53(self):
        """Get fraction_of_radiant_energy_to_surface_53

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_53` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 53"]

    @fraction_of_radiant_energy_to_surface_53.setter
    def fraction_of_radiant_energy_to_surface_53(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_53`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_53`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')

        self._data["Fraction of Radiant Energy to Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `surface_54_name`

        Args:
            value (str): value for IDD Field `surface_54_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')

        self._data["Surface 54 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_54(self):
        """Get fraction_of_radiant_energy_to_surface_54

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_54` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 54"]

    @fraction_of_radiant_energy_to_surface_54.setter
    def fraction_of_radiant_energy_to_surface_54(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_54`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_54`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')

        self._data["Fraction of Radiant Energy to Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `surface_55_name`

        Args:
            value (str): value for IDD Field `surface_55_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')

        self._data["Surface 55 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_55(self):
        """Get fraction_of_radiant_energy_to_surface_55

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_55` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 55"]

    @fraction_of_radiant_energy_to_surface_55.setter
    def fraction_of_radiant_energy_to_surface_55(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_55`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_55`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')

        self._data["Fraction of Radiant Energy to Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `surface_56_name`

        Args:
            value (str): value for IDD Field `surface_56_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')

        self._data["Surface 56 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_56(self):
        """Get fraction_of_radiant_energy_to_surface_56

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_56` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 56"]

    @fraction_of_radiant_energy_to_surface_56.setter
    def fraction_of_radiant_energy_to_surface_56(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_56`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_56`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')

        self._data["Fraction of Radiant Energy to Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `surface_57_name`

        Args:
            value (str): value for IDD Field `surface_57_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')

        self._data["Surface 57 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_57(self):
        """Get fraction_of_radiant_energy_to_surface_57

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_57` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 57"]

    @fraction_of_radiant_energy_to_surface_57.setter
    def fraction_of_radiant_energy_to_surface_57(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_57`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_57`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')

        self._data["Fraction of Radiant Energy to Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `surface_58_name`

        Args:
            value (str): value for IDD Field `surface_58_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')

        self._data["Surface 58 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_58(self):
        """Get fraction_of_radiant_energy_to_surface_58

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_58` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 58"]

    @fraction_of_radiant_energy_to_surface_58.setter
    def fraction_of_radiant_energy_to_surface_58(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_58`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_58`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')

        self._data["Fraction of Radiant Energy to Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `surface_59_name`

        Args:
            value (str): value for IDD Field `surface_59_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')

        self._data["Surface 59 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_59(self):
        """Get fraction_of_radiant_energy_to_surface_59

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_59` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 59"]

    @fraction_of_radiant_energy_to_surface_59.setter
    def fraction_of_radiant_energy_to_surface_59(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_59`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_59`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')

        self._data["Fraction of Radiant Energy to Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `surface_60_name`

        Args:
            value (str): value for IDD Field `surface_60_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')

        self._data["Surface 60 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_60(self):
        """Get fraction_of_radiant_energy_to_surface_60

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_60` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 60"]

    @fraction_of_radiant_energy_to_surface_60.setter
    def fraction_of_radiant_energy_to_surface_60(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_60`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_60`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')

        self._data["Fraction of Radiant Energy to Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `surface_61_name`

        Args:
            value (str): value for IDD Field `surface_61_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')

        self._data["Surface 61 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_61(self):
        """Get fraction_of_radiant_energy_to_surface_61

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_61` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 61"]

    @fraction_of_radiant_energy_to_surface_61.setter
    def fraction_of_radiant_energy_to_surface_61(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_61`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_61`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')

        self._data["Fraction of Radiant Energy to Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `surface_62_name`

        Args:
            value (str): value for IDD Field `surface_62_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')

        self._data["Surface 62 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_62(self):
        """Get fraction_of_radiant_energy_to_surface_62

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_62` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 62"]

    @fraction_of_radiant_energy_to_surface_62.setter
    def fraction_of_radiant_energy_to_surface_62(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_62`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_62`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')

        self._data["Fraction of Radiant Energy to Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `surface_63_name`

        Args:
            value (str): value for IDD Field `surface_63_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')

        self._data["Surface 63 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_63(self):
        """Get fraction_of_radiant_energy_to_surface_63

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_63` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 63"]

    @fraction_of_radiant_energy_to_surface_63.setter
    def fraction_of_radiant_energy_to_surface_63(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_63`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_63`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')

        self._data["Fraction of Radiant Energy to Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `surface_64_name`

        Args:
            value (str): value for IDD Field `surface_64_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')

        self._data["Surface 64 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_64(self):
        """Get fraction_of_radiant_energy_to_surface_64

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_64` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 64"]

    @fraction_of_radiant_energy_to_surface_64.setter
    def fraction_of_radiant_energy_to_surface_64(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_64`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_64`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')

        self._data["Fraction of Radiant Energy to Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `surface_65_name`

        Args:
            value (str): value for IDD Field `surface_65_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')

        self._data["Surface 65 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_65(self):
        """Get fraction_of_radiant_energy_to_surface_65

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_65` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 65"]

    @fraction_of_radiant_energy_to_surface_65.setter
    def fraction_of_radiant_energy_to_surface_65(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_65`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_65`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')

        self._data["Fraction of Radiant Energy to Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `surface_66_name`

        Args:
            value (str): value for IDD Field `surface_66_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')

        self._data["Surface 66 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_66(self):
        """Get fraction_of_radiant_energy_to_surface_66

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_66` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 66"]

    @fraction_of_radiant_energy_to_surface_66.setter
    def fraction_of_radiant_energy_to_surface_66(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_66`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_66`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')

        self._data["Fraction of Radiant Energy to Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `surface_67_name`

        Args:
            value (str): value for IDD Field `surface_67_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')

        self._data["Surface 67 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_67(self):
        """Get fraction_of_radiant_energy_to_surface_67

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_67` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 67"]

    @fraction_of_radiant_energy_to_surface_67.setter
    def fraction_of_radiant_energy_to_surface_67(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_67`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_67`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')

        self._data["Fraction of Radiant Energy to Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `surface_68_name`

        Args:
            value (str): value for IDD Field `surface_68_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')

        self._data["Surface 68 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_68(self):
        """Get fraction_of_radiant_energy_to_surface_68

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_68` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 68"]

    @fraction_of_radiant_energy_to_surface_68.setter
    def fraction_of_radiant_energy_to_surface_68(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_68`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_68`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')

        self._data["Fraction of Radiant Energy to Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `surface_69_name`

        Args:
            value (str): value for IDD Field `surface_69_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')

        self._data["Surface 69 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_69(self):
        """Get fraction_of_radiant_energy_to_surface_69

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_69` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 69"]

    @fraction_of_radiant_energy_to_surface_69.setter
    def fraction_of_radiant_energy_to_surface_69(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_69`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_69`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')

        self._data["Fraction of Radiant Energy to Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `surface_70_name`

        Args:
            value (str): value for IDD Field `surface_70_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')

        self._data["Surface 70 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_70(self):
        """Get fraction_of_radiant_energy_to_surface_70

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_70` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 70"]

    @fraction_of_radiant_energy_to_surface_70.setter
    def fraction_of_radiant_energy_to_surface_70(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_70`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_70`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')

        self._data["Fraction of Radiant Energy to Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `surface_71_name`

        Args:
            value (str): value for IDD Field `surface_71_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')

        self._data["Surface 71 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_71(self):
        """Get fraction_of_radiant_energy_to_surface_71

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_71` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 71"]

    @fraction_of_radiant_energy_to_surface_71.setter
    def fraction_of_radiant_energy_to_surface_71(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_71`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_71`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')

        self._data["Fraction of Radiant Energy to Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `surface_72_name`

        Args:
            value (str): value for IDD Field `surface_72_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')

        self._data["Surface 72 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_72(self):
        """Get fraction_of_radiant_energy_to_surface_72

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_72` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 72"]

    @fraction_of_radiant_energy_to_surface_72.setter
    def fraction_of_radiant_energy_to_surface_72(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_72`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_72`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')

        self._data["Fraction of Radiant Energy to Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `surface_73_name`

        Args:
            value (str): value for IDD Field `surface_73_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')

        self._data["Surface 73 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_73(self):
        """Get fraction_of_radiant_energy_to_surface_73

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_73` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 73"]

    @fraction_of_radiant_energy_to_surface_73.setter
    def fraction_of_radiant_energy_to_surface_73(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_73`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_73`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')

        self._data["Fraction of Radiant Energy to Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `surface_74_name`

        Args:
            value (str): value for IDD Field `surface_74_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')

        self._data["Surface 74 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_74(self):
        """Get fraction_of_radiant_energy_to_surface_74

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_74` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 74"]

    @fraction_of_radiant_energy_to_surface_74.setter
    def fraction_of_radiant_energy_to_surface_74(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_74`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_74`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')

        self._data["Fraction of Radiant Energy to Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `surface_75_name`

        Args:
            value (str): value for IDD Field `surface_75_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')

        self._data["Surface 75 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_75(self):
        """Get fraction_of_radiant_energy_to_surface_75

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_75` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 75"]

    @fraction_of_radiant_energy_to_surface_75.setter
    def fraction_of_radiant_energy_to_surface_75(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_75`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_75`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')

        self._data["Fraction of Radiant Energy to Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `surface_76_name`

        Args:
            value (str): value for IDD Field `surface_76_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')

        self._data["Surface 76 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_76(self):
        """Get fraction_of_radiant_energy_to_surface_76

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_76` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 76"]

    @fraction_of_radiant_energy_to_surface_76.setter
    def fraction_of_radiant_energy_to_surface_76(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_76`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_76`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')

        self._data["Fraction of Radiant Energy to Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `surface_77_name`

        Args:
            value (str): value for IDD Field `surface_77_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')

        self._data["Surface 77 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_77(self):
        """Get fraction_of_radiant_energy_to_surface_77

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_77` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 77"]

    @fraction_of_radiant_energy_to_surface_77.setter
    def fraction_of_radiant_energy_to_surface_77(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_77`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_77`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')

        self._data["Fraction of Radiant Energy to Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `surface_78_name`

        Args:
            value (str): value for IDD Field `surface_78_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')

        self._data["Surface 78 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_78(self):
        """Get fraction_of_radiant_energy_to_surface_78

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_78` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 78"]

    @fraction_of_radiant_energy_to_surface_78.setter
    def fraction_of_radiant_energy_to_surface_78(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_78`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_78`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')

        self._data["Fraction of Radiant Energy to Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `surface_79_name`

        Args:
            value (str): value for IDD Field `surface_79_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')

        self._data["Surface 79 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_79(self):
        """Get fraction_of_radiant_energy_to_surface_79

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_79` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 79"]

    @fraction_of_radiant_energy_to_surface_79.setter
    def fraction_of_radiant_energy_to_surface_79(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_79`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_79`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')

        self._data["Fraction of Radiant Energy to Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `surface_80_name`

        Args:
            value (str): value for IDD Field `surface_80_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')

        self._data["Surface 80 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_80(self):
        """Get fraction_of_radiant_energy_to_surface_80

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_80` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 80"]

    @fraction_of_radiant_energy_to_surface_80.setter
    def fraction_of_radiant_energy_to_surface_80(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_80`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_80`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')

        self._data["Fraction of Radiant Energy to Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `surface_81_name`

        Args:
            value (str): value for IDD Field `surface_81_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')

        self._data["Surface 81 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_81(self):
        """Get fraction_of_radiant_energy_to_surface_81

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_81` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 81"]

    @fraction_of_radiant_energy_to_surface_81.setter
    def fraction_of_radiant_energy_to_surface_81(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_81`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_81`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')

        self._data["Fraction of Radiant Energy to Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `surface_82_name`

        Args:
            value (str): value for IDD Field `surface_82_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')

        self._data["Surface 82 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_82(self):
        """Get fraction_of_radiant_energy_to_surface_82

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_82` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 82"]

    @fraction_of_radiant_energy_to_surface_82.setter
    def fraction_of_radiant_energy_to_surface_82(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_82`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_82`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')

        self._data["Fraction of Radiant Energy to Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `surface_83_name`

        Args:
            value (str): value for IDD Field `surface_83_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')

        self._data["Surface 83 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_83(self):
        """Get fraction_of_radiant_energy_to_surface_83

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_83` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 83"]

    @fraction_of_radiant_energy_to_surface_83.setter
    def fraction_of_radiant_energy_to_surface_83(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_83`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_83`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')

        self._data["Fraction of Radiant Energy to Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `surface_84_name`

        Args:
            value (str): value for IDD Field `surface_84_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')

        self._data["Surface 84 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_84(self):
        """Get fraction_of_radiant_energy_to_surface_84

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_84` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 84"]

    @fraction_of_radiant_energy_to_surface_84.setter
    def fraction_of_radiant_energy_to_surface_84(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_84`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_84`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')

        self._data["Fraction of Radiant Energy to Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `surface_85_name`

        Args:
            value (str): value for IDD Field `surface_85_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')

        self._data["Surface 85 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_85(self):
        """Get fraction_of_radiant_energy_to_surface_85

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_85` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 85"]

    @fraction_of_radiant_energy_to_surface_85.setter
    def fraction_of_radiant_energy_to_surface_85(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_85`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_85`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')

        self._data["Fraction of Radiant Energy to Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `surface_86_name`

        Args:
            value (str): value for IDD Field `surface_86_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')

        self._data["Surface 86 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_86(self):
        """Get fraction_of_radiant_energy_to_surface_86

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_86` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 86"]

    @fraction_of_radiant_energy_to_surface_86.setter
    def fraction_of_radiant_energy_to_surface_86(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_86`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_86`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')

        self._data["Fraction of Radiant Energy to Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `surface_87_name`

        Args:
            value (str): value for IDD Field `surface_87_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')

        self._data["Surface 87 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_87(self):
        """Get fraction_of_radiant_energy_to_surface_87

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_87` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 87"]

    @fraction_of_radiant_energy_to_surface_87.setter
    def fraction_of_radiant_energy_to_surface_87(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_87`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_87`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')

        self._data["Fraction of Radiant Energy to Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `surface_88_name`

        Args:
            value (str): value for IDD Field `surface_88_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')

        self._data["Surface 88 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_88(self):
        """Get fraction_of_radiant_energy_to_surface_88

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_88` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 88"]

    @fraction_of_radiant_energy_to_surface_88.setter
    def fraction_of_radiant_energy_to_surface_88(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_88`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_88`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')

        self._data["Fraction of Radiant Energy to Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `surface_89_name`

        Args:
            value (str): value for IDD Field `surface_89_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')

        self._data["Surface 89 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_89(self):
        """Get fraction_of_radiant_energy_to_surface_89

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_89` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 89"]

    @fraction_of_radiant_energy_to_surface_89.setter
    def fraction_of_radiant_energy_to_surface_89(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_89`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_89`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')

        self._data["Fraction of Radiant Energy to Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `surface_90_name`

        Args:
            value (str): value for IDD Field `surface_90_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')

        self._data["Surface 90 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_90(self):
        """Get fraction_of_radiant_energy_to_surface_90

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_90` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 90"]

    @fraction_of_radiant_energy_to_surface_90.setter
    def fraction_of_radiant_energy_to_surface_90(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_90`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_90`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')

        self._data["Fraction of Radiant Energy to Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `surface_91_name`

        Args:
            value (str): value for IDD Field `surface_91_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')

        self._data["Surface 91 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_91(self):
        """Get fraction_of_radiant_energy_to_surface_91

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_91` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 91"]

    @fraction_of_radiant_energy_to_surface_91.setter
    def fraction_of_radiant_energy_to_surface_91(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_91`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_91`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')

        self._data["Fraction of Radiant Energy to Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `surface_92_name`

        Args:
            value (str): value for IDD Field `surface_92_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')

        self._data["Surface 92 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_92(self):
        """Get fraction_of_radiant_energy_to_surface_92

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_92` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 92"]

    @fraction_of_radiant_energy_to_surface_92.setter
    def fraction_of_radiant_energy_to_surface_92(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_92`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_92`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')

        self._data["Fraction of Radiant Energy to Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `surface_93_name`

        Args:
            value (str): value for IDD Field `surface_93_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')

        self._data["Surface 93 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_93(self):
        """Get fraction_of_radiant_energy_to_surface_93

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_93` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 93"]

    @fraction_of_radiant_energy_to_surface_93.setter
    def fraction_of_radiant_energy_to_surface_93(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_93`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_93`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')

        self._data["Fraction of Radiant Energy to Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `surface_94_name`

        Args:
            value (str): value for IDD Field `surface_94_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')

        self._data["Surface 94 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_94(self):
        """Get fraction_of_radiant_energy_to_surface_94

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_94` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 94"]

    @fraction_of_radiant_energy_to_surface_94.setter
    def fraction_of_radiant_energy_to_surface_94(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_94`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_94`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')

        self._data["Fraction of Radiant Energy to Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `surface_95_name`

        Args:
            value (str): value for IDD Field `surface_95_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')

        self._data["Surface 95 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_95(self):
        """Get fraction_of_radiant_energy_to_surface_95

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_95` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 95"]

    @fraction_of_radiant_energy_to_surface_95.setter
    def fraction_of_radiant_energy_to_surface_95(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_95`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_95`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')

        self._data["Fraction of Radiant Energy to Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `surface_96_name`

        Args:
            value (str): value for IDD Field `surface_96_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')

        self._data["Surface 96 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_96(self):
        """Get fraction_of_radiant_energy_to_surface_96

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_96` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 96"]

    @fraction_of_radiant_energy_to_surface_96.setter
    def fraction_of_radiant_energy_to_surface_96(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_96`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_96`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')

        self._data["Fraction of Radiant Energy to Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `surface_97_name`

        Args:
            value (str): value for IDD Field `surface_97_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')

        self._data["Surface 97 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_97(self):
        """Get fraction_of_radiant_energy_to_surface_97

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_97` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 97"]

    @fraction_of_radiant_energy_to_surface_97.setter
    def fraction_of_radiant_energy_to_surface_97(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_97`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_97`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')

        self._data["Fraction of Radiant Energy to Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `surface_98_name`

        Args:
            value (str): value for IDD Field `surface_98_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')

        self._data["Surface 98 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_98(self):
        """Get fraction_of_radiant_energy_to_surface_98

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_98` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 98"]

    @fraction_of_radiant_energy_to_surface_98.setter
    def fraction_of_radiant_energy_to_surface_98(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_98`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_98`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')

        self._data["Fraction of Radiant Energy to Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `surface_99_name`

        Args:
            value (str): value for IDD Field `surface_99_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')

        self._data["Surface 99 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_99(self):
        """Get fraction_of_radiant_energy_to_surface_99

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_99` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 99"]

    @fraction_of_radiant_energy_to_surface_99.setter
    def fraction_of_radiant_energy_to_surface_99(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_99`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_99`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')

        self._data["Fraction of Radiant Energy to Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `surface_100_name`

        Args:
            value (str): value for IDD Field `surface_100_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')

        self._data["Surface 100 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_100(self):
        """Get fraction_of_radiant_energy_to_surface_100

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_100` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 100"]

    @fraction_of_radiant_energy_to_surface_100.setter
    def fraction_of_radiant_energy_to_surface_100(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_100`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_100`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')

        self._data["Fraction of Radiant Energy to Surface 100"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.heating_design_capacity_method))
        out.append(self._to_str(self.heating_design_capacity))
        out.append(self._to_str(self.heating_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_heating_design_capacity))
        out.append(self._to_str(self.efficiency))
        out.append(self._to_str(self.fraction_radiant))
        out.append(self._to_str(self.fraction_of_radiant_energy_incident_on_people))
        out.append(self._to_str(self.surface_1_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_1))
        out.append(self._to_str(self.surface_2_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_2))
        out.append(self._to_str(self.surface_3_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_3))
        out.append(self._to_str(self.surface_4_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_4))
        out.append(self._to_str(self.surface_5_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_5))
        out.append(self._to_str(self.surface_6_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_6))
        out.append(self._to_str(self.surface_7_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_7))
        out.append(self._to_str(self.surface_8_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_8))
        out.append(self._to_str(self.surface_9_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_9))
        out.append(self._to_str(self.surface_10_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_10))
        out.append(self._to_str(self.surface_11_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_11))
        out.append(self._to_str(self.surface_12_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_12))
        out.append(self._to_str(self.surface_13_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_13))
        out.append(self._to_str(self.surface_14_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_14))
        out.append(self._to_str(self.surface_15_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_15))
        out.append(self._to_str(self.surface_16_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_16))
        out.append(self._to_str(self.surface_17_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_17))
        out.append(self._to_str(self.surface_18_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_18))
        out.append(self._to_str(self.surface_19_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_19))
        out.append(self._to_str(self.surface_20_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_20))
        out.append(self._to_str(self.surface_21_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_21))
        out.append(self._to_str(self.surface_22_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_22))
        out.append(self._to_str(self.surface_23_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_23))
        out.append(self._to_str(self.surface_24_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_24))
        out.append(self._to_str(self.surface_25_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_25))
        out.append(self._to_str(self.surface_26_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_26))
        out.append(self._to_str(self.surface_27_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_27))
        out.append(self._to_str(self.surface_28_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_28))
        out.append(self._to_str(self.surface_29_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_29))
        out.append(self._to_str(self.surface_30_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_30))
        out.append(self._to_str(self.surface_31_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_31))
        out.append(self._to_str(self.surface_32_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_32))
        out.append(self._to_str(self.surface_33_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_33))
        out.append(self._to_str(self.surface_34_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_34))
        out.append(self._to_str(self.surface_35_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_35))
        out.append(self._to_str(self.surface_36_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_36))
        out.append(self._to_str(self.surface_37_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_37))
        out.append(self._to_str(self.surface_38_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_38))
        out.append(self._to_str(self.surface_39_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_39))
        out.append(self._to_str(self.surface_40_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_40))
        out.append(self._to_str(self.surface_41_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_41))
        out.append(self._to_str(self.surface_42_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_42))
        out.append(self._to_str(self.surface_43_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_43))
        out.append(self._to_str(self.surface_44_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_44))
        out.append(self._to_str(self.surface_45_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_45))
        out.append(self._to_str(self.surface_46_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_46))
        out.append(self._to_str(self.surface_47_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_47))
        out.append(self._to_str(self.surface_48_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_48))
        out.append(self._to_str(self.surface_49_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_49))
        out.append(self._to_str(self.surface_50_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_50))
        out.append(self._to_str(self.surface_51_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_51))
        out.append(self._to_str(self.surface_52_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_52))
        out.append(self._to_str(self.surface_53_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_53))
        out.append(self._to_str(self.surface_54_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_54))
        out.append(self._to_str(self.surface_55_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_55))
        out.append(self._to_str(self.surface_56_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_56))
        out.append(self._to_str(self.surface_57_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_57))
        out.append(self._to_str(self.surface_58_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_58))
        out.append(self._to_str(self.surface_59_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_59))
        out.append(self._to_str(self.surface_60_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_60))
        out.append(self._to_str(self.surface_61_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_61))
        out.append(self._to_str(self.surface_62_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_62))
        out.append(self._to_str(self.surface_63_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_63))
        out.append(self._to_str(self.surface_64_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_64))
        out.append(self._to_str(self.surface_65_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_65))
        out.append(self._to_str(self.surface_66_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_66))
        out.append(self._to_str(self.surface_67_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_67))
        out.append(self._to_str(self.surface_68_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_68))
        out.append(self._to_str(self.surface_69_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_69))
        out.append(self._to_str(self.surface_70_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_70))
        out.append(self._to_str(self.surface_71_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_71))
        out.append(self._to_str(self.surface_72_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_72))
        out.append(self._to_str(self.surface_73_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_73))
        out.append(self._to_str(self.surface_74_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_74))
        out.append(self._to_str(self.surface_75_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_75))
        out.append(self._to_str(self.surface_76_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_76))
        out.append(self._to_str(self.surface_77_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_77))
        out.append(self._to_str(self.surface_78_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_78))
        out.append(self._to_str(self.surface_79_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_79))
        out.append(self._to_str(self.surface_80_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_80))
        out.append(self._to_str(self.surface_81_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_81))
        out.append(self._to_str(self.surface_82_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_82))
        out.append(self._to_str(self.surface_83_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_83))
        out.append(self._to_str(self.surface_84_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_84))
        out.append(self._to_str(self.surface_85_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_85))
        out.append(self._to_str(self.surface_86_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_86))
        out.append(self._to_str(self.surface_87_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_87))
        out.append(self._to_str(self.surface_88_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_88))
        out.append(self._to_str(self.surface_89_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_89))
        out.append(self._to_str(self.surface_90_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_90))
        out.append(self._to_str(self.surface_91_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_91))
        out.append(self._to_str(self.surface_92_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_92))
        out.append(self._to_str(self.surface_93_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_93))
        out.append(self._to_str(self.surface_94_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_94))
        out.append(self._to_str(self.surface_95_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_95))
        out.append(self._to_str(self.surface_96_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_96))
        out.append(self._to_str(self.surface_97_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_97))
        out.append(self._to_str(self.surface_98_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_98))
        out.append(self._to_str(self.surface_99_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_99))
        out.append(self._to_str(self.surface_100_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_100))
        return ",".join(out)

class ZoneHvacBaseboardConvectiveWater(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:Convective:Water`
        Hot water baseboard heater, convection-only. Natural convection hydronic heating unit.
    """
    internal_name = "ZoneHVAC:Baseboard:Convective:Water"
    field_count = 11

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:Baseboard:Convective:Water`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["U-Factor Times Area Value"] = None
        self._data["Maximum Water Flow Rate"] = None
        self._data["Convergence Tolerance"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ufactor_times_area_value = None
        else:
            self.ufactor_times_area_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_water_flow_rate = None
        else:
            self.maximum_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.convergence_tolerance = None
        else:
            self.convergence_tolerance = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `heating_design_capacity_method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `heating_design_capacity_method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            vals = set()
            vals.add("HeatingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_design_capacity_method`'.format(value))

        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float): value for IDD Field `heating_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')

        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity_per_floor_area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `heating_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')

        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_autosized_heating_design_capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_heating_design_capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')

        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def ufactor_times_area_value(self):
        """Get ufactor_times_area_value

        Returns:
            float: the value of `ufactor_times_area_value` or None if not set
        """
        return self._data["U-Factor Times Area Value"]

    @ufactor_times_area_value.setter
    def ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `ufactor_times_area_value`

        Args:
            value (float): value for IDD Field `ufactor_times_area_value`
                Unit: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ufactor_times_area_value`'.format(value))

        self._data["U-Factor Times Area Value"] = value

    @property
    def maximum_water_flow_rate(self):
        """Get maximum_water_flow_rate

        Returns:
            float: the value of `maximum_water_flow_rate` or None if not set
        """
        return self._data["Maximum Water Flow Rate"]

    @maximum_water_flow_rate.setter
    def maximum_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_water_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_water_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_water_flow_rate`'.format(value))

        self._data["Maximum Water Flow Rate"] = value

    @property
    def convergence_tolerance(self):
        """Get convergence_tolerance

        Returns:
            float: the value of `convergence_tolerance` or None if not set
        """
        return self._data["Convergence Tolerance"]

    @convergence_tolerance.setter
    def convergence_tolerance(self, value=0.001 ):
        """  Corresponds to IDD Field `convergence_tolerance`

        Args:
            value (float): value for IDD Field `convergence_tolerance`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `convergence_tolerance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `convergence_tolerance`')

        self._data["Convergence Tolerance"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.heating_design_capacity_method))
        out.append(self._to_str(self.heating_design_capacity))
        out.append(self._to_str(self.heating_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_heating_design_capacity))
        out.append(self._to_str(self.ufactor_times_area_value))
        out.append(self._to_str(self.maximum_water_flow_rate))
        out.append(self._to_str(self.convergence_tolerance))
        return ",".join(out)

class ZoneHvacBaseboardConvectiveElectric(object):
    """ Corresponds to IDD object `ZoneHVAC:Baseboard:Convective:Electric`
        Electric baseboard heater, convection-only. Natural convection electric heating unit.
    """
    internal_name = "ZoneHVAC:Baseboard:Convective:Electric"
    field_count = 7

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:Baseboard:Convective:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Efficiency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.efficiency = None
        else:
            self.efficiency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `heating_design_capacity_method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `heating_design_capacity_method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            vals = set()
            vals.add("HeatingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_design_capacity_method`'.format(value))

        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float): value for IDD Field `heating_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')

        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity_per_floor_area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `heating_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')

        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_autosized_heating_design_capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_heating_design_capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')

        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def efficiency(self):
        """Get efficiency

        Returns:
            float: the value of `efficiency` or None if not set
        """
        return self._data["Efficiency"]

    @efficiency.setter
    def efficiency(self, value=1.0 ):
        """  Corresponds to IDD Field `efficiency`

        Args:
            value (float): value for IDD Field `efficiency`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency`')

        self._data["Efficiency"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.heating_design_capacity_method))
        out.append(self._to_str(self.heating_design_capacity))
        out.append(self._to_str(self.heating_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_heating_design_capacity))
        out.append(self._to_str(self.efficiency))
        return ",".join(out)

class ZoneHvacLowTemperatureRadiantVariableFlow(object):
    """ Corresponds to IDD object `ZoneHVAC:LowTemperatureRadiant:VariableFlow`
        Low temperature hydronic radiant heating and/or cooling system embedded in a building
        surface (wall, ceiling, or floor). Controlled by varying the hot or chilled water
        flow to the unit.
    """
    internal_name = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
    field_count = 29

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:LowTemperatureRadiant:VariableFlow`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Name or Radiant Surface Group Name"] = None
        self._data["Hydronic Tubing Inside Diameter"] = None
        self._data["Hydronic Tubing Length"] = None
        self._data["Temperature Control Type"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Maximum Hot Water Flow"] = None
        self._data["Heating Water Inlet Node Name"] = None
        self._data["Heating Water Outlet Node Name"] = None
        self._data["Heating Control Throttling Range"] = None
        self._data["Heating Control Temperature Schedule Name"] = None
        self._data["Cooling Design Capacity Method"] = None
        self._data["Cooling Design Capacity"] = None
        self._data["Cooling Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Cooling Design Capacity"] = None
        self._data["Maximum Cold Water Flow"] = None
        self._data["Cooling Water Inlet Node Name"] = None
        self._data["Cooling Water Outlet Node Name"] = None
        self._data["Cooling Control Throttling Range"] = None
        self._data["Cooling Control Temperature Schedule Name"] = None
        self._data["Condensation Control Type"] = None
        self._data["Condensation Control Dewpoint Offset"] = None
        self._data["Number of Circuits"] = None
        self._data["Circuit Length"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_name_or_radiant_surface_group_name = None
        else:
            self.surface_name_or_radiant_surface_group_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hydronic_tubing_inside_diameter = None
        else:
            self.hydronic_tubing_inside_diameter = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hydronic_tubing_length = None
        else:
            self.hydronic_tubing_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_hot_water_flow = None
        else:
            self.maximum_hot_water_flow = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_water_inlet_node_name = None
        else:
            self.heating_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_water_outlet_node_name = None
        else:
            self.heating_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_control_throttling_range = None
        else:
            self.heating_control_throttling_range = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_control_temperature_schedule_name = None
        else:
            self.heating_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_design_capacity_method = None
        else:
            self.cooling_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_design_capacity = None
        else:
            self.cooling_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_design_capacity_per_floor_area = None
        else:
            self.cooling_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_cooling_design_capacity = None
        else:
            self.fraction_of_autosized_cooling_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cold_water_flow = None
        else:
            self.maximum_cold_water_flow = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_inlet_node_name = None
        else:
            self.cooling_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_outlet_node_name = None
        else:
            self.cooling_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_control_throttling_range = None
        else:
            self.cooling_control_throttling_range = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_control_temperature_schedule_name = None
        else:
            self.cooling_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensation_control_type = None
        else:
            self.condensation_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensation_control_dewpoint_offset = None
        else:
            self.condensation_control_dewpoint_offset = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_circuits = None
        else:
            self.number_of_circuits = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.circuit_length = None
        else:
            self.circuit_length = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Name of zone system is serving

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def surface_name_or_radiant_surface_group_name(self):
        """Get surface_name_or_radiant_surface_group_name

        Returns:
            str: the value of `surface_name_or_radiant_surface_group_name` or None if not set
        """
        return self._data["Surface Name or Radiant Surface Group Name"]

    @surface_name_or_radiant_surface_group_name.setter
    def surface_name_or_radiant_surface_group_name(self, value=None):
        """  Corresponds to IDD Field `surface_name_or_radiant_surface_group_name`
        Identifies surfaces that radiant system is embedded in.
        For a system with multiple surfaces, enter the name of
        a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.

        Args:
            value (str): value for IDD Field `surface_name_or_radiant_surface_group_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_name_or_radiant_surface_group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name_or_radiant_surface_group_name`')

        self._data["Surface Name or Radiant Surface Group Name"] = value

    @property
    def hydronic_tubing_inside_diameter(self):
        """Get hydronic_tubing_inside_diameter

        Returns:
            float: the value of `hydronic_tubing_inside_diameter` or None if not set
        """
        return self._data["Hydronic Tubing Inside Diameter"]

    @hydronic_tubing_inside_diameter.setter
    def hydronic_tubing_inside_diameter(self, value=0.013 ):
        """  Corresponds to IDD Field `hydronic_tubing_inside_diameter`

        Args:
            value (float): value for IDD Field `hydronic_tubing_inside_diameter`
                Unit: m
                Default value: 0.013
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hydronic_tubing_inside_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hydronic_tubing_inside_diameter`')

        self._data["Hydronic Tubing Inside Diameter"] = value

    @property
    def hydronic_tubing_length(self):
        """Get hydronic_tubing_length

        Returns:
            float: the value of `hydronic_tubing_length` or None if not set
        """
        return self._data["Hydronic Tubing Length"]

    @hydronic_tubing_length.setter
    def hydronic_tubing_length(self, value=None):
        """  Corresponds to IDD Field `hydronic_tubing_length`
        (total length of pipe embedded in surface)

        Args:
            value (float): value for IDD Field `hydronic_tubing_length`
                Unit: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hydronic_tubing_length`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hydronic_tubing_length`')

        self._data["Hydronic Tubing Length"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="MeanAirTemperature"):
        """  Corresponds to IDD Field `temperature_control_type`
        (Temperature on which unit is controlled)

        Args:
            value (str): value for IDD Field `temperature_control_type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - OutdoorDryBulbTemperature
                      - OutdoorWetBulbTemperature
                Default value: MeanAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            vals = set()
            vals.add("MeanAirTemperature")
            vals.add("MeanRadiantTemperature")
            vals.add("OperativeTemperature")
            vals.add("OutdoorDryBulbTemperature")
            vals.add("OutdoorWetBulbTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `temperature_control_type`'.format(value))

        self._data["Temperature Control Type"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `heating_design_capacity_method`
        Enter the method used to determine the heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `heating_design_capacity_method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            vals = set()
            vals.add("HeatingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_design_capacity_method`'.format(value))

        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float): value for IDD Field `heating_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')

        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity_per_floor_area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `heating_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')

        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_autosized_heating_design_capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_heating_design_capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')

        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def maximum_hot_water_flow(self):
        """Get maximum_hot_water_flow

        Returns:
            float: the value of `maximum_hot_water_flow` or None if not set
        """
        return self._data["Maximum Hot Water Flow"]

    @maximum_hot_water_flow.setter
    def maximum_hot_water_flow(self, value=None):
        """  Corresponds to IDD Field `maximum_hot_water_flow`

        Args:
            value (float): value for IDD Field `maximum_hot_water_flow`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_hot_water_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_hot_water_flow`')

        self._data["Maximum Hot Water Flow"] = value

    @property
    def heating_water_inlet_node_name(self):
        """Get heating_water_inlet_node_name

        Returns:
            str: the value of `heating_water_inlet_node_name` or None if not set
        """
        return self._data["Heating Water Inlet Node Name"]

    @heating_water_inlet_node_name.setter
    def heating_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heating_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heating_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_water_inlet_node_name`')

        self._data["Heating Water Inlet Node Name"] = value

    @property
    def heating_water_outlet_node_name(self):
        """Get heating_water_outlet_node_name

        Returns:
            str: the value of `heating_water_outlet_node_name` or None if not set
        """
        return self._data["Heating Water Outlet Node Name"]

    @heating_water_outlet_node_name.setter
    def heating_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heating_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heating_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_water_outlet_node_name`')

        self._data["Heating Water Outlet Node Name"] = value

    @property
    def heating_control_throttling_range(self):
        """Get heating_control_throttling_range

        Returns:
            float: the value of `heating_control_throttling_range` or None if not set
        """
        return self._data["Heating Control Throttling Range"]

    @heating_control_throttling_range.setter
    def heating_control_throttling_range(self, value=0.5 ):
        """  Corresponds to IDD Field `heating_control_throttling_range`

        Args:
            value (float): value for IDD Field `heating_control_throttling_range`
                Unit: deltaC
                Default value: 0.5
                value >= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_control_throttling_range`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `heating_control_throttling_range`')

        self._data["Heating Control Throttling Range"] = value

    @property
    def heating_control_temperature_schedule_name(self):
        """Get heating_control_temperature_schedule_name

        Returns:
            str: the value of `heating_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Control Temperature Schedule Name"]

    @heating_control_temperature_schedule_name.setter
    def heating_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `heating_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_control_temperature_schedule_name`')

        self._data["Heating Control Temperature Schedule Name"] = value

    @property
    def cooling_design_capacity_method(self):
        """Get cooling_design_capacity_method

        Returns:
            str: the value of `cooling_design_capacity_method` or None if not set
        """
        return self._data["Cooling Design Capacity Method"]

    @cooling_design_capacity_method.setter
    def cooling_design_capacity_method(self, value="CoolingDesignCapacity"):
        """  Corresponds to IDD Field `cooling_design_capacity_method`
        Enter the method used to determine the cooling design capacity for scalable sizing.
        CoolingDesignCapacity => selected when the design cooling capacity value is specified or
        auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined
        from user specified cooling capacity per floor area and total floor area of cooled zone
        served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the
        design cooling capacity is determined from a user specified fraction and the auto-sized
        design cooling capacity of the system.

        Args:
            value (str): value for IDD Field `cooling_design_capacity_method`
                Accepted values are:
                      - None
                      - CoolingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedCoolingCapacity
                Default value: CoolingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_design_capacity_method`')
            vals = set()
            vals.add("None")
            vals.add("CoolingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedCoolingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_design_capacity_method`'.format(value))

        self._data["Cooling Design Capacity Method"] = value

    @property
    def cooling_design_capacity(self):
        """Get cooling_design_capacity

        Returns:
            float: the value of `cooling_design_capacity` or None if not set
        """
        return self._data["Cooling Design Capacity"]

    @cooling_design_capacity.setter
    def cooling_design_capacity(self, value=None):
        """  Corresponds to IDD Field `cooling_design_capacity`
        Enter the design cooling capacity. Required field when the cooling design capacity method
        CoolingDesignCapacity.

        Args:
            value (float): value for IDD Field `cooling_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_design_capacity`')

        self._data["Cooling Design Capacity"] = value

    @property
    def cooling_design_capacity_per_floor_area(self):
        """Get cooling_design_capacity_per_floor_area

        Returns:
            float: the value of `cooling_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Cooling Design Capacity Per Floor Area"]

    @cooling_design_capacity_per_floor_area.setter
    def cooling_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `cooling_design_capacity_per_floor_area`
        Enter the cooling design capacity per total floor area of cooled zones served by the unit.
        Required field when the cooling design capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `cooling_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_design_capacity_per_floor_area`')

        self._data["Cooling Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_cooling_design_capacity(self):
        """Get fraction_of_autosized_cooling_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_cooling_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Cooling Design Capacity"]

    @fraction_of_autosized_cooling_design_capacity.setter
    def fraction_of_autosized_cooling_design_capacity(self, value=None):
        """  Corresponds to IDD Field `fraction_of_autosized_cooling_design_capacity`
        Enter the fraction of auto-sized cooling design capacity. Required field when the cooling
        design capacity method field is FractionOfAutosizedCoolingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_cooling_design_capacity`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_cooling_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_cooling_design_capacity`')

        self._data["Fraction of Autosized Cooling Design Capacity"] = value

    @property
    def maximum_cold_water_flow(self):
        """Get maximum_cold_water_flow

        Returns:
            float: the value of `maximum_cold_water_flow` or None if not set
        """
        return self._data["Maximum Cold Water Flow"]

    @maximum_cold_water_flow.setter
    def maximum_cold_water_flow(self, value=None):
        """  Corresponds to IDD Field `maximum_cold_water_flow`

        Args:
            value (float): value for IDD Field `maximum_cold_water_flow`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cold_water_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cold_water_flow`')

        self._data["Maximum Cold Water Flow"] = value

    @property
    def cooling_water_inlet_node_name(self):
        """Get cooling_water_inlet_node_name

        Returns:
            str: the value of `cooling_water_inlet_node_name` or None if not set
        """
        return self._data["Cooling Water Inlet Node Name"]

    @cooling_water_inlet_node_name.setter
    def cooling_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_inlet_node_name`')

        self._data["Cooling Water Inlet Node Name"] = value

    @property
    def cooling_water_outlet_node_name(self):
        """Get cooling_water_outlet_node_name

        Returns:
            str: the value of `cooling_water_outlet_node_name` or None if not set
        """
        return self._data["Cooling Water Outlet Node Name"]

    @cooling_water_outlet_node_name.setter
    def cooling_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_outlet_node_name`')

        self._data["Cooling Water Outlet Node Name"] = value

    @property
    def cooling_control_throttling_range(self):
        """Get cooling_control_throttling_range

        Returns:
            float: the value of `cooling_control_throttling_range` or None if not set
        """
        return self._data["Cooling Control Throttling Range"]

    @cooling_control_throttling_range.setter
    def cooling_control_throttling_range(self, value=0.5 ):
        """  Corresponds to IDD Field `cooling_control_throttling_range`

        Args:
            value (float): value for IDD Field `cooling_control_throttling_range`
                Unit: deltaC
                Default value: 0.5
                value >= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_control_throttling_range`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `cooling_control_throttling_range`')

        self._data["Cooling Control Throttling Range"] = value

    @property
    def cooling_control_temperature_schedule_name(self):
        """Get cooling_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Control Temperature Schedule Name"]

    @cooling_control_temperature_schedule_name.setter
    def cooling_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `cooling_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_control_temperature_schedule_name`')

        self._data["Cooling Control Temperature Schedule Name"] = value

    @property
    def condensation_control_type(self):
        """Get condensation_control_type

        Returns:
            str: the value of `condensation_control_type` or None if not set
        """
        return self._data["Condensation Control Type"]

    @condensation_control_type.setter
    def condensation_control_type(self, value="SimpleOff"):
        """  Corresponds to IDD Field `condensation_control_type`

        Args:
            value (str): value for IDD Field `condensation_control_type`
                Accepted values are:
                      - Off
                      - SimpleOff
                      - VariableOff
                Default value: SimpleOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensation_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensation_control_type`')
            vals = set()
            vals.add("Off")
            vals.add("SimpleOff")
            vals.add("VariableOff")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condensation_control_type`'.format(value))

        self._data["Condensation Control Type"] = value

    @property
    def condensation_control_dewpoint_offset(self):
        """Get condensation_control_dewpoint_offset

        Returns:
            float: the value of `condensation_control_dewpoint_offset` or None if not set
        """
        return self._data["Condensation Control Dewpoint Offset"]

    @condensation_control_dewpoint_offset.setter
    def condensation_control_dewpoint_offset(self, value=1.0 ):
        """  Corresponds to IDD Field `condensation_control_dewpoint_offset`

        Args:
            value (float): value for IDD Field `condensation_control_dewpoint_offset`
                Unit: C
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensation_control_dewpoint_offset`'.format(value))

        self._data["Condensation Control Dewpoint Offset"] = value

    @property
    def number_of_circuits(self):
        """Get number_of_circuits

        Returns:
            str: the value of `number_of_circuits` or None if not set
        """
        return self._data["Number of Circuits"]

    @number_of_circuits.setter
    def number_of_circuits(self, value="OnePerSurface"):
        """  Corresponds to IDD Field `number_of_circuits`

        Args:
            value (str): value for IDD Field `number_of_circuits`
                Accepted values are:
                      - OnePerSurface
                      - CalculateFromCircuitLength
                Default value: OnePerSurface
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `number_of_circuits`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `number_of_circuits`')
            vals = set()
            vals.add("OnePerSurface")
            vals.add("CalculateFromCircuitLength")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `number_of_circuits`'.format(value))

        self._data["Number of Circuits"] = value

    @property
    def circuit_length(self):
        """Get circuit_length

        Returns:
            float: the value of `circuit_length` or None if not set
        """
        return self._data["Circuit Length"]

    @circuit_length.setter
    def circuit_length(self, value=106.7 ):
        """  Corresponds to IDD Field `circuit_length`

        Args:
            value (float): value for IDD Field `circuit_length`
                Unit: m
                Default value: 106.7
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `circuit_length`'.format(value))

        self._data["Circuit Length"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.surface_name_or_radiant_surface_group_name))
        out.append(self._to_str(self.hydronic_tubing_inside_diameter))
        out.append(self._to_str(self.hydronic_tubing_length))
        out.append(self._to_str(self.temperature_control_type))
        out.append(self._to_str(self.heating_design_capacity_method))
        out.append(self._to_str(self.heating_design_capacity))
        out.append(self._to_str(self.heating_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_heating_design_capacity))
        out.append(self._to_str(self.maximum_hot_water_flow))
        out.append(self._to_str(self.heating_water_inlet_node_name))
        out.append(self._to_str(self.heating_water_outlet_node_name))
        out.append(self._to_str(self.heating_control_throttling_range))
        out.append(self._to_str(self.heating_control_temperature_schedule_name))
        out.append(self._to_str(self.cooling_design_capacity_method))
        out.append(self._to_str(self.cooling_design_capacity))
        out.append(self._to_str(self.cooling_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_cooling_design_capacity))
        out.append(self._to_str(self.maximum_cold_water_flow))
        out.append(self._to_str(self.cooling_water_inlet_node_name))
        out.append(self._to_str(self.cooling_water_outlet_node_name))
        out.append(self._to_str(self.cooling_control_throttling_range))
        out.append(self._to_str(self.cooling_control_temperature_schedule_name))
        out.append(self._to_str(self.condensation_control_type))
        out.append(self._to_str(self.condensation_control_dewpoint_offset))
        out.append(self._to_str(self.number_of_circuits))
        out.append(self._to_str(self.circuit_length))
        return ",".join(out)

class ZoneHvacLowTemperatureRadiantConstantFlow(object):
    """ Corresponds to IDD object `ZoneHVAC:LowTemperatureRadiant:ConstantFlow`
        Low temperature hydronic radiant heating and/or cooling system embedded in a building
        surface (wall, ceiling, or floor). Controlled by varying the hot or chilled water
        temperature circulating through the unit.
    """
    internal_name = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
    field_count = 29

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:LowTemperatureRadiant:ConstantFlow`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Name or Radiant Surface Group Name"] = None
        self._data["Hydronic Tubing Inside Diameter"] = None
        self._data["Hydronic Tubing Length"] = None
        self._data["Temperature Control Type"] = None
        self._data["Rated Flow Rate"] = None
        self._data["Pump Flow Rate Schedule Name"] = None
        self._data["Rated Pump Head"] = None
        self._data["Rated Power Consumption"] = None
        self._data["Motor Efficiency"] = None
        self._data["Fraction of Motor Inefficiencies to Fluid Stream"] = None
        self._data["Heating Water Inlet Node Name"] = None
        self._data["Heating Water Outlet Node Name"] = None
        self._data["Heating High Water Temperature Schedule Name"] = None
        self._data["Heating Low Water Temperature Schedule Name"] = None
        self._data["Heating High Control Temperature Schedule Name"] = None
        self._data["Heating Low Control Temperature Schedule Name"] = None
        self._data["Cooling Water Inlet Node Name"] = None
        self._data["Cooling Water Outlet Node Name"] = None
        self._data["Cooling High Water Temperature Schedule Name"] = None
        self._data["Cooling Low Water Temperature Schedule Name"] = None
        self._data["Cooling High Control Temperature Schedule Name"] = None
        self._data["Cooling Low Control Temperature Schedule Name"] = None
        self._data["Condensation Control Type"] = None
        self._data["Condensation Control Dewpoint Offset"] = None
        self._data["Number of Circuits"] = None
        self._data["Circuit Length"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_name_or_radiant_surface_group_name = None
        else:
            self.surface_name_or_radiant_surface_group_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hydronic_tubing_inside_diameter = None
        else:
            self.hydronic_tubing_inside_diameter = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hydronic_tubing_length = None
        else:
            self.hydronic_tubing_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_flow_rate = None
        else:
            self.rated_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pump_flow_rate_schedule_name = None
        else:
            self.pump_flow_rate_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_pump_head = None
        else:
            self.rated_pump_head = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.rated_power_consumption = None
        else:
            self.rated_power_consumption = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.motor_efficiency = None
        else:
            self.motor_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_motor_inefficiencies_to_fluid_stream = None
        else:
            self.fraction_of_motor_inefficiencies_to_fluid_stream = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_water_inlet_node_name = None
        else:
            self.heating_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_water_outlet_node_name = None
        else:
            self.heating_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_high_water_temperature_schedule_name = None
        else:
            self.heating_high_water_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_low_water_temperature_schedule_name = None
        else:
            self.heating_low_water_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_high_control_temperature_schedule_name = None
        else:
            self.heating_high_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_low_control_temperature_schedule_name = None
        else:
            self.heating_low_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_inlet_node_name = None
        else:
            self.cooling_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_water_outlet_node_name = None
        else:
            self.cooling_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_high_water_temperature_schedule_name = None
        else:
            self.cooling_high_water_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_low_water_temperature_schedule_name = None
        else:
            self.cooling_low_water_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_high_control_temperature_schedule_name = None
        else:
            self.cooling_high_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_low_control_temperature_schedule_name = None
        else:
            self.cooling_low_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensation_control_type = None
        else:
            self.condensation_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.condensation_control_dewpoint_offset = None
        else:
            self.condensation_control_dewpoint_offset = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_circuits = None
        else:
            self.number_of_circuits = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.circuit_length = None
        else:
            self.circuit_length = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Name of zone system is serving

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def surface_name_or_radiant_surface_group_name(self):
        """Get surface_name_or_radiant_surface_group_name

        Returns:
            str: the value of `surface_name_or_radiant_surface_group_name` or None if not set
        """
        return self._data["Surface Name or Radiant Surface Group Name"]

    @surface_name_or_radiant_surface_group_name.setter
    def surface_name_or_radiant_surface_group_name(self, value=None):
        """  Corresponds to IDD Field `surface_name_or_radiant_surface_group_name`
        Identifies surfaces that radiant system is embedded in.
        For a system with multiple surfaces, enter the name of
        a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.

        Args:
            value (str): value for IDD Field `surface_name_or_radiant_surface_group_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_name_or_radiant_surface_group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name_or_radiant_surface_group_name`')

        self._data["Surface Name or Radiant Surface Group Name"] = value

    @property
    def hydronic_tubing_inside_diameter(self):
        """Get hydronic_tubing_inside_diameter

        Returns:
            float: the value of `hydronic_tubing_inside_diameter` or None if not set
        """
        return self._data["Hydronic Tubing Inside Diameter"]

    @hydronic_tubing_inside_diameter.setter
    def hydronic_tubing_inside_diameter(self, value=0.013 ):
        """  Corresponds to IDD Field `hydronic_tubing_inside_diameter`

        Args:
            value (float): value for IDD Field `hydronic_tubing_inside_diameter`
                Unit: m
                Default value: 0.013
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hydronic_tubing_inside_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hydronic_tubing_inside_diameter`')

        self._data["Hydronic Tubing Inside Diameter"] = value

    @property
    def hydronic_tubing_length(self):
        """Get hydronic_tubing_length

        Returns:
            float: the value of `hydronic_tubing_length` or None if not set
        """
        return self._data["Hydronic Tubing Length"]

    @hydronic_tubing_length.setter
    def hydronic_tubing_length(self, value=None):
        """  Corresponds to IDD Field `hydronic_tubing_length`
        Total length of pipe embedded in surface

        Args:
            value (float): value for IDD Field `hydronic_tubing_length`
                Unit: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hydronic_tubing_length`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `hydronic_tubing_length`')

        self._data["Hydronic Tubing Length"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="MeanAirTemperature"):
        """  Corresponds to IDD Field `temperature_control_type`
        Temperature used to control system

        Args:
            value (str): value for IDD Field `temperature_control_type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - OutdoorDryBulbTemperature
                      - OutdoorWetBulbTemperature
                Default value: MeanAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            vals = set()
            vals.add("MeanAirTemperature")
            vals.add("MeanRadiantTemperature")
            vals.add("OperativeTemperature")
            vals.add("OutdoorDryBulbTemperature")
            vals.add("OutdoorWetBulbTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `temperature_control_type`'.format(value))

        self._data["Temperature Control Type"] = value

    @property
    def rated_flow_rate(self):
        """Get rated_flow_rate

        Returns:
            float: the value of `rated_flow_rate` or None if not set
        """
        return self._data["Rated Flow Rate"]

    @rated_flow_rate.setter
    def rated_flow_rate(self, value=None):
        """  Corresponds to IDD Field `rated_flow_rate`

        Args:
            value (float): value for IDD Field `rated_flow_rate`
                Unit: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_flow_rate`'.format(value))

        self._data["Rated Flow Rate"] = value

    @property
    def pump_flow_rate_schedule_name(self):
        """Get pump_flow_rate_schedule_name

        Returns:
            str: the value of `pump_flow_rate_schedule_name` or None if not set
        """
        return self._data["Pump Flow Rate Schedule Name"]

    @pump_flow_rate_schedule_name.setter
    def pump_flow_rate_schedule_name(self, value=None):
        """  Corresponds to IDD Field `pump_flow_rate_schedule_name`
        Modifies the Rated Flow Rate of the pump on a time basis
        the default is that the pump is ON and runs according to its other
        operational requirements specified above.  The schedule is for special
        pump operations. Values here are between 0 and 1 and are multipliers
        on the previous field (Rated Flow Rate).

        Args:
            value (str): value for IDD Field `pump_flow_rate_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pump_flow_rate_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_flow_rate_schedule_name`')

        self._data["Pump Flow Rate Schedule Name"] = value

    @property
    def rated_pump_head(self):
        """Get rated_pump_head

        Returns:
            float: the value of `rated_pump_head` or None if not set
        """
        return self._data["Rated Pump Head"]

    @rated_pump_head.setter
    def rated_pump_head(self, value=179352.0 ):
        """  Corresponds to IDD Field `rated_pump_head`
        default head is 60 feet

        Args:
            value (float): value for IDD Field `rated_pump_head`
                Unit: Pa
                Default value: 179352.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_pump_head`'.format(value))

        self._data["Rated Pump Head"] = value

    @property
    def rated_power_consumption(self):
        """Get rated_power_consumption

        Returns:
            float: the value of `rated_power_consumption` or None if not set
        """
        return self._data["Rated Power Consumption"]

    @rated_power_consumption.setter
    def rated_power_consumption(self, value=None):
        """  Corresponds to IDD Field `rated_power_consumption`

        Args:
            value (float): value for IDD Field `rated_power_consumption`
                Unit: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_power_consumption`'.format(value))

        self._data["Rated Power Consumption"] = value

    @property
    def motor_efficiency(self):
        """Get motor_efficiency

        Returns:
            float: the value of `motor_efficiency` or None if not set
        """
        return self._data["Motor Efficiency"]

    @motor_efficiency.setter
    def motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `motor_efficiency`

        Args:
            value (float): value for IDD Field `motor_efficiency`
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_efficiency`')

        self._data["Motor Efficiency"] = value

    @property
    def fraction_of_motor_inefficiencies_to_fluid_stream(self):
        """Get fraction_of_motor_inefficiencies_to_fluid_stream

        Returns:
            float: the value of `fraction_of_motor_inefficiencies_to_fluid_stream` or None if not set
        """
        return self._data["Fraction of Motor Inefficiencies to Fluid Stream"]

    @fraction_of_motor_inefficiencies_to_fluid_stream.setter
    def fraction_of_motor_inefficiencies_to_fluid_stream(self, value=0.0 ):
        """  Corresponds to IDD Field `fraction_of_motor_inefficiencies_to_fluid_stream`

        Args:
            value (float): value for IDD Field `fraction_of_motor_inefficiencies_to_fluid_stream`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_motor_inefficiencies_to_fluid_stream`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_motor_inefficiencies_to_fluid_stream`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_motor_inefficiencies_to_fluid_stream`')

        self._data["Fraction of Motor Inefficiencies to Fluid Stream"] = value

    @property
    def heating_water_inlet_node_name(self):
        """Get heating_water_inlet_node_name

        Returns:
            str: the value of `heating_water_inlet_node_name` or None if not set
        """
        return self._data["Heating Water Inlet Node Name"]

    @heating_water_inlet_node_name.setter
    def heating_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heating_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heating_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_water_inlet_node_name`')

        self._data["Heating Water Inlet Node Name"] = value

    @property
    def heating_water_outlet_node_name(self):
        """Get heating_water_outlet_node_name

        Returns:
            str: the value of `heating_water_outlet_node_name` or None if not set
        """
        return self._data["Heating Water Outlet Node Name"]

    @heating_water_outlet_node_name.setter
    def heating_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heating_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heating_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_water_outlet_node_name`')

        self._data["Heating Water Outlet Node Name"] = value

    @property
    def heating_high_water_temperature_schedule_name(self):
        """Get heating_high_water_temperature_schedule_name

        Returns:
            str: the value of `heating_high_water_temperature_schedule_name` or None if not set
        """
        return self._data["Heating High Water Temperature Schedule Name"]

    @heating_high_water_temperature_schedule_name.setter
    def heating_high_water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_high_water_temperature_schedule_name`
        Water and control temperatures for heating work together to provide
        a linear function that determines the water temperature sent to the
        radiant system.  The current control temperature (see Temperature Control Type above) is
        compared to the high and low control temperatures at the current time.
        If the control temperature is above the high temperature, then the
        inlet water temperature is set to the low water temperature.  If the
        control temperature is below the low temperature, then the inlet
        water temperature is set to the high water temperature.  If the control
        temperature is between the high and low value, then the inlet water
        temperature is linearly interpolated between the low and high water
        temperature values.

        Args:
            value (str): value for IDD Field `heating_high_water_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_high_water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_high_water_temperature_schedule_name`')

        self._data["Heating High Water Temperature Schedule Name"] = value

    @property
    def heating_low_water_temperature_schedule_name(self):
        """Get heating_low_water_temperature_schedule_name

        Returns:
            str: the value of `heating_low_water_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Low Water Temperature Schedule Name"]

    @heating_low_water_temperature_schedule_name.setter
    def heating_low_water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_low_water_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `heating_low_water_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_low_water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_low_water_temperature_schedule_name`')

        self._data["Heating Low Water Temperature Schedule Name"] = value

    @property
    def heating_high_control_temperature_schedule_name(self):
        """Get heating_high_control_temperature_schedule_name

        Returns:
            str: the value of `heating_high_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating High Control Temperature Schedule Name"]

    @heating_high_control_temperature_schedule_name.setter
    def heating_high_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_high_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `heating_high_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_high_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_high_control_temperature_schedule_name`')

        self._data["Heating High Control Temperature Schedule Name"] = value

    @property
    def heating_low_control_temperature_schedule_name(self):
        """Get heating_low_control_temperature_schedule_name

        Returns:
            str: the value of `heating_low_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Low Control Temperature Schedule Name"]

    @heating_low_control_temperature_schedule_name.setter
    def heating_low_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_low_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `heating_low_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_low_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_low_control_temperature_schedule_name`')

        self._data["Heating Low Control Temperature Schedule Name"] = value

    @property
    def cooling_water_inlet_node_name(self):
        """Get cooling_water_inlet_node_name

        Returns:
            str: the value of `cooling_water_inlet_node_name` or None if not set
        """
        return self._data["Cooling Water Inlet Node Name"]

    @cooling_water_inlet_node_name.setter
    def cooling_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_inlet_node_name`')

        self._data["Cooling Water Inlet Node Name"] = value

    @property
    def cooling_water_outlet_node_name(self):
        """Get cooling_water_outlet_node_name

        Returns:
            str: the value of `cooling_water_outlet_node_name` or None if not set
        """
        return self._data["Cooling Water Outlet Node Name"]

    @cooling_water_outlet_node_name.setter
    def cooling_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cooling_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `cooling_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_outlet_node_name`')

        self._data["Cooling Water Outlet Node Name"] = value

    @property
    def cooling_high_water_temperature_schedule_name(self):
        """Get cooling_high_water_temperature_schedule_name

        Returns:
            str: the value of `cooling_high_water_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling High Water Temperature Schedule Name"]

    @cooling_high_water_temperature_schedule_name.setter
    def cooling_high_water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_high_water_temperature_schedule_name`
        See note for Heating High Water Temperature Schedule above for
        interpretation information (or see the Input/Output Reference).

        Args:
            value (str): value for IDD Field `cooling_high_water_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_high_water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_high_water_temperature_schedule_name`')

        self._data["Cooling High Water Temperature Schedule Name"] = value

    @property
    def cooling_low_water_temperature_schedule_name(self):
        """Get cooling_low_water_temperature_schedule_name

        Returns:
            str: the value of `cooling_low_water_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Low Water Temperature Schedule Name"]

    @cooling_low_water_temperature_schedule_name.setter
    def cooling_low_water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_low_water_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `cooling_low_water_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_low_water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_low_water_temperature_schedule_name`')

        self._data["Cooling Low Water Temperature Schedule Name"] = value

    @property
    def cooling_high_control_temperature_schedule_name(self):
        """Get cooling_high_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_high_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling High Control Temperature Schedule Name"]

    @cooling_high_control_temperature_schedule_name.setter
    def cooling_high_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_high_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `cooling_high_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_high_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_high_control_temperature_schedule_name`')

        self._data["Cooling High Control Temperature Schedule Name"] = value

    @property
    def cooling_low_control_temperature_schedule_name(self):
        """Get cooling_low_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_low_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Low Control Temperature Schedule Name"]

    @cooling_low_control_temperature_schedule_name.setter
    def cooling_low_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_low_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `cooling_low_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_low_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_low_control_temperature_schedule_name`')

        self._data["Cooling Low Control Temperature Schedule Name"] = value

    @property
    def condensation_control_type(self):
        """Get condensation_control_type

        Returns:
            str: the value of `condensation_control_type` or None if not set
        """
        return self._data["Condensation Control Type"]

    @condensation_control_type.setter
    def condensation_control_type(self, value="SimpleOff"):
        """  Corresponds to IDD Field `condensation_control_type`

        Args:
            value (str): value for IDD Field `condensation_control_type`
                Accepted values are:
                      - Off
                      - SimpleOff
                      - VariableOff
                Default value: SimpleOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensation_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensation_control_type`')
            vals = set()
            vals.add("Off")
            vals.add("SimpleOff")
            vals.add("VariableOff")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `condensation_control_type`'.format(value))

        self._data["Condensation Control Type"] = value

    @property
    def condensation_control_dewpoint_offset(self):
        """Get condensation_control_dewpoint_offset

        Returns:
            float: the value of `condensation_control_dewpoint_offset` or None if not set
        """
        return self._data["Condensation Control Dewpoint Offset"]

    @condensation_control_dewpoint_offset.setter
    def condensation_control_dewpoint_offset(self, value=1.0 ):
        """  Corresponds to IDD Field `condensation_control_dewpoint_offset`

        Args:
            value (float): value for IDD Field `condensation_control_dewpoint_offset`
                Unit: C
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `condensation_control_dewpoint_offset`'.format(value))

        self._data["Condensation Control Dewpoint Offset"] = value

    @property
    def number_of_circuits(self):
        """Get number_of_circuits

        Returns:
            str: the value of `number_of_circuits` or None if not set
        """
        return self._data["Number of Circuits"]

    @number_of_circuits.setter
    def number_of_circuits(self, value="OnePerSurface"):
        """  Corresponds to IDD Field `number_of_circuits`

        Args:
            value (str): value for IDD Field `number_of_circuits`
                Accepted values are:
                      - OnePerSurface
                      - CalculateFromCircuitLength
                Default value: OnePerSurface
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `number_of_circuits`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `number_of_circuits`')
            vals = set()
            vals.add("OnePerSurface")
            vals.add("CalculateFromCircuitLength")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `number_of_circuits`'.format(value))

        self._data["Number of Circuits"] = value

    @property
    def circuit_length(self):
        """Get circuit_length

        Returns:
            float: the value of `circuit_length` or None if not set
        """
        return self._data["Circuit Length"]

    @circuit_length.setter
    def circuit_length(self, value=106.7 ):
        """  Corresponds to IDD Field `circuit_length`

        Args:
            value (float): value for IDD Field `circuit_length`
                Unit: m
                Default value: 106.7
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `circuit_length`'.format(value))

        self._data["Circuit Length"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.surface_name_or_radiant_surface_group_name))
        out.append(self._to_str(self.hydronic_tubing_inside_diameter))
        out.append(self._to_str(self.hydronic_tubing_length))
        out.append(self._to_str(self.temperature_control_type))
        out.append(self._to_str(self.rated_flow_rate))
        out.append(self._to_str(self.pump_flow_rate_schedule_name))
        out.append(self._to_str(self.rated_pump_head))
        out.append(self._to_str(self.rated_power_consumption))
        out.append(self._to_str(self.motor_efficiency))
        out.append(self._to_str(self.fraction_of_motor_inefficiencies_to_fluid_stream))
        out.append(self._to_str(self.heating_water_inlet_node_name))
        out.append(self._to_str(self.heating_water_outlet_node_name))
        out.append(self._to_str(self.heating_high_water_temperature_schedule_name))
        out.append(self._to_str(self.heating_low_water_temperature_schedule_name))
        out.append(self._to_str(self.heating_high_control_temperature_schedule_name))
        out.append(self._to_str(self.heating_low_control_temperature_schedule_name))
        out.append(self._to_str(self.cooling_water_inlet_node_name))
        out.append(self._to_str(self.cooling_water_outlet_node_name))
        out.append(self._to_str(self.cooling_high_water_temperature_schedule_name))
        out.append(self._to_str(self.cooling_low_water_temperature_schedule_name))
        out.append(self._to_str(self.cooling_high_control_temperature_schedule_name))
        out.append(self._to_str(self.cooling_low_control_temperature_schedule_name))
        out.append(self._to_str(self.condensation_control_type))
        out.append(self._to_str(self.condensation_control_dewpoint_offset))
        out.append(self._to_str(self.number_of_circuits))
        out.append(self._to_str(self.circuit_length))
        return ",".join(out)

class ZoneHvacLowTemperatureRadiantElectric(object):
    """ Corresponds to IDD object `ZoneHVAC:LowTemperatureRadiant:Electric`
        Electric resistance low temperature radiant system
    """
    internal_name = "ZoneHVAC:LowTemperatureRadiant:Electric"
    field_count = 11

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:LowTemperatureRadiant:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Name or Radiant Surface Group Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Temperature Control Type"] = None
        self._data["Heating Throttling Range"] = None
        self._data["Heating Setpoint Temperature Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_name_or_radiant_surface_group_name = None
        else:
            self.surface_name_or_radiant_surface_group_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_throttling_range = None
        else:
            self.heating_throttling_range = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_setpoint_temperature_schedule_name = None
        else:
            self.heating_setpoint_temperature_schedule_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Name of zone system is serving

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def surface_name_or_radiant_surface_group_name(self):
        """Get surface_name_or_radiant_surface_group_name

        Returns:
            str: the value of `surface_name_or_radiant_surface_group_name` or None if not set
        """
        return self._data["Surface Name or Radiant Surface Group Name"]

    @surface_name_or_radiant_surface_group_name.setter
    def surface_name_or_radiant_surface_group_name(self, value=None):
        """  Corresponds to IDD Field `surface_name_or_radiant_surface_group_name`
        Identifies surfaces that radiant system is embedded in.
        For a system with multiple surfaces, enter the name of
        a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.

        Args:
            value (str): value for IDD Field `surface_name_or_radiant_surface_group_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_name_or_radiant_surface_group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name_or_radiant_surface_group_name`')

        self._data["Surface Name or Radiant Surface Group Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `heating_design_capacity_method`
        Enter the method used to determine the maximum electrical heating design capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `heating_design_capacity_method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            vals = set()
            vals.add("HeatingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_design_capacity_method`'.format(value))

        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float): value for IDD Field `heating_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')

        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity_per_floor_area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `heating_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')

        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_autosized_heating_design_capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_heating_design_capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')

        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="MeanAirTemperature"):
        """  Corresponds to IDD Field `temperature_control_type`
        Temperature used to control unit

        Args:
            value (str): value for IDD Field `temperature_control_type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - OutdoorDryBulbTemperature
                      - OutdoorWetBulbTemperature
                Default value: MeanAirTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            vals = set()
            vals.add("MeanAirTemperature")
            vals.add("MeanRadiantTemperature")
            vals.add("OperativeTemperature")
            vals.add("OutdoorDryBulbTemperature")
            vals.add("OutdoorWetBulbTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `temperature_control_type`'.format(value))

        self._data["Temperature Control Type"] = value

    @property
    def heating_throttling_range(self):
        """Get heating_throttling_range

        Returns:
            float: the value of `heating_throttling_range` or None if not set
        """
        return self._data["Heating Throttling Range"]

    @heating_throttling_range.setter
    def heating_throttling_range(self, value=0.0 ):
        """  Corresponds to IDD Field `heating_throttling_range`

        Args:
            value (float): value for IDD Field `heating_throttling_range`
                Unit: deltaC
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_throttling_range`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_throttling_range`')

        self._data["Heating Throttling Range"] = value

    @property
    def heating_setpoint_temperature_schedule_name(self):
        """Get heating_setpoint_temperature_schedule_name

        Returns:
            str: the value of `heating_setpoint_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Setpoint Temperature Schedule Name"]

    @heating_setpoint_temperature_schedule_name.setter
    def heating_setpoint_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_setpoint_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `heating_setpoint_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_setpoint_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_setpoint_temperature_schedule_name`')

        self._data["Heating Setpoint Temperature Schedule Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.surface_name_or_radiant_surface_group_name))
        out.append(self._to_str(self.heating_design_capacity_method))
        out.append(self._to_str(self.heating_design_capacity))
        out.append(self._to_str(self.heating_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_heating_design_capacity))
        out.append(self._to_str(self.temperature_control_type))
        out.append(self._to_str(self.heating_throttling_range))
        out.append(self._to_str(self.heating_setpoint_temperature_schedule_name))
        return ",".join(out)

class ZoneHvacLowTemperatureRadiantSurfaceGroup(object):
    """ Corresponds to IDD object `ZoneHVAC:LowTemperatureRadiant:SurfaceGroup`
        This is used to allow the coordinate control of several radiant system surfaces.
        Note that the following flow fractions must sum up to 1.0
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:LowTemperatureRadiant:SurfaceGroup"
    field_count = 201

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:LowTemperatureRadiant:SurfaceGroup`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Surface 1 Name"] = None
        self._data["Flow Fraction for Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Flow Fraction for Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Flow Fraction for Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Flow Fraction for Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Flow Fraction for Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Flow Fraction for Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Flow Fraction for Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Flow Fraction for Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Flow Fraction for Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Flow Fraction for Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Flow Fraction for Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Flow Fraction for Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Flow Fraction for Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Flow Fraction for Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Flow Fraction for Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Flow Fraction for Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Flow Fraction for Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Flow Fraction for Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Flow Fraction for Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Flow Fraction for Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Flow Fraction for Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Flow Fraction for Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Flow Fraction for Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Flow Fraction for Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Flow Fraction for Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Flow Fraction for Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Flow Fraction for Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Flow Fraction for Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Flow Fraction for Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Flow Fraction for Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Flow Fraction for Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Flow Fraction for Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Flow Fraction for Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Flow Fraction for Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Flow Fraction for Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Flow Fraction for Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Flow Fraction for Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Flow Fraction for Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Flow Fraction for Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Flow Fraction for Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Flow Fraction for Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Flow Fraction for Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Flow Fraction for Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Flow Fraction for Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Flow Fraction for Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Flow Fraction for Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Flow Fraction for Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Flow Fraction for Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Flow Fraction for Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Flow Fraction for Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Flow Fraction for Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Flow Fraction for Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Flow Fraction for Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Flow Fraction for Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Flow Fraction for Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Flow Fraction for Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Flow Fraction for Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Flow Fraction for Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Flow Fraction for Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Flow Fraction for Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Flow Fraction for Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Flow Fraction for Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Flow Fraction for Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Flow Fraction for Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Flow Fraction for Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Flow Fraction for Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Flow Fraction for Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Flow Fraction for Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Flow Fraction for Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Flow Fraction for Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Flow Fraction for Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Flow Fraction for Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Flow Fraction for Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Flow Fraction for Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Flow Fraction for Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Flow Fraction for Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Flow Fraction for Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Flow Fraction for Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Flow Fraction for Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Flow Fraction for Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Flow Fraction for Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Flow Fraction for Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Flow Fraction for Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Flow Fraction for Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Flow Fraction for Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Flow Fraction for Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Flow Fraction for Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Flow Fraction for Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Flow Fraction for Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Flow Fraction for Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Flow Fraction for Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Flow Fraction for Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Flow Fraction for Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Flow Fraction for Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Flow Fraction for Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Flow Fraction for Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Flow Fraction for Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Flow Fraction for Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Flow Fraction for Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Flow Fraction for Surface 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_1 = None
        else:
            self.flow_fraction_for_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_2 = None
        else:
            self.flow_fraction_for_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_3 = None
        else:
            self.flow_fraction_for_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_4 = None
        else:
            self.flow_fraction_for_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_5 = None
        else:
            self.flow_fraction_for_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_6 = None
        else:
            self.flow_fraction_for_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_7 = None
        else:
            self.flow_fraction_for_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_8 = None
        else:
            self.flow_fraction_for_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_9 = None
        else:
            self.flow_fraction_for_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_10 = None
        else:
            self.flow_fraction_for_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_11 = None
        else:
            self.flow_fraction_for_surface_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_12 = None
        else:
            self.flow_fraction_for_surface_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_13 = None
        else:
            self.flow_fraction_for_surface_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_14 = None
        else:
            self.flow_fraction_for_surface_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_15 = None
        else:
            self.flow_fraction_for_surface_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_16 = None
        else:
            self.flow_fraction_for_surface_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_17 = None
        else:
            self.flow_fraction_for_surface_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_18 = None
        else:
            self.flow_fraction_for_surface_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_19 = None
        else:
            self.flow_fraction_for_surface_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_20 = None
        else:
            self.flow_fraction_for_surface_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_21 = None
        else:
            self.flow_fraction_for_surface_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_22 = None
        else:
            self.flow_fraction_for_surface_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_23 = None
        else:
            self.flow_fraction_for_surface_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_24 = None
        else:
            self.flow_fraction_for_surface_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_25 = None
        else:
            self.flow_fraction_for_surface_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_26 = None
        else:
            self.flow_fraction_for_surface_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_27 = None
        else:
            self.flow_fraction_for_surface_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_28 = None
        else:
            self.flow_fraction_for_surface_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_29 = None
        else:
            self.flow_fraction_for_surface_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_30 = None
        else:
            self.flow_fraction_for_surface_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_31 = None
        else:
            self.flow_fraction_for_surface_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_32 = None
        else:
            self.flow_fraction_for_surface_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_33 = None
        else:
            self.flow_fraction_for_surface_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_34 = None
        else:
            self.flow_fraction_for_surface_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_35 = None
        else:
            self.flow_fraction_for_surface_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_36 = None
        else:
            self.flow_fraction_for_surface_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_37 = None
        else:
            self.flow_fraction_for_surface_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_38 = None
        else:
            self.flow_fraction_for_surface_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_39 = None
        else:
            self.flow_fraction_for_surface_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_40 = None
        else:
            self.flow_fraction_for_surface_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_41 = None
        else:
            self.flow_fraction_for_surface_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_42 = None
        else:
            self.flow_fraction_for_surface_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_43 = None
        else:
            self.flow_fraction_for_surface_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_44 = None
        else:
            self.flow_fraction_for_surface_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_45 = None
        else:
            self.flow_fraction_for_surface_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_46 = None
        else:
            self.flow_fraction_for_surface_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_47 = None
        else:
            self.flow_fraction_for_surface_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_48 = None
        else:
            self.flow_fraction_for_surface_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_49 = None
        else:
            self.flow_fraction_for_surface_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_50 = None
        else:
            self.flow_fraction_for_surface_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_51 = None
        else:
            self.flow_fraction_for_surface_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_52 = None
        else:
            self.flow_fraction_for_surface_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_53 = None
        else:
            self.flow_fraction_for_surface_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_54 = None
        else:
            self.flow_fraction_for_surface_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_55 = None
        else:
            self.flow_fraction_for_surface_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_56 = None
        else:
            self.flow_fraction_for_surface_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_57 = None
        else:
            self.flow_fraction_for_surface_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_58 = None
        else:
            self.flow_fraction_for_surface_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_59 = None
        else:
            self.flow_fraction_for_surface_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_60 = None
        else:
            self.flow_fraction_for_surface_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_61 = None
        else:
            self.flow_fraction_for_surface_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_62 = None
        else:
            self.flow_fraction_for_surface_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_63 = None
        else:
            self.flow_fraction_for_surface_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_64 = None
        else:
            self.flow_fraction_for_surface_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_65 = None
        else:
            self.flow_fraction_for_surface_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_66 = None
        else:
            self.flow_fraction_for_surface_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_67 = None
        else:
            self.flow_fraction_for_surface_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_68 = None
        else:
            self.flow_fraction_for_surface_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_69 = None
        else:
            self.flow_fraction_for_surface_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_70 = None
        else:
            self.flow_fraction_for_surface_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_71 = None
        else:
            self.flow_fraction_for_surface_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_72 = None
        else:
            self.flow_fraction_for_surface_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_73 = None
        else:
            self.flow_fraction_for_surface_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_74 = None
        else:
            self.flow_fraction_for_surface_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_75 = None
        else:
            self.flow_fraction_for_surface_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_76 = None
        else:
            self.flow_fraction_for_surface_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_77 = None
        else:
            self.flow_fraction_for_surface_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_78 = None
        else:
            self.flow_fraction_for_surface_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_79 = None
        else:
            self.flow_fraction_for_surface_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_80 = None
        else:
            self.flow_fraction_for_surface_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_81 = None
        else:
            self.flow_fraction_for_surface_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_82 = None
        else:
            self.flow_fraction_for_surface_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_83 = None
        else:
            self.flow_fraction_for_surface_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_84 = None
        else:
            self.flow_fraction_for_surface_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_85 = None
        else:
            self.flow_fraction_for_surface_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_86 = None
        else:
            self.flow_fraction_for_surface_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_87 = None
        else:
            self.flow_fraction_for_surface_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_88 = None
        else:
            self.flow_fraction_for_surface_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_89 = None
        else:
            self.flow_fraction_for_surface_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_90 = None
        else:
            self.flow_fraction_for_surface_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_91 = None
        else:
            self.flow_fraction_for_surface_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_92 = None
        else:
            self.flow_fraction_for_surface_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_93 = None
        else:
            self.flow_fraction_for_surface_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_94 = None
        else:
            self.flow_fraction_for_surface_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_95 = None
        else:
            self.flow_fraction_for_surface_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_96 = None
        else:
            self.flow_fraction_for_surface_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_97 = None
        else:
            self.flow_fraction_for_surface_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_98 = None
        else:
            self.flow_fraction_for_surface_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_99 = None
        else:
            self.flow_fraction_for_surface_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.flow_fraction_for_surface_100 = None
        else:
            self.flow_fraction_for_surface_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `surface_1_name`

        Args:
            value (str): value for IDD Field `surface_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')

        self._data["Surface 1 Name"] = value

    @property
    def flow_fraction_for_surface_1(self):
        """Get flow_fraction_for_surface_1

        Returns:
            float: the value of `flow_fraction_for_surface_1` or None if not set
        """
        return self._data["Flow Fraction for Surface 1"]

    @flow_fraction_for_surface_1.setter
    def flow_fraction_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_1`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_1`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_1`')

        self._data["Flow Fraction for Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `surface_2_name`

        Args:
            value (str): value for IDD Field `surface_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')

        self._data["Surface 2 Name"] = value

    @property
    def flow_fraction_for_surface_2(self):
        """Get flow_fraction_for_surface_2

        Returns:
            float: the value of `flow_fraction_for_surface_2` or None if not set
        """
        return self._data["Flow Fraction for Surface 2"]

    @flow_fraction_for_surface_2.setter
    def flow_fraction_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_2`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_2`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_2`')

        self._data["Flow Fraction for Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `surface_3_name`

        Args:
            value (str): value for IDD Field `surface_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')

        self._data["Surface 3 Name"] = value

    @property
    def flow_fraction_for_surface_3(self):
        """Get flow_fraction_for_surface_3

        Returns:
            float: the value of `flow_fraction_for_surface_3` or None if not set
        """
        return self._data["Flow Fraction for Surface 3"]

    @flow_fraction_for_surface_3.setter
    def flow_fraction_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_3`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_3`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_3`')

        self._data["Flow Fraction for Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `surface_4_name`

        Args:
            value (str): value for IDD Field `surface_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')

        self._data["Surface 4 Name"] = value

    @property
    def flow_fraction_for_surface_4(self):
        """Get flow_fraction_for_surface_4

        Returns:
            float: the value of `flow_fraction_for_surface_4` or None if not set
        """
        return self._data["Flow Fraction for Surface 4"]

    @flow_fraction_for_surface_4.setter
    def flow_fraction_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_4`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_4`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_4`')

        self._data["Flow Fraction for Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `surface_5_name`

        Args:
            value (str): value for IDD Field `surface_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')

        self._data["Surface 5 Name"] = value

    @property
    def flow_fraction_for_surface_5(self):
        """Get flow_fraction_for_surface_5

        Returns:
            float: the value of `flow_fraction_for_surface_5` or None if not set
        """
        return self._data["Flow Fraction for Surface 5"]

    @flow_fraction_for_surface_5.setter
    def flow_fraction_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_5`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_5`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_5`')

        self._data["Flow Fraction for Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `surface_6_name`

        Args:
            value (str): value for IDD Field `surface_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')

        self._data["Surface 6 Name"] = value

    @property
    def flow_fraction_for_surface_6(self):
        """Get flow_fraction_for_surface_6

        Returns:
            float: the value of `flow_fraction_for_surface_6` or None if not set
        """
        return self._data["Flow Fraction for Surface 6"]

    @flow_fraction_for_surface_6.setter
    def flow_fraction_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_6`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_6`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_6`')

        self._data["Flow Fraction for Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `surface_7_name`

        Args:
            value (str): value for IDD Field `surface_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')

        self._data["Surface 7 Name"] = value

    @property
    def flow_fraction_for_surface_7(self):
        """Get flow_fraction_for_surface_7

        Returns:
            float: the value of `flow_fraction_for_surface_7` or None if not set
        """
        return self._data["Flow Fraction for Surface 7"]

    @flow_fraction_for_surface_7.setter
    def flow_fraction_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_7`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_7`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_7`')

        self._data["Flow Fraction for Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `surface_8_name`

        Args:
            value (str): value for IDD Field `surface_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')

        self._data["Surface 8 Name"] = value

    @property
    def flow_fraction_for_surface_8(self):
        """Get flow_fraction_for_surface_8

        Returns:
            float: the value of `flow_fraction_for_surface_8` or None if not set
        """
        return self._data["Flow Fraction for Surface 8"]

    @flow_fraction_for_surface_8.setter
    def flow_fraction_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_8`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_8`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_8`')

        self._data["Flow Fraction for Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `surface_9_name`

        Args:
            value (str): value for IDD Field `surface_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')

        self._data["Surface 9 Name"] = value

    @property
    def flow_fraction_for_surface_9(self):
        """Get flow_fraction_for_surface_9

        Returns:
            float: the value of `flow_fraction_for_surface_9` or None if not set
        """
        return self._data["Flow Fraction for Surface 9"]

    @flow_fraction_for_surface_9.setter
    def flow_fraction_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_9`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_9`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_9`')

        self._data["Flow Fraction for Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `surface_10_name`

        Args:
            value (str): value for IDD Field `surface_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')

        self._data["Surface 10 Name"] = value

    @property
    def flow_fraction_for_surface_10(self):
        """Get flow_fraction_for_surface_10

        Returns:
            float: the value of `flow_fraction_for_surface_10` or None if not set
        """
        return self._data["Flow Fraction for Surface 10"]

    @flow_fraction_for_surface_10.setter
    def flow_fraction_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_10`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_10`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_10`')

        self._data["Flow Fraction for Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `surface_11_name`

        Args:
            value (str): value for IDD Field `surface_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')

        self._data["Surface 11 Name"] = value

    @property
    def flow_fraction_for_surface_11(self):
        """Get flow_fraction_for_surface_11

        Returns:
            float: the value of `flow_fraction_for_surface_11` or None if not set
        """
        return self._data["Flow Fraction for Surface 11"]

    @flow_fraction_for_surface_11.setter
    def flow_fraction_for_surface_11(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_11`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_11`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_11`')

        self._data["Flow Fraction for Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `surface_12_name`

        Args:
            value (str): value for IDD Field `surface_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')

        self._data["Surface 12 Name"] = value

    @property
    def flow_fraction_for_surface_12(self):
        """Get flow_fraction_for_surface_12

        Returns:
            float: the value of `flow_fraction_for_surface_12` or None if not set
        """
        return self._data["Flow Fraction for Surface 12"]

    @flow_fraction_for_surface_12.setter
    def flow_fraction_for_surface_12(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_12`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_12`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_12`')

        self._data["Flow Fraction for Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `surface_13_name`

        Args:
            value (str): value for IDD Field `surface_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')

        self._data["Surface 13 Name"] = value

    @property
    def flow_fraction_for_surface_13(self):
        """Get flow_fraction_for_surface_13

        Returns:
            float: the value of `flow_fraction_for_surface_13` or None if not set
        """
        return self._data["Flow Fraction for Surface 13"]

    @flow_fraction_for_surface_13.setter
    def flow_fraction_for_surface_13(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_13`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_13`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_13`')

        self._data["Flow Fraction for Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `surface_14_name`

        Args:
            value (str): value for IDD Field `surface_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')

        self._data["Surface 14 Name"] = value

    @property
    def flow_fraction_for_surface_14(self):
        """Get flow_fraction_for_surface_14

        Returns:
            float: the value of `flow_fraction_for_surface_14` or None if not set
        """
        return self._data["Flow Fraction for Surface 14"]

    @flow_fraction_for_surface_14.setter
    def flow_fraction_for_surface_14(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_14`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_14`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_14`')

        self._data["Flow Fraction for Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `surface_15_name`

        Args:
            value (str): value for IDD Field `surface_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')

        self._data["Surface 15 Name"] = value

    @property
    def flow_fraction_for_surface_15(self):
        """Get flow_fraction_for_surface_15

        Returns:
            float: the value of `flow_fraction_for_surface_15` or None if not set
        """
        return self._data["Flow Fraction for Surface 15"]

    @flow_fraction_for_surface_15.setter
    def flow_fraction_for_surface_15(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_15`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_15`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_15`')

        self._data["Flow Fraction for Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `surface_16_name`

        Args:
            value (str): value for IDD Field `surface_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')

        self._data["Surface 16 Name"] = value

    @property
    def flow_fraction_for_surface_16(self):
        """Get flow_fraction_for_surface_16

        Returns:
            float: the value of `flow_fraction_for_surface_16` or None if not set
        """
        return self._data["Flow Fraction for Surface 16"]

    @flow_fraction_for_surface_16.setter
    def flow_fraction_for_surface_16(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_16`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_16`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_16`')

        self._data["Flow Fraction for Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `surface_17_name`

        Args:
            value (str): value for IDD Field `surface_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')

        self._data["Surface 17 Name"] = value

    @property
    def flow_fraction_for_surface_17(self):
        """Get flow_fraction_for_surface_17

        Returns:
            float: the value of `flow_fraction_for_surface_17` or None if not set
        """
        return self._data["Flow Fraction for Surface 17"]

    @flow_fraction_for_surface_17.setter
    def flow_fraction_for_surface_17(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_17`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_17`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_17`')

        self._data["Flow Fraction for Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `surface_18_name`

        Args:
            value (str): value for IDD Field `surface_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')

        self._data["Surface 18 Name"] = value

    @property
    def flow_fraction_for_surface_18(self):
        """Get flow_fraction_for_surface_18

        Returns:
            float: the value of `flow_fraction_for_surface_18` or None if not set
        """
        return self._data["Flow Fraction for Surface 18"]

    @flow_fraction_for_surface_18.setter
    def flow_fraction_for_surface_18(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_18`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_18`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_18`')

        self._data["Flow Fraction for Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `surface_19_name`

        Args:
            value (str): value for IDD Field `surface_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')

        self._data["Surface 19 Name"] = value

    @property
    def flow_fraction_for_surface_19(self):
        """Get flow_fraction_for_surface_19

        Returns:
            float: the value of `flow_fraction_for_surface_19` or None if not set
        """
        return self._data["Flow Fraction for Surface 19"]

    @flow_fraction_for_surface_19.setter
    def flow_fraction_for_surface_19(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_19`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_19`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_19`')

        self._data["Flow Fraction for Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `surface_20_name`

        Args:
            value (str): value for IDD Field `surface_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')

        self._data["Surface 20 Name"] = value

    @property
    def flow_fraction_for_surface_20(self):
        """Get flow_fraction_for_surface_20

        Returns:
            float: the value of `flow_fraction_for_surface_20` or None if not set
        """
        return self._data["Flow Fraction for Surface 20"]

    @flow_fraction_for_surface_20.setter
    def flow_fraction_for_surface_20(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_20`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_20`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_20`')

        self._data["Flow Fraction for Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `surface_21_name`

        Args:
            value (str): value for IDD Field `surface_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')

        self._data["Surface 21 Name"] = value

    @property
    def flow_fraction_for_surface_21(self):
        """Get flow_fraction_for_surface_21

        Returns:
            float: the value of `flow_fraction_for_surface_21` or None if not set
        """
        return self._data["Flow Fraction for Surface 21"]

    @flow_fraction_for_surface_21.setter
    def flow_fraction_for_surface_21(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_21`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_21`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_21`')

        self._data["Flow Fraction for Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `surface_22_name`

        Args:
            value (str): value for IDD Field `surface_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')

        self._data["Surface 22 Name"] = value

    @property
    def flow_fraction_for_surface_22(self):
        """Get flow_fraction_for_surface_22

        Returns:
            float: the value of `flow_fraction_for_surface_22` or None if not set
        """
        return self._data["Flow Fraction for Surface 22"]

    @flow_fraction_for_surface_22.setter
    def flow_fraction_for_surface_22(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_22`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_22`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_22`')

        self._data["Flow Fraction for Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `surface_23_name`

        Args:
            value (str): value for IDD Field `surface_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')

        self._data["Surface 23 Name"] = value

    @property
    def flow_fraction_for_surface_23(self):
        """Get flow_fraction_for_surface_23

        Returns:
            float: the value of `flow_fraction_for_surface_23` or None if not set
        """
        return self._data["Flow Fraction for Surface 23"]

    @flow_fraction_for_surface_23.setter
    def flow_fraction_for_surface_23(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_23`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_23`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_23`')

        self._data["Flow Fraction for Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `surface_24_name`

        Args:
            value (str): value for IDD Field `surface_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')

        self._data["Surface 24 Name"] = value

    @property
    def flow_fraction_for_surface_24(self):
        """Get flow_fraction_for_surface_24

        Returns:
            float: the value of `flow_fraction_for_surface_24` or None if not set
        """
        return self._data["Flow Fraction for Surface 24"]

    @flow_fraction_for_surface_24.setter
    def flow_fraction_for_surface_24(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_24`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_24`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_24`')

        self._data["Flow Fraction for Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `surface_25_name`

        Args:
            value (str): value for IDD Field `surface_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')

        self._data["Surface 25 Name"] = value

    @property
    def flow_fraction_for_surface_25(self):
        """Get flow_fraction_for_surface_25

        Returns:
            float: the value of `flow_fraction_for_surface_25` or None if not set
        """
        return self._data["Flow Fraction for Surface 25"]

    @flow_fraction_for_surface_25.setter
    def flow_fraction_for_surface_25(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_25`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_25`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_25`')

        self._data["Flow Fraction for Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `surface_26_name`

        Args:
            value (str): value for IDD Field `surface_26_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')

        self._data["Surface 26 Name"] = value

    @property
    def flow_fraction_for_surface_26(self):
        """Get flow_fraction_for_surface_26

        Returns:
            float: the value of `flow_fraction_for_surface_26` or None if not set
        """
        return self._data["Flow Fraction for Surface 26"]

    @flow_fraction_for_surface_26.setter
    def flow_fraction_for_surface_26(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_26`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_26`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_26`')

        self._data["Flow Fraction for Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `surface_27_name`

        Args:
            value (str): value for IDD Field `surface_27_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')

        self._data["Surface 27 Name"] = value

    @property
    def flow_fraction_for_surface_27(self):
        """Get flow_fraction_for_surface_27

        Returns:
            float: the value of `flow_fraction_for_surface_27` or None if not set
        """
        return self._data["Flow Fraction for Surface 27"]

    @flow_fraction_for_surface_27.setter
    def flow_fraction_for_surface_27(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_27`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_27`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_27`')

        self._data["Flow Fraction for Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `surface_28_name`

        Args:
            value (str): value for IDD Field `surface_28_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')

        self._data["Surface 28 Name"] = value

    @property
    def flow_fraction_for_surface_28(self):
        """Get flow_fraction_for_surface_28

        Returns:
            float: the value of `flow_fraction_for_surface_28` or None if not set
        """
        return self._data["Flow Fraction for Surface 28"]

    @flow_fraction_for_surface_28.setter
    def flow_fraction_for_surface_28(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_28`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_28`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_28`')

        self._data["Flow Fraction for Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `surface_29_name`

        Args:
            value (str): value for IDD Field `surface_29_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')

        self._data["Surface 29 Name"] = value

    @property
    def flow_fraction_for_surface_29(self):
        """Get flow_fraction_for_surface_29

        Returns:
            float: the value of `flow_fraction_for_surface_29` or None if not set
        """
        return self._data["Flow Fraction for Surface 29"]

    @flow_fraction_for_surface_29.setter
    def flow_fraction_for_surface_29(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_29`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_29`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_29`')

        self._data["Flow Fraction for Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `surface_30_name`

        Args:
            value (str): value for IDD Field `surface_30_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')

        self._data["Surface 30 Name"] = value

    @property
    def flow_fraction_for_surface_30(self):
        """Get flow_fraction_for_surface_30

        Returns:
            float: the value of `flow_fraction_for_surface_30` or None if not set
        """
        return self._data["Flow Fraction for Surface 30"]

    @flow_fraction_for_surface_30.setter
    def flow_fraction_for_surface_30(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_30`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_30`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_30`')

        self._data["Flow Fraction for Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `surface_31_name`

        Args:
            value (str): value for IDD Field `surface_31_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')

        self._data["Surface 31 Name"] = value

    @property
    def flow_fraction_for_surface_31(self):
        """Get flow_fraction_for_surface_31

        Returns:
            float: the value of `flow_fraction_for_surface_31` or None if not set
        """
        return self._data["Flow Fraction for Surface 31"]

    @flow_fraction_for_surface_31.setter
    def flow_fraction_for_surface_31(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_31`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_31`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_31`')

        self._data["Flow Fraction for Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `surface_32_name`

        Args:
            value (str): value for IDD Field `surface_32_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')

        self._data["Surface 32 Name"] = value

    @property
    def flow_fraction_for_surface_32(self):
        """Get flow_fraction_for_surface_32

        Returns:
            float: the value of `flow_fraction_for_surface_32` or None if not set
        """
        return self._data["Flow Fraction for Surface 32"]

    @flow_fraction_for_surface_32.setter
    def flow_fraction_for_surface_32(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_32`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_32`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_32`')

        self._data["Flow Fraction for Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `surface_33_name`

        Args:
            value (str): value for IDD Field `surface_33_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')

        self._data["Surface 33 Name"] = value

    @property
    def flow_fraction_for_surface_33(self):
        """Get flow_fraction_for_surface_33

        Returns:
            float: the value of `flow_fraction_for_surface_33` or None if not set
        """
        return self._data["Flow Fraction for Surface 33"]

    @flow_fraction_for_surface_33.setter
    def flow_fraction_for_surface_33(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_33`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_33`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_33`')

        self._data["Flow Fraction for Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `surface_34_name`

        Args:
            value (str): value for IDD Field `surface_34_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')

        self._data["Surface 34 Name"] = value

    @property
    def flow_fraction_for_surface_34(self):
        """Get flow_fraction_for_surface_34

        Returns:
            float: the value of `flow_fraction_for_surface_34` or None if not set
        """
        return self._data["Flow Fraction for Surface 34"]

    @flow_fraction_for_surface_34.setter
    def flow_fraction_for_surface_34(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_34`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_34`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_34`')

        self._data["Flow Fraction for Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `surface_35_name`

        Args:
            value (str): value for IDD Field `surface_35_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')

        self._data["Surface 35 Name"] = value

    @property
    def flow_fraction_for_surface_35(self):
        """Get flow_fraction_for_surface_35

        Returns:
            float: the value of `flow_fraction_for_surface_35` or None if not set
        """
        return self._data["Flow Fraction for Surface 35"]

    @flow_fraction_for_surface_35.setter
    def flow_fraction_for_surface_35(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_35`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_35`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_35`')

        self._data["Flow Fraction for Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `surface_36_name`

        Args:
            value (str): value for IDD Field `surface_36_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')

        self._data["Surface 36 Name"] = value

    @property
    def flow_fraction_for_surface_36(self):
        """Get flow_fraction_for_surface_36

        Returns:
            float: the value of `flow_fraction_for_surface_36` or None if not set
        """
        return self._data["Flow Fraction for Surface 36"]

    @flow_fraction_for_surface_36.setter
    def flow_fraction_for_surface_36(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_36`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_36`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_36`')

        self._data["Flow Fraction for Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `surface_37_name`

        Args:
            value (str): value for IDD Field `surface_37_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')

        self._data["Surface 37 Name"] = value

    @property
    def flow_fraction_for_surface_37(self):
        """Get flow_fraction_for_surface_37

        Returns:
            float: the value of `flow_fraction_for_surface_37` or None if not set
        """
        return self._data["Flow Fraction for Surface 37"]

    @flow_fraction_for_surface_37.setter
    def flow_fraction_for_surface_37(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_37`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_37`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_37`')

        self._data["Flow Fraction for Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `surface_38_name`

        Args:
            value (str): value for IDD Field `surface_38_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')

        self._data["Surface 38 Name"] = value

    @property
    def flow_fraction_for_surface_38(self):
        """Get flow_fraction_for_surface_38

        Returns:
            float: the value of `flow_fraction_for_surface_38` or None if not set
        """
        return self._data["Flow Fraction for Surface 38"]

    @flow_fraction_for_surface_38.setter
    def flow_fraction_for_surface_38(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_38`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_38`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_38`')

        self._data["Flow Fraction for Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `surface_39_name`

        Args:
            value (str): value for IDD Field `surface_39_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')

        self._data["Surface 39 Name"] = value

    @property
    def flow_fraction_for_surface_39(self):
        """Get flow_fraction_for_surface_39

        Returns:
            float: the value of `flow_fraction_for_surface_39` or None if not set
        """
        return self._data["Flow Fraction for Surface 39"]

    @flow_fraction_for_surface_39.setter
    def flow_fraction_for_surface_39(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_39`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_39`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_39`')

        self._data["Flow Fraction for Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `surface_40_name`

        Args:
            value (str): value for IDD Field `surface_40_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')

        self._data["Surface 40 Name"] = value

    @property
    def flow_fraction_for_surface_40(self):
        """Get flow_fraction_for_surface_40

        Returns:
            float: the value of `flow_fraction_for_surface_40` or None if not set
        """
        return self._data["Flow Fraction for Surface 40"]

    @flow_fraction_for_surface_40.setter
    def flow_fraction_for_surface_40(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_40`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_40`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_40`')

        self._data["Flow Fraction for Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `surface_41_name`

        Args:
            value (str): value for IDD Field `surface_41_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')

        self._data["Surface 41 Name"] = value

    @property
    def flow_fraction_for_surface_41(self):
        """Get flow_fraction_for_surface_41

        Returns:
            float: the value of `flow_fraction_for_surface_41` or None if not set
        """
        return self._data["Flow Fraction for Surface 41"]

    @flow_fraction_for_surface_41.setter
    def flow_fraction_for_surface_41(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_41`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_41`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_41`')

        self._data["Flow Fraction for Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `surface_42_name`

        Args:
            value (str): value for IDD Field `surface_42_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')

        self._data["Surface 42 Name"] = value

    @property
    def flow_fraction_for_surface_42(self):
        """Get flow_fraction_for_surface_42

        Returns:
            float: the value of `flow_fraction_for_surface_42` or None if not set
        """
        return self._data["Flow Fraction for Surface 42"]

    @flow_fraction_for_surface_42.setter
    def flow_fraction_for_surface_42(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_42`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_42`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_42`')

        self._data["Flow Fraction for Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `surface_43_name`

        Args:
            value (str): value for IDD Field `surface_43_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')

        self._data["Surface 43 Name"] = value

    @property
    def flow_fraction_for_surface_43(self):
        """Get flow_fraction_for_surface_43

        Returns:
            float: the value of `flow_fraction_for_surface_43` or None if not set
        """
        return self._data["Flow Fraction for Surface 43"]

    @flow_fraction_for_surface_43.setter
    def flow_fraction_for_surface_43(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_43`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_43`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_43`')

        self._data["Flow Fraction for Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `surface_44_name`

        Args:
            value (str): value for IDD Field `surface_44_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')

        self._data["Surface 44 Name"] = value

    @property
    def flow_fraction_for_surface_44(self):
        """Get flow_fraction_for_surface_44

        Returns:
            float: the value of `flow_fraction_for_surface_44` or None if not set
        """
        return self._data["Flow Fraction for Surface 44"]

    @flow_fraction_for_surface_44.setter
    def flow_fraction_for_surface_44(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_44`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_44`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_44`')

        self._data["Flow Fraction for Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `surface_45_name`

        Args:
            value (str): value for IDD Field `surface_45_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')

        self._data["Surface 45 Name"] = value

    @property
    def flow_fraction_for_surface_45(self):
        """Get flow_fraction_for_surface_45

        Returns:
            float: the value of `flow_fraction_for_surface_45` or None if not set
        """
        return self._data["Flow Fraction for Surface 45"]

    @flow_fraction_for_surface_45.setter
    def flow_fraction_for_surface_45(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_45`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_45`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_45`')

        self._data["Flow Fraction for Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `surface_46_name`

        Args:
            value (str): value for IDD Field `surface_46_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')

        self._data["Surface 46 Name"] = value

    @property
    def flow_fraction_for_surface_46(self):
        """Get flow_fraction_for_surface_46

        Returns:
            float: the value of `flow_fraction_for_surface_46` or None if not set
        """
        return self._data["Flow Fraction for Surface 46"]

    @flow_fraction_for_surface_46.setter
    def flow_fraction_for_surface_46(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_46`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_46`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_46`')

        self._data["Flow Fraction for Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `surface_47_name`

        Args:
            value (str): value for IDD Field `surface_47_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')

        self._data["Surface 47 Name"] = value

    @property
    def flow_fraction_for_surface_47(self):
        """Get flow_fraction_for_surface_47

        Returns:
            float: the value of `flow_fraction_for_surface_47` or None if not set
        """
        return self._data["Flow Fraction for Surface 47"]

    @flow_fraction_for_surface_47.setter
    def flow_fraction_for_surface_47(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_47`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_47`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_47`')

        self._data["Flow Fraction for Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `surface_48_name`

        Args:
            value (str): value for IDD Field `surface_48_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')

        self._data["Surface 48 Name"] = value

    @property
    def flow_fraction_for_surface_48(self):
        """Get flow_fraction_for_surface_48

        Returns:
            float: the value of `flow_fraction_for_surface_48` or None if not set
        """
        return self._data["Flow Fraction for Surface 48"]

    @flow_fraction_for_surface_48.setter
    def flow_fraction_for_surface_48(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_48`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_48`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_48`')

        self._data["Flow Fraction for Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `surface_49_name`

        Args:
            value (str): value for IDD Field `surface_49_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')

        self._data["Surface 49 Name"] = value

    @property
    def flow_fraction_for_surface_49(self):
        """Get flow_fraction_for_surface_49

        Returns:
            float: the value of `flow_fraction_for_surface_49` or None if not set
        """
        return self._data["Flow Fraction for Surface 49"]

    @flow_fraction_for_surface_49.setter
    def flow_fraction_for_surface_49(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_49`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_49`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_49`')

        self._data["Flow Fraction for Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `surface_50_name`

        Args:
            value (str): value for IDD Field `surface_50_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')

        self._data["Surface 50 Name"] = value

    @property
    def flow_fraction_for_surface_50(self):
        """Get flow_fraction_for_surface_50

        Returns:
            float: the value of `flow_fraction_for_surface_50` or None if not set
        """
        return self._data["Flow Fraction for Surface 50"]

    @flow_fraction_for_surface_50.setter
    def flow_fraction_for_surface_50(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_50`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_50`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_50`')

        self._data["Flow Fraction for Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `surface_51_name`

        Args:
            value (str): value for IDD Field `surface_51_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')

        self._data["Surface 51 Name"] = value

    @property
    def flow_fraction_for_surface_51(self):
        """Get flow_fraction_for_surface_51

        Returns:
            float: the value of `flow_fraction_for_surface_51` or None if not set
        """
        return self._data["Flow Fraction for Surface 51"]

    @flow_fraction_for_surface_51.setter
    def flow_fraction_for_surface_51(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_51`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_51`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_51`')

        self._data["Flow Fraction for Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `surface_52_name`

        Args:
            value (str): value for IDD Field `surface_52_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')

        self._data["Surface 52 Name"] = value

    @property
    def flow_fraction_for_surface_52(self):
        """Get flow_fraction_for_surface_52

        Returns:
            float: the value of `flow_fraction_for_surface_52` or None if not set
        """
        return self._data["Flow Fraction for Surface 52"]

    @flow_fraction_for_surface_52.setter
    def flow_fraction_for_surface_52(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_52`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_52`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_52`')

        self._data["Flow Fraction for Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `surface_53_name`

        Args:
            value (str): value for IDD Field `surface_53_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')

        self._data["Surface 53 Name"] = value

    @property
    def flow_fraction_for_surface_53(self):
        """Get flow_fraction_for_surface_53

        Returns:
            float: the value of `flow_fraction_for_surface_53` or None if not set
        """
        return self._data["Flow Fraction for Surface 53"]

    @flow_fraction_for_surface_53.setter
    def flow_fraction_for_surface_53(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_53`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_53`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_53`')

        self._data["Flow Fraction for Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `surface_54_name`

        Args:
            value (str): value for IDD Field `surface_54_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')

        self._data["Surface 54 Name"] = value

    @property
    def flow_fraction_for_surface_54(self):
        """Get flow_fraction_for_surface_54

        Returns:
            float: the value of `flow_fraction_for_surface_54` or None if not set
        """
        return self._data["Flow Fraction for Surface 54"]

    @flow_fraction_for_surface_54.setter
    def flow_fraction_for_surface_54(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_54`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_54`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_54`')

        self._data["Flow Fraction for Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `surface_55_name`

        Args:
            value (str): value for IDD Field `surface_55_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')

        self._data["Surface 55 Name"] = value

    @property
    def flow_fraction_for_surface_55(self):
        """Get flow_fraction_for_surface_55

        Returns:
            float: the value of `flow_fraction_for_surface_55` or None if not set
        """
        return self._data["Flow Fraction for Surface 55"]

    @flow_fraction_for_surface_55.setter
    def flow_fraction_for_surface_55(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_55`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_55`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_55`')

        self._data["Flow Fraction for Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `surface_56_name`

        Args:
            value (str): value for IDD Field `surface_56_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')

        self._data["Surface 56 Name"] = value

    @property
    def flow_fraction_for_surface_56(self):
        """Get flow_fraction_for_surface_56

        Returns:
            float: the value of `flow_fraction_for_surface_56` or None if not set
        """
        return self._data["Flow Fraction for Surface 56"]

    @flow_fraction_for_surface_56.setter
    def flow_fraction_for_surface_56(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_56`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_56`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_56`')

        self._data["Flow Fraction for Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `surface_57_name`

        Args:
            value (str): value for IDD Field `surface_57_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')

        self._data["Surface 57 Name"] = value

    @property
    def flow_fraction_for_surface_57(self):
        """Get flow_fraction_for_surface_57

        Returns:
            float: the value of `flow_fraction_for_surface_57` or None if not set
        """
        return self._data["Flow Fraction for Surface 57"]

    @flow_fraction_for_surface_57.setter
    def flow_fraction_for_surface_57(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_57`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_57`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_57`')

        self._data["Flow Fraction for Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `surface_58_name`

        Args:
            value (str): value for IDD Field `surface_58_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')

        self._data["Surface 58 Name"] = value

    @property
    def flow_fraction_for_surface_58(self):
        """Get flow_fraction_for_surface_58

        Returns:
            float: the value of `flow_fraction_for_surface_58` or None if not set
        """
        return self._data["Flow Fraction for Surface 58"]

    @flow_fraction_for_surface_58.setter
    def flow_fraction_for_surface_58(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_58`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_58`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_58`')

        self._data["Flow Fraction for Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `surface_59_name`

        Args:
            value (str): value for IDD Field `surface_59_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')

        self._data["Surface 59 Name"] = value

    @property
    def flow_fraction_for_surface_59(self):
        """Get flow_fraction_for_surface_59

        Returns:
            float: the value of `flow_fraction_for_surface_59` or None if not set
        """
        return self._data["Flow Fraction for Surface 59"]

    @flow_fraction_for_surface_59.setter
    def flow_fraction_for_surface_59(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_59`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_59`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_59`')

        self._data["Flow Fraction for Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `surface_60_name`

        Args:
            value (str): value for IDD Field `surface_60_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')

        self._data["Surface 60 Name"] = value

    @property
    def flow_fraction_for_surface_60(self):
        """Get flow_fraction_for_surface_60

        Returns:
            float: the value of `flow_fraction_for_surface_60` or None if not set
        """
        return self._data["Flow Fraction for Surface 60"]

    @flow_fraction_for_surface_60.setter
    def flow_fraction_for_surface_60(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_60`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_60`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_60`')

        self._data["Flow Fraction for Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `surface_61_name`

        Args:
            value (str): value for IDD Field `surface_61_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')

        self._data["Surface 61 Name"] = value

    @property
    def flow_fraction_for_surface_61(self):
        """Get flow_fraction_for_surface_61

        Returns:
            float: the value of `flow_fraction_for_surface_61` or None if not set
        """
        return self._data["Flow Fraction for Surface 61"]

    @flow_fraction_for_surface_61.setter
    def flow_fraction_for_surface_61(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_61`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_61`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_61`')

        self._data["Flow Fraction for Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `surface_62_name`

        Args:
            value (str): value for IDD Field `surface_62_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')

        self._data["Surface 62 Name"] = value

    @property
    def flow_fraction_for_surface_62(self):
        """Get flow_fraction_for_surface_62

        Returns:
            float: the value of `flow_fraction_for_surface_62` or None if not set
        """
        return self._data["Flow Fraction for Surface 62"]

    @flow_fraction_for_surface_62.setter
    def flow_fraction_for_surface_62(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_62`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_62`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_62`')

        self._data["Flow Fraction for Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `surface_63_name`

        Args:
            value (str): value for IDD Field `surface_63_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')

        self._data["Surface 63 Name"] = value

    @property
    def flow_fraction_for_surface_63(self):
        """Get flow_fraction_for_surface_63

        Returns:
            float: the value of `flow_fraction_for_surface_63` or None if not set
        """
        return self._data["Flow Fraction for Surface 63"]

    @flow_fraction_for_surface_63.setter
    def flow_fraction_for_surface_63(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_63`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_63`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_63`')

        self._data["Flow Fraction for Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `surface_64_name`

        Args:
            value (str): value for IDD Field `surface_64_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')

        self._data["Surface 64 Name"] = value

    @property
    def flow_fraction_for_surface_64(self):
        """Get flow_fraction_for_surface_64

        Returns:
            float: the value of `flow_fraction_for_surface_64` or None if not set
        """
        return self._data["Flow Fraction for Surface 64"]

    @flow_fraction_for_surface_64.setter
    def flow_fraction_for_surface_64(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_64`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_64`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_64`')

        self._data["Flow Fraction for Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `surface_65_name`

        Args:
            value (str): value for IDD Field `surface_65_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')

        self._data["Surface 65 Name"] = value

    @property
    def flow_fraction_for_surface_65(self):
        """Get flow_fraction_for_surface_65

        Returns:
            float: the value of `flow_fraction_for_surface_65` or None if not set
        """
        return self._data["Flow Fraction for Surface 65"]

    @flow_fraction_for_surface_65.setter
    def flow_fraction_for_surface_65(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_65`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_65`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_65`')

        self._data["Flow Fraction for Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `surface_66_name`

        Args:
            value (str): value for IDD Field `surface_66_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')

        self._data["Surface 66 Name"] = value

    @property
    def flow_fraction_for_surface_66(self):
        """Get flow_fraction_for_surface_66

        Returns:
            float: the value of `flow_fraction_for_surface_66` or None if not set
        """
        return self._data["Flow Fraction for Surface 66"]

    @flow_fraction_for_surface_66.setter
    def flow_fraction_for_surface_66(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_66`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_66`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_66`')

        self._data["Flow Fraction for Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `surface_67_name`

        Args:
            value (str): value for IDD Field `surface_67_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')

        self._data["Surface 67 Name"] = value

    @property
    def flow_fraction_for_surface_67(self):
        """Get flow_fraction_for_surface_67

        Returns:
            float: the value of `flow_fraction_for_surface_67` or None if not set
        """
        return self._data["Flow Fraction for Surface 67"]

    @flow_fraction_for_surface_67.setter
    def flow_fraction_for_surface_67(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_67`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_67`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_67`')

        self._data["Flow Fraction for Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `surface_68_name`

        Args:
            value (str): value for IDD Field `surface_68_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')

        self._data["Surface 68 Name"] = value

    @property
    def flow_fraction_for_surface_68(self):
        """Get flow_fraction_for_surface_68

        Returns:
            float: the value of `flow_fraction_for_surface_68` or None if not set
        """
        return self._data["Flow Fraction for Surface 68"]

    @flow_fraction_for_surface_68.setter
    def flow_fraction_for_surface_68(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_68`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_68`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_68`')

        self._data["Flow Fraction for Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `surface_69_name`

        Args:
            value (str): value for IDD Field `surface_69_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')

        self._data["Surface 69 Name"] = value

    @property
    def flow_fraction_for_surface_69(self):
        """Get flow_fraction_for_surface_69

        Returns:
            float: the value of `flow_fraction_for_surface_69` or None if not set
        """
        return self._data["Flow Fraction for Surface 69"]

    @flow_fraction_for_surface_69.setter
    def flow_fraction_for_surface_69(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_69`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_69`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_69`')

        self._data["Flow Fraction for Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `surface_70_name`

        Args:
            value (str): value for IDD Field `surface_70_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')

        self._data["Surface 70 Name"] = value

    @property
    def flow_fraction_for_surface_70(self):
        """Get flow_fraction_for_surface_70

        Returns:
            float: the value of `flow_fraction_for_surface_70` or None if not set
        """
        return self._data["Flow Fraction for Surface 70"]

    @flow_fraction_for_surface_70.setter
    def flow_fraction_for_surface_70(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_70`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_70`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_70`')

        self._data["Flow Fraction for Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `surface_71_name`

        Args:
            value (str): value for IDD Field `surface_71_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')

        self._data["Surface 71 Name"] = value

    @property
    def flow_fraction_for_surface_71(self):
        """Get flow_fraction_for_surface_71

        Returns:
            float: the value of `flow_fraction_for_surface_71` or None if not set
        """
        return self._data["Flow Fraction for Surface 71"]

    @flow_fraction_for_surface_71.setter
    def flow_fraction_for_surface_71(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_71`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_71`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_71`')

        self._data["Flow Fraction for Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `surface_72_name`

        Args:
            value (str): value for IDD Field `surface_72_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')

        self._data["Surface 72 Name"] = value

    @property
    def flow_fraction_for_surface_72(self):
        """Get flow_fraction_for_surface_72

        Returns:
            float: the value of `flow_fraction_for_surface_72` or None if not set
        """
        return self._data["Flow Fraction for Surface 72"]

    @flow_fraction_for_surface_72.setter
    def flow_fraction_for_surface_72(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_72`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_72`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_72`')

        self._data["Flow Fraction for Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `surface_73_name`

        Args:
            value (str): value for IDD Field `surface_73_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')

        self._data["Surface 73 Name"] = value

    @property
    def flow_fraction_for_surface_73(self):
        """Get flow_fraction_for_surface_73

        Returns:
            float: the value of `flow_fraction_for_surface_73` or None if not set
        """
        return self._data["Flow Fraction for Surface 73"]

    @flow_fraction_for_surface_73.setter
    def flow_fraction_for_surface_73(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_73`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_73`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_73`')

        self._data["Flow Fraction for Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `surface_74_name`

        Args:
            value (str): value for IDD Field `surface_74_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')

        self._data["Surface 74 Name"] = value

    @property
    def flow_fraction_for_surface_74(self):
        """Get flow_fraction_for_surface_74

        Returns:
            float: the value of `flow_fraction_for_surface_74` or None if not set
        """
        return self._data["Flow Fraction for Surface 74"]

    @flow_fraction_for_surface_74.setter
    def flow_fraction_for_surface_74(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_74`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_74`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_74`')

        self._data["Flow Fraction for Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `surface_75_name`

        Args:
            value (str): value for IDD Field `surface_75_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')

        self._data["Surface 75 Name"] = value

    @property
    def flow_fraction_for_surface_75(self):
        """Get flow_fraction_for_surface_75

        Returns:
            float: the value of `flow_fraction_for_surface_75` or None if not set
        """
        return self._data["Flow Fraction for Surface 75"]

    @flow_fraction_for_surface_75.setter
    def flow_fraction_for_surface_75(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_75`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_75`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_75`')

        self._data["Flow Fraction for Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `surface_76_name`

        Args:
            value (str): value for IDD Field `surface_76_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')

        self._data["Surface 76 Name"] = value

    @property
    def flow_fraction_for_surface_76(self):
        """Get flow_fraction_for_surface_76

        Returns:
            float: the value of `flow_fraction_for_surface_76` or None if not set
        """
        return self._data["Flow Fraction for Surface 76"]

    @flow_fraction_for_surface_76.setter
    def flow_fraction_for_surface_76(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_76`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_76`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_76`')

        self._data["Flow Fraction for Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `surface_77_name`

        Args:
            value (str): value for IDD Field `surface_77_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')

        self._data["Surface 77 Name"] = value

    @property
    def flow_fraction_for_surface_77(self):
        """Get flow_fraction_for_surface_77

        Returns:
            float: the value of `flow_fraction_for_surface_77` or None if not set
        """
        return self._data["Flow Fraction for Surface 77"]

    @flow_fraction_for_surface_77.setter
    def flow_fraction_for_surface_77(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_77`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_77`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_77`')

        self._data["Flow Fraction for Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `surface_78_name`

        Args:
            value (str): value for IDD Field `surface_78_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')

        self._data["Surface 78 Name"] = value

    @property
    def flow_fraction_for_surface_78(self):
        """Get flow_fraction_for_surface_78

        Returns:
            float: the value of `flow_fraction_for_surface_78` or None if not set
        """
        return self._data["Flow Fraction for Surface 78"]

    @flow_fraction_for_surface_78.setter
    def flow_fraction_for_surface_78(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_78`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_78`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_78`')

        self._data["Flow Fraction for Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `surface_79_name`

        Args:
            value (str): value for IDD Field `surface_79_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')

        self._data["Surface 79 Name"] = value

    @property
    def flow_fraction_for_surface_79(self):
        """Get flow_fraction_for_surface_79

        Returns:
            float: the value of `flow_fraction_for_surface_79` or None if not set
        """
        return self._data["Flow Fraction for Surface 79"]

    @flow_fraction_for_surface_79.setter
    def flow_fraction_for_surface_79(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_79`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_79`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_79`')

        self._data["Flow Fraction for Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `surface_80_name`

        Args:
            value (str): value for IDD Field `surface_80_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')

        self._data["Surface 80 Name"] = value

    @property
    def flow_fraction_for_surface_80(self):
        """Get flow_fraction_for_surface_80

        Returns:
            float: the value of `flow_fraction_for_surface_80` or None if not set
        """
        return self._data["Flow Fraction for Surface 80"]

    @flow_fraction_for_surface_80.setter
    def flow_fraction_for_surface_80(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_80`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_80`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_80`')

        self._data["Flow Fraction for Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `surface_81_name`

        Args:
            value (str): value for IDD Field `surface_81_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')

        self._data["Surface 81 Name"] = value

    @property
    def flow_fraction_for_surface_81(self):
        """Get flow_fraction_for_surface_81

        Returns:
            float: the value of `flow_fraction_for_surface_81` or None if not set
        """
        return self._data["Flow Fraction for Surface 81"]

    @flow_fraction_for_surface_81.setter
    def flow_fraction_for_surface_81(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_81`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_81`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_81`')

        self._data["Flow Fraction for Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `surface_82_name`

        Args:
            value (str): value for IDD Field `surface_82_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')

        self._data["Surface 82 Name"] = value

    @property
    def flow_fraction_for_surface_82(self):
        """Get flow_fraction_for_surface_82

        Returns:
            float: the value of `flow_fraction_for_surface_82` or None if not set
        """
        return self._data["Flow Fraction for Surface 82"]

    @flow_fraction_for_surface_82.setter
    def flow_fraction_for_surface_82(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_82`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_82`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_82`')

        self._data["Flow Fraction for Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `surface_83_name`

        Args:
            value (str): value for IDD Field `surface_83_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')

        self._data["Surface 83 Name"] = value

    @property
    def flow_fraction_for_surface_83(self):
        """Get flow_fraction_for_surface_83

        Returns:
            float: the value of `flow_fraction_for_surface_83` or None if not set
        """
        return self._data["Flow Fraction for Surface 83"]

    @flow_fraction_for_surface_83.setter
    def flow_fraction_for_surface_83(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_83`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_83`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_83`')

        self._data["Flow Fraction for Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `surface_84_name`

        Args:
            value (str): value for IDD Field `surface_84_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')

        self._data["Surface 84 Name"] = value

    @property
    def flow_fraction_for_surface_84(self):
        """Get flow_fraction_for_surface_84

        Returns:
            float: the value of `flow_fraction_for_surface_84` or None if not set
        """
        return self._data["Flow Fraction for Surface 84"]

    @flow_fraction_for_surface_84.setter
    def flow_fraction_for_surface_84(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_84`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_84`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_84`')

        self._data["Flow Fraction for Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `surface_85_name`

        Args:
            value (str): value for IDD Field `surface_85_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')

        self._data["Surface 85 Name"] = value

    @property
    def flow_fraction_for_surface_85(self):
        """Get flow_fraction_for_surface_85

        Returns:
            float: the value of `flow_fraction_for_surface_85` or None if not set
        """
        return self._data["Flow Fraction for Surface 85"]

    @flow_fraction_for_surface_85.setter
    def flow_fraction_for_surface_85(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_85`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_85`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_85`')

        self._data["Flow Fraction for Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `surface_86_name`

        Args:
            value (str): value for IDD Field `surface_86_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')

        self._data["Surface 86 Name"] = value

    @property
    def flow_fraction_for_surface_86(self):
        """Get flow_fraction_for_surface_86

        Returns:
            float: the value of `flow_fraction_for_surface_86` or None if not set
        """
        return self._data["Flow Fraction for Surface 86"]

    @flow_fraction_for_surface_86.setter
    def flow_fraction_for_surface_86(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_86`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_86`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_86`')

        self._data["Flow Fraction for Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `surface_87_name`

        Args:
            value (str): value for IDD Field `surface_87_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')

        self._data["Surface 87 Name"] = value

    @property
    def flow_fraction_for_surface_87(self):
        """Get flow_fraction_for_surface_87

        Returns:
            float: the value of `flow_fraction_for_surface_87` or None if not set
        """
        return self._data["Flow Fraction for Surface 87"]

    @flow_fraction_for_surface_87.setter
    def flow_fraction_for_surface_87(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_87`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_87`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_87`')

        self._data["Flow Fraction for Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `surface_88_name`

        Args:
            value (str): value for IDD Field `surface_88_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')

        self._data["Surface 88 Name"] = value

    @property
    def flow_fraction_for_surface_88(self):
        """Get flow_fraction_for_surface_88

        Returns:
            float: the value of `flow_fraction_for_surface_88` or None if not set
        """
        return self._data["Flow Fraction for Surface 88"]

    @flow_fraction_for_surface_88.setter
    def flow_fraction_for_surface_88(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_88`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_88`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_88`')

        self._data["Flow Fraction for Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `surface_89_name`

        Args:
            value (str): value for IDD Field `surface_89_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')

        self._data["Surface 89 Name"] = value

    @property
    def flow_fraction_for_surface_89(self):
        """Get flow_fraction_for_surface_89

        Returns:
            float: the value of `flow_fraction_for_surface_89` or None if not set
        """
        return self._data["Flow Fraction for Surface 89"]

    @flow_fraction_for_surface_89.setter
    def flow_fraction_for_surface_89(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_89`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_89`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_89`')

        self._data["Flow Fraction for Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `surface_90_name`

        Args:
            value (str): value for IDD Field `surface_90_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')

        self._data["Surface 90 Name"] = value

    @property
    def flow_fraction_for_surface_90(self):
        """Get flow_fraction_for_surface_90

        Returns:
            float: the value of `flow_fraction_for_surface_90` or None if not set
        """
        return self._data["Flow Fraction for Surface 90"]

    @flow_fraction_for_surface_90.setter
    def flow_fraction_for_surface_90(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_90`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_90`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_90`')

        self._data["Flow Fraction for Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `surface_91_name`

        Args:
            value (str): value for IDD Field `surface_91_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')

        self._data["Surface 91 Name"] = value

    @property
    def flow_fraction_for_surface_91(self):
        """Get flow_fraction_for_surface_91

        Returns:
            float: the value of `flow_fraction_for_surface_91` or None if not set
        """
        return self._data["Flow Fraction for Surface 91"]

    @flow_fraction_for_surface_91.setter
    def flow_fraction_for_surface_91(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_91`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_91`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_91`')

        self._data["Flow Fraction for Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `surface_92_name`

        Args:
            value (str): value for IDD Field `surface_92_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')

        self._data["Surface 92 Name"] = value

    @property
    def flow_fraction_for_surface_92(self):
        """Get flow_fraction_for_surface_92

        Returns:
            float: the value of `flow_fraction_for_surface_92` or None if not set
        """
        return self._data["Flow Fraction for Surface 92"]

    @flow_fraction_for_surface_92.setter
    def flow_fraction_for_surface_92(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_92`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_92`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_92`')

        self._data["Flow Fraction for Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `surface_93_name`

        Args:
            value (str): value for IDD Field `surface_93_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')

        self._data["Surface 93 Name"] = value

    @property
    def flow_fraction_for_surface_93(self):
        """Get flow_fraction_for_surface_93

        Returns:
            float: the value of `flow_fraction_for_surface_93` or None if not set
        """
        return self._data["Flow Fraction for Surface 93"]

    @flow_fraction_for_surface_93.setter
    def flow_fraction_for_surface_93(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_93`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_93`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_93`')

        self._data["Flow Fraction for Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `surface_94_name`

        Args:
            value (str): value for IDD Field `surface_94_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')

        self._data["Surface 94 Name"] = value

    @property
    def flow_fraction_for_surface_94(self):
        """Get flow_fraction_for_surface_94

        Returns:
            float: the value of `flow_fraction_for_surface_94` or None if not set
        """
        return self._data["Flow Fraction for Surface 94"]

    @flow_fraction_for_surface_94.setter
    def flow_fraction_for_surface_94(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_94`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_94`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_94`')

        self._data["Flow Fraction for Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `surface_95_name`

        Args:
            value (str): value for IDD Field `surface_95_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')

        self._data["Surface 95 Name"] = value

    @property
    def flow_fraction_for_surface_95(self):
        """Get flow_fraction_for_surface_95

        Returns:
            float: the value of `flow_fraction_for_surface_95` or None if not set
        """
        return self._data["Flow Fraction for Surface 95"]

    @flow_fraction_for_surface_95.setter
    def flow_fraction_for_surface_95(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_95`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_95`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_95`')

        self._data["Flow Fraction for Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `surface_96_name`

        Args:
            value (str): value for IDD Field `surface_96_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')

        self._data["Surface 96 Name"] = value

    @property
    def flow_fraction_for_surface_96(self):
        """Get flow_fraction_for_surface_96

        Returns:
            float: the value of `flow_fraction_for_surface_96` or None if not set
        """
        return self._data["Flow Fraction for Surface 96"]

    @flow_fraction_for_surface_96.setter
    def flow_fraction_for_surface_96(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_96`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_96`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_96`')

        self._data["Flow Fraction for Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `surface_97_name`

        Args:
            value (str): value for IDD Field `surface_97_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')

        self._data["Surface 97 Name"] = value

    @property
    def flow_fraction_for_surface_97(self):
        """Get flow_fraction_for_surface_97

        Returns:
            float: the value of `flow_fraction_for_surface_97` or None if not set
        """
        return self._data["Flow Fraction for Surface 97"]

    @flow_fraction_for_surface_97.setter
    def flow_fraction_for_surface_97(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_97`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_97`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_97`')

        self._data["Flow Fraction for Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `surface_98_name`

        Args:
            value (str): value for IDD Field `surface_98_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')

        self._data["Surface 98 Name"] = value

    @property
    def flow_fraction_for_surface_98(self):
        """Get flow_fraction_for_surface_98

        Returns:
            float: the value of `flow_fraction_for_surface_98` or None if not set
        """
        return self._data["Flow Fraction for Surface 98"]

    @flow_fraction_for_surface_98.setter
    def flow_fraction_for_surface_98(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_98`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_98`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_98`')

        self._data["Flow Fraction for Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `surface_99_name`

        Args:
            value (str): value for IDD Field `surface_99_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')

        self._data["Surface 99 Name"] = value

    @property
    def flow_fraction_for_surface_99(self):
        """Get flow_fraction_for_surface_99

        Returns:
            float: the value of `flow_fraction_for_surface_99` or None if not set
        """
        return self._data["Flow Fraction for Surface 99"]

    @flow_fraction_for_surface_99.setter
    def flow_fraction_for_surface_99(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_99`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_99`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_99`')

        self._data["Flow Fraction for Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `surface_100_name`

        Args:
            value (str): value for IDD Field `surface_100_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')

        self._data["Surface 100 Name"] = value

    @property
    def flow_fraction_for_surface_100(self):
        """Get flow_fraction_for_surface_100

        Returns:
            float: the value of `flow_fraction_for_surface_100` or None if not set
        """
        return self._data["Flow Fraction for Surface 100"]

    @flow_fraction_for_surface_100.setter
    def flow_fraction_for_surface_100(self, value=None):
        """  Corresponds to IDD Field `flow_fraction_for_surface_100`

        Args:
            value (float): value for IDD Field `flow_fraction_for_surface_100`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `flow_fraction_for_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flow_fraction_for_surface_100`')

        self._data["Flow Fraction for Surface 100"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.surface_1_name))
        out.append(self._to_str(self.flow_fraction_for_surface_1))
        out.append(self._to_str(self.surface_2_name))
        out.append(self._to_str(self.flow_fraction_for_surface_2))
        out.append(self._to_str(self.surface_3_name))
        out.append(self._to_str(self.flow_fraction_for_surface_3))
        out.append(self._to_str(self.surface_4_name))
        out.append(self._to_str(self.flow_fraction_for_surface_4))
        out.append(self._to_str(self.surface_5_name))
        out.append(self._to_str(self.flow_fraction_for_surface_5))
        out.append(self._to_str(self.surface_6_name))
        out.append(self._to_str(self.flow_fraction_for_surface_6))
        out.append(self._to_str(self.surface_7_name))
        out.append(self._to_str(self.flow_fraction_for_surface_7))
        out.append(self._to_str(self.surface_8_name))
        out.append(self._to_str(self.flow_fraction_for_surface_8))
        out.append(self._to_str(self.surface_9_name))
        out.append(self._to_str(self.flow_fraction_for_surface_9))
        out.append(self._to_str(self.surface_10_name))
        out.append(self._to_str(self.flow_fraction_for_surface_10))
        out.append(self._to_str(self.surface_11_name))
        out.append(self._to_str(self.flow_fraction_for_surface_11))
        out.append(self._to_str(self.surface_12_name))
        out.append(self._to_str(self.flow_fraction_for_surface_12))
        out.append(self._to_str(self.surface_13_name))
        out.append(self._to_str(self.flow_fraction_for_surface_13))
        out.append(self._to_str(self.surface_14_name))
        out.append(self._to_str(self.flow_fraction_for_surface_14))
        out.append(self._to_str(self.surface_15_name))
        out.append(self._to_str(self.flow_fraction_for_surface_15))
        out.append(self._to_str(self.surface_16_name))
        out.append(self._to_str(self.flow_fraction_for_surface_16))
        out.append(self._to_str(self.surface_17_name))
        out.append(self._to_str(self.flow_fraction_for_surface_17))
        out.append(self._to_str(self.surface_18_name))
        out.append(self._to_str(self.flow_fraction_for_surface_18))
        out.append(self._to_str(self.surface_19_name))
        out.append(self._to_str(self.flow_fraction_for_surface_19))
        out.append(self._to_str(self.surface_20_name))
        out.append(self._to_str(self.flow_fraction_for_surface_20))
        out.append(self._to_str(self.surface_21_name))
        out.append(self._to_str(self.flow_fraction_for_surface_21))
        out.append(self._to_str(self.surface_22_name))
        out.append(self._to_str(self.flow_fraction_for_surface_22))
        out.append(self._to_str(self.surface_23_name))
        out.append(self._to_str(self.flow_fraction_for_surface_23))
        out.append(self._to_str(self.surface_24_name))
        out.append(self._to_str(self.flow_fraction_for_surface_24))
        out.append(self._to_str(self.surface_25_name))
        out.append(self._to_str(self.flow_fraction_for_surface_25))
        out.append(self._to_str(self.surface_26_name))
        out.append(self._to_str(self.flow_fraction_for_surface_26))
        out.append(self._to_str(self.surface_27_name))
        out.append(self._to_str(self.flow_fraction_for_surface_27))
        out.append(self._to_str(self.surface_28_name))
        out.append(self._to_str(self.flow_fraction_for_surface_28))
        out.append(self._to_str(self.surface_29_name))
        out.append(self._to_str(self.flow_fraction_for_surface_29))
        out.append(self._to_str(self.surface_30_name))
        out.append(self._to_str(self.flow_fraction_for_surface_30))
        out.append(self._to_str(self.surface_31_name))
        out.append(self._to_str(self.flow_fraction_for_surface_31))
        out.append(self._to_str(self.surface_32_name))
        out.append(self._to_str(self.flow_fraction_for_surface_32))
        out.append(self._to_str(self.surface_33_name))
        out.append(self._to_str(self.flow_fraction_for_surface_33))
        out.append(self._to_str(self.surface_34_name))
        out.append(self._to_str(self.flow_fraction_for_surface_34))
        out.append(self._to_str(self.surface_35_name))
        out.append(self._to_str(self.flow_fraction_for_surface_35))
        out.append(self._to_str(self.surface_36_name))
        out.append(self._to_str(self.flow_fraction_for_surface_36))
        out.append(self._to_str(self.surface_37_name))
        out.append(self._to_str(self.flow_fraction_for_surface_37))
        out.append(self._to_str(self.surface_38_name))
        out.append(self._to_str(self.flow_fraction_for_surface_38))
        out.append(self._to_str(self.surface_39_name))
        out.append(self._to_str(self.flow_fraction_for_surface_39))
        out.append(self._to_str(self.surface_40_name))
        out.append(self._to_str(self.flow_fraction_for_surface_40))
        out.append(self._to_str(self.surface_41_name))
        out.append(self._to_str(self.flow_fraction_for_surface_41))
        out.append(self._to_str(self.surface_42_name))
        out.append(self._to_str(self.flow_fraction_for_surface_42))
        out.append(self._to_str(self.surface_43_name))
        out.append(self._to_str(self.flow_fraction_for_surface_43))
        out.append(self._to_str(self.surface_44_name))
        out.append(self._to_str(self.flow_fraction_for_surface_44))
        out.append(self._to_str(self.surface_45_name))
        out.append(self._to_str(self.flow_fraction_for_surface_45))
        out.append(self._to_str(self.surface_46_name))
        out.append(self._to_str(self.flow_fraction_for_surface_46))
        out.append(self._to_str(self.surface_47_name))
        out.append(self._to_str(self.flow_fraction_for_surface_47))
        out.append(self._to_str(self.surface_48_name))
        out.append(self._to_str(self.flow_fraction_for_surface_48))
        out.append(self._to_str(self.surface_49_name))
        out.append(self._to_str(self.flow_fraction_for_surface_49))
        out.append(self._to_str(self.surface_50_name))
        out.append(self._to_str(self.flow_fraction_for_surface_50))
        out.append(self._to_str(self.surface_51_name))
        out.append(self._to_str(self.flow_fraction_for_surface_51))
        out.append(self._to_str(self.surface_52_name))
        out.append(self._to_str(self.flow_fraction_for_surface_52))
        out.append(self._to_str(self.surface_53_name))
        out.append(self._to_str(self.flow_fraction_for_surface_53))
        out.append(self._to_str(self.surface_54_name))
        out.append(self._to_str(self.flow_fraction_for_surface_54))
        out.append(self._to_str(self.surface_55_name))
        out.append(self._to_str(self.flow_fraction_for_surface_55))
        out.append(self._to_str(self.surface_56_name))
        out.append(self._to_str(self.flow_fraction_for_surface_56))
        out.append(self._to_str(self.surface_57_name))
        out.append(self._to_str(self.flow_fraction_for_surface_57))
        out.append(self._to_str(self.surface_58_name))
        out.append(self._to_str(self.flow_fraction_for_surface_58))
        out.append(self._to_str(self.surface_59_name))
        out.append(self._to_str(self.flow_fraction_for_surface_59))
        out.append(self._to_str(self.surface_60_name))
        out.append(self._to_str(self.flow_fraction_for_surface_60))
        out.append(self._to_str(self.surface_61_name))
        out.append(self._to_str(self.flow_fraction_for_surface_61))
        out.append(self._to_str(self.surface_62_name))
        out.append(self._to_str(self.flow_fraction_for_surface_62))
        out.append(self._to_str(self.surface_63_name))
        out.append(self._to_str(self.flow_fraction_for_surface_63))
        out.append(self._to_str(self.surface_64_name))
        out.append(self._to_str(self.flow_fraction_for_surface_64))
        out.append(self._to_str(self.surface_65_name))
        out.append(self._to_str(self.flow_fraction_for_surface_65))
        out.append(self._to_str(self.surface_66_name))
        out.append(self._to_str(self.flow_fraction_for_surface_66))
        out.append(self._to_str(self.surface_67_name))
        out.append(self._to_str(self.flow_fraction_for_surface_67))
        out.append(self._to_str(self.surface_68_name))
        out.append(self._to_str(self.flow_fraction_for_surface_68))
        out.append(self._to_str(self.surface_69_name))
        out.append(self._to_str(self.flow_fraction_for_surface_69))
        out.append(self._to_str(self.surface_70_name))
        out.append(self._to_str(self.flow_fraction_for_surface_70))
        out.append(self._to_str(self.surface_71_name))
        out.append(self._to_str(self.flow_fraction_for_surface_71))
        out.append(self._to_str(self.surface_72_name))
        out.append(self._to_str(self.flow_fraction_for_surface_72))
        out.append(self._to_str(self.surface_73_name))
        out.append(self._to_str(self.flow_fraction_for_surface_73))
        out.append(self._to_str(self.surface_74_name))
        out.append(self._to_str(self.flow_fraction_for_surface_74))
        out.append(self._to_str(self.surface_75_name))
        out.append(self._to_str(self.flow_fraction_for_surface_75))
        out.append(self._to_str(self.surface_76_name))
        out.append(self._to_str(self.flow_fraction_for_surface_76))
        out.append(self._to_str(self.surface_77_name))
        out.append(self._to_str(self.flow_fraction_for_surface_77))
        out.append(self._to_str(self.surface_78_name))
        out.append(self._to_str(self.flow_fraction_for_surface_78))
        out.append(self._to_str(self.surface_79_name))
        out.append(self._to_str(self.flow_fraction_for_surface_79))
        out.append(self._to_str(self.surface_80_name))
        out.append(self._to_str(self.flow_fraction_for_surface_80))
        out.append(self._to_str(self.surface_81_name))
        out.append(self._to_str(self.flow_fraction_for_surface_81))
        out.append(self._to_str(self.surface_82_name))
        out.append(self._to_str(self.flow_fraction_for_surface_82))
        out.append(self._to_str(self.surface_83_name))
        out.append(self._to_str(self.flow_fraction_for_surface_83))
        out.append(self._to_str(self.surface_84_name))
        out.append(self._to_str(self.flow_fraction_for_surface_84))
        out.append(self._to_str(self.surface_85_name))
        out.append(self._to_str(self.flow_fraction_for_surface_85))
        out.append(self._to_str(self.surface_86_name))
        out.append(self._to_str(self.flow_fraction_for_surface_86))
        out.append(self._to_str(self.surface_87_name))
        out.append(self._to_str(self.flow_fraction_for_surface_87))
        out.append(self._to_str(self.surface_88_name))
        out.append(self._to_str(self.flow_fraction_for_surface_88))
        out.append(self._to_str(self.surface_89_name))
        out.append(self._to_str(self.flow_fraction_for_surface_89))
        out.append(self._to_str(self.surface_90_name))
        out.append(self._to_str(self.flow_fraction_for_surface_90))
        out.append(self._to_str(self.surface_91_name))
        out.append(self._to_str(self.flow_fraction_for_surface_91))
        out.append(self._to_str(self.surface_92_name))
        out.append(self._to_str(self.flow_fraction_for_surface_92))
        out.append(self._to_str(self.surface_93_name))
        out.append(self._to_str(self.flow_fraction_for_surface_93))
        out.append(self._to_str(self.surface_94_name))
        out.append(self._to_str(self.flow_fraction_for_surface_94))
        out.append(self._to_str(self.surface_95_name))
        out.append(self._to_str(self.flow_fraction_for_surface_95))
        out.append(self._to_str(self.surface_96_name))
        out.append(self._to_str(self.flow_fraction_for_surface_96))
        out.append(self._to_str(self.surface_97_name))
        out.append(self._to_str(self.flow_fraction_for_surface_97))
        out.append(self._to_str(self.surface_98_name))
        out.append(self._to_str(self.flow_fraction_for_surface_98))
        out.append(self._to_str(self.surface_99_name))
        out.append(self._to_str(self.flow_fraction_for_surface_99))
        out.append(self._to_str(self.surface_100_name))
        out.append(self._to_str(self.flow_fraction_for_surface_100))
        return ",".join(out)

class ZoneHvacHighTemperatureRadiant(object):
    """ Corresponds to IDD object `ZoneHVAC:HighTemperatureRadiant`
        The number of surfaces can be expanded beyond 100, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:HighTemperatureRadiant"
    field_count = 216

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:HighTemperatureRadiant`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Heating Design Capacity Method"] = None
        self._data["Heating Design Capacity"] = None
        self._data["Heating Design Capacity Per Floor Area"] = None
        self._data["Fraction of Autosized Heating Design Capacity"] = None
        self._data["Fuel Type"] = None
        self._data["Combustion Efficiency"] = None
        self._data["Fraction of Input Converted to Radiant Energy"] = None
        self._data["Fraction of Input Converted to Latent Energy"] = None
        self._data["Fraction of Input that Is Lost"] = None
        self._data["Temperature Control Type"] = None
        self._data["Heating Throttling Range"] = None
        self._data["Heating Setpoint Temperature Schedule Name"] = None
        self._data["Fraction of Radiant Energy Incident on People"] = None
        self._data["Surface 1 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 1"] = None
        self._data["Surface 2 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 2"] = None
        self._data["Surface 3 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 3"] = None
        self._data["Surface 4 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 4"] = None
        self._data["Surface 5 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 5"] = None
        self._data["Surface 6 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 6"] = None
        self._data["Surface 7 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 7"] = None
        self._data["Surface 8 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 8"] = None
        self._data["Surface 9 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 9"] = None
        self._data["Surface 10 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 10"] = None
        self._data["Surface 11 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 11"] = None
        self._data["Surface 12 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 12"] = None
        self._data["Surface 13 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 13"] = None
        self._data["Surface 14 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 14"] = None
        self._data["Surface 15 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 15"] = None
        self._data["Surface 16 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 16"] = None
        self._data["Surface 17 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 17"] = None
        self._data["Surface 18 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 18"] = None
        self._data["Surface 19 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 19"] = None
        self._data["Surface 20 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 20"] = None
        self._data["Surface 21 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 21"] = None
        self._data["Surface 22 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 22"] = None
        self._data["Surface 23 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 23"] = None
        self._data["Surface 24 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 24"] = None
        self._data["Surface 25 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 25"] = None
        self._data["Surface 26 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 26"] = None
        self._data["Surface 27 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 27"] = None
        self._data["Surface 28 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 28"] = None
        self._data["Surface 29 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 29"] = None
        self._data["Surface 30 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 30"] = None
        self._data["Surface 31 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 31"] = None
        self._data["Surface 32 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 32"] = None
        self._data["Surface 33 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 33"] = None
        self._data["Surface 34 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 34"] = None
        self._data["Surface 35 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 35"] = None
        self._data["Surface 36 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 36"] = None
        self._data["Surface 37 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 37"] = None
        self._data["Surface 38 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 38"] = None
        self._data["Surface 39 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 39"] = None
        self._data["Surface 40 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 40"] = None
        self._data["Surface 41 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 41"] = None
        self._data["Surface 42 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 42"] = None
        self._data["Surface 43 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 43"] = None
        self._data["Surface 44 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 44"] = None
        self._data["Surface 45 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 45"] = None
        self._data["Surface 46 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 46"] = None
        self._data["Surface 47 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 47"] = None
        self._data["Surface 48 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 48"] = None
        self._data["Surface 49 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 49"] = None
        self._data["Surface 50 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 50"] = None
        self._data["Surface 51 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 51"] = None
        self._data["Surface 52 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 52"] = None
        self._data["Surface 53 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 53"] = None
        self._data["Surface 54 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 54"] = None
        self._data["Surface 55 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 55"] = None
        self._data["Surface 56 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 56"] = None
        self._data["Surface 57 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 57"] = None
        self._data["Surface 58 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 58"] = None
        self._data["Surface 59 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 59"] = None
        self._data["Surface 60 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 60"] = None
        self._data["Surface 61 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 61"] = None
        self._data["Surface 62 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 62"] = None
        self._data["Surface 63 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 63"] = None
        self._data["Surface 64 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 64"] = None
        self._data["Surface 65 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 65"] = None
        self._data["Surface 66 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 66"] = None
        self._data["Surface 67 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 67"] = None
        self._data["Surface 68 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 68"] = None
        self._data["Surface 69 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 69"] = None
        self._data["Surface 70 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 70"] = None
        self._data["Surface 71 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 71"] = None
        self._data["Surface 72 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 72"] = None
        self._data["Surface 73 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 73"] = None
        self._data["Surface 74 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 74"] = None
        self._data["Surface 75 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 75"] = None
        self._data["Surface 76 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 76"] = None
        self._data["Surface 77 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 77"] = None
        self._data["Surface 78 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 78"] = None
        self._data["Surface 79 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 79"] = None
        self._data["Surface 80 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 80"] = None
        self._data["Surface 81 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 81"] = None
        self._data["Surface 82 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 82"] = None
        self._data["Surface 83 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 83"] = None
        self._data["Surface 84 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 84"] = None
        self._data["Surface 85 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 85"] = None
        self._data["Surface 86 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 86"] = None
        self._data["Surface 87 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 87"] = None
        self._data["Surface 88 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 88"] = None
        self._data["Surface 89 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 89"] = None
        self._data["Surface 90 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 90"] = None
        self._data["Surface 91 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 91"] = None
        self._data["Surface 92 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 92"] = None
        self._data["Surface 93 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 93"] = None
        self._data["Surface 94 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 94"] = None
        self._data["Surface 95 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 95"] = None
        self._data["Surface 96 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 96"] = None
        self._data["Surface 97 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 97"] = None
        self._data["Surface 98 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 98"] = None
        self._data["Surface 99 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 99"] = None
        self._data["Surface 100 Name"] = None
        self._data["Fraction of Radiant Energy to Surface 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_method = None
        else:
            self.heating_design_capacity_method = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity = None
        else:
            self.heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_design_capacity_per_floor_area = None
        else:
            self.heating_design_capacity_per_floor_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_heating_design_capacity = None
        else:
            self.fraction_of_autosized_heating_design_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.combustion_efficiency = None
        else:
            self.combustion_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_input_converted_to_radiant_energy = None
        else:
            self.fraction_of_input_converted_to_radiant_energy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_input_converted_to_latent_energy = None
        else:
            self.fraction_of_input_converted_to_latent_energy = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_input_that_is_lost = None
        else:
            self.fraction_of_input_that_is_lost = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_throttling_range = None
        else:
            self.heating_throttling_range = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_setpoint_temperature_schedule_name = None
        else:
            self.heating_setpoint_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_incident_on_people = None
        else:
            self.fraction_of_radiant_energy_incident_on_people = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_1 = None
        else:
            self.fraction_of_radiant_energy_to_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_2 = None
        else:
            self.fraction_of_radiant_energy_to_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_3 = None
        else:
            self.fraction_of_radiant_energy_to_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_4 = None
        else:
            self.fraction_of_radiant_energy_to_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_5 = None
        else:
            self.fraction_of_radiant_energy_to_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_6 = None
        else:
            self.fraction_of_radiant_energy_to_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_7 = None
        else:
            self.fraction_of_radiant_energy_to_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_8 = None
        else:
            self.fraction_of_radiant_energy_to_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_9 = None
        else:
            self.fraction_of_radiant_energy_to_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_10 = None
        else:
            self.fraction_of_radiant_energy_to_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_11_name = None
        else:
            self.surface_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_11 = None
        else:
            self.fraction_of_radiant_energy_to_surface_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_12_name = None
        else:
            self.surface_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_12 = None
        else:
            self.fraction_of_radiant_energy_to_surface_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_13_name = None
        else:
            self.surface_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_13 = None
        else:
            self.fraction_of_radiant_energy_to_surface_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_14_name = None
        else:
            self.surface_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_14 = None
        else:
            self.fraction_of_radiant_energy_to_surface_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_15_name = None
        else:
            self.surface_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_15 = None
        else:
            self.fraction_of_radiant_energy_to_surface_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_16_name = None
        else:
            self.surface_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_16 = None
        else:
            self.fraction_of_radiant_energy_to_surface_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_17_name = None
        else:
            self.surface_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_17 = None
        else:
            self.fraction_of_radiant_energy_to_surface_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_18_name = None
        else:
            self.surface_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_18 = None
        else:
            self.fraction_of_radiant_energy_to_surface_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_19_name = None
        else:
            self.surface_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_19 = None
        else:
            self.fraction_of_radiant_energy_to_surface_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_20_name = None
        else:
            self.surface_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_20 = None
        else:
            self.fraction_of_radiant_energy_to_surface_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_21_name = None
        else:
            self.surface_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_21 = None
        else:
            self.fraction_of_radiant_energy_to_surface_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_22_name = None
        else:
            self.surface_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_22 = None
        else:
            self.fraction_of_radiant_energy_to_surface_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_23_name = None
        else:
            self.surface_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_23 = None
        else:
            self.fraction_of_radiant_energy_to_surface_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_24_name = None
        else:
            self.surface_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_24 = None
        else:
            self.fraction_of_radiant_energy_to_surface_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_25_name = None
        else:
            self.surface_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_25 = None
        else:
            self.fraction_of_radiant_energy_to_surface_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_26_name = None
        else:
            self.surface_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_26 = None
        else:
            self.fraction_of_radiant_energy_to_surface_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_27_name = None
        else:
            self.surface_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_27 = None
        else:
            self.fraction_of_radiant_energy_to_surface_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_28_name = None
        else:
            self.surface_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_28 = None
        else:
            self.fraction_of_radiant_energy_to_surface_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_29_name = None
        else:
            self.surface_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_29 = None
        else:
            self.fraction_of_radiant_energy_to_surface_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_30_name = None
        else:
            self.surface_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_30 = None
        else:
            self.fraction_of_radiant_energy_to_surface_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_31_name = None
        else:
            self.surface_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_31 = None
        else:
            self.fraction_of_radiant_energy_to_surface_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_32_name = None
        else:
            self.surface_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_32 = None
        else:
            self.fraction_of_radiant_energy_to_surface_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_33_name = None
        else:
            self.surface_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_33 = None
        else:
            self.fraction_of_radiant_energy_to_surface_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_34_name = None
        else:
            self.surface_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_34 = None
        else:
            self.fraction_of_radiant_energy_to_surface_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_35_name = None
        else:
            self.surface_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_35 = None
        else:
            self.fraction_of_radiant_energy_to_surface_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_36_name = None
        else:
            self.surface_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_36 = None
        else:
            self.fraction_of_radiant_energy_to_surface_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_37_name = None
        else:
            self.surface_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_37 = None
        else:
            self.fraction_of_radiant_energy_to_surface_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_38_name = None
        else:
            self.surface_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_38 = None
        else:
            self.fraction_of_radiant_energy_to_surface_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_39_name = None
        else:
            self.surface_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_39 = None
        else:
            self.fraction_of_radiant_energy_to_surface_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_40_name = None
        else:
            self.surface_40_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_40 = None
        else:
            self.fraction_of_radiant_energy_to_surface_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_41_name = None
        else:
            self.surface_41_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_41 = None
        else:
            self.fraction_of_radiant_energy_to_surface_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_42_name = None
        else:
            self.surface_42_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_42 = None
        else:
            self.fraction_of_radiant_energy_to_surface_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_43_name = None
        else:
            self.surface_43_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_43 = None
        else:
            self.fraction_of_radiant_energy_to_surface_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_44_name = None
        else:
            self.surface_44_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_44 = None
        else:
            self.fraction_of_radiant_energy_to_surface_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_45_name = None
        else:
            self.surface_45_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_45 = None
        else:
            self.fraction_of_radiant_energy_to_surface_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_46_name = None
        else:
            self.surface_46_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_46 = None
        else:
            self.fraction_of_radiant_energy_to_surface_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_47_name = None
        else:
            self.surface_47_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_47 = None
        else:
            self.fraction_of_radiant_energy_to_surface_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_48_name = None
        else:
            self.surface_48_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_48 = None
        else:
            self.fraction_of_radiant_energy_to_surface_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_49_name = None
        else:
            self.surface_49_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_49 = None
        else:
            self.fraction_of_radiant_energy_to_surface_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_50_name = None
        else:
            self.surface_50_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_50 = None
        else:
            self.fraction_of_radiant_energy_to_surface_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_51_name = None
        else:
            self.surface_51_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_51 = None
        else:
            self.fraction_of_radiant_energy_to_surface_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_52_name = None
        else:
            self.surface_52_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_52 = None
        else:
            self.fraction_of_radiant_energy_to_surface_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_53_name = None
        else:
            self.surface_53_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_53 = None
        else:
            self.fraction_of_radiant_energy_to_surface_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_54_name = None
        else:
            self.surface_54_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_54 = None
        else:
            self.fraction_of_radiant_energy_to_surface_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_55_name = None
        else:
            self.surface_55_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_55 = None
        else:
            self.fraction_of_radiant_energy_to_surface_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_56_name = None
        else:
            self.surface_56_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_56 = None
        else:
            self.fraction_of_radiant_energy_to_surface_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_57_name = None
        else:
            self.surface_57_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_57 = None
        else:
            self.fraction_of_radiant_energy_to_surface_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_58_name = None
        else:
            self.surface_58_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_58 = None
        else:
            self.fraction_of_radiant_energy_to_surface_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_59_name = None
        else:
            self.surface_59_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_59 = None
        else:
            self.fraction_of_radiant_energy_to_surface_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_60_name = None
        else:
            self.surface_60_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_60 = None
        else:
            self.fraction_of_radiant_energy_to_surface_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_61_name = None
        else:
            self.surface_61_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_61 = None
        else:
            self.fraction_of_radiant_energy_to_surface_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_62_name = None
        else:
            self.surface_62_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_62 = None
        else:
            self.fraction_of_radiant_energy_to_surface_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_63_name = None
        else:
            self.surface_63_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_63 = None
        else:
            self.fraction_of_radiant_energy_to_surface_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_64_name = None
        else:
            self.surface_64_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_64 = None
        else:
            self.fraction_of_radiant_energy_to_surface_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_65_name = None
        else:
            self.surface_65_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_65 = None
        else:
            self.fraction_of_radiant_energy_to_surface_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_66_name = None
        else:
            self.surface_66_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_66 = None
        else:
            self.fraction_of_radiant_energy_to_surface_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_67_name = None
        else:
            self.surface_67_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_67 = None
        else:
            self.fraction_of_radiant_energy_to_surface_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_68_name = None
        else:
            self.surface_68_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_68 = None
        else:
            self.fraction_of_radiant_energy_to_surface_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_69_name = None
        else:
            self.surface_69_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_69 = None
        else:
            self.fraction_of_radiant_energy_to_surface_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_70_name = None
        else:
            self.surface_70_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_70 = None
        else:
            self.fraction_of_radiant_energy_to_surface_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_71_name = None
        else:
            self.surface_71_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_71 = None
        else:
            self.fraction_of_radiant_energy_to_surface_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_72_name = None
        else:
            self.surface_72_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_72 = None
        else:
            self.fraction_of_radiant_energy_to_surface_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_73_name = None
        else:
            self.surface_73_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_73 = None
        else:
            self.fraction_of_radiant_energy_to_surface_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_74_name = None
        else:
            self.surface_74_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_74 = None
        else:
            self.fraction_of_radiant_energy_to_surface_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_75_name = None
        else:
            self.surface_75_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_75 = None
        else:
            self.fraction_of_radiant_energy_to_surface_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_76_name = None
        else:
            self.surface_76_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_76 = None
        else:
            self.fraction_of_radiant_energy_to_surface_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_77_name = None
        else:
            self.surface_77_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_77 = None
        else:
            self.fraction_of_radiant_energy_to_surface_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_78_name = None
        else:
            self.surface_78_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_78 = None
        else:
            self.fraction_of_radiant_energy_to_surface_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_79_name = None
        else:
            self.surface_79_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_79 = None
        else:
            self.fraction_of_radiant_energy_to_surface_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_80_name = None
        else:
            self.surface_80_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_80 = None
        else:
            self.fraction_of_radiant_energy_to_surface_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_81_name = None
        else:
            self.surface_81_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_81 = None
        else:
            self.fraction_of_radiant_energy_to_surface_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_82_name = None
        else:
            self.surface_82_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_82 = None
        else:
            self.fraction_of_radiant_energy_to_surface_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_83_name = None
        else:
            self.surface_83_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_83 = None
        else:
            self.fraction_of_radiant_energy_to_surface_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_84_name = None
        else:
            self.surface_84_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_84 = None
        else:
            self.fraction_of_radiant_energy_to_surface_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_85_name = None
        else:
            self.surface_85_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_85 = None
        else:
            self.fraction_of_radiant_energy_to_surface_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_86_name = None
        else:
            self.surface_86_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_86 = None
        else:
            self.fraction_of_radiant_energy_to_surface_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_87_name = None
        else:
            self.surface_87_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_87 = None
        else:
            self.fraction_of_radiant_energy_to_surface_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_88_name = None
        else:
            self.surface_88_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_88 = None
        else:
            self.fraction_of_radiant_energy_to_surface_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_89_name = None
        else:
            self.surface_89_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_89 = None
        else:
            self.fraction_of_radiant_energy_to_surface_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_90_name = None
        else:
            self.surface_90_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_90 = None
        else:
            self.fraction_of_radiant_energy_to_surface_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_91_name = None
        else:
            self.surface_91_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_91 = None
        else:
            self.fraction_of_radiant_energy_to_surface_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_92_name = None
        else:
            self.surface_92_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_92 = None
        else:
            self.fraction_of_radiant_energy_to_surface_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_93_name = None
        else:
            self.surface_93_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_93 = None
        else:
            self.fraction_of_radiant_energy_to_surface_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_94_name = None
        else:
            self.surface_94_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_94 = None
        else:
            self.fraction_of_radiant_energy_to_surface_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_95_name = None
        else:
            self.surface_95_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_95 = None
        else:
            self.fraction_of_radiant_energy_to_surface_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_96_name = None
        else:
            self.surface_96_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_96 = None
        else:
            self.fraction_of_radiant_energy_to_surface_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_97_name = None
        else:
            self.surface_97_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_97 = None
        else:
            self.fraction_of_radiant_energy_to_surface_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_98_name = None
        else:
            self.surface_98_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_98 = None
        else:
            self.fraction_of_radiant_energy_to_surface_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_99_name = None
        else:
            self.surface_99_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_99 = None
        else:
            self.fraction_of_radiant_energy_to_surface_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_100_name = None
        else:
            self.surface_100_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_radiant_energy_to_surface_100 = None
        else:
            self.fraction_of_radiant_energy_to_surface_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        Name of zone system is serving

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def heating_design_capacity_method(self):
        """Get heating_design_capacity_method

        Returns:
            str: the value of `heating_design_capacity_method` or None if not set
        """
        return self._data["Heating Design Capacity Method"]

    @heating_design_capacity_method.setter
    def heating_design_capacity_method(self, value="HeatingDesignCapacity"):
        """  Corresponds to IDD Field `heating_design_capacity_method`
        Enter the method used to determine the maximum heating power input capacity.
        HeatingDesignCapacity = > selected when the design heating capacity value or autosize
        is specified. CapacityPerFloorArea = > selected when the design heating capacity is
        determine from user specified heating capacity per floor area and zone floor area.
        FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is
        determined from a user specified fraction and the auto-sized design heating capacity.

        Args:
            value (str): value for IDD Field `heating_design_capacity_method`
                Accepted values are:
                      - HeatingDesignCapacity
                      - CapacityPerFloorArea
                      - FractionOfAutosizedHeatingCapacity
                Default value: HeatingDesignCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_design_capacity_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_design_capacity_method`')
            vals = set()
            vals.add("HeatingDesignCapacity")
            vals.add("CapacityPerFloorArea")
            vals.add("FractionOfAutosizedHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_design_capacity_method`'.format(value))

        self._data["Heating Design Capacity Method"] = value

    @property
    def heating_design_capacity(self):
        """Get heating_design_capacity

        Returns:
            float: the value of `heating_design_capacity` or None if not set
        """
        return self._data["Heating Design Capacity"]

    @heating_design_capacity.setter
    def heating_design_capacity(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity`
        Enter the design heating capacity.Required field when the heating design capacity method
        HeatingDesignCapacity.

        Args:
            value (float): value for IDD Field `heating_design_capacity`
                Unit: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity`')

        self._data["Heating Design Capacity"] = value

    @property
    def heating_design_capacity_per_floor_area(self):
        """Get heating_design_capacity_per_floor_area

        Returns:
            float: the value of `heating_design_capacity_per_floor_area` or None if not set
        """
        return self._data["Heating Design Capacity Per Floor Area"]

    @heating_design_capacity_per_floor_area.setter
    def heating_design_capacity_per_floor_area(self, value=None):
        """  Corresponds to IDD Field `heating_design_capacity_per_floor_area`
        Enter the heating design capacity per zone floor area.Required field when the heating design
        capacity method field is CapacityPerFloorArea.

        Args:
            value (float): value for IDD Field `heating_design_capacity_per_floor_area`
                Unit: W/m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_design_capacity_per_floor_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_design_capacity_per_floor_area`')

        self._data["Heating Design Capacity Per Floor Area"] = value

    @property
    def fraction_of_autosized_heating_design_capacity(self):
        """Get fraction_of_autosized_heating_design_capacity

        Returns:
            float: the value of `fraction_of_autosized_heating_design_capacity` or None if not set
        """
        return self._data["Fraction of Autosized Heating Design Capacity"]

    @fraction_of_autosized_heating_design_capacity.setter
    def fraction_of_autosized_heating_design_capacity(self, value=1.0 ):
        """  Corresponds to IDD Field `fraction_of_autosized_heating_design_capacity`
        Enter the fraction of auto - sized heating design capacity.Required field when capacity the
        heating design capacity method field is FractionOfAutosizedHeatingCapacity.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_heating_design_capacity`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_heating_design_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_heating_design_capacity`')

        self._data["Fraction of Autosized Heating Design Capacity"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`
        Natural gas or electricity

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - NaturalGas
                      - Electricity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("NaturalGas")
            vals.add("Electricity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def combustion_efficiency(self):
        """Get combustion_efficiency

        Returns:
            float: the value of `combustion_efficiency` or None if not set
        """
        return self._data["Combustion Efficiency"]

    @combustion_efficiency.setter
    def combustion_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `combustion_efficiency`
        Not used for non-gas radiant heaters

        Args:
            value (float): value for IDD Field `combustion_efficiency`
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `combustion_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `combustion_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `combustion_efficiency`')

        self._data["Combustion Efficiency"] = value

    @property
    def fraction_of_input_converted_to_radiant_energy(self):
        """Get fraction_of_input_converted_to_radiant_energy

        Returns:
            float: the value of `fraction_of_input_converted_to_radiant_energy` or None if not set
        """
        return self._data["Fraction of Input Converted to Radiant Energy"]

    @fraction_of_input_converted_to_radiant_energy.setter
    def fraction_of_input_converted_to_radiant_energy(self, value=0.7 ):
        """  Corresponds to IDD Field `fraction_of_input_converted_to_radiant_energy`
        Radiant+latent+lost fractions must sum to 1 or less, remainder is considered convective heat

        Args:
            value (float): value for IDD Field `fraction_of_input_converted_to_radiant_energy`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_input_converted_to_radiant_energy`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_input_converted_to_radiant_energy`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_input_converted_to_radiant_energy`')

        self._data["Fraction of Input Converted to Radiant Energy"] = value

    @property
    def fraction_of_input_converted_to_latent_energy(self):
        """Get fraction_of_input_converted_to_latent_energy

        Returns:
            float: the value of `fraction_of_input_converted_to_latent_energy` or None if not set
        """
        return self._data["Fraction of Input Converted to Latent Energy"]

    @fraction_of_input_converted_to_latent_energy.setter
    def fraction_of_input_converted_to_latent_energy(self, value=0.0 ):
        """  Corresponds to IDD Field `fraction_of_input_converted_to_latent_energy`

        Args:
            value (float): value for IDD Field `fraction_of_input_converted_to_latent_energy`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_input_converted_to_latent_energy`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_input_converted_to_latent_energy`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_input_converted_to_latent_energy`')

        self._data["Fraction of Input Converted to Latent Energy"] = value

    @property
    def fraction_of_input_that_is_lost(self):
        """Get fraction_of_input_that_is_lost

        Returns:
            float: the value of `fraction_of_input_that_is_lost` or None if not set
        """
        return self._data["Fraction of Input that Is Lost"]

    @fraction_of_input_that_is_lost.setter
    def fraction_of_input_that_is_lost(self, value=0.0 ):
        """  Corresponds to IDD Field `fraction_of_input_that_is_lost`
        Fraction of input vented to outdoor environment

        Args:
            value (float): value for IDD Field `fraction_of_input_that_is_lost`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_input_that_is_lost`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_input_that_is_lost`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_input_that_is_lost`')

        self._data["Fraction of Input that Is Lost"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="OperativeTemperature"):
        """  Corresponds to IDD Field `temperature_control_type`
        Temperature type used to control unit

        Args:
            value (str): value for IDD Field `temperature_control_type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - MeanAirTemperatureSetpoint
                      - MeanRadiantTemperatureSetpoint
                      - OperativeTemperatureSetpoint
                Default value: OperativeTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            vals = set()
            vals.add("MeanAirTemperature")
            vals.add("MeanRadiantTemperature")
            vals.add("OperativeTemperature")
            vals.add("MeanAirTemperatureSetpoint")
            vals.add("MeanRadiantTemperatureSetpoint")
            vals.add("OperativeTemperatureSetpoint")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `temperature_control_type`'.format(value))

        self._data["Temperature Control Type"] = value

    @property
    def heating_throttling_range(self):
        """Get heating_throttling_range

        Returns:
            float: the value of `heating_throttling_range` or None if not set
        """
        return self._data["Heating Throttling Range"]

    @heating_throttling_range.setter
    def heating_throttling_range(self, value=2.0 ):
        """  Corresponds to IDD Field `heating_throttling_range`

        Args:
            value (float): value for IDD Field `heating_throttling_range`
                Unit: deltaC
                Default value: 2.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_throttling_range`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_throttling_range`')

        self._data["Heating Throttling Range"] = value

    @property
    def heating_setpoint_temperature_schedule_name(self):
        """Get heating_setpoint_temperature_schedule_name

        Returns:
            str: the value of `heating_setpoint_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Setpoint Temperature Schedule Name"]

    @heating_setpoint_temperature_schedule_name.setter
    def heating_setpoint_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_setpoint_temperature_schedule_name`
        This setpoint is an "operative temperature" setpoint

        Args:
            value (str): value for IDD Field `heating_setpoint_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_setpoint_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_setpoint_temperature_schedule_name`')

        self._data["Heating Setpoint Temperature Schedule Name"] = value

    @property
    def fraction_of_radiant_energy_incident_on_people(self):
        """Get fraction_of_radiant_energy_incident_on_people

        Returns:
            float: the value of `fraction_of_radiant_energy_incident_on_people` or None if not set
        """
        return self._data["Fraction of Radiant Energy Incident on People"]

    @fraction_of_radiant_energy_incident_on_people.setter
    def fraction_of_radiant_energy_incident_on_people(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_incident_on_people`
        This will affect thermal comfort but from an energy balance standpoint this value
        gets added to the convective gains from the radiant heater

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_incident_on_people`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_incident_on_people`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_incident_on_people`')

        self._data["Fraction of Radiant Energy Incident on People"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `surface_1_name`
        Radiant energy may be distributed to specific surfaces

        Args:
            value (str): value for IDD Field `surface_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')

        self._data["Surface 1 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_1(self):
        """Get fraction_of_radiant_energy_to_surface_1

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_1` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 1"]

    @fraction_of_radiant_energy_to_surface_1.setter
    def fraction_of_radiant_energy_to_surface_1(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_1`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_1`')

        self._data["Fraction of Radiant Energy to Surface 1"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `surface_2_name`

        Args:
            value (str): value for IDD Field `surface_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')

        self._data["Surface 2 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_2(self):
        """Get fraction_of_radiant_energy_to_surface_2

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_2` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 2"]

    @fraction_of_radiant_energy_to_surface_2.setter
    def fraction_of_radiant_energy_to_surface_2(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_2`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_2`')

        self._data["Fraction of Radiant Energy to Surface 2"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `surface_3_name`

        Args:
            value (str): value for IDD Field `surface_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')

        self._data["Surface 3 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_3(self):
        """Get fraction_of_radiant_energy_to_surface_3

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_3` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 3"]

    @fraction_of_radiant_energy_to_surface_3.setter
    def fraction_of_radiant_energy_to_surface_3(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_3`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_3`')

        self._data["Fraction of Radiant Energy to Surface 3"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `surface_4_name`

        Args:
            value (str): value for IDD Field `surface_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')

        self._data["Surface 4 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_4(self):
        """Get fraction_of_radiant_energy_to_surface_4

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_4` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 4"]

    @fraction_of_radiant_energy_to_surface_4.setter
    def fraction_of_radiant_energy_to_surface_4(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_4`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_4`')

        self._data["Fraction of Radiant Energy to Surface 4"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `surface_5_name`

        Args:
            value (str): value for IDD Field `surface_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')

        self._data["Surface 5 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_5(self):
        """Get fraction_of_radiant_energy_to_surface_5

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_5` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 5"]

    @fraction_of_radiant_energy_to_surface_5.setter
    def fraction_of_radiant_energy_to_surface_5(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_5`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_5`')

        self._data["Fraction of Radiant Energy to Surface 5"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `surface_6_name`

        Args:
            value (str): value for IDD Field `surface_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')

        self._data["Surface 6 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_6(self):
        """Get fraction_of_radiant_energy_to_surface_6

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_6` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 6"]

    @fraction_of_radiant_energy_to_surface_6.setter
    def fraction_of_radiant_energy_to_surface_6(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_6`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_6`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_6`')

        self._data["Fraction of Radiant Energy to Surface 6"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `surface_7_name`

        Args:
            value (str): value for IDD Field `surface_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')

        self._data["Surface 7 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_7(self):
        """Get fraction_of_radiant_energy_to_surface_7

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_7` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 7"]

    @fraction_of_radiant_energy_to_surface_7.setter
    def fraction_of_radiant_energy_to_surface_7(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_7`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_7`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_7`')

        self._data["Fraction of Radiant Energy to Surface 7"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `surface_8_name`

        Args:
            value (str): value for IDD Field `surface_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')

        self._data["Surface 8 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_8(self):
        """Get fraction_of_radiant_energy_to_surface_8

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_8` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 8"]

    @fraction_of_radiant_energy_to_surface_8.setter
    def fraction_of_radiant_energy_to_surface_8(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_8`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_8`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_8`')

        self._data["Fraction of Radiant Energy to Surface 8"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `surface_9_name`

        Args:
            value (str): value for IDD Field `surface_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')

        self._data["Surface 9 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_9(self):
        """Get fraction_of_radiant_energy_to_surface_9

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_9` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 9"]

    @fraction_of_radiant_energy_to_surface_9.setter
    def fraction_of_radiant_energy_to_surface_9(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_9`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_9`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_9`')

        self._data["Fraction of Radiant Energy to Surface 9"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `surface_10_name`

        Args:
            value (str): value for IDD Field `surface_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')

        self._data["Surface 10 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_10(self):
        """Get fraction_of_radiant_energy_to_surface_10

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_10` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 10"]

    @fraction_of_radiant_energy_to_surface_10.setter
    def fraction_of_radiant_energy_to_surface_10(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_10`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_10`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_10`')

        self._data["Fraction of Radiant Energy to Surface 10"] = value

    @property
    def surface_11_name(self):
        """Get surface_11_name

        Returns:
            str: the value of `surface_11_name` or None if not set
        """
        return self._data["Surface 11 Name"]

    @surface_11_name.setter
    def surface_11_name(self, value=None):
        """  Corresponds to IDD Field `surface_11_name`

        Args:
            value (str): value for IDD Field `surface_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_11_name`')

        self._data["Surface 11 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_11(self):
        """Get fraction_of_radiant_energy_to_surface_11

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_11` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 11"]

    @fraction_of_radiant_energy_to_surface_11.setter
    def fraction_of_radiant_energy_to_surface_11(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_11`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_11`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_11`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_11`')

        self._data["Fraction of Radiant Energy to Surface 11"] = value

    @property
    def surface_12_name(self):
        """Get surface_12_name

        Returns:
            str: the value of `surface_12_name` or None if not set
        """
        return self._data["Surface 12 Name"]

    @surface_12_name.setter
    def surface_12_name(self, value=None):
        """  Corresponds to IDD Field `surface_12_name`

        Args:
            value (str): value for IDD Field `surface_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_12_name`')

        self._data["Surface 12 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_12(self):
        """Get fraction_of_radiant_energy_to_surface_12

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_12` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 12"]

    @fraction_of_radiant_energy_to_surface_12.setter
    def fraction_of_radiant_energy_to_surface_12(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_12`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_12`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_12`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_12`')

        self._data["Fraction of Radiant Energy to Surface 12"] = value

    @property
    def surface_13_name(self):
        """Get surface_13_name

        Returns:
            str: the value of `surface_13_name` or None if not set
        """
        return self._data["Surface 13 Name"]

    @surface_13_name.setter
    def surface_13_name(self, value=None):
        """  Corresponds to IDD Field `surface_13_name`

        Args:
            value (str): value for IDD Field `surface_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_13_name`')

        self._data["Surface 13 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_13(self):
        """Get fraction_of_radiant_energy_to_surface_13

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_13` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 13"]

    @fraction_of_radiant_energy_to_surface_13.setter
    def fraction_of_radiant_energy_to_surface_13(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_13`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_13`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_13`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_13`')

        self._data["Fraction of Radiant Energy to Surface 13"] = value

    @property
    def surface_14_name(self):
        """Get surface_14_name

        Returns:
            str: the value of `surface_14_name` or None if not set
        """
        return self._data["Surface 14 Name"]

    @surface_14_name.setter
    def surface_14_name(self, value=None):
        """  Corresponds to IDD Field `surface_14_name`

        Args:
            value (str): value for IDD Field `surface_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_14_name`')

        self._data["Surface 14 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_14(self):
        """Get fraction_of_radiant_energy_to_surface_14

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_14` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 14"]

    @fraction_of_radiant_energy_to_surface_14.setter
    def fraction_of_radiant_energy_to_surface_14(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_14`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_14`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_14`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_14`')

        self._data["Fraction of Radiant Energy to Surface 14"] = value

    @property
    def surface_15_name(self):
        """Get surface_15_name

        Returns:
            str: the value of `surface_15_name` or None if not set
        """
        return self._data["Surface 15 Name"]

    @surface_15_name.setter
    def surface_15_name(self, value=None):
        """  Corresponds to IDD Field `surface_15_name`

        Args:
            value (str): value for IDD Field `surface_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_15_name`')

        self._data["Surface 15 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_15(self):
        """Get fraction_of_radiant_energy_to_surface_15

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_15` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 15"]

    @fraction_of_radiant_energy_to_surface_15.setter
    def fraction_of_radiant_energy_to_surface_15(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_15`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_15`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_15`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_15`')

        self._data["Fraction of Radiant Energy to Surface 15"] = value

    @property
    def surface_16_name(self):
        """Get surface_16_name

        Returns:
            str: the value of `surface_16_name` or None if not set
        """
        return self._data["Surface 16 Name"]

    @surface_16_name.setter
    def surface_16_name(self, value=None):
        """  Corresponds to IDD Field `surface_16_name`

        Args:
            value (str): value for IDD Field `surface_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_16_name`')

        self._data["Surface 16 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_16(self):
        """Get fraction_of_radiant_energy_to_surface_16

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_16` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 16"]

    @fraction_of_radiant_energy_to_surface_16.setter
    def fraction_of_radiant_energy_to_surface_16(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_16`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_16`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_16`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_16`')

        self._data["Fraction of Radiant Energy to Surface 16"] = value

    @property
    def surface_17_name(self):
        """Get surface_17_name

        Returns:
            str: the value of `surface_17_name` or None if not set
        """
        return self._data["Surface 17 Name"]

    @surface_17_name.setter
    def surface_17_name(self, value=None):
        """  Corresponds to IDD Field `surface_17_name`

        Args:
            value (str): value for IDD Field `surface_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_17_name`')

        self._data["Surface 17 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_17(self):
        """Get fraction_of_radiant_energy_to_surface_17

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_17` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 17"]

    @fraction_of_radiant_energy_to_surface_17.setter
    def fraction_of_radiant_energy_to_surface_17(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_17`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_17`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_17`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_17`')

        self._data["Fraction of Radiant Energy to Surface 17"] = value

    @property
    def surface_18_name(self):
        """Get surface_18_name

        Returns:
            str: the value of `surface_18_name` or None if not set
        """
        return self._data["Surface 18 Name"]

    @surface_18_name.setter
    def surface_18_name(self, value=None):
        """  Corresponds to IDD Field `surface_18_name`

        Args:
            value (str): value for IDD Field `surface_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_18_name`')

        self._data["Surface 18 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_18(self):
        """Get fraction_of_radiant_energy_to_surface_18

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_18` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 18"]

    @fraction_of_radiant_energy_to_surface_18.setter
    def fraction_of_radiant_energy_to_surface_18(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_18`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_18`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_18`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_18`')

        self._data["Fraction of Radiant Energy to Surface 18"] = value

    @property
    def surface_19_name(self):
        """Get surface_19_name

        Returns:
            str: the value of `surface_19_name` or None if not set
        """
        return self._data["Surface 19 Name"]

    @surface_19_name.setter
    def surface_19_name(self, value=None):
        """  Corresponds to IDD Field `surface_19_name`

        Args:
            value (str): value for IDD Field `surface_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_19_name`')

        self._data["Surface 19 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_19(self):
        """Get fraction_of_radiant_energy_to_surface_19

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_19` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 19"]

    @fraction_of_radiant_energy_to_surface_19.setter
    def fraction_of_radiant_energy_to_surface_19(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_19`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_19`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_19`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_19`')

        self._data["Fraction of Radiant Energy to Surface 19"] = value

    @property
    def surface_20_name(self):
        """Get surface_20_name

        Returns:
            str: the value of `surface_20_name` or None if not set
        """
        return self._data["Surface 20 Name"]

    @surface_20_name.setter
    def surface_20_name(self, value=None):
        """  Corresponds to IDD Field `surface_20_name`

        Args:
            value (str): value for IDD Field `surface_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_20_name`')

        self._data["Surface 20 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_20(self):
        """Get fraction_of_radiant_energy_to_surface_20

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_20` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 20"]

    @fraction_of_radiant_energy_to_surface_20.setter
    def fraction_of_radiant_energy_to_surface_20(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_20`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_20`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_20`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_20`')

        self._data["Fraction of Radiant Energy to Surface 20"] = value

    @property
    def surface_21_name(self):
        """Get surface_21_name

        Returns:
            str: the value of `surface_21_name` or None if not set
        """
        return self._data["Surface 21 Name"]

    @surface_21_name.setter
    def surface_21_name(self, value=None):
        """  Corresponds to IDD Field `surface_21_name`

        Args:
            value (str): value for IDD Field `surface_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_21_name`')

        self._data["Surface 21 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_21(self):
        """Get fraction_of_radiant_energy_to_surface_21

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_21` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 21"]

    @fraction_of_radiant_energy_to_surface_21.setter
    def fraction_of_radiant_energy_to_surface_21(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_21`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_21`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_21`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_21`')

        self._data["Fraction of Radiant Energy to Surface 21"] = value

    @property
    def surface_22_name(self):
        """Get surface_22_name

        Returns:
            str: the value of `surface_22_name` or None if not set
        """
        return self._data["Surface 22 Name"]

    @surface_22_name.setter
    def surface_22_name(self, value=None):
        """  Corresponds to IDD Field `surface_22_name`

        Args:
            value (str): value for IDD Field `surface_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_22_name`')

        self._data["Surface 22 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_22(self):
        """Get fraction_of_radiant_energy_to_surface_22

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_22` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 22"]

    @fraction_of_radiant_energy_to_surface_22.setter
    def fraction_of_radiant_energy_to_surface_22(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_22`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_22`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_22`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_22`')

        self._data["Fraction of Radiant Energy to Surface 22"] = value

    @property
    def surface_23_name(self):
        """Get surface_23_name

        Returns:
            str: the value of `surface_23_name` or None if not set
        """
        return self._data["Surface 23 Name"]

    @surface_23_name.setter
    def surface_23_name(self, value=None):
        """  Corresponds to IDD Field `surface_23_name`

        Args:
            value (str): value for IDD Field `surface_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_23_name`')

        self._data["Surface 23 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_23(self):
        """Get fraction_of_radiant_energy_to_surface_23

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_23` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 23"]

    @fraction_of_radiant_energy_to_surface_23.setter
    def fraction_of_radiant_energy_to_surface_23(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_23`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_23`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_23`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_23`')

        self._data["Fraction of Radiant Energy to Surface 23"] = value

    @property
    def surface_24_name(self):
        """Get surface_24_name

        Returns:
            str: the value of `surface_24_name` or None if not set
        """
        return self._data["Surface 24 Name"]

    @surface_24_name.setter
    def surface_24_name(self, value=None):
        """  Corresponds to IDD Field `surface_24_name`

        Args:
            value (str): value for IDD Field `surface_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_24_name`')

        self._data["Surface 24 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_24(self):
        """Get fraction_of_radiant_energy_to_surface_24

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_24` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 24"]

    @fraction_of_radiant_energy_to_surface_24.setter
    def fraction_of_radiant_energy_to_surface_24(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_24`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_24`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_24`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_24`')

        self._data["Fraction of Radiant Energy to Surface 24"] = value

    @property
    def surface_25_name(self):
        """Get surface_25_name

        Returns:
            str: the value of `surface_25_name` or None if not set
        """
        return self._data["Surface 25 Name"]

    @surface_25_name.setter
    def surface_25_name(self, value=None):
        """  Corresponds to IDD Field `surface_25_name`

        Args:
            value (str): value for IDD Field `surface_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_25_name`')

        self._data["Surface 25 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_25(self):
        """Get fraction_of_radiant_energy_to_surface_25

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_25` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 25"]

    @fraction_of_radiant_energy_to_surface_25.setter
    def fraction_of_radiant_energy_to_surface_25(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_25`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_25`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_25`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_25`')

        self._data["Fraction of Radiant Energy to Surface 25"] = value

    @property
    def surface_26_name(self):
        """Get surface_26_name

        Returns:
            str: the value of `surface_26_name` or None if not set
        """
        return self._data["Surface 26 Name"]

    @surface_26_name.setter
    def surface_26_name(self, value=None):
        """  Corresponds to IDD Field `surface_26_name`

        Args:
            value (str): value for IDD Field `surface_26_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_26_name`')

        self._data["Surface 26 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_26(self):
        """Get fraction_of_radiant_energy_to_surface_26

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_26` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 26"]

    @fraction_of_radiant_energy_to_surface_26.setter
    def fraction_of_radiant_energy_to_surface_26(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_26`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_26`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_26`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_26`')

        self._data["Fraction of Radiant Energy to Surface 26"] = value

    @property
    def surface_27_name(self):
        """Get surface_27_name

        Returns:
            str: the value of `surface_27_name` or None if not set
        """
        return self._data["Surface 27 Name"]

    @surface_27_name.setter
    def surface_27_name(self, value=None):
        """  Corresponds to IDD Field `surface_27_name`

        Args:
            value (str): value for IDD Field `surface_27_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_27_name`')

        self._data["Surface 27 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_27(self):
        """Get fraction_of_radiant_energy_to_surface_27

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_27` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 27"]

    @fraction_of_radiant_energy_to_surface_27.setter
    def fraction_of_radiant_energy_to_surface_27(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_27`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_27`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_27`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_27`')

        self._data["Fraction of Radiant Energy to Surface 27"] = value

    @property
    def surface_28_name(self):
        """Get surface_28_name

        Returns:
            str: the value of `surface_28_name` or None if not set
        """
        return self._data["Surface 28 Name"]

    @surface_28_name.setter
    def surface_28_name(self, value=None):
        """  Corresponds to IDD Field `surface_28_name`

        Args:
            value (str): value for IDD Field `surface_28_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_28_name`')

        self._data["Surface 28 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_28(self):
        """Get fraction_of_radiant_energy_to_surface_28

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_28` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 28"]

    @fraction_of_radiant_energy_to_surface_28.setter
    def fraction_of_radiant_energy_to_surface_28(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_28`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_28`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_28`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_28`')

        self._data["Fraction of Radiant Energy to Surface 28"] = value

    @property
    def surface_29_name(self):
        """Get surface_29_name

        Returns:
            str: the value of `surface_29_name` or None if not set
        """
        return self._data["Surface 29 Name"]

    @surface_29_name.setter
    def surface_29_name(self, value=None):
        """  Corresponds to IDD Field `surface_29_name`

        Args:
            value (str): value for IDD Field `surface_29_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_29_name`')

        self._data["Surface 29 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_29(self):
        """Get fraction_of_radiant_energy_to_surface_29

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_29` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 29"]

    @fraction_of_radiant_energy_to_surface_29.setter
    def fraction_of_radiant_energy_to_surface_29(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_29`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_29`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_29`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_29`')

        self._data["Fraction of Radiant Energy to Surface 29"] = value

    @property
    def surface_30_name(self):
        """Get surface_30_name

        Returns:
            str: the value of `surface_30_name` or None if not set
        """
        return self._data["Surface 30 Name"]

    @surface_30_name.setter
    def surface_30_name(self, value=None):
        """  Corresponds to IDD Field `surface_30_name`

        Args:
            value (str): value for IDD Field `surface_30_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_30_name`')

        self._data["Surface 30 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_30(self):
        """Get fraction_of_radiant_energy_to_surface_30

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_30` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 30"]

    @fraction_of_radiant_energy_to_surface_30.setter
    def fraction_of_radiant_energy_to_surface_30(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_30`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_30`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_30`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_30`')

        self._data["Fraction of Radiant Energy to Surface 30"] = value

    @property
    def surface_31_name(self):
        """Get surface_31_name

        Returns:
            str: the value of `surface_31_name` or None if not set
        """
        return self._data["Surface 31 Name"]

    @surface_31_name.setter
    def surface_31_name(self, value=None):
        """  Corresponds to IDD Field `surface_31_name`

        Args:
            value (str): value for IDD Field `surface_31_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_31_name`')

        self._data["Surface 31 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_31(self):
        """Get fraction_of_radiant_energy_to_surface_31

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_31` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 31"]

    @fraction_of_radiant_energy_to_surface_31.setter
    def fraction_of_radiant_energy_to_surface_31(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_31`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_31`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_31`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_31`')

        self._data["Fraction of Radiant Energy to Surface 31"] = value

    @property
    def surface_32_name(self):
        """Get surface_32_name

        Returns:
            str: the value of `surface_32_name` or None if not set
        """
        return self._data["Surface 32 Name"]

    @surface_32_name.setter
    def surface_32_name(self, value=None):
        """  Corresponds to IDD Field `surface_32_name`

        Args:
            value (str): value for IDD Field `surface_32_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_32_name`')

        self._data["Surface 32 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_32(self):
        """Get fraction_of_radiant_energy_to_surface_32

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_32` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 32"]

    @fraction_of_radiant_energy_to_surface_32.setter
    def fraction_of_radiant_energy_to_surface_32(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_32`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_32`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_32`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_32`')

        self._data["Fraction of Radiant Energy to Surface 32"] = value

    @property
    def surface_33_name(self):
        """Get surface_33_name

        Returns:
            str: the value of `surface_33_name` or None if not set
        """
        return self._data["Surface 33 Name"]

    @surface_33_name.setter
    def surface_33_name(self, value=None):
        """  Corresponds to IDD Field `surface_33_name`

        Args:
            value (str): value for IDD Field `surface_33_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_33_name`')

        self._data["Surface 33 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_33(self):
        """Get fraction_of_radiant_energy_to_surface_33

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_33` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 33"]

    @fraction_of_radiant_energy_to_surface_33.setter
    def fraction_of_radiant_energy_to_surface_33(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_33`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_33`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_33`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_33`')

        self._data["Fraction of Radiant Energy to Surface 33"] = value

    @property
    def surface_34_name(self):
        """Get surface_34_name

        Returns:
            str: the value of `surface_34_name` or None if not set
        """
        return self._data["Surface 34 Name"]

    @surface_34_name.setter
    def surface_34_name(self, value=None):
        """  Corresponds to IDD Field `surface_34_name`

        Args:
            value (str): value for IDD Field `surface_34_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_34_name`')

        self._data["Surface 34 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_34(self):
        """Get fraction_of_radiant_energy_to_surface_34

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_34` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 34"]

    @fraction_of_radiant_energy_to_surface_34.setter
    def fraction_of_radiant_energy_to_surface_34(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_34`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_34`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_34`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_34`')

        self._data["Fraction of Radiant Energy to Surface 34"] = value

    @property
    def surface_35_name(self):
        """Get surface_35_name

        Returns:
            str: the value of `surface_35_name` or None if not set
        """
        return self._data["Surface 35 Name"]

    @surface_35_name.setter
    def surface_35_name(self, value=None):
        """  Corresponds to IDD Field `surface_35_name`

        Args:
            value (str): value for IDD Field `surface_35_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_35_name`')

        self._data["Surface 35 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_35(self):
        """Get fraction_of_radiant_energy_to_surface_35

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_35` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 35"]

    @fraction_of_radiant_energy_to_surface_35.setter
    def fraction_of_radiant_energy_to_surface_35(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_35`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_35`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_35`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_35`')

        self._data["Fraction of Radiant Energy to Surface 35"] = value

    @property
    def surface_36_name(self):
        """Get surface_36_name

        Returns:
            str: the value of `surface_36_name` or None if not set
        """
        return self._data["Surface 36 Name"]

    @surface_36_name.setter
    def surface_36_name(self, value=None):
        """  Corresponds to IDD Field `surface_36_name`

        Args:
            value (str): value for IDD Field `surface_36_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_36_name`')

        self._data["Surface 36 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_36(self):
        """Get fraction_of_radiant_energy_to_surface_36

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_36` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 36"]

    @fraction_of_radiant_energy_to_surface_36.setter
    def fraction_of_radiant_energy_to_surface_36(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_36`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_36`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_36`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_36`')

        self._data["Fraction of Radiant Energy to Surface 36"] = value

    @property
    def surface_37_name(self):
        """Get surface_37_name

        Returns:
            str: the value of `surface_37_name` or None if not set
        """
        return self._data["Surface 37 Name"]

    @surface_37_name.setter
    def surface_37_name(self, value=None):
        """  Corresponds to IDD Field `surface_37_name`

        Args:
            value (str): value for IDD Field `surface_37_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_37_name`')

        self._data["Surface 37 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_37(self):
        """Get fraction_of_radiant_energy_to_surface_37

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_37` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 37"]

    @fraction_of_radiant_energy_to_surface_37.setter
    def fraction_of_radiant_energy_to_surface_37(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_37`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_37`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_37`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_37`')

        self._data["Fraction of Radiant Energy to Surface 37"] = value

    @property
    def surface_38_name(self):
        """Get surface_38_name

        Returns:
            str: the value of `surface_38_name` or None if not set
        """
        return self._data["Surface 38 Name"]

    @surface_38_name.setter
    def surface_38_name(self, value=None):
        """  Corresponds to IDD Field `surface_38_name`

        Args:
            value (str): value for IDD Field `surface_38_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_38_name`')

        self._data["Surface 38 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_38(self):
        """Get fraction_of_radiant_energy_to_surface_38

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_38` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 38"]

    @fraction_of_radiant_energy_to_surface_38.setter
    def fraction_of_radiant_energy_to_surface_38(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_38`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_38`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_38`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_38`')

        self._data["Fraction of Radiant Energy to Surface 38"] = value

    @property
    def surface_39_name(self):
        """Get surface_39_name

        Returns:
            str: the value of `surface_39_name` or None if not set
        """
        return self._data["Surface 39 Name"]

    @surface_39_name.setter
    def surface_39_name(self, value=None):
        """  Corresponds to IDD Field `surface_39_name`

        Args:
            value (str): value for IDD Field `surface_39_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_39_name`')

        self._data["Surface 39 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_39(self):
        """Get fraction_of_radiant_energy_to_surface_39

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_39` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 39"]

    @fraction_of_radiant_energy_to_surface_39.setter
    def fraction_of_radiant_energy_to_surface_39(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_39`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_39`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_39`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_39`')

        self._data["Fraction of Radiant Energy to Surface 39"] = value

    @property
    def surface_40_name(self):
        """Get surface_40_name

        Returns:
            str: the value of `surface_40_name` or None if not set
        """
        return self._data["Surface 40 Name"]

    @surface_40_name.setter
    def surface_40_name(self, value=None):
        """  Corresponds to IDD Field `surface_40_name`

        Args:
            value (str): value for IDD Field `surface_40_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_40_name`')

        self._data["Surface 40 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_40(self):
        """Get fraction_of_radiant_energy_to_surface_40

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_40` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 40"]

    @fraction_of_radiant_energy_to_surface_40.setter
    def fraction_of_radiant_energy_to_surface_40(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_40`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_40`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_40`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_40`')

        self._data["Fraction of Radiant Energy to Surface 40"] = value

    @property
    def surface_41_name(self):
        """Get surface_41_name

        Returns:
            str: the value of `surface_41_name` or None if not set
        """
        return self._data["Surface 41 Name"]

    @surface_41_name.setter
    def surface_41_name(self, value=None):
        """  Corresponds to IDD Field `surface_41_name`

        Args:
            value (str): value for IDD Field `surface_41_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_41_name`')

        self._data["Surface 41 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_41(self):
        """Get fraction_of_radiant_energy_to_surface_41

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_41` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 41"]

    @fraction_of_radiant_energy_to_surface_41.setter
    def fraction_of_radiant_energy_to_surface_41(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_41`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_41`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_41`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_41`')

        self._data["Fraction of Radiant Energy to Surface 41"] = value

    @property
    def surface_42_name(self):
        """Get surface_42_name

        Returns:
            str: the value of `surface_42_name` or None if not set
        """
        return self._data["Surface 42 Name"]

    @surface_42_name.setter
    def surface_42_name(self, value=None):
        """  Corresponds to IDD Field `surface_42_name`

        Args:
            value (str): value for IDD Field `surface_42_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_42_name`')

        self._data["Surface 42 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_42(self):
        """Get fraction_of_radiant_energy_to_surface_42

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_42` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 42"]

    @fraction_of_radiant_energy_to_surface_42.setter
    def fraction_of_radiant_energy_to_surface_42(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_42`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_42`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_42`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_42`')

        self._data["Fraction of Radiant Energy to Surface 42"] = value

    @property
    def surface_43_name(self):
        """Get surface_43_name

        Returns:
            str: the value of `surface_43_name` or None if not set
        """
        return self._data["Surface 43 Name"]

    @surface_43_name.setter
    def surface_43_name(self, value=None):
        """  Corresponds to IDD Field `surface_43_name`

        Args:
            value (str): value for IDD Field `surface_43_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_43_name`')

        self._data["Surface 43 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_43(self):
        """Get fraction_of_radiant_energy_to_surface_43

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_43` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 43"]

    @fraction_of_radiant_energy_to_surface_43.setter
    def fraction_of_radiant_energy_to_surface_43(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_43`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_43`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_43`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_43`')

        self._data["Fraction of Radiant Energy to Surface 43"] = value

    @property
    def surface_44_name(self):
        """Get surface_44_name

        Returns:
            str: the value of `surface_44_name` or None if not set
        """
        return self._data["Surface 44 Name"]

    @surface_44_name.setter
    def surface_44_name(self, value=None):
        """  Corresponds to IDD Field `surface_44_name`

        Args:
            value (str): value for IDD Field `surface_44_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_44_name`')

        self._data["Surface 44 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_44(self):
        """Get fraction_of_radiant_energy_to_surface_44

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_44` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 44"]

    @fraction_of_radiant_energy_to_surface_44.setter
    def fraction_of_radiant_energy_to_surface_44(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_44`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_44`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_44`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_44`')

        self._data["Fraction of Radiant Energy to Surface 44"] = value

    @property
    def surface_45_name(self):
        """Get surface_45_name

        Returns:
            str: the value of `surface_45_name` or None if not set
        """
        return self._data["Surface 45 Name"]

    @surface_45_name.setter
    def surface_45_name(self, value=None):
        """  Corresponds to IDD Field `surface_45_name`

        Args:
            value (str): value for IDD Field `surface_45_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_45_name`')

        self._data["Surface 45 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_45(self):
        """Get fraction_of_radiant_energy_to_surface_45

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_45` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 45"]

    @fraction_of_radiant_energy_to_surface_45.setter
    def fraction_of_radiant_energy_to_surface_45(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_45`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_45`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_45`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_45`')

        self._data["Fraction of Radiant Energy to Surface 45"] = value

    @property
    def surface_46_name(self):
        """Get surface_46_name

        Returns:
            str: the value of `surface_46_name` or None if not set
        """
        return self._data["Surface 46 Name"]

    @surface_46_name.setter
    def surface_46_name(self, value=None):
        """  Corresponds to IDD Field `surface_46_name`

        Args:
            value (str): value for IDD Field `surface_46_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_46_name`')

        self._data["Surface 46 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_46(self):
        """Get fraction_of_radiant_energy_to_surface_46

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_46` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 46"]

    @fraction_of_radiant_energy_to_surface_46.setter
    def fraction_of_radiant_energy_to_surface_46(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_46`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_46`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_46`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_46`')

        self._data["Fraction of Radiant Energy to Surface 46"] = value

    @property
    def surface_47_name(self):
        """Get surface_47_name

        Returns:
            str: the value of `surface_47_name` or None if not set
        """
        return self._data["Surface 47 Name"]

    @surface_47_name.setter
    def surface_47_name(self, value=None):
        """  Corresponds to IDD Field `surface_47_name`

        Args:
            value (str): value for IDD Field `surface_47_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_47_name`')

        self._data["Surface 47 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_47(self):
        """Get fraction_of_radiant_energy_to_surface_47

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_47` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 47"]

    @fraction_of_radiant_energy_to_surface_47.setter
    def fraction_of_radiant_energy_to_surface_47(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_47`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_47`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_47`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_47`')

        self._data["Fraction of Radiant Energy to Surface 47"] = value

    @property
    def surface_48_name(self):
        """Get surface_48_name

        Returns:
            str: the value of `surface_48_name` or None if not set
        """
        return self._data["Surface 48 Name"]

    @surface_48_name.setter
    def surface_48_name(self, value=None):
        """  Corresponds to IDD Field `surface_48_name`

        Args:
            value (str): value for IDD Field `surface_48_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_48_name`')

        self._data["Surface 48 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_48(self):
        """Get fraction_of_radiant_energy_to_surface_48

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_48` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 48"]

    @fraction_of_radiant_energy_to_surface_48.setter
    def fraction_of_radiant_energy_to_surface_48(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_48`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_48`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_48`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_48`')

        self._data["Fraction of Radiant Energy to Surface 48"] = value

    @property
    def surface_49_name(self):
        """Get surface_49_name

        Returns:
            str: the value of `surface_49_name` or None if not set
        """
        return self._data["Surface 49 Name"]

    @surface_49_name.setter
    def surface_49_name(self, value=None):
        """  Corresponds to IDD Field `surface_49_name`

        Args:
            value (str): value for IDD Field `surface_49_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_49_name`')

        self._data["Surface 49 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_49(self):
        """Get fraction_of_radiant_energy_to_surface_49

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_49` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 49"]

    @fraction_of_radiant_energy_to_surface_49.setter
    def fraction_of_radiant_energy_to_surface_49(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_49`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_49`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_49`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_49`')

        self._data["Fraction of Radiant Energy to Surface 49"] = value

    @property
    def surface_50_name(self):
        """Get surface_50_name

        Returns:
            str: the value of `surface_50_name` or None if not set
        """
        return self._data["Surface 50 Name"]

    @surface_50_name.setter
    def surface_50_name(self, value=None):
        """  Corresponds to IDD Field `surface_50_name`

        Args:
            value (str): value for IDD Field `surface_50_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_50_name`')

        self._data["Surface 50 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_50(self):
        """Get fraction_of_radiant_energy_to_surface_50

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_50` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 50"]

    @fraction_of_radiant_energy_to_surface_50.setter
    def fraction_of_radiant_energy_to_surface_50(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_50`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_50`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_50`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_50`')

        self._data["Fraction of Radiant Energy to Surface 50"] = value

    @property
    def surface_51_name(self):
        """Get surface_51_name

        Returns:
            str: the value of `surface_51_name` or None if not set
        """
        return self._data["Surface 51 Name"]

    @surface_51_name.setter
    def surface_51_name(self, value=None):
        """  Corresponds to IDD Field `surface_51_name`

        Args:
            value (str): value for IDD Field `surface_51_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_51_name`')

        self._data["Surface 51 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_51(self):
        """Get fraction_of_radiant_energy_to_surface_51

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_51` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 51"]

    @fraction_of_radiant_energy_to_surface_51.setter
    def fraction_of_radiant_energy_to_surface_51(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_51`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_51`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_51`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_51`')

        self._data["Fraction of Radiant Energy to Surface 51"] = value

    @property
    def surface_52_name(self):
        """Get surface_52_name

        Returns:
            str: the value of `surface_52_name` or None if not set
        """
        return self._data["Surface 52 Name"]

    @surface_52_name.setter
    def surface_52_name(self, value=None):
        """  Corresponds to IDD Field `surface_52_name`

        Args:
            value (str): value for IDD Field `surface_52_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_52_name`')

        self._data["Surface 52 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_52(self):
        """Get fraction_of_radiant_energy_to_surface_52

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_52` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 52"]

    @fraction_of_radiant_energy_to_surface_52.setter
    def fraction_of_radiant_energy_to_surface_52(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_52`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_52`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_52`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_52`')

        self._data["Fraction of Radiant Energy to Surface 52"] = value

    @property
    def surface_53_name(self):
        """Get surface_53_name

        Returns:
            str: the value of `surface_53_name` or None if not set
        """
        return self._data["Surface 53 Name"]

    @surface_53_name.setter
    def surface_53_name(self, value=None):
        """  Corresponds to IDD Field `surface_53_name`

        Args:
            value (str): value for IDD Field `surface_53_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_53_name`')

        self._data["Surface 53 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_53(self):
        """Get fraction_of_radiant_energy_to_surface_53

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_53` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 53"]

    @fraction_of_radiant_energy_to_surface_53.setter
    def fraction_of_radiant_energy_to_surface_53(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_53`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_53`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_53`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_53`')

        self._data["Fraction of Radiant Energy to Surface 53"] = value

    @property
    def surface_54_name(self):
        """Get surface_54_name

        Returns:
            str: the value of `surface_54_name` or None if not set
        """
        return self._data["Surface 54 Name"]

    @surface_54_name.setter
    def surface_54_name(self, value=None):
        """  Corresponds to IDD Field `surface_54_name`

        Args:
            value (str): value for IDD Field `surface_54_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_54_name`')

        self._data["Surface 54 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_54(self):
        """Get fraction_of_radiant_energy_to_surface_54

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_54` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 54"]

    @fraction_of_radiant_energy_to_surface_54.setter
    def fraction_of_radiant_energy_to_surface_54(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_54`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_54`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_54`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_54`')

        self._data["Fraction of Radiant Energy to Surface 54"] = value

    @property
    def surface_55_name(self):
        """Get surface_55_name

        Returns:
            str: the value of `surface_55_name` or None if not set
        """
        return self._data["Surface 55 Name"]

    @surface_55_name.setter
    def surface_55_name(self, value=None):
        """  Corresponds to IDD Field `surface_55_name`

        Args:
            value (str): value for IDD Field `surface_55_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_55_name`')

        self._data["Surface 55 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_55(self):
        """Get fraction_of_radiant_energy_to_surface_55

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_55` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 55"]

    @fraction_of_radiant_energy_to_surface_55.setter
    def fraction_of_radiant_energy_to_surface_55(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_55`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_55`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_55`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_55`')

        self._data["Fraction of Radiant Energy to Surface 55"] = value

    @property
    def surface_56_name(self):
        """Get surface_56_name

        Returns:
            str: the value of `surface_56_name` or None if not set
        """
        return self._data["Surface 56 Name"]

    @surface_56_name.setter
    def surface_56_name(self, value=None):
        """  Corresponds to IDD Field `surface_56_name`

        Args:
            value (str): value for IDD Field `surface_56_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_56_name`')

        self._data["Surface 56 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_56(self):
        """Get fraction_of_radiant_energy_to_surface_56

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_56` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 56"]

    @fraction_of_radiant_energy_to_surface_56.setter
    def fraction_of_radiant_energy_to_surface_56(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_56`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_56`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_56`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_56`')

        self._data["Fraction of Radiant Energy to Surface 56"] = value

    @property
    def surface_57_name(self):
        """Get surface_57_name

        Returns:
            str: the value of `surface_57_name` or None if not set
        """
        return self._data["Surface 57 Name"]

    @surface_57_name.setter
    def surface_57_name(self, value=None):
        """  Corresponds to IDD Field `surface_57_name`

        Args:
            value (str): value for IDD Field `surface_57_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_57_name`')

        self._data["Surface 57 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_57(self):
        """Get fraction_of_radiant_energy_to_surface_57

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_57` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 57"]

    @fraction_of_radiant_energy_to_surface_57.setter
    def fraction_of_radiant_energy_to_surface_57(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_57`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_57`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_57`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_57`')

        self._data["Fraction of Radiant Energy to Surface 57"] = value

    @property
    def surface_58_name(self):
        """Get surface_58_name

        Returns:
            str: the value of `surface_58_name` or None if not set
        """
        return self._data["Surface 58 Name"]

    @surface_58_name.setter
    def surface_58_name(self, value=None):
        """  Corresponds to IDD Field `surface_58_name`

        Args:
            value (str): value for IDD Field `surface_58_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_58_name`')

        self._data["Surface 58 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_58(self):
        """Get fraction_of_radiant_energy_to_surface_58

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_58` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 58"]

    @fraction_of_radiant_energy_to_surface_58.setter
    def fraction_of_radiant_energy_to_surface_58(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_58`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_58`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_58`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_58`')

        self._data["Fraction of Radiant Energy to Surface 58"] = value

    @property
    def surface_59_name(self):
        """Get surface_59_name

        Returns:
            str: the value of `surface_59_name` or None if not set
        """
        return self._data["Surface 59 Name"]

    @surface_59_name.setter
    def surface_59_name(self, value=None):
        """  Corresponds to IDD Field `surface_59_name`

        Args:
            value (str): value for IDD Field `surface_59_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_59_name`')

        self._data["Surface 59 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_59(self):
        """Get fraction_of_radiant_energy_to_surface_59

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_59` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 59"]

    @fraction_of_radiant_energy_to_surface_59.setter
    def fraction_of_radiant_energy_to_surface_59(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_59`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_59`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_59`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_59`')

        self._data["Fraction of Radiant Energy to Surface 59"] = value

    @property
    def surface_60_name(self):
        """Get surface_60_name

        Returns:
            str: the value of `surface_60_name` or None if not set
        """
        return self._data["Surface 60 Name"]

    @surface_60_name.setter
    def surface_60_name(self, value=None):
        """  Corresponds to IDD Field `surface_60_name`

        Args:
            value (str): value for IDD Field `surface_60_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_60_name`')

        self._data["Surface 60 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_60(self):
        """Get fraction_of_radiant_energy_to_surface_60

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_60` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 60"]

    @fraction_of_radiant_energy_to_surface_60.setter
    def fraction_of_radiant_energy_to_surface_60(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_60`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_60`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_60`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_60`')

        self._data["Fraction of Radiant Energy to Surface 60"] = value

    @property
    def surface_61_name(self):
        """Get surface_61_name

        Returns:
            str: the value of `surface_61_name` or None if not set
        """
        return self._data["Surface 61 Name"]

    @surface_61_name.setter
    def surface_61_name(self, value=None):
        """  Corresponds to IDD Field `surface_61_name`

        Args:
            value (str): value for IDD Field `surface_61_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_61_name`')

        self._data["Surface 61 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_61(self):
        """Get fraction_of_radiant_energy_to_surface_61

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_61` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 61"]

    @fraction_of_radiant_energy_to_surface_61.setter
    def fraction_of_radiant_energy_to_surface_61(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_61`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_61`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_61`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_61`')

        self._data["Fraction of Radiant Energy to Surface 61"] = value

    @property
    def surface_62_name(self):
        """Get surface_62_name

        Returns:
            str: the value of `surface_62_name` or None if not set
        """
        return self._data["Surface 62 Name"]

    @surface_62_name.setter
    def surface_62_name(self, value=None):
        """  Corresponds to IDD Field `surface_62_name`

        Args:
            value (str): value for IDD Field `surface_62_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_62_name`')

        self._data["Surface 62 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_62(self):
        """Get fraction_of_radiant_energy_to_surface_62

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_62` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 62"]

    @fraction_of_radiant_energy_to_surface_62.setter
    def fraction_of_radiant_energy_to_surface_62(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_62`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_62`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_62`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_62`')

        self._data["Fraction of Radiant Energy to Surface 62"] = value

    @property
    def surface_63_name(self):
        """Get surface_63_name

        Returns:
            str: the value of `surface_63_name` or None if not set
        """
        return self._data["Surface 63 Name"]

    @surface_63_name.setter
    def surface_63_name(self, value=None):
        """  Corresponds to IDD Field `surface_63_name`

        Args:
            value (str): value for IDD Field `surface_63_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_63_name`')

        self._data["Surface 63 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_63(self):
        """Get fraction_of_radiant_energy_to_surface_63

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_63` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 63"]

    @fraction_of_radiant_energy_to_surface_63.setter
    def fraction_of_radiant_energy_to_surface_63(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_63`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_63`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_63`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_63`')

        self._data["Fraction of Radiant Energy to Surface 63"] = value

    @property
    def surface_64_name(self):
        """Get surface_64_name

        Returns:
            str: the value of `surface_64_name` or None if not set
        """
        return self._data["Surface 64 Name"]

    @surface_64_name.setter
    def surface_64_name(self, value=None):
        """  Corresponds to IDD Field `surface_64_name`

        Args:
            value (str): value for IDD Field `surface_64_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_64_name`')

        self._data["Surface 64 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_64(self):
        """Get fraction_of_radiant_energy_to_surface_64

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_64` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 64"]

    @fraction_of_radiant_energy_to_surface_64.setter
    def fraction_of_radiant_energy_to_surface_64(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_64`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_64`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_64`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_64`')

        self._data["Fraction of Radiant Energy to Surface 64"] = value

    @property
    def surface_65_name(self):
        """Get surface_65_name

        Returns:
            str: the value of `surface_65_name` or None if not set
        """
        return self._data["Surface 65 Name"]

    @surface_65_name.setter
    def surface_65_name(self, value=None):
        """  Corresponds to IDD Field `surface_65_name`

        Args:
            value (str): value for IDD Field `surface_65_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_65_name`')

        self._data["Surface 65 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_65(self):
        """Get fraction_of_radiant_energy_to_surface_65

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_65` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 65"]

    @fraction_of_radiant_energy_to_surface_65.setter
    def fraction_of_radiant_energy_to_surface_65(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_65`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_65`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_65`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_65`')

        self._data["Fraction of Radiant Energy to Surface 65"] = value

    @property
    def surface_66_name(self):
        """Get surface_66_name

        Returns:
            str: the value of `surface_66_name` or None if not set
        """
        return self._data["Surface 66 Name"]

    @surface_66_name.setter
    def surface_66_name(self, value=None):
        """  Corresponds to IDD Field `surface_66_name`

        Args:
            value (str): value for IDD Field `surface_66_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_66_name`')

        self._data["Surface 66 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_66(self):
        """Get fraction_of_radiant_energy_to_surface_66

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_66` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 66"]

    @fraction_of_radiant_energy_to_surface_66.setter
    def fraction_of_radiant_energy_to_surface_66(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_66`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_66`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_66`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_66`')

        self._data["Fraction of Radiant Energy to Surface 66"] = value

    @property
    def surface_67_name(self):
        """Get surface_67_name

        Returns:
            str: the value of `surface_67_name` or None if not set
        """
        return self._data["Surface 67 Name"]

    @surface_67_name.setter
    def surface_67_name(self, value=None):
        """  Corresponds to IDD Field `surface_67_name`

        Args:
            value (str): value for IDD Field `surface_67_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_67_name`')

        self._data["Surface 67 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_67(self):
        """Get fraction_of_radiant_energy_to_surface_67

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_67` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 67"]

    @fraction_of_radiant_energy_to_surface_67.setter
    def fraction_of_radiant_energy_to_surface_67(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_67`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_67`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_67`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_67`')

        self._data["Fraction of Radiant Energy to Surface 67"] = value

    @property
    def surface_68_name(self):
        """Get surface_68_name

        Returns:
            str: the value of `surface_68_name` or None if not set
        """
        return self._data["Surface 68 Name"]

    @surface_68_name.setter
    def surface_68_name(self, value=None):
        """  Corresponds to IDD Field `surface_68_name`

        Args:
            value (str): value for IDD Field `surface_68_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_68_name`')

        self._data["Surface 68 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_68(self):
        """Get fraction_of_radiant_energy_to_surface_68

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_68` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 68"]

    @fraction_of_radiant_energy_to_surface_68.setter
    def fraction_of_radiant_energy_to_surface_68(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_68`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_68`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_68`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_68`')

        self._data["Fraction of Radiant Energy to Surface 68"] = value

    @property
    def surface_69_name(self):
        """Get surface_69_name

        Returns:
            str: the value of `surface_69_name` or None if not set
        """
        return self._data["Surface 69 Name"]

    @surface_69_name.setter
    def surface_69_name(self, value=None):
        """  Corresponds to IDD Field `surface_69_name`

        Args:
            value (str): value for IDD Field `surface_69_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_69_name`')

        self._data["Surface 69 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_69(self):
        """Get fraction_of_radiant_energy_to_surface_69

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_69` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 69"]

    @fraction_of_radiant_energy_to_surface_69.setter
    def fraction_of_radiant_energy_to_surface_69(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_69`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_69`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_69`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_69`')

        self._data["Fraction of Radiant Energy to Surface 69"] = value

    @property
    def surface_70_name(self):
        """Get surface_70_name

        Returns:
            str: the value of `surface_70_name` or None if not set
        """
        return self._data["Surface 70 Name"]

    @surface_70_name.setter
    def surface_70_name(self, value=None):
        """  Corresponds to IDD Field `surface_70_name`

        Args:
            value (str): value for IDD Field `surface_70_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_70_name`')

        self._data["Surface 70 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_70(self):
        """Get fraction_of_radiant_energy_to_surface_70

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_70` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 70"]

    @fraction_of_radiant_energy_to_surface_70.setter
    def fraction_of_radiant_energy_to_surface_70(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_70`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_70`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_70`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_70`')

        self._data["Fraction of Radiant Energy to Surface 70"] = value

    @property
    def surface_71_name(self):
        """Get surface_71_name

        Returns:
            str: the value of `surface_71_name` or None if not set
        """
        return self._data["Surface 71 Name"]

    @surface_71_name.setter
    def surface_71_name(self, value=None):
        """  Corresponds to IDD Field `surface_71_name`

        Args:
            value (str): value for IDD Field `surface_71_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_71_name`')

        self._data["Surface 71 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_71(self):
        """Get fraction_of_radiant_energy_to_surface_71

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_71` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 71"]

    @fraction_of_radiant_energy_to_surface_71.setter
    def fraction_of_radiant_energy_to_surface_71(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_71`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_71`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_71`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_71`')

        self._data["Fraction of Radiant Energy to Surface 71"] = value

    @property
    def surface_72_name(self):
        """Get surface_72_name

        Returns:
            str: the value of `surface_72_name` or None if not set
        """
        return self._data["Surface 72 Name"]

    @surface_72_name.setter
    def surface_72_name(self, value=None):
        """  Corresponds to IDD Field `surface_72_name`

        Args:
            value (str): value for IDD Field `surface_72_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_72_name`')

        self._data["Surface 72 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_72(self):
        """Get fraction_of_radiant_energy_to_surface_72

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_72` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 72"]

    @fraction_of_radiant_energy_to_surface_72.setter
    def fraction_of_radiant_energy_to_surface_72(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_72`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_72`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_72`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_72`')

        self._data["Fraction of Radiant Energy to Surface 72"] = value

    @property
    def surface_73_name(self):
        """Get surface_73_name

        Returns:
            str: the value of `surface_73_name` or None if not set
        """
        return self._data["Surface 73 Name"]

    @surface_73_name.setter
    def surface_73_name(self, value=None):
        """  Corresponds to IDD Field `surface_73_name`

        Args:
            value (str): value for IDD Field `surface_73_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_73_name`')

        self._data["Surface 73 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_73(self):
        """Get fraction_of_radiant_energy_to_surface_73

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_73` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 73"]

    @fraction_of_radiant_energy_to_surface_73.setter
    def fraction_of_radiant_energy_to_surface_73(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_73`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_73`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_73`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_73`')

        self._data["Fraction of Radiant Energy to Surface 73"] = value

    @property
    def surface_74_name(self):
        """Get surface_74_name

        Returns:
            str: the value of `surface_74_name` or None if not set
        """
        return self._data["Surface 74 Name"]

    @surface_74_name.setter
    def surface_74_name(self, value=None):
        """  Corresponds to IDD Field `surface_74_name`

        Args:
            value (str): value for IDD Field `surface_74_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_74_name`')

        self._data["Surface 74 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_74(self):
        """Get fraction_of_radiant_energy_to_surface_74

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_74` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 74"]

    @fraction_of_radiant_energy_to_surface_74.setter
    def fraction_of_radiant_energy_to_surface_74(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_74`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_74`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_74`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_74`')

        self._data["Fraction of Radiant Energy to Surface 74"] = value

    @property
    def surface_75_name(self):
        """Get surface_75_name

        Returns:
            str: the value of `surface_75_name` or None if not set
        """
        return self._data["Surface 75 Name"]

    @surface_75_name.setter
    def surface_75_name(self, value=None):
        """  Corresponds to IDD Field `surface_75_name`

        Args:
            value (str): value for IDD Field `surface_75_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_75_name`')

        self._data["Surface 75 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_75(self):
        """Get fraction_of_radiant_energy_to_surface_75

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_75` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 75"]

    @fraction_of_radiant_energy_to_surface_75.setter
    def fraction_of_radiant_energy_to_surface_75(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_75`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_75`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_75`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_75`')

        self._data["Fraction of Radiant Energy to Surface 75"] = value

    @property
    def surface_76_name(self):
        """Get surface_76_name

        Returns:
            str: the value of `surface_76_name` or None if not set
        """
        return self._data["Surface 76 Name"]

    @surface_76_name.setter
    def surface_76_name(self, value=None):
        """  Corresponds to IDD Field `surface_76_name`

        Args:
            value (str): value for IDD Field `surface_76_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_76_name`')

        self._data["Surface 76 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_76(self):
        """Get fraction_of_radiant_energy_to_surface_76

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_76` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 76"]

    @fraction_of_radiant_energy_to_surface_76.setter
    def fraction_of_radiant_energy_to_surface_76(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_76`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_76`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_76`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_76`')

        self._data["Fraction of Radiant Energy to Surface 76"] = value

    @property
    def surface_77_name(self):
        """Get surface_77_name

        Returns:
            str: the value of `surface_77_name` or None if not set
        """
        return self._data["Surface 77 Name"]

    @surface_77_name.setter
    def surface_77_name(self, value=None):
        """  Corresponds to IDD Field `surface_77_name`

        Args:
            value (str): value for IDD Field `surface_77_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_77_name`')

        self._data["Surface 77 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_77(self):
        """Get fraction_of_radiant_energy_to_surface_77

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_77` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 77"]

    @fraction_of_radiant_energy_to_surface_77.setter
    def fraction_of_radiant_energy_to_surface_77(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_77`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_77`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_77`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_77`')

        self._data["Fraction of Radiant Energy to Surface 77"] = value

    @property
    def surface_78_name(self):
        """Get surface_78_name

        Returns:
            str: the value of `surface_78_name` or None if not set
        """
        return self._data["Surface 78 Name"]

    @surface_78_name.setter
    def surface_78_name(self, value=None):
        """  Corresponds to IDD Field `surface_78_name`

        Args:
            value (str): value for IDD Field `surface_78_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_78_name`')

        self._data["Surface 78 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_78(self):
        """Get fraction_of_radiant_energy_to_surface_78

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_78` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 78"]

    @fraction_of_radiant_energy_to_surface_78.setter
    def fraction_of_radiant_energy_to_surface_78(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_78`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_78`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_78`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_78`')

        self._data["Fraction of Radiant Energy to Surface 78"] = value

    @property
    def surface_79_name(self):
        """Get surface_79_name

        Returns:
            str: the value of `surface_79_name` or None if not set
        """
        return self._data["Surface 79 Name"]

    @surface_79_name.setter
    def surface_79_name(self, value=None):
        """  Corresponds to IDD Field `surface_79_name`

        Args:
            value (str): value for IDD Field `surface_79_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_79_name`')

        self._data["Surface 79 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_79(self):
        """Get fraction_of_radiant_energy_to_surface_79

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_79` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 79"]

    @fraction_of_radiant_energy_to_surface_79.setter
    def fraction_of_radiant_energy_to_surface_79(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_79`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_79`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_79`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_79`')

        self._data["Fraction of Radiant Energy to Surface 79"] = value

    @property
    def surface_80_name(self):
        """Get surface_80_name

        Returns:
            str: the value of `surface_80_name` or None if not set
        """
        return self._data["Surface 80 Name"]

    @surface_80_name.setter
    def surface_80_name(self, value=None):
        """  Corresponds to IDD Field `surface_80_name`

        Args:
            value (str): value for IDD Field `surface_80_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_80_name`')

        self._data["Surface 80 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_80(self):
        """Get fraction_of_radiant_energy_to_surface_80

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_80` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 80"]

    @fraction_of_radiant_energy_to_surface_80.setter
    def fraction_of_radiant_energy_to_surface_80(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_80`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_80`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_80`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_80`')

        self._data["Fraction of Radiant Energy to Surface 80"] = value

    @property
    def surface_81_name(self):
        """Get surface_81_name

        Returns:
            str: the value of `surface_81_name` or None if not set
        """
        return self._data["Surface 81 Name"]

    @surface_81_name.setter
    def surface_81_name(self, value=None):
        """  Corresponds to IDD Field `surface_81_name`

        Args:
            value (str): value for IDD Field `surface_81_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_81_name`')

        self._data["Surface 81 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_81(self):
        """Get fraction_of_radiant_energy_to_surface_81

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_81` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 81"]

    @fraction_of_radiant_energy_to_surface_81.setter
    def fraction_of_radiant_energy_to_surface_81(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_81`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_81`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_81`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_81`')

        self._data["Fraction of Radiant Energy to Surface 81"] = value

    @property
    def surface_82_name(self):
        """Get surface_82_name

        Returns:
            str: the value of `surface_82_name` or None if not set
        """
        return self._data["Surface 82 Name"]

    @surface_82_name.setter
    def surface_82_name(self, value=None):
        """  Corresponds to IDD Field `surface_82_name`

        Args:
            value (str): value for IDD Field `surface_82_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_82_name`')

        self._data["Surface 82 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_82(self):
        """Get fraction_of_radiant_energy_to_surface_82

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_82` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 82"]

    @fraction_of_radiant_energy_to_surface_82.setter
    def fraction_of_radiant_energy_to_surface_82(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_82`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_82`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_82`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_82`')

        self._data["Fraction of Radiant Energy to Surface 82"] = value

    @property
    def surface_83_name(self):
        """Get surface_83_name

        Returns:
            str: the value of `surface_83_name` or None if not set
        """
        return self._data["Surface 83 Name"]

    @surface_83_name.setter
    def surface_83_name(self, value=None):
        """  Corresponds to IDD Field `surface_83_name`

        Args:
            value (str): value for IDD Field `surface_83_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_83_name`')

        self._data["Surface 83 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_83(self):
        """Get fraction_of_radiant_energy_to_surface_83

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_83` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 83"]

    @fraction_of_radiant_energy_to_surface_83.setter
    def fraction_of_radiant_energy_to_surface_83(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_83`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_83`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_83`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_83`')

        self._data["Fraction of Radiant Energy to Surface 83"] = value

    @property
    def surface_84_name(self):
        """Get surface_84_name

        Returns:
            str: the value of `surface_84_name` or None if not set
        """
        return self._data["Surface 84 Name"]

    @surface_84_name.setter
    def surface_84_name(self, value=None):
        """  Corresponds to IDD Field `surface_84_name`

        Args:
            value (str): value for IDD Field `surface_84_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_84_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_84_name`')

        self._data["Surface 84 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_84(self):
        """Get fraction_of_radiant_energy_to_surface_84

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_84` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 84"]

    @fraction_of_radiant_energy_to_surface_84.setter
    def fraction_of_radiant_energy_to_surface_84(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_84`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_84`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_84`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_84`')

        self._data["Fraction of Radiant Energy to Surface 84"] = value

    @property
    def surface_85_name(self):
        """Get surface_85_name

        Returns:
            str: the value of `surface_85_name` or None if not set
        """
        return self._data["Surface 85 Name"]

    @surface_85_name.setter
    def surface_85_name(self, value=None):
        """  Corresponds to IDD Field `surface_85_name`

        Args:
            value (str): value for IDD Field `surface_85_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_85_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_85_name`')

        self._data["Surface 85 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_85(self):
        """Get fraction_of_radiant_energy_to_surface_85

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_85` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 85"]

    @fraction_of_radiant_energy_to_surface_85.setter
    def fraction_of_radiant_energy_to_surface_85(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_85`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_85`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_85`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_85`')

        self._data["Fraction of Radiant Energy to Surface 85"] = value

    @property
    def surface_86_name(self):
        """Get surface_86_name

        Returns:
            str: the value of `surface_86_name` or None if not set
        """
        return self._data["Surface 86 Name"]

    @surface_86_name.setter
    def surface_86_name(self, value=None):
        """  Corresponds to IDD Field `surface_86_name`

        Args:
            value (str): value for IDD Field `surface_86_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_86_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_86_name`')

        self._data["Surface 86 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_86(self):
        """Get fraction_of_radiant_energy_to_surface_86

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_86` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 86"]

    @fraction_of_radiant_energy_to_surface_86.setter
    def fraction_of_radiant_energy_to_surface_86(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_86`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_86`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_86`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_86`')

        self._data["Fraction of Radiant Energy to Surface 86"] = value

    @property
    def surface_87_name(self):
        """Get surface_87_name

        Returns:
            str: the value of `surface_87_name` or None if not set
        """
        return self._data["Surface 87 Name"]

    @surface_87_name.setter
    def surface_87_name(self, value=None):
        """  Corresponds to IDD Field `surface_87_name`

        Args:
            value (str): value for IDD Field `surface_87_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_87_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_87_name`')

        self._data["Surface 87 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_87(self):
        """Get fraction_of_radiant_energy_to_surface_87

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_87` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 87"]

    @fraction_of_radiant_energy_to_surface_87.setter
    def fraction_of_radiant_energy_to_surface_87(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_87`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_87`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_87`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_87`')

        self._data["Fraction of Radiant Energy to Surface 87"] = value

    @property
    def surface_88_name(self):
        """Get surface_88_name

        Returns:
            str: the value of `surface_88_name` or None if not set
        """
        return self._data["Surface 88 Name"]

    @surface_88_name.setter
    def surface_88_name(self, value=None):
        """  Corresponds to IDD Field `surface_88_name`

        Args:
            value (str): value for IDD Field `surface_88_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_88_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_88_name`')

        self._data["Surface 88 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_88(self):
        """Get fraction_of_radiant_energy_to_surface_88

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_88` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 88"]

    @fraction_of_radiant_energy_to_surface_88.setter
    def fraction_of_radiant_energy_to_surface_88(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_88`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_88`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_88`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_88`')

        self._data["Fraction of Radiant Energy to Surface 88"] = value

    @property
    def surface_89_name(self):
        """Get surface_89_name

        Returns:
            str: the value of `surface_89_name` or None if not set
        """
        return self._data["Surface 89 Name"]

    @surface_89_name.setter
    def surface_89_name(self, value=None):
        """  Corresponds to IDD Field `surface_89_name`

        Args:
            value (str): value for IDD Field `surface_89_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_89_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_89_name`')

        self._data["Surface 89 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_89(self):
        """Get fraction_of_radiant_energy_to_surface_89

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_89` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 89"]

    @fraction_of_radiant_energy_to_surface_89.setter
    def fraction_of_radiant_energy_to_surface_89(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_89`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_89`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_89`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_89`')

        self._data["Fraction of Radiant Energy to Surface 89"] = value

    @property
    def surface_90_name(self):
        """Get surface_90_name

        Returns:
            str: the value of `surface_90_name` or None if not set
        """
        return self._data["Surface 90 Name"]

    @surface_90_name.setter
    def surface_90_name(self, value=None):
        """  Corresponds to IDD Field `surface_90_name`

        Args:
            value (str): value for IDD Field `surface_90_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_90_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_90_name`')

        self._data["Surface 90 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_90(self):
        """Get fraction_of_radiant_energy_to_surface_90

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_90` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 90"]

    @fraction_of_radiant_energy_to_surface_90.setter
    def fraction_of_radiant_energy_to_surface_90(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_90`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_90`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_90`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_90`')

        self._data["Fraction of Radiant Energy to Surface 90"] = value

    @property
    def surface_91_name(self):
        """Get surface_91_name

        Returns:
            str: the value of `surface_91_name` or None if not set
        """
        return self._data["Surface 91 Name"]

    @surface_91_name.setter
    def surface_91_name(self, value=None):
        """  Corresponds to IDD Field `surface_91_name`

        Args:
            value (str): value for IDD Field `surface_91_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_91_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_91_name`')

        self._data["Surface 91 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_91(self):
        """Get fraction_of_radiant_energy_to_surface_91

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_91` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 91"]

    @fraction_of_radiant_energy_to_surface_91.setter
    def fraction_of_radiant_energy_to_surface_91(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_91`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_91`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_91`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_91`')

        self._data["Fraction of Radiant Energy to Surface 91"] = value

    @property
    def surface_92_name(self):
        """Get surface_92_name

        Returns:
            str: the value of `surface_92_name` or None if not set
        """
        return self._data["Surface 92 Name"]

    @surface_92_name.setter
    def surface_92_name(self, value=None):
        """  Corresponds to IDD Field `surface_92_name`

        Args:
            value (str): value for IDD Field `surface_92_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_92_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_92_name`')

        self._data["Surface 92 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_92(self):
        """Get fraction_of_radiant_energy_to_surface_92

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_92` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 92"]

    @fraction_of_radiant_energy_to_surface_92.setter
    def fraction_of_radiant_energy_to_surface_92(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_92`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_92`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_92`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_92`')

        self._data["Fraction of Radiant Energy to Surface 92"] = value

    @property
    def surface_93_name(self):
        """Get surface_93_name

        Returns:
            str: the value of `surface_93_name` or None if not set
        """
        return self._data["Surface 93 Name"]

    @surface_93_name.setter
    def surface_93_name(self, value=None):
        """  Corresponds to IDD Field `surface_93_name`

        Args:
            value (str): value for IDD Field `surface_93_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_93_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_93_name`')

        self._data["Surface 93 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_93(self):
        """Get fraction_of_radiant_energy_to_surface_93

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_93` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 93"]

    @fraction_of_radiant_energy_to_surface_93.setter
    def fraction_of_radiant_energy_to_surface_93(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_93`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_93`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_93`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_93`')

        self._data["Fraction of Radiant Energy to Surface 93"] = value

    @property
    def surface_94_name(self):
        """Get surface_94_name

        Returns:
            str: the value of `surface_94_name` or None if not set
        """
        return self._data["Surface 94 Name"]

    @surface_94_name.setter
    def surface_94_name(self, value=None):
        """  Corresponds to IDD Field `surface_94_name`

        Args:
            value (str): value for IDD Field `surface_94_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_94_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_94_name`')

        self._data["Surface 94 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_94(self):
        """Get fraction_of_radiant_energy_to_surface_94

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_94` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 94"]

    @fraction_of_radiant_energy_to_surface_94.setter
    def fraction_of_radiant_energy_to_surface_94(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_94`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_94`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_94`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_94`')

        self._data["Fraction of Radiant Energy to Surface 94"] = value

    @property
    def surface_95_name(self):
        """Get surface_95_name

        Returns:
            str: the value of `surface_95_name` or None if not set
        """
        return self._data["Surface 95 Name"]

    @surface_95_name.setter
    def surface_95_name(self, value=None):
        """  Corresponds to IDD Field `surface_95_name`

        Args:
            value (str): value for IDD Field `surface_95_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_95_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_95_name`')

        self._data["Surface 95 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_95(self):
        """Get fraction_of_radiant_energy_to_surface_95

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_95` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 95"]

    @fraction_of_radiant_energy_to_surface_95.setter
    def fraction_of_radiant_energy_to_surface_95(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_95`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_95`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_95`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_95`')

        self._data["Fraction of Radiant Energy to Surface 95"] = value

    @property
    def surface_96_name(self):
        """Get surface_96_name

        Returns:
            str: the value of `surface_96_name` or None if not set
        """
        return self._data["Surface 96 Name"]

    @surface_96_name.setter
    def surface_96_name(self, value=None):
        """  Corresponds to IDD Field `surface_96_name`

        Args:
            value (str): value for IDD Field `surface_96_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_96_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_96_name`')

        self._data["Surface 96 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_96(self):
        """Get fraction_of_radiant_energy_to_surface_96

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_96` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 96"]

    @fraction_of_radiant_energy_to_surface_96.setter
    def fraction_of_radiant_energy_to_surface_96(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_96`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_96`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_96`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_96`')

        self._data["Fraction of Radiant Energy to Surface 96"] = value

    @property
    def surface_97_name(self):
        """Get surface_97_name

        Returns:
            str: the value of `surface_97_name` or None if not set
        """
        return self._data["Surface 97 Name"]

    @surface_97_name.setter
    def surface_97_name(self, value=None):
        """  Corresponds to IDD Field `surface_97_name`

        Args:
            value (str): value for IDD Field `surface_97_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_97_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_97_name`')

        self._data["Surface 97 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_97(self):
        """Get fraction_of_radiant_energy_to_surface_97

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_97` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 97"]

    @fraction_of_radiant_energy_to_surface_97.setter
    def fraction_of_radiant_energy_to_surface_97(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_97`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_97`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_97`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_97`')

        self._data["Fraction of Radiant Energy to Surface 97"] = value

    @property
    def surface_98_name(self):
        """Get surface_98_name

        Returns:
            str: the value of `surface_98_name` or None if not set
        """
        return self._data["Surface 98 Name"]

    @surface_98_name.setter
    def surface_98_name(self, value=None):
        """  Corresponds to IDD Field `surface_98_name`

        Args:
            value (str): value for IDD Field `surface_98_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_98_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_98_name`')

        self._data["Surface 98 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_98(self):
        """Get fraction_of_radiant_energy_to_surface_98

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_98` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 98"]

    @fraction_of_radiant_energy_to_surface_98.setter
    def fraction_of_radiant_energy_to_surface_98(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_98`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_98`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_98`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_98`')

        self._data["Fraction of Radiant Energy to Surface 98"] = value

    @property
    def surface_99_name(self):
        """Get surface_99_name

        Returns:
            str: the value of `surface_99_name` or None if not set
        """
        return self._data["Surface 99 Name"]

    @surface_99_name.setter
    def surface_99_name(self, value=None):
        """  Corresponds to IDD Field `surface_99_name`

        Args:
            value (str): value for IDD Field `surface_99_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_99_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_99_name`')

        self._data["Surface 99 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_99(self):
        """Get fraction_of_radiant_energy_to_surface_99

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_99` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 99"]

    @fraction_of_radiant_energy_to_surface_99.setter
    def fraction_of_radiant_energy_to_surface_99(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_99`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_99`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_99`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_99`')

        self._data["Fraction of Radiant Energy to Surface 99"] = value

    @property
    def surface_100_name(self):
        """Get surface_100_name

        Returns:
            str: the value of `surface_100_name` or None if not set
        """
        return self._data["Surface 100 Name"]

    @surface_100_name.setter
    def surface_100_name(self, value=None):
        """  Corresponds to IDD Field `surface_100_name`

        Args:
            value (str): value for IDD Field `surface_100_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_100_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_100_name`')

        self._data["Surface 100 Name"] = value

    @property
    def fraction_of_radiant_energy_to_surface_100(self):
        """Get fraction_of_radiant_energy_to_surface_100

        Returns:
            float: the value of `fraction_of_radiant_energy_to_surface_100` or None if not set
        """
        return self._data["Fraction of Radiant Energy to Surface 100"]

    @fraction_of_radiant_energy_to_surface_100.setter
    def fraction_of_radiant_energy_to_surface_100(self, value=None):
        """  Corresponds to IDD Field `fraction_of_radiant_energy_to_surface_100`

        Args:
            value (float): value for IDD Field `fraction_of_radiant_energy_to_surface_100`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_radiant_energy_to_surface_100`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_radiant_energy_to_surface_100`')

        self._data["Fraction of Radiant Energy to Surface 100"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.heating_design_capacity_method))
        out.append(self._to_str(self.heating_design_capacity))
        out.append(self._to_str(self.heating_design_capacity_per_floor_area))
        out.append(self._to_str(self.fraction_of_autosized_heating_design_capacity))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.combustion_efficiency))
        out.append(self._to_str(self.fraction_of_input_converted_to_radiant_energy))
        out.append(self._to_str(self.fraction_of_input_converted_to_latent_energy))
        out.append(self._to_str(self.fraction_of_input_that_is_lost))
        out.append(self._to_str(self.temperature_control_type))
        out.append(self._to_str(self.heating_throttling_range))
        out.append(self._to_str(self.heating_setpoint_temperature_schedule_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_incident_on_people))
        out.append(self._to_str(self.surface_1_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_1))
        out.append(self._to_str(self.surface_2_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_2))
        out.append(self._to_str(self.surface_3_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_3))
        out.append(self._to_str(self.surface_4_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_4))
        out.append(self._to_str(self.surface_5_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_5))
        out.append(self._to_str(self.surface_6_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_6))
        out.append(self._to_str(self.surface_7_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_7))
        out.append(self._to_str(self.surface_8_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_8))
        out.append(self._to_str(self.surface_9_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_9))
        out.append(self._to_str(self.surface_10_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_10))
        out.append(self._to_str(self.surface_11_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_11))
        out.append(self._to_str(self.surface_12_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_12))
        out.append(self._to_str(self.surface_13_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_13))
        out.append(self._to_str(self.surface_14_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_14))
        out.append(self._to_str(self.surface_15_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_15))
        out.append(self._to_str(self.surface_16_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_16))
        out.append(self._to_str(self.surface_17_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_17))
        out.append(self._to_str(self.surface_18_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_18))
        out.append(self._to_str(self.surface_19_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_19))
        out.append(self._to_str(self.surface_20_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_20))
        out.append(self._to_str(self.surface_21_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_21))
        out.append(self._to_str(self.surface_22_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_22))
        out.append(self._to_str(self.surface_23_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_23))
        out.append(self._to_str(self.surface_24_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_24))
        out.append(self._to_str(self.surface_25_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_25))
        out.append(self._to_str(self.surface_26_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_26))
        out.append(self._to_str(self.surface_27_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_27))
        out.append(self._to_str(self.surface_28_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_28))
        out.append(self._to_str(self.surface_29_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_29))
        out.append(self._to_str(self.surface_30_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_30))
        out.append(self._to_str(self.surface_31_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_31))
        out.append(self._to_str(self.surface_32_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_32))
        out.append(self._to_str(self.surface_33_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_33))
        out.append(self._to_str(self.surface_34_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_34))
        out.append(self._to_str(self.surface_35_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_35))
        out.append(self._to_str(self.surface_36_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_36))
        out.append(self._to_str(self.surface_37_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_37))
        out.append(self._to_str(self.surface_38_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_38))
        out.append(self._to_str(self.surface_39_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_39))
        out.append(self._to_str(self.surface_40_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_40))
        out.append(self._to_str(self.surface_41_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_41))
        out.append(self._to_str(self.surface_42_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_42))
        out.append(self._to_str(self.surface_43_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_43))
        out.append(self._to_str(self.surface_44_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_44))
        out.append(self._to_str(self.surface_45_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_45))
        out.append(self._to_str(self.surface_46_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_46))
        out.append(self._to_str(self.surface_47_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_47))
        out.append(self._to_str(self.surface_48_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_48))
        out.append(self._to_str(self.surface_49_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_49))
        out.append(self._to_str(self.surface_50_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_50))
        out.append(self._to_str(self.surface_51_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_51))
        out.append(self._to_str(self.surface_52_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_52))
        out.append(self._to_str(self.surface_53_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_53))
        out.append(self._to_str(self.surface_54_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_54))
        out.append(self._to_str(self.surface_55_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_55))
        out.append(self._to_str(self.surface_56_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_56))
        out.append(self._to_str(self.surface_57_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_57))
        out.append(self._to_str(self.surface_58_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_58))
        out.append(self._to_str(self.surface_59_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_59))
        out.append(self._to_str(self.surface_60_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_60))
        out.append(self._to_str(self.surface_61_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_61))
        out.append(self._to_str(self.surface_62_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_62))
        out.append(self._to_str(self.surface_63_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_63))
        out.append(self._to_str(self.surface_64_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_64))
        out.append(self._to_str(self.surface_65_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_65))
        out.append(self._to_str(self.surface_66_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_66))
        out.append(self._to_str(self.surface_67_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_67))
        out.append(self._to_str(self.surface_68_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_68))
        out.append(self._to_str(self.surface_69_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_69))
        out.append(self._to_str(self.surface_70_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_70))
        out.append(self._to_str(self.surface_71_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_71))
        out.append(self._to_str(self.surface_72_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_72))
        out.append(self._to_str(self.surface_73_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_73))
        out.append(self._to_str(self.surface_74_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_74))
        out.append(self._to_str(self.surface_75_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_75))
        out.append(self._to_str(self.surface_76_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_76))
        out.append(self._to_str(self.surface_77_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_77))
        out.append(self._to_str(self.surface_78_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_78))
        out.append(self._to_str(self.surface_79_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_79))
        out.append(self._to_str(self.surface_80_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_80))
        out.append(self._to_str(self.surface_81_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_81))
        out.append(self._to_str(self.surface_82_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_82))
        out.append(self._to_str(self.surface_83_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_83))
        out.append(self._to_str(self.surface_84_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_84))
        out.append(self._to_str(self.surface_85_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_85))
        out.append(self._to_str(self.surface_86_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_86))
        out.append(self._to_str(self.surface_87_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_87))
        out.append(self._to_str(self.surface_88_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_88))
        out.append(self._to_str(self.surface_89_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_89))
        out.append(self._to_str(self.surface_90_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_90))
        out.append(self._to_str(self.surface_91_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_91))
        out.append(self._to_str(self.surface_92_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_92))
        out.append(self._to_str(self.surface_93_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_93))
        out.append(self._to_str(self.surface_94_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_94))
        out.append(self._to_str(self.surface_95_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_95))
        out.append(self._to_str(self.surface_96_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_96))
        out.append(self._to_str(self.surface_97_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_97))
        out.append(self._to_str(self.surface_98_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_98))
        out.append(self._to_str(self.surface_99_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_99))
        out.append(self._to_str(self.surface_100_name))
        out.append(self._to_str(self.fraction_of_radiant_energy_to_surface_100))
        return ",".join(out)

class ZoneHvacVentilatedSlab(object):
    """ Corresponds to IDD object `ZoneHVAC:VentilatedSlab`
        Ventilated slab system where outdoor air flows through hollow cores in a building
        surface (wall, ceiling, or floor).
    """
    internal_name = "ZoneHVAC:VentilatedSlab"
    field_count = 40

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:VentilatedSlab`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Name or Radiant Surface Group Name"] = None
        self._data["Maximum Air Flow Rate"] = None
        self._data["Outdoor Air Control Type"] = None
        self._data["Minimum Outdoor Air Flow Rate"] = None
        self._data["Minimum Outdoor Air Schedule Name"] = None
        self._data["Maximum Outdoor Air Flow Rate"] = None
        self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"] = None
        self._data["System Configuration Type"] = None
        self._data["Hollow Core Inside Diameter"] = None
        self._data["Hollow Core Length"] = None
        self._data["Number of Cores"] = None
        self._data["Temperature Control Type"] = None
        self._data["Heating High Air Temperature Schedule Name"] = None
        self._data["Heating Low Air Temperature Schedule Name"] = None
        self._data["Heating High Control Temperature Schedule Name"] = None
        self._data["Heating Low Control Temperature Schedule Name"] = None
        self._data["Cooling High Air Temperature Schedule Name"] = None
        self._data["Cooling Low Air Temperature Schedule Name"] = None
        self._data["Cooling High Control Temperature Schedule Name"] = None
        self._data["Cooling Low Control Temperature Schedule Name"] = None
        self._data["Return Air Node Name"] = None
        self._data["Slab In Node Name"] = None
        self._data["Zone Supply Air Node Name"] = None
        self._data["Outdoor Air Node Name"] = None
        self._data["Relief Air Node Name"] = None
        self._data["Outdoor Air Mixer Outlet Node Name"] = None
        self._data["Fan Outlet Node Name"] = None
        self._data["Fan Name"] = None
        self._data["Coil Option Type"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Hot Water or Steam Inlet Node Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Cold Water Inlet Node Name"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Specification ZoneHVAC Sizing Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_name_or_radiant_surface_group_name = None
        else:
            self.surface_name_or_radiant_surface_group_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_air_flow_rate = None
        else:
            self.maximum_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_control_type = None
        else:
            self.outdoor_air_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_flow_rate = None
        else:
            self.minimum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_air_schedule_name = None
        else:
            self.minimum_outdoor_air_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_flow_rate = None
        else:
            self.maximum_outdoor_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_air_fraction_or_temperature_schedule_name = None
        else:
            self.maximum_outdoor_air_fraction_or_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_configuration_type = None
        else:
            self.system_configuration_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hollow_core_inside_diameter = None
        else:
            self.hollow_core_inside_diameter = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hollow_core_length = None
        else:
            self.hollow_core_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_cores = None
        else:
            self.number_of_cores = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_control_type = None
        else:
            self.temperature_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_high_air_temperature_schedule_name = None
        else:
            self.heating_high_air_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_low_air_temperature_schedule_name = None
        else:
            self.heating_low_air_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_high_control_temperature_schedule_name = None
        else:
            self.heating_high_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_low_control_temperature_schedule_name = None
        else:
            self.heating_low_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_high_air_temperature_schedule_name = None
        else:
            self.cooling_high_air_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_low_air_temperature_schedule_name = None
        else:
            self.cooling_low_air_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_high_control_temperature_schedule_name = None
        else:
            self.cooling_high_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_low_control_temperature_schedule_name = None
        else:
            self.cooling_low_control_temperature_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_air_node_name = None
        else:
            self.return_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_in_node_name = None
        else:
            self.slab_in_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_supply_air_node_name = None
        else:
            self.zone_supply_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_node_name = None
        else:
            self.outdoor_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.relief_air_node_name = None
        else:
            self.relief_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_outlet_node_name = None
        else:
            self.outdoor_air_mixer_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_outlet_node_name = None
        else:
            self.fan_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_name = None
        else:
            self.fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.coil_option_type = None
        else:
            self.coil_option_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hot_water_or_steam_inlet_node_name = None
        else:
            self.hot_water_or_steam_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cold_water_inlet_node_name = None
        else:
            self.cold_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_zonehvac_sizing_object_name = None
        else:
            self.design_specification_zonehvac_sizing_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        (name of zone system is serving)

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def surface_name_or_radiant_surface_group_name(self):
        """Get surface_name_or_radiant_surface_group_name

        Returns:
            str: the value of `surface_name_or_radiant_surface_group_name` or None if not set
        """
        return self._data["Surface Name or Radiant Surface Group Name"]

    @surface_name_or_radiant_surface_group_name.setter
    def surface_name_or_radiant_surface_group_name(self, value=None):
        """  Corresponds to IDD Field `surface_name_or_radiant_surface_group_name`
        (name of surface system is embedded in) or list of surfaces

        Args:
            value (str): value for IDD Field `surface_name_or_radiant_surface_group_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_name_or_radiant_surface_group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name_or_radiant_surface_group_name`')

        self._data["Surface Name or Radiant Surface Group Name"] = value

    @property
    def maximum_air_flow_rate(self):
        """Get maximum_air_flow_rate

        Returns:
            float: the value of `maximum_air_flow_rate` or None if not set
        """
        return self._data["Maximum Air Flow Rate"]

    @maximum_air_flow_rate.setter
    def maximum_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_air_flow_rate`

        Args:
            value (float): value for IDD Field `maximum_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_air_flow_rate`')

        self._data["Maximum Air Flow Rate"] = value

    @property
    def outdoor_air_control_type(self):
        """Get outdoor_air_control_type

        Returns:
            str: the value of `outdoor_air_control_type` or None if not set
        """
        return self._data["Outdoor Air Control Type"]

    @outdoor_air_control_type.setter
    def outdoor_air_control_type(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_control_type`

        Args:
            value (str): value for IDD Field `outdoor_air_control_type`
                Accepted values are:
                      - VariablePercent
                      - FixedTemperature
                      - FixedAmount
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_control_type`')
            vals = set()
            vals.add("VariablePercent")
            vals.add("FixedTemperature")
            vals.add("FixedAmount")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_control_type`'.format(value))

        self._data["Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """Get minimum_outdoor_air_flow_rate

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_flow_rate`

        Args:
            value (float): value for IDD Field `minimum_outdoor_air_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_outdoor_air_flow_rate`')

        self._data["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """Get minimum_outdoor_air_schedule_name

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set
        """
        return self._data["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """  Corresponds to IDD Field `minimum_outdoor_air_schedule_name`

        Args:
            value (str): value for IDD Field `minimum_outdoor_air_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_outdoor_air_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_outdoor_air_schedule_name`')

        self._data["Minimum Outdoor Air Schedule Name"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """Get maximum_outdoor_air_flow_rate

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set
        """
        return self._data["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_flow_rate`
        schedule values multiply the minimum outdoor air flow rate

        Args:
            value (float): value for IDD Field `maximum_outdoor_air_flow_rate`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_air_flow_rate`')

        self._data["Maximum Outdoor Air Flow Rate"] = value

    @property
    def maximum_outdoor_air_fraction_or_temperature_schedule_name(self):
        """Get maximum_outdoor_air_fraction_or_temperature_schedule_name

        Returns:
            str: the value of `maximum_outdoor_air_fraction_or_temperature_schedule_name` or None if not set
        """
        return self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"]

    @maximum_outdoor_air_fraction_or_temperature_schedule_name.setter
    def maximum_outdoor_air_fraction_or_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `maximum_outdoor_air_fraction_or_temperature_schedule_name`
        Note that this depends on the control type as to whether schedule values are a fraction or temperature

        Args:
            value (str): value for IDD Field `maximum_outdoor_air_fraction_or_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `maximum_outdoor_air_fraction_or_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `maximum_outdoor_air_fraction_or_temperature_schedule_name`')

        self._data["Maximum Outdoor Air Fraction or Temperature Schedule Name"] = value

    @property
    def system_configuration_type(self):
        """Get system_configuration_type

        Returns:
            str: the value of `system_configuration_type` or None if not set
        """
        return self._data["System Configuration Type"]

    @system_configuration_type.setter
    def system_configuration_type(self, value="SlabOnly"):
        """  Corresponds to IDD Field `system_configuration_type`

        Args:
            value (str): value for IDD Field `system_configuration_type`
                Accepted values are:
                      - SlabOnly
                      - SlabAndZone
                      - SeriesSlabs
                Default value: SlabOnly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_configuration_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_configuration_type`')
            vals = set()
            vals.add("SlabOnly")
            vals.add("SlabAndZone")
            vals.add("SeriesSlabs")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `system_configuration_type`'.format(value))

        self._data["System Configuration Type"] = value

    @property
    def hollow_core_inside_diameter(self):
        """Get hollow_core_inside_diameter

        Returns:
            float: the value of `hollow_core_inside_diameter` or None if not set
        """
        return self._data["Hollow Core Inside Diameter"]

    @hollow_core_inside_diameter.setter
    def hollow_core_inside_diameter(self, value=0.05 ):
        """  Corresponds to IDD Field `hollow_core_inside_diameter`

        Args:
            value (float): value for IDD Field `hollow_core_inside_diameter`
                Unit: m
                Default value: 0.05
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hollow_core_inside_diameter`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `hollow_core_inside_diameter`')

        self._data["Hollow Core Inside Diameter"] = value

    @property
    def hollow_core_length(self):
        """Get hollow_core_length

        Returns:
            float: the value of `hollow_core_length` or None if not set
        """
        return self._data["Hollow Core Length"]

    @hollow_core_length.setter
    def hollow_core_length(self, value=None):
        """  Corresponds to IDD Field `hollow_core_length`
        (length of core cavity embedded in surface)

        Args:
            value (float): value for IDD Field `hollow_core_length`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hollow_core_length`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `hollow_core_length`')

        self._data["Hollow Core Length"] = value

    @property
    def number_of_cores(self):
        """Get number_of_cores

        Returns:
            float: the value of `number_of_cores` or None if not set
        """
        return self._data["Number of Cores"]

    @number_of_cores.setter
    def number_of_cores(self, value=None):
        """  Corresponds to IDD Field `number_of_cores`
        flow will be divided evenly among the cores

        Args:
            value (float): value for IDD Field `number_of_cores`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_cores`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `number_of_cores`')

        self._data["Number of Cores"] = value

    @property
    def temperature_control_type(self):
        """Get temperature_control_type

        Returns:
            str: the value of `temperature_control_type` or None if not set
        """
        return self._data["Temperature Control Type"]

    @temperature_control_type.setter
    def temperature_control_type(self, value="OutdoorDryBulbTemperature"):
        """  Corresponds to IDD Field `temperature_control_type`
        (temperature on which unit is controlled)

        Args:
            value (str): value for IDD Field `temperature_control_type`
                Accepted values are:
                      - MeanAirTemperature
                      - MeanRadiantTemperature
                      - OperativeTemperature
                      - OutdoorDryBulbTemperature
                      - OutdoorWetBulbTemperature
                      - SurfaceTemperature
                      - ZoneAirDewPointTemperature
                Default value: OutdoorDryBulbTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_control_type`')
            vals = set()
            vals.add("MeanAirTemperature")
            vals.add("MeanRadiantTemperature")
            vals.add("OperativeTemperature")
            vals.add("OutdoorDryBulbTemperature")
            vals.add("OutdoorWetBulbTemperature")
            vals.add("SurfaceTemperature")
            vals.add("ZoneAirDewPointTemperature")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `temperature_control_type`'.format(value))

        self._data["Temperature Control Type"] = value

    @property
    def heating_high_air_temperature_schedule_name(self):
        """Get heating_high_air_temperature_schedule_name

        Returns:
            str: the value of `heating_high_air_temperature_schedule_name` or None if not set
        """
        return self._data["Heating High Air Temperature Schedule Name"]

    @heating_high_air_temperature_schedule_name.setter
    def heating_high_air_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_high_air_temperature_schedule_name`
        Air and control temperatures for heating work together to provide
        a linear function that determines the air temperature sent to the
        radiant system. The current control temperature (see A14) is
        compared to the high and low control temperatures at the current time.
        If the control temperature is above the high temperature, then the
        inlet air temperature is set to the low air temperature. If the
        control temperature is below the low temperature, then the inlet
        air temperature is set to the high air temperature. If the control
        temperature is between the high and low value, then the inlet air
        temperature is linearly interpolated between the low and high air
        temperature values.

        Args:
            value (str): value for IDD Field `heating_high_air_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_high_air_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_high_air_temperature_schedule_name`')

        self._data["Heating High Air Temperature Schedule Name"] = value

    @property
    def heating_low_air_temperature_schedule_name(self):
        """Get heating_low_air_temperature_schedule_name

        Returns:
            str: the value of `heating_low_air_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Low Air Temperature Schedule Name"]

    @heating_low_air_temperature_schedule_name.setter
    def heating_low_air_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_low_air_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `heating_low_air_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_low_air_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_low_air_temperature_schedule_name`')

        self._data["Heating Low Air Temperature Schedule Name"] = value

    @property
    def heating_high_control_temperature_schedule_name(self):
        """Get heating_high_control_temperature_schedule_name

        Returns:
            str: the value of `heating_high_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating High Control Temperature Schedule Name"]

    @heating_high_control_temperature_schedule_name.setter
    def heating_high_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_high_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `heating_high_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_high_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_high_control_temperature_schedule_name`')

        self._data["Heating High Control Temperature Schedule Name"] = value

    @property
    def heating_low_control_temperature_schedule_name(self):
        """Get heating_low_control_temperature_schedule_name

        Returns:
            str: the value of `heating_low_control_temperature_schedule_name` or None if not set
        """
        return self._data["Heating Low Control Temperature Schedule Name"]

    @heating_low_control_temperature_schedule_name.setter
    def heating_low_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `heating_low_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `heating_low_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_low_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_low_control_temperature_schedule_name`')

        self._data["Heating Low Control Temperature Schedule Name"] = value

    @property
    def cooling_high_air_temperature_schedule_name(self):
        """Get cooling_high_air_temperature_schedule_name

        Returns:
            str: the value of `cooling_high_air_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling High Air Temperature Schedule Name"]

    @cooling_high_air_temperature_schedule_name.setter
    def cooling_high_air_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_high_air_temperature_schedule_name`
        See note for heating high air temperature schedule above for
        interpretation information (or see the Input/Output Reference).

        Args:
            value (str): value for IDD Field `cooling_high_air_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_high_air_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_high_air_temperature_schedule_name`')

        self._data["Cooling High Air Temperature Schedule Name"] = value

    @property
    def cooling_low_air_temperature_schedule_name(self):
        """Get cooling_low_air_temperature_schedule_name

        Returns:
            str: the value of `cooling_low_air_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Low Air Temperature Schedule Name"]

    @cooling_low_air_temperature_schedule_name.setter
    def cooling_low_air_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_low_air_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `cooling_low_air_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_low_air_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_low_air_temperature_schedule_name`')

        self._data["Cooling Low Air Temperature Schedule Name"] = value

    @property
    def cooling_high_control_temperature_schedule_name(self):
        """Get cooling_high_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_high_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling High Control Temperature Schedule Name"]

    @cooling_high_control_temperature_schedule_name.setter
    def cooling_high_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_high_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `cooling_high_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_high_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_high_control_temperature_schedule_name`')

        self._data["Cooling High Control Temperature Schedule Name"] = value

    @property
    def cooling_low_control_temperature_schedule_name(self):
        """Get cooling_low_control_temperature_schedule_name

        Returns:
            str: the value of `cooling_low_control_temperature_schedule_name` or None if not set
        """
        return self._data["Cooling Low Control Temperature Schedule Name"]

    @cooling_low_control_temperature_schedule_name.setter
    def cooling_low_control_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `cooling_low_control_temperature_schedule_name`

        Args:
            value (str): value for IDD Field `cooling_low_control_temperature_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_low_control_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_low_control_temperature_schedule_name`')

        self._data["Cooling Low Control Temperature Schedule Name"] = value

    @property
    def return_air_node_name(self):
        """Get return_air_node_name

        Returns:
            str: the value of `return_air_node_name` or None if not set
        """
        return self._data["Return Air Node Name"]

    @return_air_node_name.setter
    def return_air_node_name(self, value=None):
        """  Corresponds to IDD Field `return_air_node_name`
        This is the zone return air inlet to the ventilated slab system outdoor air mixer.
        This node is typically a zone exhaust node (do not connect to "Zone Return Air Node").

        Args:
            value (str): value for IDD Field `return_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_air_node_name`')

        self._data["Return Air Node Name"] = value

    @property
    def slab_in_node_name(self):
        """Get slab_in_node_name

        Returns:
            str: the value of `slab_in_node_name` or None if not set
        """
        return self._data["Slab In Node Name"]

    @slab_in_node_name.setter
    def slab_in_node_name(self, value=None):
        """  Corresponds to IDD Field `slab_in_node_name`
        This is the node entering the slab or series of slabs after the fan and coil(s).

        Args:
            value (str): value for IDD Field `slab_in_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_in_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_in_node_name`')

        self._data["Slab In Node Name"] = value

    @property
    def zone_supply_air_node_name(self):
        """Get zone_supply_air_node_name

        Returns:
            str: the value of `zone_supply_air_node_name` or None if not set
        """
        return self._data["Zone Supply Air Node Name"]

    @zone_supply_air_node_name.setter
    def zone_supply_air_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_supply_air_node_name`
        This is the node name exiting the slab.
        This node is typically a zone inlet node.
        Leave blank when the system configuration is SlabOnly or SeriesSlabs.

        Args:
            value (str): value for IDD Field `zone_supply_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_supply_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_supply_air_node_name`')

        self._data["Zone Supply Air Node Name"] = value

    @property
    def outdoor_air_node_name(self):
        """Get outdoor_air_node_name

        Returns:
            str: the value of `outdoor_air_node_name` or None if not set
        """
        return self._data["Outdoor Air Node Name"]

    @outdoor_air_node_name.setter
    def outdoor_air_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_node_name`
        This node is the outdoor air inlet to the ventilated slab oa mixer.
        This node should also be specified in an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `outdoor_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_node_name`')

        self._data["Outdoor Air Node Name"] = value

    @property
    def relief_air_node_name(self):
        """Get relief_air_node_name

        Returns:
            str: the value of `relief_air_node_name` or None if not set
        """
        return self._data["Relief Air Node Name"]

    @relief_air_node_name.setter
    def relief_air_node_name(self, value=None):
        """  Corresponds to IDD Field `relief_air_node_name`
        This node is the relief air node from the ventilated slab outdoor air mixer.

        Args:
            value (str): value for IDD Field `relief_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `relief_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `relief_air_node_name`')

        self._data["Relief Air Node Name"] = value

    @property
    def outdoor_air_mixer_outlet_node_name(self):
        """Get outdoor_air_mixer_outlet_node_name

        Returns:
            str: the value of `outdoor_air_mixer_outlet_node_name` or None if not set
        """
        return self._data["Outdoor Air Mixer Outlet Node Name"]

    @outdoor_air_mixer_outlet_node_name.setter
    def outdoor_air_mixer_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_outlet_node_name`
        This is the node name leaving the outdoor air mixer and entering the fan and coil(s).

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_outlet_node_name`')

        self._data["Outdoor Air Mixer Outlet Node Name"] = value

    @property
    def fan_outlet_node_name(self):
        """Get fan_outlet_node_name

        Returns:
            str: the value of `fan_outlet_node_name` or None if not set
        """
        return self._data["Fan Outlet Node Name"]

    @fan_outlet_node_name.setter
    def fan_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `fan_outlet_node_name`
        This is the node name of the fan outlet.

        Args:
            value (str): value for IDD Field `fan_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_outlet_node_name`')

        self._data["Fan Outlet Node Name"] = value

    @property
    def fan_name(self):
        """Get fan_name

        Returns:
            str: the value of `fan_name` or None if not set
        """
        return self._data["Fan Name"]

    @fan_name.setter
    def fan_name(self, value=None):
        """  Corresponds to IDD Field `fan_name`
        Allowable fan type is Fan:ConstantVolume

        Args:
            value (str): value for IDD Field `fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_name`')

        self._data["Fan Name"] = value

    @property
    def coil_option_type(self):
        """Get coil_option_type

        Returns:
            str: the value of `coil_option_type` or None if not set
        """
        return self._data["Coil Option Type"]

    @coil_option_type.setter
    def coil_option_type(self, value=None):
        """  Corresponds to IDD Field `coil_option_type`

        Args:
            value (str): value for IDD Field `coil_option_type`
                Accepted values are:
                      - None
                      - Heating
                      - Cooling
                      - HeatingAndCooling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `coil_option_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_option_type`')
            vals = set()
            vals.add("None")
            vals.add("Heating")
            vals.add("Cooling")
            vals.add("HeatingAndCooling")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `coil_option_type`'.format(value))

        self._data["Coil Option Type"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Water
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def hot_water_or_steam_inlet_node_name(self):
        """Get hot_water_or_steam_inlet_node_name

        Returns:
            str: the value of `hot_water_or_steam_inlet_node_name` or None if not set
        """
        return self._data["Hot Water or Steam Inlet Node Name"]

    @hot_water_or_steam_inlet_node_name.setter
    def hot_water_or_steam_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `hot_water_or_steam_inlet_node_name`

        Args:
            value (str): value for IDD Field `hot_water_or_steam_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hot_water_or_steam_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_or_steam_inlet_node_name`')

        self._data["Hot Water or Steam Inlet Node Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def cold_water_inlet_node_name(self):
        """Get cold_water_inlet_node_name

        Returns:
            str: the value of `cold_water_inlet_node_name` or None if not set
        """
        return self._data["Cold Water Inlet Node Name"]

    @cold_water_inlet_node_name.setter
    def cold_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `cold_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `cold_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cold_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cold_water_inlet_node_name`')

        self._data["Cold Water Inlet Node Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_specification_zonehvac_sizing_object_name(self):
        """Get design_specification_zonehvac_sizing_object_name

        Returns:
            str: the value of `design_specification_zonehvac_sizing_object_name` or None if not set
        """
        return self._data["Design Specification ZoneHVAC Sizing Object Name"]

    @design_specification_zonehvac_sizing_object_name.setter
    def design_specification_zonehvac_sizing_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_zonehvac_sizing_object_name`
        Enter the name of a DesignSpecificationZoneHVACSizing object.

        Args:
            value (str): value for IDD Field `design_specification_zonehvac_sizing_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_zonehvac_sizing_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_zonehvac_sizing_object_name`')

        self._data["Design Specification ZoneHVAC Sizing Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.surface_name_or_radiant_surface_group_name))
        out.append(self._to_str(self.maximum_air_flow_rate))
        out.append(self._to_str(self.outdoor_air_control_type))
        out.append(self._to_str(self.minimum_outdoor_air_flow_rate))
        out.append(self._to_str(self.minimum_outdoor_air_schedule_name))
        out.append(self._to_str(self.maximum_outdoor_air_flow_rate))
        out.append(self._to_str(self.maximum_outdoor_air_fraction_or_temperature_schedule_name))
        out.append(self._to_str(self.system_configuration_type))
        out.append(self._to_str(self.hollow_core_inside_diameter))
        out.append(self._to_str(self.hollow_core_length))
        out.append(self._to_str(self.number_of_cores))
        out.append(self._to_str(self.temperature_control_type))
        out.append(self._to_str(self.heating_high_air_temperature_schedule_name))
        out.append(self._to_str(self.heating_low_air_temperature_schedule_name))
        out.append(self._to_str(self.heating_high_control_temperature_schedule_name))
        out.append(self._to_str(self.heating_low_control_temperature_schedule_name))
        out.append(self._to_str(self.cooling_high_air_temperature_schedule_name))
        out.append(self._to_str(self.cooling_low_air_temperature_schedule_name))
        out.append(self._to_str(self.cooling_high_control_temperature_schedule_name))
        out.append(self._to_str(self.cooling_low_control_temperature_schedule_name))
        out.append(self._to_str(self.return_air_node_name))
        out.append(self._to_str(self.slab_in_node_name))
        out.append(self._to_str(self.zone_supply_air_node_name))
        out.append(self._to_str(self.outdoor_air_node_name))
        out.append(self._to_str(self.relief_air_node_name))
        out.append(self._to_str(self.outdoor_air_mixer_outlet_node_name))
        out.append(self._to_str(self.fan_outlet_node_name))
        out.append(self._to_str(self.fan_name))
        out.append(self._to_str(self.coil_option_type))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.hot_water_or_steam_inlet_node_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.cold_water_inlet_node_name))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_specification_zonehvac_sizing_object_name))
        return ",".join(out)

class ZoneHvacVentilatedSlabSlabGroup(object):
    """ Corresponds to IDD object `ZoneHVAC:VentilatedSlab:SlabGroup`
        This is used to allow the coordinate control of several ventilad slab system
        surfaces. Note that the flow fractions must sum up to 1.0.
        The number of surfaces can be expanded beyond 10, if necessary, by adding more
        groups to the end of the list
    """
    internal_name = "ZoneHVAC:VentilatedSlab:SlabGroup"
    field_count = 71

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:VentilatedSlab:SlabGroup`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Zone 1 Name"] = None
        self._data["Surface 1 Name"] = None
        self._data["Core Diameter for Surface 1"] = None
        self._data["Core Length for Surface 1"] = None
        self._data["Core Numbers for Surface 1"] = None
        self._data["Slab Inlet Node Name for Surface 1"] = None
        self._data["Slab Outlet Node Name for Surface 1"] = None
        self._data["Zone 2 Name"] = None
        self._data["Surface 2 Name"] = None
        self._data["Core Diameter for Surface 2"] = None
        self._data["Core Length for Surface 2"] = None
        self._data["Core Numbers for Surface 2"] = None
        self._data["Slab Inlet Node Name for Surface 2"] = None
        self._data["Slab Outlet Node Name for Surface 2"] = None
        self._data["Zone 3 Name"] = None
        self._data["Surface 3 Name"] = None
        self._data["Core Diameter for Surface 3"] = None
        self._data["Core Length for Surface 3"] = None
        self._data["Core Numbers for Surface 3"] = None
        self._data["Slab Inlet Node Name for Surface 3"] = None
        self._data["Slab Outlet Node Name for Surface 3"] = None
        self._data["Zone 4 Name"] = None
        self._data["Surface 4 Name"] = None
        self._data["Core Diameter for Surface 4"] = None
        self._data["Core Length for Surface 4"] = None
        self._data["Core Numbers for Surface 4"] = None
        self._data["Slab Inlet Node Name for Surface 4"] = None
        self._data["Slab Outlet Node Name for Surface 4"] = None
        self._data["Zone 5 Name"] = None
        self._data["Surface 5 Name"] = None
        self._data["Core Diameter for Surface 5"] = None
        self._data["Core Length for Surface 5"] = None
        self._data["Core Numbers for Surface 5"] = None
        self._data["Slab Inlet Node Name for Surface 5"] = None
        self._data["Slab Outlet Node Name for Surface 5"] = None
        self._data["Zone 6 Name"] = None
        self._data["Surface 6 Name"] = None
        self._data["Core Diameter for Surface 6"] = None
        self._data["Core Length for Surface 6"] = None
        self._data["Core Numbers for Surface 6"] = None
        self._data["Slab Inlet Node Name for Surface 6"] = None
        self._data["Slab Outlet Node Name for Surface 6"] = None
        self._data["Zone 7 Name"] = None
        self._data["Surface 7 Name"] = None
        self._data["Core Diameter for Surface 7"] = None
        self._data["Core Length for Surface 7"] = None
        self._data["Core Numbers for Surface 7"] = None
        self._data["Slab Inlet Node Name for Surface 7"] = None
        self._data["Slab Outlet Node Name for Surface 7"] = None
        self._data["Zone 8 Name"] = None
        self._data["Surface 8 Name"] = None
        self._data["Core Diameter for Surface 8"] = None
        self._data["Core Length for Surface 8"] = None
        self._data["Core Numbers for Surface 8"] = None
        self._data["Slab Inlet Node Name for Surface 8"] = None
        self._data["Slab Outlet Node Name for Surface 8"] = None
        self._data["Zone 9 Name"] = None
        self._data["Surface 9 Name"] = None
        self._data["Core Diameter for Surface 9"] = None
        self._data["Core Length for Surface 9"] = None
        self._data["Core Numbers for Surface 9"] = None
        self._data["Slab Inlet Node Name for Surface 9"] = None
        self._data["Slab Outlet Node Name for Surface 9"] = None
        self._data["Zone 10 Name"] = None
        self._data["Surface 10 Name"] = None
        self._data["Core Diameter for Surface 10"] = None
        self._data["Core Length for Surface 10"] = None
        self._data["Core Numbers for Surface 10"] = None
        self._data["Slab Inlet Node Name for Surface 10"] = None
        self._data["Slab Outlet Node Name for Surface 10"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_1_name = None
        else:
            self.zone_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_1_name = None
        else:
            self.surface_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_1 = None
        else:
            self.core_diameter_for_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_1 = None
        else:
            self.core_length_for_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_1 = None
        else:
            self.core_numbers_for_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_1 = None
        else:
            self.slab_inlet_node_name_for_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_1 = None
        else:
            self.slab_outlet_node_name_for_surface_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_2_name = None
        else:
            self.zone_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_2_name = None
        else:
            self.surface_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_2 = None
        else:
            self.core_diameter_for_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_2 = None
        else:
            self.core_length_for_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_2 = None
        else:
            self.core_numbers_for_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_2 = None
        else:
            self.slab_inlet_node_name_for_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_2 = None
        else:
            self.slab_outlet_node_name_for_surface_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_3_name = None
        else:
            self.zone_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_3_name = None
        else:
            self.surface_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_3 = None
        else:
            self.core_diameter_for_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_3 = None
        else:
            self.core_length_for_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_3 = None
        else:
            self.core_numbers_for_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_3 = None
        else:
            self.slab_inlet_node_name_for_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_3 = None
        else:
            self.slab_outlet_node_name_for_surface_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_4_name = None
        else:
            self.zone_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_4_name = None
        else:
            self.surface_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_4 = None
        else:
            self.core_diameter_for_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_4 = None
        else:
            self.core_length_for_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_4 = None
        else:
            self.core_numbers_for_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_4 = None
        else:
            self.slab_inlet_node_name_for_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_4 = None
        else:
            self.slab_outlet_node_name_for_surface_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_5_name = None
        else:
            self.zone_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_5_name = None
        else:
            self.surface_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_5 = None
        else:
            self.core_diameter_for_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_5 = None
        else:
            self.core_length_for_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_5 = None
        else:
            self.core_numbers_for_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_5 = None
        else:
            self.slab_inlet_node_name_for_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_5 = None
        else:
            self.slab_outlet_node_name_for_surface_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_6_name = None
        else:
            self.zone_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_6_name = None
        else:
            self.surface_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_6 = None
        else:
            self.core_diameter_for_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_6 = None
        else:
            self.core_length_for_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_6 = None
        else:
            self.core_numbers_for_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_6 = None
        else:
            self.slab_inlet_node_name_for_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_6 = None
        else:
            self.slab_outlet_node_name_for_surface_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_7_name = None
        else:
            self.zone_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_7_name = None
        else:
            self.surface_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_7 = None
        else:
            self.core_diameter_for_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_7 = None
        else:
            self.core_length_for_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_7 = None
        else:
            self.core_numbers_for_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_7 = None
        else:
            self.slab_inlet_node_name_for_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_7 = None
        else:
            self.slab_outlet_node_name_for_surface_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_8_name = None
        else:
            self.zone_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_8_name = None
        else:
            self.surface_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_8 = None
        else:
            self.core_diameter_for_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_8 = None
        else:
            self.core_length_for_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_8 = None
        else:
            self.core_numbers_for_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_8 = None
        else:
            self.slab_inlet_node_name_for_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_8 = None
        else:
            self.slab_outlet_node_name_for_surface_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_9_name = None
        else:
            self.zone_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_9_name = None
        else:
            self.surface_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_9 = None
        else:
            self.core_diameter_for_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_9 = None
        else:
            self.core_length_for_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_9 = None
        else:
            self.core_numbers_for_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_9 = None
        else:
            self.slab_inlet_node_name_for_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_9 = None
        else:
            self.slab_outlet_node_name_for_surface_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_10_name = None
        else:
            self.zone_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.surface_10_name = None
        else:
            self.surface_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_diameter_for_surface_10 = None
        else:
            self.core_diameter_for_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_length_for_surface_10 = None
        else:
            self.core_length_for_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.core_numbers_for_surface_10 = None
        else:
            self.core_numbers_for_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_inlet_node_name_for_surface_10 = None
        else:
            self.slab_inlet_node_name_for_surface_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.slab_outlet_node_name_for_surface_10 = None
        else:
            self.slab_outlet_node_name_for_surface_10 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def zone_1_name(self):
        """Get zone_1_name

        Returns:
            str: the value of `zone_1_name` or None if not set
        """
        return self._data["Zone 1 Name"]

    @zone_1_name.setter
    def zone_1_name(self, value=None):
        """  Corresponds to IDD Field `zone_1_name`

        Args:
            value (str): value for IDD Field `zone_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_1_name`')

        self._data["Zone 1 Name"] = value

    @property
    def surface_1_name(self):
        """Get surface_1_name

        Returns:
            str: the value of `surface_1_name` or None if not set
        """
        return self._data["Surface 1 Name"]

    @surface_1_name.setter
    def surface_1_name(self, value=None):
        """  Corresponds to IDD Field `surface_1_name`

        Args:
            value (str): value for IDD Field `surface_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_1_name`')

        self._data["Surface 1 Name"] = value

    @property
    def core_diameter_for_surface_1(self):
        """Get core_diameter_for_surface_1

        Returns:
            float: the value of `core_diameter_for_surface_1` or None if not set
        """
        return self._data["Core Diameter for Surface 1"]

    @core_diameter_for_surface_1.setter
    def core_diameter_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_1`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_1`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_1`')

        self._data["Core Diameter for Surface 1"] = value

    @property
    def core_length_for_surface_1(self):
        """Get core_length_for_surface_1

        Returns:
            float: the value of `core_length_for_surface_1` or None if not set
        """
        return self._data["Core Length for Surface 1"]

    @core_length_for_surface_1.setter
    def core_length_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_1`

        Args:
            value (float): value for IDD Field `core_length_for_surface_1`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_1`')

        self._data["Core Length for Surface 1"] = value

    @property
    def core_numbers_for_surface_1(self):
        """Get core_numbers_for_surface_1

        Returns:
            float: the value of `core_numbers_for_surface_1` or None if not set
        """
        return self._data["Core Numbers for Surface 1"]

    @core_numbers_for_surface_1.setter
    def core_numbers_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_1`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_1`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_1`')

        self._data["Core Numbers for Surface 1"] = value

    @property
    def slab_inlet_node_name_for_surface_1(self):
        """Get slab_inlet_node_name_for_surface_1

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_1` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 1"]

    @slab_inlet_node_name_for_surface_1.setter
    def slab_inlet_node_name_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_1`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_1`')

        self._data["Slab Inlet Node Name for Surface 1"] = value

    @property
    def slab_outlet_node_name_for_surface_1(self):
        """Get slab_outlet_node_name_for_surface_1

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_1` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 1"]

    @slab_outlet_node_name_for_surface_1.setter
    def slab_outlet_node_name_for_surface_1(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_1`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_1`')

        self._data["Slab Outlet Node Name for Surface 1"] = value

    @property
    def zone_2_name(self):
        """Get zone_2_name

        Returns:
            str: the value of `zone_2_name` or None if not set
        """
        return self._data["Zone 2 Name"]

    @zone_2_name.setter
    def zone_2_name(self, value=None):
        """  Corresponds to IDD Field `zone_2_name`

        Args:
            value (str): value for IDD Field `zone_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_2_name`')

        self._data["Zone 2 Name"] = value

    @property
    def surface_2_name(self):
        """Get surface_2_name

        Returns:
            str: the value of `surface_2_name` or None if not set
        """
        return self._data["Surface 2 Name"]

    @surface_2_name.setter
    def surface_2_name(self, value=None):
        """  Corresponds to IDD Field `surface_2_name`

        Args:
            value (str): value for IDD Field `surface_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_2_name`')

        self._data["Surface 2 Name"] = value

    @property
    def core_diameter_for_surface_2(self):
        """Get core_diameter_for_surface_2

        Returns:
            float: the value of `core_diameter_for_surface_2` or None if not set
        """
        return self._data["Core Diameter for Surface 2"]

    @core_diameter_for_surface_2.setter
    def core_diameter_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_2`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_2`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_2`')

        self._data["Core Diameter for Surface 2"] = value

    @property
    def core_length_for_surface_2(self):
        """Get core_length_for_surface_2

        Returns:
            float: the value of `core_length_for_surface_2` or None if not set
        """
        return self._data["Core Length for Surface 2"]

    @core_length_for_surface_2.setter
    def core_length_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_2`

        Args:
            value (float): value for IDD Field `core_length_for_surface_2`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_2`')

        self._data["Core Length for Surface 2"] = value

    @property
    def core_numbers_for_surface_2(self):
        """Get core_numbers_for_surface_2

        Returns:
            float: the value of `core_numbers_for_surface_2` or None if not set
        """
        return self._data["Core Numbers for Surface 2"]

    @core_numbers_for_surface_2.setter
    def core_numbers_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_2`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_2`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_2`')

        self._data["Core Numbers for Surface 2"] = value

    @property
    def slab_inlet_node_name_for_surface_2(self):
        """Get slab_inlet_node_name_for_surface_2

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_2` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 2"]

    @slab_inlet_node_name_for_surface_2.setter
    def slab_inlet_node_name_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_2`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_2`')

        self._data["Slab Inlet Node Name for Surface 2"] = value

    @property
    def slab_outlet_node_name_for_surface_2(self):
        """Get slab_outlet_node_name_for_surface_2

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_2` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 2"]

    @slab_outlet_node_name_for_surface_2.setter
    def slab_outlet_node_name_for_surface_2(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_2`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_2`')

        self._data["Slab Outlet Node Name for Surface 2"] = value

    @property
    def zone_3_name(self):
        """Get zone_3_name

        Returns:
            str: the value of `zone_3_name` or None if not set
        """
        return self._data["Zone 3 Name"]

    @zone_3_name.setter
    def zone_3_name(self, value=None):
        """  Corresponds to IDD Field `zone_3_name`

        Args:
            value (str): value for IDD Field `zone_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_3_name`')

        self._data["Zone 3 Name"] = value

    @property
    def surface_3_name(self):
        """Get surface_3_name

        Returns:
            str: the value of `surface_3_name` or None if not set
        """
        return self._data["Surface 3 Name"]

    @surface_3_name.setter
    def surface_3_name(self, value=None):
        """  Corresponds to IDD Field `surface_3_name`

        Args:
            value (str): value for IDD Field `surface_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_3_name`')

        self._data["Surface 3 Name"] = value

    @property
    def core_diameter_for_surface_3(self):
        """Get core_diameter_for_surface_3

        Returns:
            float: the value of `core_diameter_for_surface_3` or None if not set
        """
        return self._data["Core Diameter for Surface 3"]

    @core_diameter_for_surface_3.setter
    def core_diameter_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_3`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_3`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_3`')

        self._data["Core Diameter for Surface 3"] = value

    @property
    def core_length_for_surface_3(self):
        """Get core_length_for_surface_3

        Returns:
            float: the value of `core_length_for_surface_3` or None if not set
        """
        return self._data["Core Length for Surface 3"]

    @core_length_for_surface_3.setter
    def core_length_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_3`

        Args:
            value (float): value for IDD Field `core_length_for_surface_3`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_3`')

        self._data["Core Length for Surface 3"] = value

    @property
    def core_numbers_for_surface_3(self):
        """Get core_numbers_for_surface_3

        Returns:
            float: the value of `core_numbers_for_surface_3` or None if not set
        """
        return self._data["Core Numbers for Surface 3"]

    @core_numbers_for_surface_3.setter
    def core_numbers_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_3`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_3`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_3`')

        self._data["Core Numbers for Surface 3"] = value

    @property
    def slab_inlet_node_name_for_surface_3(self):
        """Get slab_inlet_node_name_for_surface_3

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_3` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 3"]

    @slab_inlet_node_name_for_surface_3.setter
    def slab_inlet_node_name_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_3`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_3`')

        self._data["Slab Inlet Node Name for Surface 3"] = value

    @property
    def slab_outlet_node_name_for_surface_3(self):
        """Get slab_outlet_node_name_for_surface_3

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_3` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 3"]

    @slab_outlet_node_name_for_surface_3.setter
    def slab_outlet_node_name_for_surface_3(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_3`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_3`')

        self._data["Slab Outlet Node Name for Surface 3"] = value

    @property
    def zone_4_name(self):
        """Get zone_4_name

        Returns:
            str: the value of `zone_4_name` or None if not set
        """
        return self._data["Zone 4 Name"]

    @zone_4_name.setter
    def zone_4_name(self, value=None):
        """  Corresponds to IDD Field `zone_4_name`

        Args:
            value (str): value for IDD Field `zone_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_4_name`')

        self._data["Zone 4 Name"] = value

    @property
    def surface_4_name(self):
        """Get surface_4_name

        Returns:
            str: the value of `surface_4_name` or None if not set
        """
        return self._data["Surface 4 Name"]

    @surface_4_name.setter
    def surface_4_name(self, value=None):
        """  Corresponds to IDD Field `surface_4_name`

        Args:
            value (str): value for IDD Field `surface_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_4_name`')

        self._data["Surface 4 Name"] = value

    @property
    def core_diameter_for_surface_4(self):
        """Get core_diameter_for_surface_4

        Returns:
            float: the value of `core_diameter_for_surface_4` or None if not set
        """
        return self._data["Core Diameter for Surface 4"]

    @core_diameter_for_surface_4.setter
    def core_diameter_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_4`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_4`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_4`')

        self._data["Core Diameter for Surface 4"] = value

    @property
    def core_length_for_surface_4(self):
        """Get core_length_for_surface_4

        Returns:
            float: the value of `core_length_for_surface_4` or None if not set
        """
        return self._data["Core Length for Surface 4"]

    @core_length_for_surface_4.setter
    def core_length_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_4`

        Args:
            value (float): value for IDD Field `core_length_for_surface_4`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_4`')

        self._data["Core Length for Surface 4"] = value

    @property
    def core_numbers_for_surface_4(self):
        """Get core_numbers_for_surface_4

        Returns:
            float: the value of `core_numbers_for_surface_4` or None if not set
        """
        return self._data["Core Numbers for Surface 4"]

    @core_numbers_for_surface_4.setter
    def core_numbers_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_4`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_4`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_4`')

        self._data["Core Numbers for Surface 4"] = value

    @property
    def slab_inlet_node_name_for_surface_4(self):
        """Get slab_inlet_node_name_for_surface_4

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_4` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 4"]

    @slab_inlet_node_name_for_surface_4.setter
    def slab_inlet_node_name_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_4`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_4`')

        self._data["Slab Inlet Node Name for Surface 4"] = value

    @property
    def slab_outlet_node_name_for_surface_4(self):
        """Get slab_outlet_node_name_for_surface_4

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_4` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 4"]

    @slab_outlet_node_name_for_surface_4.setter
    def slab_outlet_node_name_for_surface_4(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_4`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_4`')

        self._data["Slab Outlet Node Name for Surface 4"] = value

    @property
    def zone_5_name(self):
        """Get zone_5_name

        Returns:
            str: the value of `zone_5_name` or None if not set
        """
        return self._data["Zone 5 Name"]

    @zone_5_name.setter
    def zone_5_name(self, value=None):
        """  Corresponds to IDD Field `zone_5_name`

        Args:
            value (str): value for IDD Field `zone_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_5_name`')

        self._data["Zone 5 Name"] = value

    @property
    def surface_5_name(self):
        """Get surface_5_name

        Returns:
            str: the value of `surface_5_name` or None if not set
        """
        return self._data["Surface 5 Name"]

    @surface_5_name.setter
    def surface_5_name(self, value=None):
        """  Corresponds to IDD Field `surface_5_name`

        Args:
            value (str): value for IDD Field `surface_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_5_name`')

        self._data["Surface 5 Name"] = value

    @property
    def core_diameter_for_surface_5(self):
        """Get core_diameter_for_surface_5

        Returns:
            float: the value of `core_diameter_for_surface_5` or None if not set
        """
        return self._data["Core Diameter for Surface 5"]

    @core_diameter_for_surface_5.setter
    def core_diameter_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_5`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_5`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_5`')

        self._data["Core Diameter for Surface 5"] = value

    @property
    def core_length_for_surface_5(self):
        """Get core_length_for_surface_5

        Returns:
            float: the value of `core_length_for_surface_5` or None if not set
        """
        return self._data["Core Length for Surface 5"]

    @core_length_for_surface_5.setter
    def core_length_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_5`

        Args:
            value (float): value for IDD Field `core_length_for_surface_5`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_5`')

        self._data["Core Length for Surface 5"] = value

    @property
    def core_numbers_for_surface_5(self):
        """Get core_numbers_for_surface_5

        Returns:
            float: the value of `core_numbers_for_surface_5` or None if not set
        """
        return self._data["Core Numbers for Surface 5"]

    @core_numbers_for_surface_5.setter
    def core_numbers_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_5`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_5`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_5`')

        self._data["Core Numbers for Surface 5"] = value

    @property
    def slab_inlet_node_name_for_surface_5(self):
        """Get slab_inlet_node_name_for_surface_5

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_5` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 5"]

    @slab_inlet_node_name_for_surface_5.setter
    def slab_inlet_node_name_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_5`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_5`')

        self._data["Slab Inlet Node Name for Surface 5"] = value

    @property
    def slab_outlet_node_name_for_surface_5(self):
        """Get slab_outlet_node_name_for_surface_5

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_5` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 5"]

    @slab_outlet_node_name_for_surface_5.setter
    def slab_outlet_node_name_for_surface_5(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_5`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_5`')

        self._data["Slab Outlet Node Name for Surface 5"] = value

    @property
    def zone_6_name(self):
        """Get zone_6_name

        Returns:
            str: the value of `zone_6_name` or None if not set
        """
        return self._data["Zone 6 Name"]

    @zone_6_name.setter
    def zone_6_name(self, value=None):
        """  Corresponds to IDD Field `zone_6_name`

        Args:
            value (str): value for IDD Field `zone_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_6_name`')

        self._data["Zone 6 Name"] = value

    @property
    def surface_6_name(self):
        """Get surface_6_name

        Returns:
            str: the value of `surface_6_name` or None if not set
        """
        return self._data["Surface 6 Name"]

    @surface_6_name.setter
    def surface_6_name(self, value=None):
        """  Corresponds to IDD Field `surface_6_name`

        Args:
            value (str): value for IDD Field `surface_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_6_name`')

        self._data["Surface 6 Name"] = value

    @property
    def core_diameter_for_surface_6(self):
        """Get core_diameter_for_surface_6

        Returns:
            float: the value of `core_diameter_for_surface_6` or None if not set
        """
        return self._data["Core Diameter for Surface 6"]

    @core_diameter_for_surface_6.setter
    def core_diameter_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_6`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_6`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_6`')

        self._data["Core Diameter for Surface 6"] = value

    @property
    def core_length_for_surface_6(self):
        """Get core_length_for_surface_6

        Returns:
            float: the value of `core_length_for_surface_6` or None if not set
        """
        return self._data["Core Length for Surface 6"]

    @core_length_for_surface_6.setter
    def core_length_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_6`

        Args:
            value (float): value for IDD Field `core_length_for_surface_6`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_6`')

        self._data["Core Length for Surface 6"] = value

    @property
    def core_numbers_for_surface_6(self):
        """Get core_numbers_for_surface_6

        Returns:
            float: the value of `core_numbers_for_surface_6` or None if not set
        """
        return self._data["Core Numbers for Surface 6"]

    @core_numbers_for_surface_6.setter
    def core_numbers_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_6`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_6`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_6`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_6`')

        self._data["Core Numbers for Surface 6"] = value

    @property
    def slab_inlet_node_name_for_surface_6(self):
        """Get slab_inlet_node_name_for_surface_6

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_6` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 6"]

    @slab_inlet_node_name_for_surface_6.setter
    def slab_inlet_node_name_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_6`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_6`')

        self._data["Slab Inlet Node Name for Surface 6"] = value

    @property
    def slab_outlet_node_name_for_surface_6(self):
        """Get slab_outlet_node_name_for_surface_6

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_6` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 6"]

    @slab_outlet_node_name_for_surface_6.setter
    def slab_outlet_node_name_for_surface_6(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_6`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_6`')

        self._data["Slab Outlet Node Name for Surface 6"] = value

    @property
    def zone_7_name(self):
        """Get zone_7_name

        Returns:
            str: the value of `zone_7_name` or None if not set
        """
        return self._data["Zone 7 Name"]

    @zone_7_name.setter
    def zone_7_name(self, value=None):
        """  Corresponds to IDD Field `zone_7_name`

        Args:
            value (str): value for IDD Field `zone_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_7_name`')

        self._data["Zone 7 Name"] = value

    @property
    def surface_7_name(self):
        """Get surface_7_name

        Returns:
            str: the value of `surface_7_name` or None if not set
        """
        return self._data["Surface 7 Name"]

    @surface_7_name.setter
    def surface_7_name(self, value=None):
        """  Corresponds to IDD Field `surface_7_name`

        Args:
            value (str): value for IDD Field `surface_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_7_name`')

        self._data["Surface 7 Name"] = value

    @property
    def core_diameter_for_surface_7(self):
        """Get core_diameter_for_surface_7

        Returns:
            float: the value of `core_diameter_for_surface_7` or None if not set
        """
        return self._data["Core Diameter for Surface 7"]

    @core_diameter_for_surface_7.setter
    def core_diameter_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_7`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_7`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_7`')

        self._data["Core Diameter for Surface 7"] = value

    @property
    def core_length_for_surface_7(self):
        """Get core_length_for_surface_7

        Returns:
            float: the value of `core_length_for_surface_7` or None if not set
        """
        return self._data["Core Length for Surface 7"]

    @core_length_for_surface_7.setter
    def core_length_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_7`

        Args:
            value (float): value for IDD Field `core_length_for_surface_7`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_7`')

        self._data["Core Length for Surface 7"] = value

    @property
    def core_numbers_for_surface_7(self):
        """Get core_numbers_for_surface_7

        Returns:
            float: the value of `core_numbers_for_surface_7` or None if not set
        """
        return self._data["Core Numbers for Surface 7"]

    @core_numbers_for_surface_7.setter
    def core_numbers_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_7`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_7`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_7`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_7`')

        self._data["Core Numbers for Surface 7"] = value

    @property
    def slab_inlet_node_name_for_surface_7(self):
        """Get slab_inlet_node_name_for_surface_7

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_7` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 7"]

    @slab_inlet_node_name_for_surface_7.setter
    def slab_inlet_node_name_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_7`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_7`')

        self._data["Slab Inlet Node Name for Surface 7"] = value

    @property
    def slab_outlet_node_name_for_surface_7(self):
        """Get slab_outlet_node_name_for_surface_7

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_7` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 7"]

    @slab_outlet_node_name_for_surface_7.setter
    def slab_outlet_node_name_for_surface_7(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_7`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_7`')

        self._data["Slab Outlet Node Name for Surface 7"] = value

    @property
    def zone_8_name(self):
        """Get zone_8_name

        Returns:
            str: the value of `zone_8_name` or None if not set
        """
        return self._data["Zone 8 Name"]

    @zone_8_name.setter
    def zone_8_name(self, value=None):
        """  Corresponds to IDD Field `zone_8_name`

        Args:
            value (str): value for IDD Field `zone_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_8_name`')

        self._data["Zone 8 Name"] = value

    @property
    def surface_8_name(self):
        """Get surface_8_name

        Returns:
            str: the value of `surface_8_name` or None if not set
        """
        return self._data["Surface 8 Name"]

    @surface_8_name.setter
    def surface_8_name(self, value=None):
        """  Corresponds to IDD Field `surface_8_name`

        Args:
            value (str): value for IDD Field `surface_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_8_name`')

        self._data["Surface 8 Name"] = value

    @property
    def core_diameter_for_surface_8(self):
        """Get core_diameter_for_surface_8

        Returns:
            float: the value of `core_diameter_for_surface_8` or None if not set
        """
        return self._data["Core Diameter for Surface 8"]

    @core_diameter_for_surface_8.setter
    def core_diameter_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_8`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_8`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_8`')

        self._data["Core Diameter for Surface 8"] = value

    @property
    def core_length_for_surface_8(self):
        """Get core_length_for_surface_8

        Returns:
            float: the value of `core_length_for_surface_8` or None if not set
        """
        return self._data["Core Length for Surface 8"]

    @core_length_for_surface_8.setter
    def core_length_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_8`

        Args:
            value (float): value for IDD Field `core_length_for_surface_8`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_8`')

        self._data["Core Length for Surface 8"] = value

    @property
    def core_numbers_for_surface_8(self):
        """Get core_numbers_for_surface_8

        Returns:
            float: the value of `core_numbers_for_surface_8` or None if not set
        """
        return self._data["Core Numbers for Surface 8"]

    @core_numbers_for_surface_8.setter
    def core_numbers_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_8`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_8`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_8`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_8`')

        self._data["Core Numbers for Surface 8"] = value

    @property
    def slab_inlet_node_name_for_surface_8(self):
        """Get slab_inlet_node_name_for_surface_8

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_8` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 8"]

    @slab_inlet_node_name_for_surface_8.setter
    def slab_inlet_node_name_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_8`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_8`')

        self._data["Slab Inlet Node Name for Surface 8"] = value

    @property
    def slab_outlet_node_name_for_surface_8(self):
        """Get slab_outlet_node_name_for_surface_8

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_8` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 8"]

    @slab_outlet_node_name_for_surface_8.setter
    def slab_outlet_node_name_for_surface_8(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_8`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_8`')

        self._data["Slab Outlet Node Name for Surface 8"] = value

    @property
    def zone_9_name(self):
        """Get zone_9_name

        Returns:
            str: the value of `zone_9_name` or None if not set
        """
        return self._data["Zone 9 Name"]

    @zone_9_name.setter
    def zone_9_name(self, value=None):
        """  Corresponds to IDD Field `zone_9_name`

        Args:
            value (str): value for IDD Field `zone_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_9_name`')

        self._data["Zone 9 Name"] = value

    @property
    def surface_9_name(self):
        """Get surface_9_name

        Returns:
            str: the value of `surface_9_name` or None if not set
        """
        return self._data["Surface 9 Name"]

    @surface_9_name.setter
    def surface_9_name(self, value=None):
        """  Corresponds to IDD Field `surface_9_name`

        Args:
            value (str): value for IDD Field `surface_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_9_name`')

        self._data["Surface 9 Name"] = value

    @property
    def core_diameter_for_surface_9(self):
        """Get core_diameter_for_surface_9

        Returns:
            float: the value of `core_diameter_for_surface_9` or None if not set
        """
        return self._data["Core Diameter for Surface 9"]

    @core_diameter_for_surface_9.setter
    def core_diameter_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_9`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_9`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_9`')

        self._data["Core Diameter for Surface 9"] = value

    @property
    def core_length_for_surface_9(self):
        """Get core_length_for_surface_9

        Returns:
            float: the value of `core_length_for_surface_9` or None if not set
        """
        return self._data["Core Length for Surface 9"]

    @core_length_for_surface_9.setter
    def core_length_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_9`

        Args:
            value (float): value for IDD Field `core_length_for_surface_9`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_9`')

        self._data["Core Length for Surface 9"] = value

    @property
    def core_numbers_for_surface_9(self):
        """Get core_numbers_for_surface_9

        Returns:
            float: the value of `core_numbers_for_surface_9` or None if not set
        """
        return self._data["Core Numbers for Surface 9"]

    @core_numbers_for_surface_9.setter
    def core_numbers_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_9`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_9`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_9`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_9`')

        self._data["Core Numbers for Surface 9"] = value

    @property
    def slab_inlet_node_name_for_surface_9(self):
        """Get slab_inlet_node_name_for_surface_9

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_9` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 9"]

    @slab_inlet_node_name_for_surface_9.setter
    def slab_inlet_node_name_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_9`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_9`')

        self._data["Slab Inlet Node Name for Surface 9"] = value

    @property
    def slab_outlet_node_name_for_surface_9(self):
        """Get slab_outlet_node_name_for_surface_9

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_9` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 9"]

    @slab_outlet_node_name_for_surface_9.setter
    def slab_outlet_node_name_for_surface_9(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_9`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_9`')

        self._data["Slab Outlet Node Name for Surface 9"] = value

    @property
    def zone_10_name(self):
        """Get zone_10_name

        Returns:
            str: the value of `zone_10_name` or None if not set
        """
        return self._data["Zone 10 Name"]

    @zone_10_name.setter
    def zone_10_name(self, value=None):
        """  Corresponds to IDD Field `zone_10_name`

        Args:
            value (str): value for IDD Field `zone_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_10_name`')

        self._data["Zone 10 Name"] = value

    @property
    def surface_10_name(self):
        """Get surface_10_name

        Returns:
            str: the value of `surface_10_name` or None if not set
        """
        return self._data["Surface 10 Name"]

    @surface_10_name.setter
    def surface_10_name(self, value=None):
        """  Corresponds to IDD Field `surface_10_name`

        Args:
            value (str): value for IDD Field `surface_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_10_name`')

        self._data["Surface 10 Name"] = value

    @property
    def core_diameter_for_surface_10(self):
        """Get core_diameter_for_surface_10

        Returns:
            float: the value of `core_diameter_for_surface_10` or None if not set
        """
        return self._data["Core Diameter for Surface 10"]

    @core_diameter_for_surface_10.setter
    def core_diameter_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `core_diameter_for_surface_10`

        Args:
            value (float): value for IDD Field `core_diameter_for_surface_10`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_diameter_for_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_diameter_for_surface_10`')

        self._data["Core Diameter for Surface 10"] = value

    @property
    def core_length_for_surface_10(self):
        """Get core_length_for_surface_10

        Returns:
            float: the value of `core_length_for_surface_10` or None if not set
        """
        return self._data["Core Length for Surface 10"]

    @core_length_for_surface_10.setter
    def core_length_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `core_length_for_surface_10`

        Args:
            value (float): value for IDD Field `core_length_for_surface_10`
                Unit: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_length_for_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_length_for_surface_10`')

        self._data["Core Length for Surface 10"] = value

    @property
    def core_numbers_for_surface_10(self):
        """Get core_numbers_for_surface_10

        Returns:
            float: the value of `core_numbers_for_surface_10` or None if not set
        """
        return self._data["Core Numbers for Surface 10"]

    @core_numbers_for_surface_10.setter
    def core_numbers_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `core_numbers_for_surface_10`

        Args:
            value (float): value for IDD Field `core_numbers_for_surface_10`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `core_numbers_for_surface_10`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `core_numbers_for_surface_10`')

        self._data["Core Numbers for Surface 10"] = value

    @property
    def slab_inlet_node_name_for_surface_10(self):
        """Get slab_inlet_node_name_for_surface_10

        Returns:
            str: the value of `slab_inlet_node_name_for_surface_10` or None if not set
        """
        return self._data["Slab Inlet Node Name for Surface 10"]

    @slab_inlet_node_name_for_surface_10.setter
    def slab_inlet_node_name_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `slab_inlet_node_name_for_surface_10`

        Args:
            value (str): value for IDD Field `slab_inlet_node_name_for_surface_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_inlet_node_name_for_surface_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_inlet_node_name_for_surface_10`')

        self._data["Slab Inlet Node Name for Surface 10"] = value

    @property
    def slab_outlet_node_name_for_surface_10(self):
        """Get slab_outlet_node_name_for_surface_10

        Returns:
            str: the value of `slab_outlet_node_name_for_surface_10` or None if not set
        """
        return self._data["Slab Outlet Node Name for Surface 10"]

    @slab_outlet_node_name_for_surface_10.setter
    def slab_outlet_node_name_for_surface_10(self, value=None):
        """  Corresponds to IDD Field `slab_outlet_node_name_for_surface_10`

        Args:
            value (str): value for IDD Field `slab_outlet_node_name_for_surface_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `slab_outlet_node_name_for_surface_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slab_outlet_node_name_for_surface_10`')

        self._data["Slab Outlet Node Name for Surface 10"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.zone_1_name))
        out.append(self._to_str(self.surface_1_name))
        out.append(self._to_str(self.core_diameter_for_surface_1))
        out.append(self._to_str(self.core_length_for_surface_1))
        out.append(self._to_str(self.core_numbers_for_surface_1))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_1))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_1))
        out.append(self._to_str(self.zone_2_name))
        out.append(self._to_str(self.surface_2_name))
        out.append(self._to_str(self.core_diameter_for_surface_2))
        out.append(self._to_str(self.core_length_for_surface_2))
        out.append(self._to_str(self.core_numbers_for_surface_2))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_2))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_2))
        out.append(self._to_str(self.zone_3_name))
        out.append(self._to_str(self.surface_3_name))
        out.append(self._to_str(self.core_diameter_for_surface_3))
        out.append(self._to_str(self.core_length_for_surface_3))
        out.append(self._to_str(self.core_numbers_for_surface_3))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_3))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_3))
        out.append(self._to_str(self.zone_4_name))
        out.append(self._to_str(self.surface_4_name))
        out.append(self._to_str(self.core_diameter_for_surface_4))
        out.append(self._to_str(self.core_length_for_surface_4))
        out.append(self._to_str(self.core_numbers_for_surface_4))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_4))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_4))
        out.append(self._to_str(self.zone_5_name))
        out.append(self._to_str(self.surface_5_name))
        out.append(self._to_str(self.core_diameter_for_surface_5))
        out.append(self._to_str(self.core_length_for_surface_5))
        out.append(self._to_str(self.core_numbers_for_surface_5))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_5))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_5))
        out.append(self._to_str(self.zone_6_name))
        out.append(self._to_str(self.surface_6_name))
        out.append(self._to_str(self.core_diameter_for_surface_6))
        out.append(self._to_str(self.core_length_for_surface_6))
        out.append(self._to_str(self.core_numbers_for_surface_6))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_6))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_6))
        out.append(self._to_str(self.zone_7_name))
        out.append(self._to_str(self.surface_7_name))
        out.append(self._to_str(self.core_diameter_for_surface_7))
        out.append(self._to_str(self.core_length_for_surface_7))
        out.append(self._to_str(self.core_numbers_for_surface_7))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_7))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_7))
        out.append(self._to_str(self.zone_8_name))
        out.append(self._to_str(self.surface_8_name))
        out.append(self._to_str(self.core_diameter_for_surface_8))
        out.append(self._to_str(self.core_length_for_surface_8))
        out.append(self._to_str(self.core_numbers_for_surface_8))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_8))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_8))
        out.append(self._to_str(self.zone_9_name))
        out.append(self._to_str(self.surface_9_name))
        out.append(self._to_str(self.core_diameter_for_surface_9))
        out.append(self._to_str(self.core_length_for_surface_9))
        out.append(self._to_str(self.core_numbers_for_surface_9))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_9))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_9))
        out.append(self._to_str(self.zone_10_name))
        out.append(self._to_str(self.surface_10_name))
        out.append(self._to_str(self.core_diameter_for_surface_10))
        out.append(self._to_str(self.core_length_for_surface_10))
        out.append(self._to_str(self.core_numbers_for_surface_10))
        out.append(self._to_str(self.slab_inlet_node_name_for_surface_10))
        out.append(self._to_str(self.slab_outlet_node_name_for_surface_10))
        return ",".join(out)

class ZoneHvacAirDistributionUnit(object):
    """ Corresponds to IDD object `ZoneHVAC:AirDistributionUnit`
        Central air system air distribution unit, serves as a wrapper for a specific type of
        air terminal unit. This object is referenced in a ZoneHVAC:EquipmentList.
    """
    internal_name = "ZoneHVAC:AirDistributionUnit"
    field_count = 6

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:AirDistributionUnit`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Air Distribution Unit Outlet Node Name"] = None
        self._data["Air Terminal Object Type"] = None
        self._data["Air Terminal Name"] = None
        self._data["Nominal Upstream Leakage Fraction"] = None
        self._data["Constant Downstream Leakage Fraction"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_distribution_unit_outlet_node_name = None
        else:
            self.air_distribution_unit_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_terminal_object_type = None
        else:
            self.air_terminal_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_terminal_name = None
        else:
            self.air_terminal_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_upstream_leakage_fraction = None
        else:
            self.nominal_upstream_leakage_fraction = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.constant_downstream_leakage_fraction = None
        else:
            self.constant_downstream_leakage_fraction = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def air_distribution_unit_outlet_node_name(self):
        """Get air_distribution_unit_outlet_node_name

        Returns:
            str: the value of `air_distribution_unit_outlet_node_name` or None if not set
        """
        return self._data["Air Distribution Unit Outlet Node Name"]

    @air_distribution_unit_outlet_node_name.setter
    def air_distribution_unit_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_distribution_unit_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_distribution_unit_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_distribution_unit_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_distribution_unit_outlet_node_name`')

        self._data["Air Distribution Unit Outlet Node Name"] = value

    @property
    def air_terminal_object_type(self):
        """Get air_terminal_object_type

        Returns:
            str: the value of `air_terminal_object_type` or None if not set
        """
        return self._data["Air Terminal Object Type"]

    @air_terminal_object_type.setter
    def air_terminal_object_type(self, value=None):
        """  Corresponds to IDD Field `air_terminal_object_type`

        Args:
            value (str): value for IDD Field `air_terminal_object_type`
                Accepted values are:
                      - AirTerminal:DualDuct:ConstantVolume
                      - AirTerminal:DualDuct:VAV
                      - AirTerminal:SingleDuct:ConstantVolume:Reheat
                      - AirTerminal:SingleDuct:VAV:Reheat
                      - AirTerminal:SingleDuct:VAV:NoReheat
                      - AirTerminal:SingleDuct:SeriesPIU:Reheat
                      - AirTerminal:SingleDuct:ParallelPIU:Reheat
                      - AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction
                      - AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan
                      - AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat
                      - AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat
                      - AirTerminal:SingleDuct:ConstantVolume:CooledBeam
                      - AirTerminal:DualDuct:VAV:OutdoorAir
                      - AirTerminal:SingleDuct:UserDefined
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_terminal_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_terminal_object_type`')
            vals = set()
            vals.add("AirTerminal:DualDuct:ConstantVolume")
            vals.add("AirTerminal:DualDuct:VAV")
            vals.add("AirTerminal:SingleDuct:ConstantVolume:Reheat")
            vals.add("AirTerminal:SingleDuct:VAV:Reheat")
            vals.add("AirTerminal:SingleDuct:VAV:NoReheat")
            vals.add("AirTerminal:SingleDuct:SeriesPIU:Reheat")
            vals.add("AirTerminal:SingleDuct:ParallelPIU:Reheat")
            vals.add("AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction")
            vals.add("AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan")
            vals.add("AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat")
            vals.add("AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat")
            vals.add("AirTerminal:SingleDuct:ConstantVolume:CooledBeam")
            vals.add("AirTerminal:DualDuct:VAV:OutdoorAir")
            vals.add("AirTerminal:SingleDuct:UserDefined")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `air_terminal_object_type`'.format(value))

        self._data["Air Terminal Object Type"] = value

    @property
    def air_terminal_name(self):
        """Get air_terminal_name

        Returns:
            str: the value of `air_terminal_name` or None if not set
        """
        return self._data["Air Terminal Name"]

    @air_terminal_name.setter
    def air_terminal_name(self, value=None):
        """  Corresponds to IDD Field `air_terminal_name`

        Args:
            value (str): value for IDD Field `air_terminal_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_terminal_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_terminal_name`')

        self._data["Air Terminal Name"] = value

    @property
    def nominal_upstream_leakage_fraction(self):
        """Get nominal_upstream_leakage_fraction

        Returns:
            float: the value of `nominal_upstream_leakage_fraction` or None if not set
        """
        return self._data["Nominal Upstream Leakage Fraction"]

    @nominal_upstream_leakage_fraction.setter
    def nominal_upstream_leakage_fraction(self, value=0.0 ):
        """  Corresponds to IDD Field `nominal_upstream_leakage_fraction`
        fraction at system design Flow; leakage Flow constant, leakage fraction
        varies with variable system Flow Rate.

        Args:
            value (float): value for IDD Field `nominal_upstream_leakage_fraction`
                Default value: 0.0
                value >= 0.0
                value <= 0.3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_upstream_leakage_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_upstream_leakage_fraction`')
            if value > 0.3:
                raise ValueError('value need to be smaller 0.3 '
                                 'for field `nominal_upstream_leakage_fraction`')

        self._data["Nominal Upstream Leakage Fraction"] = value

    @property
    def constant_downstream_leakage_fraction(self):
        """Get constant_downstream_leakage_fraction

        Returns:
            float: the value of `constant_downstream_leakage_fraction` or None if not set
        """
        return self._data["Constant Downstream Leakage Fraction"]

    @constant_downstream_leakage_fraction.setter
    def constant_downstream_leakage_fraction(self, value=0.0 ):
        """  Corresponds to IDD Field `constant_downstream_leakage_fraction`

        Args:
            value (float): value for IDD Field `constant_downstream_leakage_fraction`
                Default value: 0.0
                value >= 0.0
                value <= 0.3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `constant_downstream_leakage_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constant_downstream_leakage_fraction`')
            if value > 0.3:
                raise ValueError('value need to be smaller 0.3 '
                                 'for field `constant_downstream_leakage_fraction`')

        self._data["Constant Downstream Leakage Fraction"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.air_distribution_unit_outlet_node_name))
        out.append(self._to_str(self.air_terminal_object_type))
        out.append(self._to_str(self.air_terminal_name))
        out.append(self._to_str(self.nominal_upstream_leakage_fraction))
        out.append(self._to_str(self.constant_downstream_leakage_fraction))
        return ",".join(out)

class ZoneHvacEquipmentList(object):
    """ Corresponds to IDD object `ZoneHVAC:EquipmentList`
        List equipment in simulation order.  Note that an ZoneHVAC:AirDistributionUnit or
        AirTerminal:SingleDuct:Uncontrolled object must be listed in this statement if there is a forced
        air system serving the zone from the air loop.
        Equipment is simulated in the order specified by Zone Equipment Cooling Sequence and
        Zone Equipment Heating or No-Load Sequence, depending on the thermostat request.
        For equipment of similar type, assign sequence 1 to the first system intended to
        serve that type of load.  For situations where one or more equipment types has limited capacity or
        limited control, order the sequence so that the most controllable piece of equipment runs last.
        For example, with a dedicated outdoor air system (DOAS), the air terminal for the DOAS
        should be assigned Heating Sequence = 1 and Cooling Sequence = 1.  Any other equipment should
        be assigned sequence 2 or higher so that it will see the net load after the DOAS air is added
        to the zone.
    """
    internal_name = "ZoneHVAC:EquipmentList"
    field_count = 73

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:EquipmentList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Zone Equipment 1 Object Type"] = None
        self._data["Zone Equipment 1 Name"] = None
        self._data["Zone Equipment 1 Cooling Sequence"] = None
        self._data["Zone Equipment 1 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 2 Object Type"] = None
        self._data["Zone Equipment 2 Name"] = None
        self._data["Zone Equipment 2 Cooling Sequence"] = None
        self._data["Zone Equipment 2 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 3 Object Type"] = None
        self._data["Zone Equipment 3 Name"] = None
        self._data["Zone Equipment 3 Cooling Sequence"] = None
        self._data["Zone Equipment 3 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 4 Object Type"] = None
        self._data["Zone Equipment 4 Name"] = None
        self._data["Zone Equipment 4 Cooling Sequence"] = None
        self._data["Zone Equipment 4 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 5 Object Type"] = None
        self._data["Zone Equipment 5 Name"] = None
        self._data["Zone Equipment 5 Cooling Sequence"] = None
        self._data["Zone Equipment 5 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 6 Object Type"] = None
        self._data["Zone Equipment 6 Name"] = None
        self._data["Zone Equipment 6 Cooling Sequence"] = None
        self._data["Zone Equipment 6 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 7 Object Type"] = None
        self._data["Zone Equipment 7 Name"] = None
        self._data["Zone Equipment 7 Cooling Sequence"] = None
        self._data["Zone Equipment 7 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 8 Object Type"] = None
        self._data["Zone Equipment 8 Name"] = None
        self._data["Zone Equipment 8 Cooling Sequence"] = None
        self._data["Zone Equipment 8 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 9 Object Type"] = None
        self._data["Zone Equipment 9 Name"] = None
        self._data["Zone Equipment 9 Cooling Sequence"] = None
        self._data["Zone Equipment 9 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 10 Object Type"] = None
        self._data["Zone Equipment 10 Name"] = None
        self._data["Zone Equipment 10 Cooling Sequence"] = None
        self._data["Zone Equipment 10 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 11 Object Type"] = None
        self._data["Zone Equipment 11 Name"] = None
        self._data["Zone Equipment 11 Cooling Sequence"] = None
        self._data["Zone Equipment 11 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 12 Object Type"] = None
        self._data["Zone Equipment 12 Name"] = None
        self._data["Zone Equipment 12 Cooling Sequence"] = None
        self._data["Zone Equipment 12 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 13 Object Type"] = None
        self._data["Zone Equipment 13 Name"] = None
        self._data["Zone Equipment 13 Cooling Sequence"] = None
        self._data["Zone Equipment 13 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 14 Object Type"] = None
        self._data["Zone Equipment 14 Name"] = None
        self._data["Zone Equipment 14 Cooling Sequence"] = None
        self._data["Zone Equipment 14 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 15 Object Type"] = None
        self._data["Zone Equipment 15 Name"] = None
        self._data["Zone Equipment 15 Cooling Sequence"] = None
        self._data["Zone Equipment 15 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 16 Object Type"] = None
        self._data["Zone Equipment 16 Name"] = None
        self._data["Zone Equipment 16 Cooling Sequence"] = None
        self._data["Zone Equipment 16 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 17 Object Type"] = None
        self._data["Zone Equipment 17 Name"] = None
        self._data["Zone Equipment 17 Cooling Sequence"] = None
        self._data["Zone Equipment 17 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 18 Object Type"] = None
        self._data["Zone Equipment 18 Name"] = None
        self._data["Zone Equipment 18 Cooling Sequence"] = None
        self._data["Zone Equipment 18 Heating or No-Load Sequence"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_1_object_type = None
        else:
            self.zone_equipment_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_1_name = None
        else:
            self.zone_equipment_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_1_cooling_sequence = None
        else:
            self.zone_equipment_1_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_1_heating_or_noload_sequence = None
        else:
            self.zone_equipment_1_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_2_object_type = None
        else:
            self.zone_equipment_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_2_name = None
        else:
            self.zone_equipment_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_2_cooling_sequence = None
        else:
            self.zone_equipment_2_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_2_heating_or_noload_sequence = None
        else:
            self.zone_equipment_2_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_3_object_type = None
        else:
            self.zone_equipment_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_3_name = None
        else:
            self.zone_equipment_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_3_cooling_sequence = None
        else:
            self.zone_equipment_3_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_3_heating_or_noload_sequence = None
        else:
            self.zone_equipment_3_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_4_object_type = None
        else:
            self.zone_equipment_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_4_name = None
        else:
            self.zone_equipment_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_4_cooling_sequence = None
        else:
            self.zone_equipment_4_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_4_heating_or_noload_sequence = None
        else:
            self.zone_equipment_4_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_5_object_type = None
        else:
            self.zone_equipment_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_5_name = None
        else:
            self.zone_equipment_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_5_cooling_sequence = None
        else:
            self.zone_equipment_5_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_5_heating_or_noload_sequence = None
        else:
            self.zone_equipment_5_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_6_object_type = None
        else:
            self.zone_equipment_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_6_name = None
        else:
            self.zone_equipment_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_6_cooling_sequence = None
        else:
            self.zone_equipment_6_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_6_heating_or_noload_sequence = None
        else:
            self.zone_equipment_6_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_7_object_type = None
        else:
            self.zone_equipment_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_7_name = None
        else:
            self.zone_equipment_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_7_cooling_sequence = None
        else:
            self.zone_equipment_7_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_7_heating_or_noload_sequence = None
        else:
            self.zone_equipment_7_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_8_object_type = None
        else:
            self.zone_equipment_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_8_name = None
        else:
            self.zone_equipment_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_8_cooling_sequence = None
        else:
            self.zone_equipment_8_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_8_heating_or_noload_sequence = None
        else:
            self.zone_equipment_8_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_9_object_type = None
        else:
            self.zone_equipment_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_9_name = None
        else:
            self.zone_equipment_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_9_cooling_sequence = None
        else:
            self.zone_equipment_9_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_9_heating_or_noload_sequence = None
        else:
            self.zone_equipment_9_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_10_object_type = None
        else:
            self.zone_equipment_10_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_10_name = None
        else:
            self.zone_equipment_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_10_cooling_sequence = None
        else:
            self.zone_equipment_10_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_10_heating_or_noload_sequence = None
        else:
            self.zone_equipment_10_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_11_object_type = None
        else:
            self.zone_equipment_11_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_11_name = None
        else:
            self.zone_equipment_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_11_cooling_sequence = None
        else:
            self.zone_equipment_11_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_11_heating_or_noload_sequence = None
        else:
            self.zone_equipment_11_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_12_object_type = None
        else:
            self.zone_equipment_12_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_12_name = None
        else:
            self.zone_equipment_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_12_cooling_sequence = None
        else:
            self.zone_equipment_12_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_12_heating_or_noload_sequence = None
        else:
            self.zone_equipment_12_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_13_object_type = None
        else:
            self.zone_equipment_13_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_13_name = None
        else:
            self.zone_equipment_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_13_cooling_sequence = None
        else:
            self.zone_equipment_13_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_13_heating_or_noload_sequence = None
        else:
            self.zone_equipment_13_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_14_object_type = None
        else:
            self.zone_equipment_14_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_14_name = None
        else:
            self.zone_equipment_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_14_cooling_sequence = None
        else:
            self.zone_equipment_14_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_14_heating_or_noload_sequence = None
        else:
            self.zone_equipment_14_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_15_object_type = None
        else:
            self.zone_equipment_15_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_15_name = None
        else:
            self.zone_equipment_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_15_cooling_sequence = None
        else:
            self.zone_equipment_15_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_15_heating_or_noload_sequence = None
        else:
            self.zone_equipment_15_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_16_object_type = None
        else:
            self.zone_equipment_16_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_16_name = None
        else:
            self.zone_equipment_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_16_cooling_sequence = None
        else:
            self.zone_equipment_16_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_16_heating_or_noload_sequence = None
        else:
            self.zone_equipment_16_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_17_object_type = None
        else:
            self.zone_equipment_17_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_17_name = None
        else:
            self.zone_equipment_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_17_cooling_sequence = None
        else:
            self.zone_equipment_17_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_17_heating_or_noload_sequence = None
        else:
            self.zone_equipment_17_heating_or_noload_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_18_object_type = None
        else:
            self.zone_equipment_18_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_18_name = None
        else:
            self.zone_equipment_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_18_cooling_sequence = None
        else:
            self.zone_equipment_18_cooling_sequence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_equipment_18_heating_or_noload_sequence = None
        else:
            self.zone_equipment_18_heating_or_noload_sequence = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def zone_equipment_1_object_type(self):
        """Get zone_equipment_1_object_type

        Returns:
            str: the value of `zone_equipment_1_object_type` or None if not set
        """
        return self._data["Zone Equipment 1 Object Type"]

    @zone_equipment_1_object_type.setter
    def zone_equipment_1_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_1_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_1_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_1_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_1_object_type`'.format(value))

        self._data["Zone Equipment 1 Object Type"] = value

    @property
    def zone_equipment_1_name(self):
        """Get zone_equipment_1_name

        Returns:
            str: the value of `zone_equipment_1_name` or None if not set
        """
        return self._data["Zone Equipment 1 Name"]

    @zone_equipment_1_name.setter
    def zone_equipment_1_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_1_name`

        Args:
            value (str): value for IDD Field `zone_equipment_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_1_name`')

        self._data["Zone Equipment 1 Name"] = value

    @property
    def zone_equipment_1_cooling_sequence(self):
        """Get zone_equipment_1_cooling_sequence

        Returns:
            int: the value of `zone_equipment_1_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 1 Cooling Sequence"]

    @zone_equipment_1_cooling_sequence.setter
    def zone_equipment_1_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_1_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_1_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_1_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_1_cooling_sequence`')

        self._data["Zone Equipment 1 Cooling Sequence"] = value

    @property
    def zone_equipment_1_heating_or_noload_sequence(self):
        """Get zone_equipment_1_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_1_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 1 Heating or No-Load Sequence"]

    @zone_equipment_1_heating_or_noload_sequence.setter
    def zone_equipment_1_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_1_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_1_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_1_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_1_heating_or_noload_sequence`')

        self._data["Zone Equipment 1 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_2_object_type(self):
        """Get zone_equipment_2_object_type

        Returns:
            str: the value of `zone_equipment_2_object_type` or None if not set
        """
        return self._data["Zone Equipment 2 Object Type"]

    @zone_equipment_2_object_type.setter
    def zone_equipment_2_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_2_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_2_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_2_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_2_object_type`'.format(value))

        self._data["Zone Equipment 2 Object Type"] = value

    @property
    def zone_equipment_2_name(self):
        """Get zone_equipment_2_name

        Returns:
            str: the value of `zone_equipment_2_name` or None if not set
        """
        return self._data["Zone Equipment 2 Name"]

    @zone_equipment_2_name.setter
    def zone_equipment_2_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_2_name`

        Args:
            value (str): value for IDD Field `zone_equipment_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_2_name`')

        self._data["Zone Equipment 2 Name"] = value

    @property
    def zone_equipment_2_cooling_sequence(self):
        """Get zone_equipment_2_cooling_sequence

        Returns:
            int: the value of `zone_equipment_2_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 2 Cooling Sequence"]

    @zone_equipment_2_cooling_sequence.setter
    def zone_equipment_2_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_2_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_2_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_2_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_2_cooling_sequence`')

        self._data["Zone Equipment 2 Cooling Sequence"] = value

    @property
    def zone_equipment_2_heating_or_noload_sequence(self):
        """Get zone_equipment_2_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_2_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 2 Heating or No-Load Sequence"]

    @zone_equipment_2_heating_or_noload_sequence.setter
    def zone_equipment_2_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_2_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_2_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_2_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_2_heating_or_noload_sequence`')

        self._data["Zone Equipment 2 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_3_object_type(self):
        """Get zone_equipment_3_object_type

        Returns:
            str: the value of `zone_equipment_3_object_type` or None if not set
        """
        return self._data["Zone Equipment 3 Object Type"]

    @zone_equipment_3_object_type.setter
    def zone_equipment_3_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_3_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_3_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_3_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_3_object_type`'.format(value))

        self._data["Zone Equipment 3 Object Type"] = value

    @property
    def zone_equipment_3_name(self):
        """Get zone_equipment_3_name

        Returns:
            str: the value of `zone_equipment_3_name` or None if not set
        """
        return self._data["Zone Equipment 3 Name"]

    @zone_equipment_3_name.setter
    def zone_equipment_3_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_3_name`

        Args:
            value (str): value for IDD Field `zone_equipment_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_3_name`')

        self._data["Zone Equipment 3 Name"] = value

    @property
    def zone_equipment_3_cooling_sequence(self):
        """Get zone_equipment_3_cooling_sequence

        Returns:
            int: the value of `zone_equipment_3_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 3 Cooling Sequence"]

    @zone_equipment_3_cooling_sequence.setter
    def zone_equipment_3_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_3_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_3_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_3_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_3_cooling_sequence`')

        self._data["Zone Equipment 3 Cooling Sequence"] = value

    @property
    def zone_equipment_3_heating_or_noload_sequence(self):
        """Get zone_equipment_3_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_3_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 3 Heating or No-Load Sequence"]

    @zone_equipment_3_heating_or_noload_sequence.setter
    def zone_equipment_3_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_3_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_3_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_3_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_3_heating_or_noload_sequence`')

        self._data["Zone Equipment 3 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_4_object_type(self):
        """Get zone_equipment_4_object_type

        Returns:
            str: the value of `zone_equipment_4_object_type` or None if not set
        """
        return self._data["Zone Equipment 4 Object Type"]

    @zone_equipment_4_object_type.setter
    def zone_equipment_4_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_4_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_4_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_4_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_4_object_type`'.format(value))

        self._data["Zone Equipment 4 Object Type"] = value

    @property
    def zone_equipment_4_name(self):
        """Get zone_equipment_4_name

        Returns:
            str: the value of `zone_equipment_4_name` or None if not set
        """
        return self._data["Zone Equipment 4 Name"]

    @zone_equipment_4_name.setter
    def zone_equipment_4_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_4_name`

        Args:
            value (str): value for IDD Field `zone_equipment_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_4_name`')

        self._data["Zone Equipment 4 Name"] = value

    @property
    def zone_equipment_4_cooling_sequence(self):
        """Get zone_equipment_4_cooling_sequence

        Returns:
            int: the value of `zone_equipment_4_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 4 Cooling Sequence"]

    @zone_equipment_4_cooling_sequence.setter
    def zone_equipment_4_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_4_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_4_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_4_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_4_cooling_sequence`')

        self._data["Zone Equipment 4 Cooling Sequence"] = value

    @property
    def zone_equipment_4_heating_or_noload_sequence(self):
        """Get zone_equipment_4_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_4_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 4 Heating or No-Load Sequence"]

    @zone_equipment_4_heating_or_noload_sequence.setter
    def zone_equipment_4_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_4_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_4_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_4_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_4_heating_or_noload_sequence`')

        self._data["Zone Equipment 4 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_5_object_type(self):
        """Get zone_equipment_5_object_type

        Returns:
            str: the value of `zone_equipment_5_object_type` or None if not set
        """
        return self._data["Zone Equipment 5 Object Type"]

    @zone_equipment_5_object_type.setter
    def zone_equipment_5_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_5_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_5_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_5_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_5_object_type`'.format(value))

        self._data["Zone Equipment 5 Object Type"] = value

    @property
    def zone_equipment_5_name(self):
        """Get zone_equipment_5_name

        Returns:
            str: the value of `zone_equipment_5_name` or None if not set
        """
        return self._data["Zone Equipment 5 Name"]

    @zone_equipment_5_name.setter
    def zone_equipment_5_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_5_name`

        Args:
            value (str): value for IDD Field `zone_equipment_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_5_name`')

        self._data["Zone Equipment 5 Name"] = value

    @property
    def zone_equipment_5_cooling_sequence(self):
        """Get zone_equipment_5_cooling_sequence

        Returns:
            int: the value of `zone_equipment_5_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 5 Cooling Sequence"]

    @zone_equipment_5_cooling_sequence.setter
    def zone_equipment_5_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_5_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_5_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_5_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_5_cooling_sequence`')

        self._data["Zone Equipment 5 Cooling Sequence"] = value

    @property
    def zone_equipment_5_heating_or_noload_sequence(self):
        """Get zone_equipment_5_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_5_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 5 Heating or No-Load Sequence"]

    @zone_equipment_5_heating_or_noload_sequence.setter
    def zone_equipment_5_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_5_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_5_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_5_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_5_heating_or_noload_sequence`')

        self._data["Zone Equipment 5 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_6_object_type(self):
        """Get zone_equipment_6_object_type

        Returns:
            str: the value of `zone_equipment_6_object_type` or None if not set
        """
        return self._data["Zone Equipment 6 Object Type"]

    @zone_equipment_6_object_type.setter
    def zone_equipment_6_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_6_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_6_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_6_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_6_object_type`'.format(value))

        self._data["Zone Equipment 6 Object Type"] = value

    @property
    def zone_equipment_6_name(self):
        """Get zone_equipment_6_name

        Returns:
            str: the value of `zone_equipment_6_name` or None if not set
        """
        return self._data["Zone Equipment 6 Name"]

    @zone_equipment_6_name.setter
    def zone_equipment_6_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_6_name`

        Args:
            value (str): value for IDD Field `zone_equipment_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_6_name`')

        self._data["Zone Equipment 6 Name"] = value

    @property
    def zone_equipment_6_cooling_sequence(self):
        """Get zone_equipment_6_cooling_sequence

        Returns:
            int: the value of `zone_equipment_6_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 6 Cooling Sequence"]

    @zone_equipment_6_cooling_sequence.setter
    def zone_equipment_6_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_6_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_6_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_6_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_6_cooling_sequence`')

        self._data["Zone Equipment 6 Cooling Sequence"] = value

    @property
    def zone_equipment_6_heating_or_noload_sequence(self):
        """Get zone_equipment_6_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_6_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 6 Heating or No-Load Sequence"]

    @zone_equipment_6_heating_or_noload_sequence.setter
    def zone_equipment_6_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_6_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_6_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_6_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_6_heating_or_noload_sequence`')

        self._data["Zone Equipment 6 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_7_object_type(self):
        """Get zone_equipment_7_object_type

        Returns:
            str: the value of `zone_equipment_7_object_type` or None if not set
        """
        return self._data["Zone Equipment 7 Object Type"]

    @zone_equipment_7_object_type.setter
    def zone_equipment_7_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_7_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_7_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_7_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_7_object_type`'.format(value))

        self._data["Zone Equipment 7 Object Type"] = value

    @property
    def zone_equipment_7_name(self):
        """Get zone_equipment_7_name

        Returns:
            str: the value of `zone_equipment_7_name` or None if not set
        """
        return self._data["Zone Equipment 7 Name"]

    @zone_equipment_7_name.setter
    def zone_equipment_7_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_7_name`

        Args:
            value (str): value for IDD Field `zone_equipment_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_7_name`')

        self._data["Zone Equipment 7 Name"] = value

    @property
    def zone_equipment_7_cooling_sequence(self):
        """Get zone_equipment_7_cooling_sequence

        Returns:
            int: the value of `zone_equipment_7_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 7 Cooling Sequence"]

    @zone_equipment_7_cooling_sequence.setter
    def zone_equipment_7_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_7_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_7_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_7_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_7_cooling_sequence`')

        self._data["Zone Equipment 7 Cooling Sequence"] = value

    @property
    def zone_equipment_7_heating_or_noload_sequence(self):
        """Get zone_equipment_7_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_7_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 7 Heating or No-Load Sequence"]

    @zone_equipment_7_heating_or_noload_sequence.setter
    def zone_equipment_7_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_7_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_7_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_7_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_7_heating_or_noload_sequence`')

        self._data["Zone Equipment 7 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_8_object_type(self):
        """Get zone_equipment_8_object_type

        Returns:
            str: the value of `zone_equipment_8_object_type` or None if not set
        """
        return self._data["Zone Equipment 8 Object Type"]

    @zone_equipment_8_object_type.setter
    def zone_equipment_8_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_8_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_8_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_8_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_8_object_type`'.format(value))

        self._data["Zone Equipment 8 Object Type"] = value

    @property
    def zone_equipment_8_name(self):
        """Get zone_equipment_8_name

        Returns:
            str: the value of `zone_equipment_8_name` or None if not set
        """
        return self._data["Zone Equipment 8 Name"]

    @zone_equipment_8_name.setter
    def zone_equipment_8_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_8_name`

        Args:
            value (str): value for IDD Field `zone_equipment_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_8_name`')

        self._data["Zone Equipment 8 Name"] = value

    @property
    def zone_equipment_8_cooling_sequence(self):
        """Get zone_equipment_8_cooling_sequence

        Returns:
            int: the value of `zone_equipment_8_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 8 Cooling Sequence"]

    @zone_equipment_8_cooling_sequence.setter
    def zone_equipment_8_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_8_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_8_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_8_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_8_cooling_sequence`')

        self._data["Zone Equipment 8 Cooling Sequence"] = value

    @property
    def zone_equipment_8_heating_or_noload_sequence(self):
        """Get zone_equipment_8_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_8_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 8 Heating or No-Load Sequence"]

    @zone_equipment_8_heating_or_noload_sequence.setter
    def zone_equipment_8_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_8_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_8_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_8_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_8_heating_or_noload_sequence`')

        self._data["Zone Equipment 8 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_9_object_type(self):
        """Get zone_equipment_9_object_type

        Returns:
            str: the value of `zone_equipment_9_object_type` or None if not set
        """
        return self._data["Zone Equipment 9 Object Type"]

    @zone_equipment_9_object_type.setter
    def zone_equipment_9_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_9_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_9_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_9_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_9_object_type`'.format(value))

        self._data["Zone Equipment 9 Object Type"] = value

    @property
    def zone_equipment_9_name(self):
        """Get zone_equipment_9_name

        Returns:
            str: the value of `zone_equipment_9_name` or None if not set
        """
        return self._data["Zone Equipment 9 Name"]

    @zone_equipment_9_name.setter
    def zone_equipment_9_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_9_name`

        Args:
            value (str): value for IDD Field `zone_equipment_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_9_name`')

        self._data["Zone Equipment 9 Name"] = value

    @property
    def zone_equipment_9_cooling_sequence(self):
        """Get zone_equipment_9_cooling_sequence

        Returns:
            int: the value of `zone_equipment_9_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 9 Cooling Sequence"]

    @zone_equipment_9_cooling_sequence.setter
    def zone_equipment_9_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_9_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_9_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_9_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_9_cooling_sequence`')

        self._data["Zone Equipment 9 Cooling Sequence"] = value

    @property
    def zone_equipment_9_heating_or_noload_sequence(self):
        """Get zone_equipment_9_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_9_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 9 Heating or No-Load Sequence"]

    @zone_equipment_9_heating_or_noload_sequence.setter
    def zone_equipment_9_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_9_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_9_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_9_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_9_heating_or_noload_sequence`')

        self._data["Zone Equipment 9 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_10_object_type(self):
        """Get zone_equipment_10_object_type

        Returns:
            str: the value of `zone_equipment_10_object_type` or None if not set
        """
        return self._data["Zone Equipment 10 Object Type"]

    @zone_equipment_10_object_type.setter
    def zone_equipment_10_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_10_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_10_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_10_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_10_object_type`'.format(value))

        self._data["Zone Equipment 10 Object Type"] = value

    @property
    def zone_equipment_10_name(self):
        """Get zone_equipment_10_name

        Returns:
            str: the value of `zone_equipment_10_name` or None if not set
        """
        return self._data["Zone Equipment 10 Name"]

    @zone_equipment_10_name.setter
    def zone_equipment_10_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_10_name`

        Args:
            value (str): value for IDD Field `zone_equipment_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_10_name`')

        self._data["Zone Equipment 10 Name"] = value

    @property
    def zone_equipment_10_cooling_sequence(self):
        """Get zone_equipment_10_cooling_sequence

        Returns:
            int: the value of `zone_equipment_10_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 10 Cooling Sequence"]

    @zone_equipment_10_cooling_sequence.setter
    def zone_equipment_10_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_10_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_10_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_10_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_10_cooling_sequence`')

        self._data["Zone Equipment 10 Cooling Sequence"] = value

    @property
    def zone_equipment_10_heating_or_noload_sequence(self):
        """Get zone_equipment_10_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_10_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 10 Heating or No-Load Sequence"]

    @zone_equipment_10_heating_or_noload_sequence.setter
    def zone_equipment_10_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_10_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_10_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_10_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_10_heating_or_noload_sequence`')

        self._data["Zone Equipment 10 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_11_object_type(self):
        """Get zone_equipment_11_object_type

        Returns:
            str: the value of `zone_equipment_11_object_type` or None if not set
        """
        return self._data["Zone Equipment 11 Object Type"]

    @zone_equipment_11_object_type.setter
    def zone_equipment_11_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_11_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_11_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_11_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_11_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_11_object_type`'.format(value))

        self._data["Zone Equipment 11 Object Type"] = value

    @property
    def zone_equipment_11_name(self):
        """Get zone_equipment_11_name

        Returns:
            str: the value of `zone_equipment_11_name` or None if not set
        """
        return self._data["Zone Equipment 11 Name"]

    @zone_equipment_11_name.setter
    def zone_equipment_11_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_11_name`

        Args:
            value (str): value for IDD Field `zone_equipment_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_11_name`')

        self._data["Zone Equipment 11 Name"] = value

    @property
    def zone_equipment_11_cooling_sequence(self):
        """Get zone_equipment_11_cooling_sequence

        Returns:
            int: the value of `zone_equipment_11_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 11 Cooling Sequence"]

    @zone_equipment_11_cooling_sequence.setter
    def zone_equipment_11_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_11_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_11_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_11_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_11_cooling_sequence`')

        self._data["Zone Equipment 11 Cooling Sequence"] = value

    @property
    def zone_equipment_11_heating_or_noload_sequence(self):
        """Get zone_equipment_11_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_11_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 11 Heating or No-Load Sequence"]

    @zone_equipment_11_heating_or_noload_sequence.setter
    def zone_equipment_11_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_11_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_11_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_11_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_11_heating_or_noload_sequence`')

        self._data["Zone Equipment 11 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_12_object_type(self):
        """Get zone_equipment_12_object_type

        Returns:
            str: the value of `zone_equipment_12_object_type` or None if not set
        """
        return self._data["Zone Equipment 12 Object Type"]

    @zone_equipment_12_object_type.setter
    def zone_equipment_12_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_12_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_12_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_12_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_12_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_12_object_type`'.format(value))

        self._data["Zone Equipment 12 Object Type"] = value

    @property
    def zone_equipment_12_name(self):
        """Get zone_equipment_12_name

        Returns:
            str: the value of `zone_equipment_12_name` or None if not set
        """
        return self._data["Zone Equipment 12 Name"]

    @zone_equipment_12_name.setter
    def zone_equipment_12_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_12_name`

        Args:
            value (str): value for IDD Field `zone_equipment_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_12_name`')

        self._data["Zone Equipment 12 Name"] = value

    @property
    def zone_equipment_12_cooling_sequence(self):
        """Get zone_equipment_12_cooling_sequence

        Returns:
            int: the value of `zone_equipment_12_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 12 Cooling Sequence"]

    @zone_equipment_12_cooling_sequence.setter
    def zone_equipment_12_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_12_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_12_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_12_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_12_cooling_sequence`')

        self._data["Zone Equipment 12 Cooling Sequence"] = value

    @property
    def zone_equipment_12_heating_or_noload_sequence(self):
        """Get zone_equipment_12_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_12_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 12 Heating or No-Load Sequence"]

    @zone_equipment_12_heating_or_noload_sequence.setter
    def zone_equipment_12_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_12_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_12_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_12_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_12_heating_or_noload_sequence`')

        self._data["Zone Equipment 12 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_13_object_type(self):
        """Get zone_equipment_13_object_type

        Returns:
            str: the value of `zone_equipment_13_object_type` or None if not set
        """
        return self._data["Zone Equipment 13 Object Type"]

    @zone_equipment_13_object_type.setter
    def zone_equipment_13_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_13_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_13_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_13_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_13_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_13_object_type`'.format(value))

        self._data["Zone Equipment 13 Object Type"] = value

    @property
    def zone_equipment_13_name(self):
        """Get zone_equipment_13_name

        Returns:
            str: the value of `zone_equipment_13_name` or None if not set
        """
        return self._data["Zone Equipment 13 Name"]

    @zone_equipment_13_name.setter
    def zone_equipment_13_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_13_name`

        Args:
            value (str): value for IDD Field `zone_equipment_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_13_name`')

        self._data["Zone Equipment 13 Name"] = value

    @property
    def zone_equipment_13_cooling_sequence(self):
        """Get zone_equipment_13_cooling_sequence

        Returns:
            int: the value of `zone_equipment_13_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 13 Cooling Sequence"]

    @zone_equipment_13_cooling_sequence.setter
    def zone_equipment_13_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_13_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_13_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_13_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_13_cooling_sequence`')

        self._data["Zone Equipment 13 Cooling Sequence"] = value

    @property
    def zone_equipment_13_heating_or_noload_sequence(self):
        """Get zone_equipment_13_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_13_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 13 Heating or No-Load Sequence"]

    @zone_equipment_13_heating_or_noload_sequence.setter
    def zone_equipment_13_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_13_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_13_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_13_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_13_heating_or_noload_sequence`')

        self._data["Zone Equipment 13 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_14_object_type(self):
        """Get zone_equipment_14_object_type

        Returns:
            str: the value of `zone_equipment_14_object_type` or None if not set
        """
        return self._data["Zone Equipment 14 Object Type"]

    @zone_equipment_14_object_type.setter
    def zone_equipment_14_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_14_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_14_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_14_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_14_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_14_object_type`'.format(value))

        self._data["Zone Equipment 14 Object Type"] = value

    @property
    def zone_equipment_14_name(self):
        """Get zone_equipment_14_name

        Returns:
            str: the value of `zone_equipment_14_name` or None if not set
        """
        return self._data["Zone Equipment 14 Name"]

    @zone_equipment_14_name.setter
    def zone_equipment_14_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_14_name`

        Args:
            value (str): value for IDD Field `zone_equipment_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_14_name`')

        self._data["Zone Equipment 14 Name"] = value

    @property
    def zone_equipment_14_cooling_sequence(self):
        """Get zone_equipment_14_cooling_sequence

        Returns:
            int: the value of `zone_equipment_14_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 14 Cooling Sequence"]

    @zone_equipment_14_cooling_sequence.setter
    def zone_equipment_14_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_14_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_14_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_14_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_14_cooling_sequence`')

        self._data["Zone Equipment 14 Cooling Sequence"] = value

    @property
    def zone_equipment_14_heating_or_noload_sequence(self):
        """Get zone_equipment_14_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_14_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 14 Heating or No-Load Sequence"]

    @zone_equipment_14_heating_or_noload_sequence.setter
    def zone_equipment_14_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_14_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_14_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_14_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_14_heating_or_noload_sequence`')

        self._data["Zone Equipment 14 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_15_object_type(self):
        """Get zone_equipment_15_object_type

        Returns:
            str: the value of `zone_equipment_15_object_type` or None if not set
        """
        return self._data["Zone Equipment 15 Object Type"]

    @zone_equipment_15_object_type.setter
    def zone_equipment_15_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_15_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_15_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_15_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_15_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_15_object_type`'.format(value))

        self._data["Zone Equipment 15 Object Type"] = value

    @property
    def zone_equipment_15_name(self):
        """Get zone_equipment_15_name

        Returns:
            str: the value of `zone_equipment_15_name` or None if not set
        """
        return self._data["Zone Equipment 15 Name"]

    @zone_equipment_15_name.setter
    def zone_equipment_15_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_15_name`

        Args:
            value (str): value for IDD Field `zone_equipment_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_15_name`')

        self._data["Zone Equipment 15 Name"] = value

    @property
    def zone_equipment_15_cooling_sequence(self):
        """Get zone_equipment_15_cooling_sequence

        Returns:
            int: the value of `zone_equipment_15_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 15 Cooling Sequence"]

    @zone_equipment_15_cooling_sequence.setter
    def zone_equipment_15_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_15_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_15_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_15_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_15_cooling_sequence`')

        self._data["Zone Equipment 15 Cooling Sequence"] = value

    @property
    def zone_equipment_15_heating_or_noload_sequence(self):
        """Get zone_equipment_15_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_15_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 15 Heating or No-Load Sequence"]

    @zone_equipment_15_heating_or_noload_sequence.setter
    def zone_equipment_15_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_15_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_15_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_15_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_15_heating_or_noload_sequence`')

        self._data["Zone Equipment 15 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_16_object_type(self):
        """Get zone_equipment_16_object_type

        Returns:
            str: the value of `zone_equipment_16_object_type` or None if not set
        """
        return self._data["Zone Equipment 16 Object Type"]

    @zone_equipment_16_object_type.setter
    def zone_equipment_16_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_16_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_16_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_16_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_16_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_16_object_type`'.format(value))

        self._data["Zone Equipment 16 Object Type"] = value

    @property
    def zone_equipment_16_name(self):
        """Get zone_equipment_16_name

        Returns:
            str: the value of `zone_equipment_16_name` or None if not set
        """
        return self._data["Zone Equipment 16 Name"]

    @zone_equipment_16_name.setter
    def zone_equipment_16_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_16_name`

        Args:
            value (str): value for IDD Field `zone_equipment_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_16_name`')

        self._data["Zone Equipment 16 Name"] = value

    @property
    def zone_equipment_16_cooling_sequence(self):
        """Get zone_equipment_16_cooling_sequence

        Returns:
            int: the value of `zone_equipment_16_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 16 Cooling Sequence"]

    @zone_equipment_16_cooling_sequence.setter
    def zone_equipment_16_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_16_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_16_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_16_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_16_cooling_sequence`')

        self._data["Zone Equipment 16 Cooling Sequence"] = value

    @property
    def zone_equipment_16_heating_or_noload_sequence(self):
        """Get zone_equipment_16_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_16_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 16 Heating or No-Load Sequence"]

    @zone_equipment_16_heating_or_noload_sequence.setter
    def zone_equipment_16_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_16_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_16_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_16_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_16_heating_or_noload_sequence`')

        self._data["Zone Equipment 16 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_17_object_type(self):
        """Get zone_equipment_17_object_type

        Returns:
            str: the value of `zone_equipment_17_object_type` or None if not set
        """
        return self._data["Zone Equipment 17 Object Type"]

    @zone_equipment_17_object_type.setter
    def zone_equipment_17_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_17_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_17_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_17_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_17_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_17_object_type`'.format(value))

        self._data["Zone Equipment 17 Object Type"] = value

    @property
    def zone_equipment_17_name(self):
        """Get zone_equipment_17_name

        Returns:
            str: the value of `zone_equipment_17_name` or None if not set
        """
        return self._data["Zone Equipment 17 Name"]

    @zone_equipment_17_name.setter
    def zone_equipment_17_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_17_name`

        Args:
            value (str): value for IDD Field `zone_equipment_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_17_name`')

        self._data["Zone Equipment 17 Name"] = value

    @property
    def zone_equipment_17_cooling_sequence(self):
        """Get zone_equipment_17_cooling_sequence

        Returns:
            int: the value of `zone_equipment_17_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 17 Cooling Sequence"]

    @zone_equipment_17_cooling_sequence.setter
    def zone_equipment_17_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_17_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_17_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_17_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_17_cooling_sequence`')

        self._data["Zone Equipment 17 Cooling Sequence"] = value

    @property
    def zone_equipment_17_heating_or_noload_sequence(self):
        """Get zone_equipment_17_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_17_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 17 Heating or No-Load Sequence"]

    @zone_equipment_17_heating_or_noload_sequence.setter
    def zone_equipment_17_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_17_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_17_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_17_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_17_heating_or_noload_sequence`')

        self._data["Zone Equipment 17 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_18_object_type(self):
        """Get zone_equipment_18_object_type

        Returns:
            str: the value of `zone_equipment_18_object_type` or None if not set
        """
        return self._data["Zone Equipment 18 Object Type"]

    @zone_equipment_18_object_type.setter
    def zone_equipment_18_object_type(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_18_object_type`

        Args:
            value (str): value for IDD Field `zone_equipment_18_object_type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_18_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_18_object_type`')
            vals = set()
            vals.add("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")
            vals.add("ZoneHVAC:AirDistributionUnit")
            vals.add("AirTerminal:SingleDuct:Uncontrolled")
            vals.add("ZoneHVAC:EnergyRecoveryVentilator")
            vals.add("ZoneHVAC:FourPipeFanCoil")
            vals.add("ZoneHVAC:OutdoorAirUnit")
            vals.add("ZoneHVAC:PackagedTerminalAirConditioner")
            vals.add("ZoneHVAC:PackagedTerminalHeatPump")
            vals.add("ZoneHVAC:UnitHeater")
            vals.add("ZoneHVAC:UnitVentilator")
            vals.add("ZoneHVAC:VentilatedSlab")
            vals.add("ZoneHVAC:WaterToAirHeatPump")
            vals.add("ZoneHVAC:WindowAirConditioner")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Electric")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Water")
            vals.add("ZoneHVAC:Baseboard:RadiantConvective:Steam")
            vals.add("ZoneHVAC:Baseboard:Convective:Electric")
            vals.add("ZoneHVAC:Baseboard:Convective:Water")
            vals.add("ZoneHVAC:HighTemperatureRadiant")
            vals.add("ZoneHVAC:LowTemperatureRadiant:VariableFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")
            vals.add("ZoneHVAC:LowTemperatureRadiant:Electric")
            vals.add("ZoneHVAC:Dehumidifier:DX")
            vals.add("ZoneHVAC:IdealLoadsAirSystem")
            vals.add("ZoneHVAC:RefrigerationChillerSet")
            vals.add("Fan:ZoneExhaust")
            vals.add("WaterHeater:HeatPump")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `zone_equipment_18_object_type`'.format(value))

        self._data["Zone Equipment 18 Object Type"] = value

    @property
    def zone_equipment_18_name(self):
        """Get zone_equipment_18_name

        Returns:
            str: the value of `zone_equipment_18_name` or None if not set
        """
        return self._data["Zone Equipment 18 Name"]

    @zone_equipment_18_name.setter
    def zone_equipment_18_name(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_18_name`

        Args:
            value (str): value for IDD Field `zone_equipment_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_18_name`')

        self._data["Zone Equipment 18 Name"] = value

    @property
    def zone_equipment_18_cooling_sequence(self):
        """Get zone_equipment_18_cooling_sequence

        Returns:
            int: the value of `zone_equipment_18_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 18 Cooling Sequence"]

    @zone_equipment_18_cooling_sequence.setter
    def zone_equipment_18_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_18_cooling_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling

        Args:
            value (int): value for IDD Field `zone_equipment_18_cooling_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_18_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_18_cooling_sequence`')

        self._data["Zone Equipment 18 Cooling Sequence"] = value

    @property
    def zone_equipment_18_heating_or_noload_sequence(self):
        """Get zone_equipment_18_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_18_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 18 Heating or No-Load Sequence"]

    @zone_equipment_18_heating_or_noload_sequence.setter
    def zone_equipment_18_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `zone_equipment_18_heating_or_noload_sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load

        Args:
            value (int): value for IDD Field `zone_equipment_18_heating_or_noload_sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_18_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_18_heating_or_noload_sequence`')

        self._data["Zone Equipment 18 Heating or No-Load Sequence"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.zone_equipment_1_object_type))
        out.append(self._to_str(self.zone_equipment_1_name))
        out.append(self._to_str(self.zone_equipment_1_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_1_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_2_object_type))
        out.append(self._to_str(self.zone_equipment_2_name))
        out.append(self._to_str(self.zone_equipment_2_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_2_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_3_object_type))
        out.append(self._to_str(self.zone_equipment_3_name))
        out.append(self._to_str(self.zone_equipment_3_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_3_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_4_object_type))
        out.append(self._to_str(self.zone_equipment_4_name))
        out.append(self._to_str(self.zone_equipment_4_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_4_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_5_object_type))
        out.append(self._to_str(self.zone_equipment_5_name))
        out.append(self._to_str(self.zone_equipment_5_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_5_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_6_object_type))
        out.append(self._to_str(self.zone_equipment_6_name))
        out.append(self._to_str(self.zone_equipment_6_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_6_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_7_object_type))
        out.append(self._to_str(self.zone_equipment_7_name))
        out.append(self._to_str(self.zone_equipment_7_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_7_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_8_object_type))
        out.append(self._to_str(self.zone_equipment_8_name))
        out.append(self._to_str(self.zone_equipment_8_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_8_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_9_object_type))
        out.append(self._to_str(self.zone_equipment_9_name))
        out.append(self._to_str(self.zone_equipment_9_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_9_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_10_object_type))
        out.append(self._to_str(self.zone_equipment_10_name))
        out.append(self._to_str(self.zone_equipment_10_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_10_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_11_object_type))
        out.append(self._to_str(self.zone_equipment_11_name))
        out.append(self._to_str(self.zone_equipment_11_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_11_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_12_object_type))
        out.append(self._to_str(self.zone_equipment_12_name))
        out.append(self._to_str(self.zone_equipment_12_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_12_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_13_object_type))
        out.append(self._to_str(self.zone_equipment_13_name))
        out.append(self._to_str(self.zone_equipment_13_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_13_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_14_object_type))
        out.append(self._to_str(self.zone_equipment_14_name))
        out.append(self._to_str(self.zone_equipment_14_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_14_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_15_object_type))
        out.append(self._to_str(self.zone_equipment_15_name))
        out.append(self._to_str(self.zone_equipment_15_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_15_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_16_object_type))
        out.append(self._to_str(self.zone_equipment_16_name))
        out.append(self._to_str(self.zone_equipment_16_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_16_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_17_object_type))
        out.append(self._to_str(self.zone_equipment_17_name))
        out.append(self._to_str(self.zone_equipment_17_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_17_heating_or_noload_sequence))
        out.append(self._to_str(self.zone_equipment_18_object_type))
        out.append(self._to_str(self.zone_equipment_18_name))
        out.append(self._to_str(self.zone_equipment_18_cooling_sequence))
        out.append(self._to_str(self.zone_equipment_18_heating_or_noload_sequence))
        return ",".join(out)

class ZoneHvacEquipmentConnections(object):
    """ Corresponds to IDD object `ZoneHVAC:EquipmentConnections`
        Specifies the HVAC equipment connections for a zone. Node names are specified for the
        zone air node, air inlet nodes, air exhaust nodes, and the air return node. A zone
        equipment list is referenced which lists all HVAC equipment connected to the zone.
    """
    internal_name = "ZoneHVAC:EquipmentConnections"
    field_count = 6

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:EquipmentConnections`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Zone Conditioning Equipment List Name"] = None
        self._data["Zone Air Inlet Node or NodeList Name"] = None
        self._data["Zone Air Exhaust Node or NodeList Name"] = None
        self._data["Zone Air Node Name"] = None
        self._data["Zone Return Air Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_conditioning_equipment_list_name = None
        else:
            self.zone_conditioning_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_air_inlet_node_or_nodelist_name = None
        else:
            self.zone_air_inlet_node_or_nodelist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_air_exhaust_node_or_nodelist_name = None
        else:
            self.zone_air_exhaust_node_or_nodelist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_air_node_name = None
        else:
            self.zone_air_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_return_air_node_name = None
        else:
            self.zone_return_air_node_name = vals[i]
        i += 1

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def zone_conditioning_equipment_list_name(self):
        """Get zone_conditioning_equipment_list_name

        Returns:
            str: the value of `zone_conditioning_equipment_list_name` or None if not set
        """
        return self._data["Zone Conditioning Equipment List Name"]

    @zone_conditioning_equipment_list_name.setter
    def zone_conditioning_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `zone_conditioning_equipment_list_name`
        Enter the name of a ZoneHVAC:EquipmentList object.

        Args:
            value (str): value for IDD Field `zone_conditioning_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_conditioning_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_conditioning_equipment_list_name`')

        self._data["Zone Conditioning Equipment List Name"] = value

    @property
    def zone_air_inlet_node_or_nodelist_name(self):
        """Get zone_air_inlet_node_or_nodelist_name

        Returns:
            str: the value of `zone_air_inlet_node_or_nodelist_name` or None if not set
        """
        return self._data["Zone Air Inlet Node or NodeList Name"]

    @zone_air_inlet_node_or_nodelist_name.setter
    def zone_air_inlet_node_or_nodelist_name(self, value=None):
        """  Corresponds to IDD Field `zone_air_inlet_node_or_nodelist_name`

        Args:
            value (str): value for IDD Field `zone_air_inlet_node_or_nodelist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_air_inlet_node_or_nodelist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_air_inlet_node_or_nodelist_name`')

        self._data["Zone Air Inlet Node or NodeList Name"] = value

    @property
    def zone_air_exhaust_node_or_nodelist_name(self):
        """Get zone_air_exhaust_node_or_nodelist_name

        Returns:
            str: the value of `zone_air_exhaust_node_or_nodelist_name` or None if not set
        """
        return self._data["Zone Air Exhaust Node or NodeList Name"]

    @zone_air_exhaust_node_or_nodelist_name.setter
    def zone_air_exhaust_node_or_nodelist_name(self, value=None):
        """  Corresponds to IDD Field `zone_air_exhaust_node_or_nodelist_name`

        Args:
            value (str): value for IDD Field `zone_air_exhaust_node_or_nodelist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_air_exhaust_node_or_nodelist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_air_exhaust_node_or_nodelist_name`')

        self._data["Zone Air Exhaust Node or NodeList Name"] = value

    @property
    def zone_air_node_name(self):
        """Get zone_air_node_name

        Returns:
            str: the value of `zone_air_node_name` or None if not set
        """
        return self._data["Zone Air Node Name"]

    @zone_air_node_name.setter
    def zone_air_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_air_node_name`

        Args:
            value (str): value for IDD Field `zone_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_air_node_name`')

        self._data["Zone Air Node Name"] = value

    @property
    def zone_return_air_node_name(self):
        """Get zone_return_air_node_name

        Returns:
            str: the value of `zone_return_air_node_name` or None if not set
        """
        return self._data["Zone Return Air Node Name"]

    @zone_return_air_node_name.setter
    def zone_return_air_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_return_air_node_name`

        Args:
            value (str): value for IDD Field `zone_return_air_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_return_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_return_air_node_name`')

        self._data["Zone Return Air Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.zone_conditioning_equipment_list_name))
        out.append(self._to_str(self.zone_air_inlet_node_or_nodelist_name))
        out.append(self._to_str(self.zone_air_exhaust_node_or_nodelist_name))
        out.append(self._to_str(self.zone_air_node_name))
        out.append(self._to_str(self.zone_return_air_node_name))
        return ",".join(out)

class ZoneHvacForcedAirUserDefined(object):
    """ Corresponds to IDD object `ZoneHVAC:ForcedAir:UserDefined`
        Defines a generic zone air unit for custom modeling
        using Energy Management System or External Interface
    """
    internal_name = "ZoneHVAC:ForcedAir:UserDefined"
    field_count = 17

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:ForcedAir:UserDefined`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Overall Model Simulation Program Calling Manager Name"] = None
        self._data["Model Setup and Sizing Program Calling Manager Name"] = None
        self._data["Primary Air Inlet Node Name"] = None
        self._data["Primary Air Outlet Node Name"] = None
        self._data["Secondary Air Inlet Node Name"] = None
        self._data["Secondary Air Outlet Node Name"] = None
        self._data["Number of Plant Loop Connections"] = None
        self._data["Plant Connection 1 Inlet Node Name"] = None
        self._data["Plant Connection 1 Outlet Node Name"] = None
        self._data["Plant Connection 2 Inlet Node Name"] = None
        self._data["Plant Connection 2 Outlet Node Name"] = None
        self._data["Plant Connection 3 Inlet Node Name"] = None
        self._data["Plant Connection 3 Outlet Node Name"] = None
        self._data["Supply Inlet Water Storage Tank Name"] = None
        self._data["Collection Outlet Water Storage Tank Name"] = None
        self._data["Ambient Zone Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.overall_model_simulation_program_calling_manager_name = None
        else:
            self.overall_model_simulation_program_calling_manager_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.model_setup_and_sizing_program_calling_manager_name = None
        else:
            self.model_setup_and_sizing_program_calling_manager_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.primary_air_inlet_node_name = None
        else:
            self.primary_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.primary_air_outlet_node_name = None
        else:
            self.primary_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.secondary_air_inlet_node_name = None
        else:
            self.secondary_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.secondary_air_outlet_node_name = None
        else:
            self.secondary_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_plant_loop_connections = None
        else:
            self.number_of_plant_loop_connections = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_connection_1_inlet_node_name = None
        else:
            self.plant_connection_1_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_connection_1_outlet_node_name = None
        else:
            self.plant_connection_1_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_connection_2_inlet_node_name = None
        else:
            self.plant_connection_2_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_connection_2_outlet_node_name = None
        else:
            self.plant_connection_2_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_connection_3_inlet_node_name = None
        else:
            self.plant_connection_3_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.plant_connection_3_outlet_node_name = None
        else:
            self.plant_connection_3_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_inlet_water_storage_tank_name = None
        else:
            self.supply_inlet_water_storage_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.collection_outlet_water_storage_tank_name = None
        else:
            self.collection_outlet_water_storage_tank_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ambient_zone_name = None
        else:
            self.ambient_zone_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        This is the name of the zone unit

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def overall_model_simulation_program_calling_manager_name(self):
        """Get overall_model_simulation_program_calling_manager_name

        Returns:
            str: the value of `overall_model_simulation_program_calling_manager_name` or None if not set
        """
        return self._data["Overall Model Simulation Program Calling Manager Name"]

    @overall_model_simulation_program_calling_manager_name.setter
    def overall_model_simulation_program_calling_manager_name(self, value=None):
        """  Corresponds to IDD Field `overall_model_simulation_program_calling_manager_name`

        Args:
            value (str): value for IDD Field `overall_model_simulation_program_calling_manager_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `overall_model_simulation_program_calling_manager_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `overall_model_simulation_program_calling_manager_name`')

        self._data["Overall Model Simulation Program Calling Manager Name"] = value

    @property
    def model_setup_and_sizing_program_calling_manager_name(self):
        """Get model_setup_and_sizing_program_calling_manager_name

        Returns:
            str: the value of `model_setup_and_sizing_program_calling_manager_name` or None if not set
        """
        return self._data["Model Setup and Sizing Program Calling Manager Name"]

    @model_setup_and_sizing_program_calling_manager_name.setter
    def model_setup_and_sizing_program_calling_manager_name(self, value=None):
        """  Corresponds to IDD Field `model_setup_and_sizing_program_calling_manager_name`

        Args:
            value (str): value for IDD Field `model_setup_and_sizing_program_calling_manager_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `model_setup_and_sizing_program_calling_manager_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `model_setup_and_sizing_program_calling_manager_name`')

        self._data["Model Setup and Sizing Program Calling Manager Name"] = value

    @property
    def primary_air_inlet_node_name(self):
        """Get primary_air_inlet_node_name

        Returns:
            str: the value of `primary_air_inlet_node_name` or None if not set
        """
        return self._data["Primary Air Inlet Node Name"]

    @primary_air_inlet_node_name.setter
    def primary_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `primary_air_inlet_node_name`
        Air inlet node for the unit must be a zone air exhaust Node.

        Args:
            value (str): value for IDD Field `primary_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `primary_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `primary_air_inlet_node_name`')

        self._data["Primary Air Inlet Node Name"] = value

    @property
    def primary_air_outlet_node_name(self):
        """Get primary_air_outlet_node_name

        Returns:
            str: the value of `primary_air_outlet_node_name` or None if not set
        """
        return self._data["Primary Air Outlet Node Name"]

    @primary_air_outlet_node_name.setter
    def primary_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `primary_air_outlet_node_name`
        Air outlet node for the unit must be a zone air inlet node.

        Args:
            value (str): value for IDD Field `primary_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `primary_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `primary_air_outlet_node_name`')

        self._data["Primary Air Outlet Node Name"] = value

    @property
    def secondary_air_inlet_node_name(self):
        """Get secondary_air_inlet_node_name

        Returns:
            str: the value of `secondary_air_inlet_node_name` or None if not set
        """
        return self._data["Secondary Air Inlet Node Name"]

    @secondary_air_inlet_node_name.setter
    def secondary_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `secondary_air_inlet_node_name`
        Inlet air used for heat rejection or air source

        Args:
            value (str): value for IDD Field `secondary_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `secondary_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `secondary_air_inlet_node_name`')

        self._data["Secondary Air Inlet Node Name"] = value

    @property
    def secondary_air_outlet_node_name(self):
        """Get secondary_air_outlet_node_name

        Returns:
            str: the value of `secondary_air_outlet_node_name` or None if not set
        """
        return self._data["Secondary Air Outlet Node Name"]

    @secondary_air_outlet_node_name.setter
    def secondary_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `secondary_air_outlet_node_name`
        Outlet air used for heat rejection or air source

        Args:
            value (str): value for IDD Field `secondary_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `secondary_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `secondary_air_outlet_node_name`')

        self._data["Secondary Air Outlet Node Name"] = value

    @property
    def number_of_plant_loop_connections(self):
        """Get number_of_plant_loop_connections

        Returns:
            int: the value of `number_of_plant_loop_connections` or None if not set
        """
        return self._data["Number of Plant Loop Connections"]

    @number_of_plant_loop_connections.setter
    def number_of_plant_loop_connections(self, value=None):
        """  Corresponds to IDD Field `number_of_plant_loop_connections`

        Args:
            value (int): value for IDD Field `number_of_plant_loop_connections`
                value >= 0
                value <= 3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_plant_loop_connections`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `number_of_plant_loop_connections`')
            if value > 3:
                raise ValueError('value need to be smaller 3 '
                                 'for field `number_of_plant_loop_connections`')

        self._data["Number of Plant Loop Connections"] = value

    @property
    def plant_connection_1_inlet_node_name(self):
        """Get plant_connection_1_inlet_node_name

        Returns:
            str: the value of `plant_connection_1_inlet_node_name` or None if not set
        """
        return self._data["Plant Connection 1 Inlet Node Name"]

    @plant_connection_1_inlet_node_name.setter
    def plant_connection_1_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `plant_connection_1_inlet_node_name`

        Args:
            value (str): value for IDD Field `plant_connection_1_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_connection_1_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_connection_1_inlet_node_name`')

        self._data["Plant Connection 1 Inlet Node Name"] = value

    @property
    def plant_connection_1_outlet_node_name(self):
        """Get plant_connection_1_outlet_node_name

        Returns:
            str: the value of `plant_connection_1_outlet_node_name` or None if not set
        """
        return self._data["Plant Connection 1 Outlet Node Name"]

    @plant_connection_1_outlet_node_name.setter
    def plant_connection_1_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `plant_connection_1_outlet_node_name`

        Args:
            value (str): value for IDD Field `plant_connection_1_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_connection_1_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_connection_1_outlet_node_name`')

        self._data["Plant Connection 1 Outlet Node Name"] = value

    @property
    def plant_connection_2_inlet_node_name(self):
        """Get plant_connection_2_inlet_node_name

        Returns:
            str: the value of `plant_connection_2_inlet_node_name` or None if not set
        """
        return self._data["Plant Connection 2 Inlet Node Name"]

    @plant_connection_2_inlet_node_name.setter
    def plant_connection_2_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `plant_connection_2_inlet_node_name`

        Args:
            value (str): value for IDD Field `plant_connection_2_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_connection_2_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_connection_2_inlet_node_name`')

        self._data["Plant Connection 2 Inlet Node Name"] = value

    @property
    def plant_connection_2_outlet_node_name(self):
        """Get plant_connection_2_outlet_node_name

        Returns:
            str: the value of `plant_connection_2_outlet_node_name` or None if not set
        """
        return self._data["Plant Connection 2 Outlet Node Name"]

    @plant_connection_2_outlet_node_name.setter
    def plant_connection_2_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `plant_connection_2_outlet_node_name`

        Args:
            value (str): value for IDD Field `plant_connection_2_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_connection_2_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_connection_2_outlet_node_name`')

        self._data["Plant Connection 2 Outlet Node Name"] = value

    @property
    def plant_connection_3_inlet_node_name(self):
        """Get plant_connection_3_inlet_node_name

        Returns:
            str: the value of `plant_connection_3_inlet_node_name` or None if not set
        """
        return self._data["Plant Connection 3 Inlet Node Name"]

    @plant_connection_3_inlet_node_name.setter
    def plant_connection_3_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `plant_connection_3_inlet_node_name`

        Args:
            value (str): value for IDD Field `plant_connection_3_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_connection_3_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_connection_3_inlet_node_name`')

        self._data["Plant Connection 3 Inlet Node Name"] = value

    @property
    def plant_connection_3_outlet_node_name(self):
        """Get plant_connection_3_outlet_node_name

        Returns:
            str: the value of `plant_connection_3_outlet_node_name` or None if not set
        """
        return self._data["Plant Connection 3 Outlet Node Name"]

    @plant_connection_3_outlet_node_name.setter
    def plant_connection_3_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `plant_connection_3_outlet_node_name`

        Args:
            value (str): value for IDD Field `plant_connection_3_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `plant_connection_3_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plant_connection_3_outlet_node_name`')

        self._data["Plant Connection 3 Outlet Node Name"] = value

    @property
    def supply_inlet_water_storage_tank_name(self):
        """Get supply_inlet_water_storage_tank_name

        Returns:
            str: the value of `supply_inlet_water_storage_tank_name` or None if not set
        """
        return self._data["Supply Inlet Water Storage Tank Name"]

    @supply_inlet_water_storage_tank_name.setter
    def supply_inlet_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `supply_inlet_water_storage_tank_name`
        Water use storage tank for alternate source of water consumed by device

        Args:
            value (str): value for IDD Field `supply_inlet_water_storage_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_inlet_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_inlet_water_storage_tank_name`')

        self._data["Supply Inlet Water Storage Tank Name"] = value

    @property
    def collection_outlet_water_storage_tank_name(self):
        """Get collection_outlet_water_storage_tank_name

        Returns:
            str: the value of `collection_outlet_water_storage_tank_name` or None if not set
        """
        return self._data["Collection Outlet Water Storage Tank Name"]

    @collection_outlet_water_storage_tank_name.setter
    def collection_outlet_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `collection_outlet_water_storage_tank_name`
        Water use storage tank for collection of condensate by device

        Args:
            value (str): value for IDD Field `collection_outlet_water_storage_tank_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `collection_outlet_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `collection_outlet_water_storage_tank_name`')

        self._data["Collection Outlet Water Storage Tank Name"] = value

    @property
    def ambient_zone_name(self):
        """Get ambient_zone_name

        Returns:
            str: the value of `ambient_zone_name` or None if not set
        """
        return self._data["Ambient Zone Name"]

    @ambient_zone_name.setter
    def ambient_zone_name(self, value=None):
        """  Corresponds to IDD Field `ambient_zone_name`
        Used for modeling device losses to surrounding zone

        Args:
            value (str): value for IDD Field `ambient_zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ambient_zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ambient_zone_name`')

        self._data["Ambient Zone Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.overall_model_simulation_program_calling_manager_name))
        out.append(self._to_str(self.model_setup_and_sizing_program_calling_manager_name))
        out.append(self._to_str(self.primary_air_inlet_node_name))
        out.append(self._to_str(self.primary_air_outlet_node_name))
        out.append(self._to_str(self.secondary_air_inlet_node_name))
        out.append(self._to_str(self.secondary_air_outlet_node_name))
        out.append(self._to_str(self.number_of_plant_loop_connections))
        out.append(self._to_str(self.plant_connection_1_inlet_node_name))
        out.append(self._to_str(self.plant_connection_1_outlet_node_name))
        out.append(self._to_str(self.plant_connection_2_inlet_node_name))
        out.append(self._to_str(self.plant_connection_2_outlet_node_name))
        out.append(self._to_str(self.plant_connection_3_inlet_node_name))
        out.append(self._to_str(self.plant_connection_3_outlet_node_name))
        out.append(self._to_str(self.supply_inlet_water_storage_tank_name))
        out.append(self._to_str(self.collection_outlet_water_storage_tank_name))
        out.append(self._to_str(self.ambient_zone_name))
        return ",".join(out)

class ZoneHvacRefrigerationChillerSet(object):
    """ Corresponds to IDD object `ZoneHVAC:RefrigerationChillerSet`
        Works in conjunction with one or multiple air chillers, compressor racks,
        refrigeration systems, or refrigeration secondary system objects to simulate the
        performance of a group of air chillers cooling a single zone. The chiller set
        model passes information about the zone conditions to determine the performance of
        individual chiller coils within the set, thus providing the sensible and latent heat
        exchange with the zone environment.
    """
    internal_name = "ZoneHVAC:RefrigerationChillerSet"
    field_count = 29

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `ZoneHVAC:RefrigerationChillerSet`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Air Chiller 1 Name"] = None
        self._data["Air Chiller 2 Name"] = None
        self._data["Air Chiller 3 Name"] = None
        self._data["Air Chiller 4 Name"] = None
        self._data["Air Chiller 5 Name"] = None
        self._data["Air Chiller 6 Name"] = None
        self._data["Air Chiller 7 Name"] = None
        self._data["Air Chiller 8 Name"] = None
        self._data["Air Chiller 9 Name"] = None
        self._data["Air Chiller 10 Name"] = None
        self._data["Air Chiller 11 Name"] = None
        self._data["Air Chiller 12 Name"] = None
        self._data["Air Chiller 13 Name"] = None
        self._data["Air Chiller 14 Name"] = None
        self._data["Air Chiller 15 Name"] = None
        self._data["Air Chiller 16 Name"] = None
        self._data["Air Chiller 17 Name"] = None
        self._data["Air Chiller 18 Name"] = None
        self._data["Air Chiller 19 Name"] = None
        self._data["Air Chiller 20 Name"] = None
        self._data["Air Chiller 20 Name"] = None
        self._data["Air Chiller 20 Name"] = None
        self._data["Air Chiller 20 Name"] = None
        self._data["Air Chiller 20 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_1_name = None
        else:
            self.air_chiller_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_2_name = None
        else:
            self.air_chiller_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_3_name = None
        else:
            self.air_chiller_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_4_name = None
        else:
            self.air_chiller_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_5_name = None
        else:
            self.air_chiller_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_6_name = None
        else:
            self.air_chiller_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_7_name = None
        else:
            self.air_chiller_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_8_name = None
        else:
            self.air_chiller_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_9_name = None
        else:
            self.air_chiller_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_10_name = None
        else:
            self.air_chiller_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_11_name = None
        else:
            self.air_chiller_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_12_name = None
        else:
            self.air_chiller_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_13_name = None
        else:
            self.air_chiller_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_14_name = None
        else:
            self.air_chiller_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_15_name = None
        else:
            self.air_chiller_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_16_name = None
        else:
            self.air_chiller_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_17_name = None
        else:
            self.air_chiller_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_18_name = None
        else:
            self.air_chiller_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_19_name = None
        else:
            self.air_chiller_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_20_name = None
        else:
            self.air_chiller_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_20_name = None
        else:
            self.air_chiller_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_20_name = None
        else:
            self.air_chiller_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_20_name = None
        else:
            self.air_chiller_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_chiller_20_name = None
        else:
            self.air_chiller_20_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`
        This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`
        Not used - reserved for future use
        Name of the zone exhaust node (see Node) from which the refrigeration chiller
        draws its indoor air.
        This should be one of the zone exhaust nodes for the zone cooled by the chiller set.

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`
        Not used - reserved for future use
        The name of the node where the chiller coil sends its outlet air,
        which must be one of the inlet air nodes for the zone which is being cooled.

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def air_chiller_1_name(self):
        """Get air_chiller_1_name

        Returns:
            str: the value of `air_chiller_1_name` or None if not set
        """
        return self._data["Air Chiller 1 Name"]

    @air_chiller_1_name.setter
    def air_chiller_1_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_1_name`
        This is the first chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_1_name`')

        self._data["Air Chiller 1 Name"] = value

    @property
    def air_chiller_2_name(self):
        """Get air_chiller_2_name

        Returns:
            str: the value of `air_chiller_2_name` or None if not set
        """
        return self._data["Air Chiller 2 Name"]

    @air_chiller_2_name.setter
    def air_chiller_2_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_2_name`
        This is the second chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_2_name`')

        self._data["Air Chiller 2 Name"] = value

    @property
    def air_chiller_3_name(self):
        """Get air_chiller_3_name

        Returns:
            str: the value of `air_chiller_3_name` or None if not set
        """
        return self._data["Air Chiller 3 Name"]

    @air_chiller_3_name.setter
    def air_chiller_3_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_3_name`
        This is the third chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_3_name`')

        self._data["Air Chiller 3 Name"] = value

    @property
    def air_chiller_4_name(self):
        """Get air_chiller_4_name

        Returns:
            str: the value of `air_chiller_4_name` or None if not set
        """
        return self._data["Air Chiller 4 Name"]

    @air_chiller_4_name.setter
    def air_chiller_4_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_4_name`
        This is the fourth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_4_name`')

        self._data["Air Chiller 4 Name"] = value

    @property
    def air_chiller_5_name(self):
        """Get air_chiller_5_name

        Returns:
            str: the value of `air_chiller_5_name` or None if not set
        """
        return self._data["Air Chiller 5 Name"]

    @air_chiller_5_name.setter
    def air_chiller_5_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_5_name`
        This is the fifth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_5_name`')

        self._data["Air Chiller 5 Name"] = value

    @property
    def air_chiller_6_name(self):
        """Get air_chiller_6_name

        Returns:
            str: the value of `air_chiller_6_name` or None if not set
        """
        return self._data["Air Chiller 6 Name"]

    @air_chiller_6_name.setter
    def air_chiller_6_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_6_name`
        This is the sixth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_6_name`')

        self._data["Air Chiller 6 Name"] = value

    @property
    def air_chiller_7_name(self):
        """Get air_chiller_7_name

        Returns:
            str: the value of `air_chiller_7_name` or None if not set
        """
        return self._data["Air Chiller 7 Name"]

    @air_chiller_7_name.setter
    def air_chiller_7_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_7_name`
        This is the seventh chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_7_name`')

        self._data["Air Chiller 7 Name"] = value

    @property
    def air_chiller_8_name(self):
        """Get air_chiller_8_name

        Returns:
            str: the value of `air_chiller_8_name` or None if not set
        """
        return self._data["Air Chiller 8 Name"]

    @air_chiller_8_name.setter
    def air_chiller_8_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_8_name`
        This is the eighth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_8_name`')

        self._data["Air Chiller 8 Name"] = value

    @property
    def air_chiller_9_name(self):
        """Get air_chiller_9_name

        Returns:
            str: the value of `air_chiller_9_name` or None if not set
        """
        return self._data["Air Chiller 9 Name"]

    @air_chiller_9_name.setter
    def air_chiller_9_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_9_name`
        This is the ninth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_9_name`')

        self._data["Air Chiller 9 Name"] = value

    @property
    def air_chiller_10_name(self):
        """Get air_chiller_10_name

        Returns:
            str: the value of `air_chiller_10_name` or None if not set
        """
        return self._data["Air Chiller 10 Name"]

    @air_chiller_10_name.setter
    def air_chiller_10_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_10_name`
        This is the tenth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_10_name`')

        self._data["Air Chiller 10 Name"] = value

    @property
    def air_chiller_11_name(self):
        """Get air_chiller_11_name

        Returns:
            str: the value of `air_chiller_11_name` or None if not set
        """
        return self._data["Air Chiller 11 Name"]

    @air_chiller_11_name.setter
    def air_chiller_11_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_11_name`
        This is the eleventh chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_11_name`')

        self._data["Air Chiller 11 Name"] = value

    @property
    def air_chiller_12_name(self):
        """Get air_chiller_12_name

        Returns:
            str: the value of `air_chiller_12_name` or None if not set
        """
        return self._data["Air Chiller 12 Name"]

    @air_chiller_12_name.setter
    def air_chiller_12_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_12_name`
        This is the twelth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_12_name`')

        self._data["Air Chiller 12 Name"] = value

    @property
    def air_chiller_13_name(self):
        """Get air_chiller_13_name

        Returns:
            str: the value of `air_chiller_13_name` or None if not set
        """
        return self._data["Air Chiller 13 Name"]

    @air_chiller_13_name.setter
    def air_chiller_13_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_13_name`
        This is the thirteenth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_13_name`')

        self._data["Air Chiller 13 Name"] = value

    @property
    def air_chiller_14_name(self):
        """Get air_chiller_14_name

        Returns:
            str: the value of `air_chiller_14_name` or None if not set
        """
        return self._data["Air Chiller 14 Name"]

    @air_chiller_14_name.setter
    def air_chiller_14_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_14_name`
        This is the fourteenth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_14_name`')

        self._data["Air Chiller 14 Name"] = value

    @property
    def air_chiller_15_name(self):
        """Get air_chiller_15_name

        Returns:
            str: the value of `air_chiller_15_name` or None if not set
        """
        return self._data["Air Chiller 15 Name"]

    @air_chiller_15_name.setter
    def air_chiller_15_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_15_name`
        This is the fifteenth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_15_name`')

        self._data["Air Chiller 15 Name"] = value

    @property
    def air_chiller_16_name(self):
        """Get air_chiller_16_name

        Returns:
            str: the value of `air_chiller_16_name` or None if not set
        """
        return self._data["Air Chiller 16 Name"]

    @air_chiller_16_name.setter
    def air_chiller_16_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_16_name`
        This is the sixteenth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_16_name`')

        self._data["Air Chiller 16 Name"] = value

    @property
    def air_chiller_17_name(self):
        """Get air_chiller_17_name

        Returns:
            str: the value of `air_chiller_17_name` or None if not set
        """
        return self._data["Air Chiller 17 Name"]

    @air_chiller_17_name.setter
    def air_chiller_17_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_17_name`
        This is the seventeenth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_17_name`')

        self._data["Air Chiller 17 Name"] = value

    @property
    def air_chiller_18_name(self):
        """Get air_chiller_18_name

        Returns:
            str: the value of `air_chiller_18_name` or None if not set
        """
        return self._data["Air Chiller 18 Name"]

    @air_chiller_18_name.setter
    def air_chiller_18_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_18_name`
        This is the eighteenth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_18_name`')

        self._data["Air Chiller 18 Name"] = value

    @property
    def air_chiller_19_name(self):
        """Get air_chiller_19_name

        Returns:
            str: the value of `air_chiller_19_name` or None if not set
        """
        return self._data["Air Chiller 19 Name"]

    @air_chiller_19_name.setter
    def air_chiller_19_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_19_name`
        This is the nineteenth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_19_name`')

        self._data["Air Chiller 19 Name"] = value

    @property
    def air_chiller_20_name(self):
        """Get air_chiller_20_name

        Returns:
            str: the value of `air_chiller_20_name` or None if not set
        """
        return self._data["Air Chiller 20 Name"]

    @air_chiller_20_name.setter
    def air_chiller_20_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_20_name`
        This is the twentieth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_20_name`')

        self._data["Air Chiller 20 Name"] = value

    @property
    def air_chiller_20_name(self):
        """Get air_chiller_20_name

        Returns:
            str: the value of `air_chiller_20_name` or None if not set
        """
        return self._data["Air Chiller 20 Name"]

    @air_chiller_20_name.setter
    def air_chiller_20_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_20_name`
        This is the twentieth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_20_name`')

        self._data["Air Chiller 20 Name"] = value

    @property
    def air_chiller_20_name(self):
        """Get air_chiller_20_name

        Returns:
            str: the value of `air_chiller_20_name` or None if not set
        """
        return self._data["Air Chiller 20 Name"]

    @air_chiller_20_name.setter
    def air_chiller_20_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_20_name`
        This is the twentieth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_20_name`')

        self._data["Air Chiller 20 Name"] = value

    @property
    def air_chiller_20_name(self):
        """Get air_chiller_20_name

        Returns:
            str: the value of `air_chiller_20_name` or None if not set
        """
        return self._data["Air Chiller 20 Name"]

    @air_chiller_20_name.setter
    def air_chiller_20_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_20_name`
        This is the twentieth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_20_name`')

        self._data["Air Chiller 20 Name"] = value

    @property
    def air_chiller_20_name(self):
        """Get air_chiller_20_name

        Returns:
            str: the value of `air_chiller_20_name` or None if not set
        """
        return self._data["Air Chiller 20 Name"]

    @air_chiller_20_name.setter
    def air_chiller_20_name(self, value=None):
        """  Corresponds to IDD Field `air_chiller_20_name`
        This is the twentieth chiller turned on to meet the zone load

        Args:
            value (str): value for IDD Field `air_chiller_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_chiller_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_chiller_20_name`')

        self._data["Air Chiller 20 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.air_chiller_1_name))
        out.append(self._to_str(self.air_chiller_2_name))
        out.append(self._to_str(self.air_chiller_3_name))
        out.append(self._to_str(self.air_chiller_4_name))
        out.append(self._to_str(self.air_chiller_5_name))
        out.append(self._to_str(self.air_chiller_6_name))
        out.append(self._to_str(self.air_chiller_7_name))
        out.append(self._to_str(self.air_chiller_8_name))
        out.append(self._to_str(self.air_chiller_9_name))
        out.append(self._to_str(self.air_chiller_10_name))
        out.append(self._to_str(self.air_chiller_11_name))
        out.append(self._to_str(self.air_chiller_12_name))
        out.append(self._to_str(self.air_chiller_13_name))
        out.append(self._to_str(self.air_chiller_14_name))
        out.append(self._to_str(self.air_chiller_15_name))
        out.append(self._to_str(self.air_chiller_16_name))
        out.append(self._to_str(self.air_chiller_17_name))
        out.append(self._to_str(self.air_chiller_18_name))
        out.append(self._to_str(self.air_chiller_19_name))
        out.append(self._to_str(self.air_chiller_20_name))
        out.append(self._to_str(self.air_chiller_20_name))
        out.append(self._to_str(self.air_chiller_20_name))
        out.append(self._to_str(self.air_chiller_20_name))
        out.append(self._to_str(self.air_chiller_20_name))
        return ",".join(out)