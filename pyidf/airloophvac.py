from collections import OrderedDict

class AirLoopHvacUnitarySystem(object):
    """ Corresponds to IDD object `AirLoopHVAC:UnitarySystem`
        AirloopHVAC:UnitarySystem is a generic HVAC system type that allows any
        configuration of coils and/or fan. This object is a replacement of other
        AirloopHVAC objects. This object can be used in outdoor air systems,
        outdoor air units, air loops, and as zone equipment if desired.
    """
    internal_name = "AirLoopHVAC:UnitarySystem"
    field_count = 53

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:UnitarySystem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Control Type"] = None
        self._data["Controlling Zone or Thermostat Location"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Supply Fan Object Type"] = None
        self._data["Supply Fan Name"] = None
        self._data["Fan Placement"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["DX Heating Coil Sizing Ratio"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Use DOAS DX Cooling Coil"] = None
        self._data["DOAS DX Cooling Coil Leaving Minimum Air Temperature"] = None
        self._data["Latent Load Control"] = None
        self._data["Supplemental Heating Coil Object Type"] = None
        self._data["Supplemental Heating Coil Name"] = None
        self._data["Supply Air Flow Rate Method During Cooling Operation"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate Per Floor Area During Cooling Operation"] = None
        self._data["Fraction of Autosized Design Cooling Supply Air Flow Rate"] = None
        self._data["Design Supply Air Flow Rate Per Unit of Capacity During Cooling Operation"] = None
        self._data["Supply air Flow Rate Method During Heating Operation"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate Per Floor Area during Heating Operation"] = None
        self._data["Fraction of Autosized Design Heating Supply Air Flow Rate"] = None
        self._data["Design Supply Air Flow Rate Per Unit of Capacity During Heating Operation"] = None
        self._data["Supply Air Flow Rate Method When No Cooling or Heating is Required"] = None
        self._data["Supply Air Flow Rate When No Cooling or Heating is Required"] = None
        self._data["Supply Air Flow Rate Per Floor Area When No Cooling or Heating is Required"] = None
        self._data["Fraction of Autosized Design Cooling Supply Air Flow Rate"] = None
        self._data["Fraction of Autosized Design Heating Supply Air Flow Rate"] = None
        self._data["Design Supply Air Flow Rate Per Unit of Capacity During Cooling Operation"] = None
        self._data["Design Supply Air Flow Rate Per Unit of Capacity During Heating Operation"] = None
        self._data["Maximum Supply Air Temperature"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = None
        self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"] = None
        self._data["Maximum Cycling Rate"] = None
        self._data["Heat Pump Time Constant"] = None
        self._data["Fraction of On-Cycle Power Use"] = None
        self._data["Heat Pump Fan Delay Time"] = None
        self._data["Ancilliary On-Cycle Electric Power"] = None
        self._data["Ancilliary Off-Cycle Electric Power"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Maximum Temperature for Heat Recovery"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Design Specification Multispeed Heat Pump Object Type"] = None
        self._data["Design Specification Multispeed Heat Pump Object Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.control_type = None
        else:
            self.control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controlling_zone_or_thermostat_location = None
        else:
            self.controlling_zone_or_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_object_type = None
        else:
            self.supply_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_name = None
        else:
            self.supply_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dx_heating_coil_sizing_ratio = None
        else:
            self.dx_heating_coil_sizing_ratio = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.use_doas_dx_cooling_coil = None
        else:
            self.use_doas_dx_cooling_coil = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.doas_dx_cooling_coil_leaving_minimum_air_temperature = None
        else:
            self.doas_dx_cooling_coil_leaving_minimum_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.latent_load_control = None
        else:
            self.latent_load_control = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_object_type = None
        else:
            self.supplemental_heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_name = None
        else:
            self.supplemental_heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_method_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_method_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_per_floor_area_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_per_floor_area_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_design_cooling_supply_air_flow_rate = None
        else:
            self.fraction_of_autosized_design_cooling_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation = None
        else:
            self.design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_method_during_heating_operation = None
        else:
            self.supply_air_flow_rate_method_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_per_floor_area_during_heating_operation = None
        else:
            self.supply_air_flow_rate_per_floor_area_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_design_heating_supply_air_flow_rate = None
        else:
            self.fraction_of_autosized_design_heating_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation = None
        else:
            self.design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_method_when_no_cooling_or_heating_is_required = None
        else:
            self.supply_air_flow_rate_method_when_no_cooling_or_heating_is_required = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_required = None
        else:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_required = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required = None
        else:
            self.supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_design_cooling_supply_air_flow_rate = None
        else:
            self.fraction_of_autosized_design_cooling_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_autosized_design_heating_supply_air_flow_rate = None
        else:
            self.fraction_of_autosized_design_heating_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation = None
        else:
            self.design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation = None
        else:
            self.design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature = None
        else:
            self.maximum_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_drybulb_temperature_sensor_node_name = None
        else:
            self.outdoor_drybulb_temperature_sensor_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cycling_rate = None
        else:
            self.maximum_cycling_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_time_constant = None
        else:
            self.heat_pump_time_constant = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_oncycle_power_use = None
        else:
            self.fraction_of_oncycle_power_use = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_fan_delay_time = None
        else:
            self.heat_pump_fan_delay_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_oncycle_electric_power = None
        else:
            self.ancilliary_oncycle_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ancilliary_offcycle_electric_power = None
        else:
            self.ancilliary_offcycle_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_temperature_for_heat_recovery = None
        else:
            self.maximum_temperature_for_heat_recovery = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_multispeed_heat_pump_object_type = None
        else:
            self.design_specification_multispeed_heat_pump_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_specification_multispeed_heat_pump_object_name = None
        else:
            self.design_specification_multispeed_heat_pump_object_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Unique name for the Unitary System.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def control_type(self):
        """Get control_type

        Returns:
            str: the value of `control_type` or None if not set
        """
        return self._data["Control Type"]

    @control_type.setter
    def control_type(self, value="Load"):
        """  Corresponds to IDD Field `control_type`
        Load control requires a Controlling Zone name.
        SetPoint control requires set points at coil outlet node.

        Args:
            value (str): value for IDD Field `control_type`
                Accepted values are:
                      - Load
                      - SetPoint
                Default value: Load
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_type`')
            vals = set()
            vals.add("Load")
            vals.add("SetPoint")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `control_type`'.format(value))

        self._data["Control Type"] = value

    @property
    def controlling_zone_or_thermostat_location(self):
        """Get controlling_zone_or_thermostat_location

        Returns:
            str: the value of `controlling_zone_or_thermostat_location` or None if not set
        """
        return self._data["Controlling Zone or Thermostat Location"]

    @controlling_zone_or_thermostat_location.setter
    def controlling_zone_or_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `controlling_zone_or_thermostat_location`
        Used only for Load based control
        Zone name where thermostat is located. Required when Control Type = Load.

        Args:
            value (str): value for IDD Field `controlling_zone_or_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controlling_zone_or_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controlling_zone_or_thermostat_location`')

        self._data["Controlling Zone or Thermostat Location"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        Multimode = activate enhanced dehumidification mode
        as needed and meet sensible load.  Valid only with
        cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted.
        This control mode allows the heat exchanger to be turned
        on and off based on the zone dehumidification requirements.
        A ZoneControl:Humidistat object is also required.
        CoolReheat = cool beyond the dry bulb setpoint.
        as required to meet the humidity setpoint.  Valid with all
        cooling coil types. When a heat exchanger assisted cooling
        coil is used, the heat exchanger is locked on at all times.
        A ZoneControl:Humidistat object is also required.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - Multimode
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("Multimode")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        A schedule value greater than zero (usually 1 is used) indicates that the unit is
        available to operate as needed. A value less than or equal to zero (usually zero
        is used) denotes that the unit must be off.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`
        Enter the node name used as the inlet air node for the unitary system.

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`
        Enter the node name used as the outlet air node for the unitary system.

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def supply_fan_object_type(self):
        """Get supply_fan_object_type

        Returns:
            str: the value of `supply_fan_object_type` or None if not set
        """
        return self._data["Supply Fan Object Type"]

    @supply_fan_object_type.setter
    def supply_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_fan_object_type`
        Enter the type of supply air fan if included in the unitary system.
        Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply
        air fan operating mode schedule values greater than 0).
        Specify a Fan:OnOff object when the Supply Air Fan Operating Mode Schedule Name
        input field above is left blank.
        Specifiy a Fan:VariableVolume when modeling VAV systems which used setpoint based control
        if the fan is included in the unitary system object.
        The variable or constant volume fan may be specified on the branch instead of contained
        within the unitary system object (i.e., this field may be blank for certain configurations).

        Args:
            value (str): value for IDD Field `supply_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                      - Fan:VariableVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            vals.add("Fan:VariableVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_object_type`'.format(value))

        self._data["Supply Fan Object Type"] = value

    @property
    def supply_fan_name(self):
        """Get supply_fan_name

        Returns:
            str: the value of `supply_fan_name` or None if not set
        """
        return self._data["Supply Fan Name"]

    @supply_fan_name.setter
    def supply_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_name`
        Enter the name of the supply air fan if included in the unitary system.

        Args:
            value (str): value for IDD Field `supply_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_name`')

        self._data["Supply Fan Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value=None):
        """  Corresponds to IDD Field `fan_placement`
        Enter the type of supply air fan if included in the unitary system.

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        A fan operating mode schedule value of 0 indicates cycling fan mode (supply air
        fan cycles on and off in tandem with the cooling or heating coil).
        Any other schedule value indicates continuous fan mode (supply air fan operates
        continuously regardless of cooling or heating coil operation). Provide a schedule
        with non-zero values when high humidity control is specified.
        Leaving this schedule name blank will default to constant fan mode for the
        entire simulation period.
        This field is not used when set point based control is used where a set point
        controls the coil (i.e., model assumes constant fan mode operation).

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        Enter the type of heating coil if included in the unitary system.

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:DX:SingleSpeed
                      - Coil:Heating:DX:MultiSpeed
                      - Coil:Heating:DX:VariableSpeed
                      - Coil:Heating:WaterToAirHeatPump:ParameterEstimation
                      - Coil:Heating:WaterToAirHeatPump:EquationFit
                      - Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit
                      - Coil:Heating:Gas
                      - Coil:Heating:Gas:MultiStage
                      - Coil:Heating:Electric
                      - Coil:Heating:Electric:MultiStage
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                      - Coil:Heating:Desuperheater
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:DX:SingleSpeed")
            vals.add("Coil:Heating:DX:MultiSpeed")
            vals.add("Coil:Heating:DX:VariableSpeed")
            vals.add("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")
            vals.add("Coil:Heating:WaterToAirHeatPump:EquationFit")
            vals.add("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Gas:MultiStage")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Electric:MultiStage")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            vals.add("Coil:Heating:Desuperheater")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`
        Enter the name of the heating coil if included in the unitary system.

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def dx_heating_coil_sizing_ratio(self):
        """Get dx_heating_coil_sizing_ratio

        Returns:
            float: the value of `dx_heating_coil_sizing_ratio` or None if not set
        """
        return self._data["DX Heating Coil Sizing Ratio"]

    @dx_heating_coil_sizing_ratio.setter
    def dx_heating_coil_sizing_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `dx_heating_coil_sizing_ratio`
        Used to adjust heat pump heating capacity with respect to DX cooling capacity
        used only for heat pump configurations (i.e., a cooling and DX heating coil is used).

        Args:
            value (float): value for IDD Field `dx_heating_coil_sizing_ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `dx_heating_coil_sizing_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `dx_heating_coil_sizing_ratio`')

        self._data["DX Heating Coil Sizing Ratio"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Enter the type of cooling coil if included in the unitary system.

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Cooling:DX:TwoSpeed
                      - Coil:Cooling:DX:MultiSpeed
                      - Coil:Cooling:DX:VariableSpeed
                      - Coil:Cooling:DX:TwoStageWithHumidityControlMode
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                      - Coil:Cooling:WaterToAirHeatPump:ParameterEstimation
                      - Coil:Cooling:WaterToAirHeatPump:EquationFit
                      - Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                      - CoilSystem:Cooling:Water:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("Coil:Cooling:DX:TwoSpeed")
            vals.add("Coil:Cooling:DX:MultiSpeed")
            vals.add("Coil:Cooling:DX:VariableSpeed")
            vals.add("Coil:Cooling:DX:TwoStageWithHumidityControlMode")
            vals.add("CoilSystem:Cooling:DX:HeatExchangerAssisted")
            vals.add("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")
            vals.add("Coil:Cooling:WaterToAirHeatPump:EquationFit")
            vals.add("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")
            vals.add("Coil:Cooling:Water")
            vals.add("Coil:Cooling:Water:DetailedGeometry")
            vals.add("CoilSystem:Cooling:Water:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`
        Enter the name of the cooling coil if included in the unitary system.

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def use_doas_dx_cooling_coil(self):
        """Get use_doas_dx_cooling_coil

        Returns:
            str: the value of `use_doas_dx_cooling_coil` or None if not set
        """
        return self._data["Use DOAS DX Cooling Coil"]

    @use_doas_dx_cooling_coil.setter
    def use_doas_dx_cooling_coil(self, value="No"):
        """  Corresponds to IDD Field `use_doas_dx_cooling_coil`
        If Yes, the DX cooling coil runs as 100% DOAS DX coil.
        If No, the DX cooling coil runs as a regular DX coil.
        If left blank the default is regular dx coil.

        Args:
            value (str): value for IDD Field `use_doas_dx_cooling_coil`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `use_doas_dx_cooling_coil`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `use_doas_dx_cooling_coil`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `use_doas_dx_cooling_coil`'.format(value))

        self._data["Use DOAS DX Cooling Coil"] = value

    @property
    def doas_dx_cooling_coil_leaving_minimum_air_temperature(self):
        """Get doas_dx_cooling_coil_leaving_minimum_air_temperature

        Returns:
            float: the value of `doas_dx_cooling_coil_leaving_minimum_air_temperature` or None if not set
        """
        return self._data["DOAS DX Cooling Coil Leaving Minimum Air Temperature"]

    @doas_dx_cooling_coil_leaving_minimum_air_temperature.setter
    def doas_dx_cooling_coil_leaving_minimum_air_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `doas_dx_cooling_coil_leaving_minimum_air_temperature`
        DX cooling coil leaving minimum air temperature defines the minimum DOAS DX cooling coil
        leaving air temperature that should be maintained to avoid frost formation. This input
        field is optional and only used along with the input field above.

        Args:
            value (float): value for IDD Field `doas_dx_cooling_coil_leaving_minimum_air_temperature`
                Unit: C
                Default value: 2.0
                value >= 0.0
                value <= 7.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `doas_dx_cooling_coil_leaving_minimum_air_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `doas_dx_cooling_coil_leaving_minimum_air_temperature`')
            if value > 7.2:
                raise ValueError('value need to be smaller 7.2 '
                                 'for field `doas_dx_cooling_coil_leaving_minimum_air_temperature`')

        self._data["DOAS DX Cooling Coil Leaving Minimum Air Temperature"] = value

    @property
    def latent_load_control(self):
        """Get latent_load_control

        Returns:
            str: the value of `latent_load_control` or None if not set
        """
        return self._data["Latent Load Control"]

    @latent_load_control.setter
    def latent_load_control(self, value=None):
        """  Corresponds to IDD Field `latent_load_control`
        SensibleOnlyLoadControl is selected when thermostat control is used.
        LatentOnlyLoadControl is selected when humidistat control is used.
        LatentWithSensibleLoadControl is selected when thermostat control is used and
        dehumidification is required only when a sensible load exists.
        LatentOrSensibleLoadControl is selected when thermostat control is used and
        dehumidification is required any time the humidistat set point is exceeded.

        Args:
            value (str): value for IDD Field `latent_load_control`
                Accepted values are:
                      - SensibleOnlyLoadControl
                      - LatentOnlyLoadControl
                      - LatentWithSensibleLoadControl
                      - LatentOrSensibleLoadControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `latent_load_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `latent_load_control`')
            vals = set()
            vals.add("SensibleOnlyLoadControl")
            vals.add("LatentOnlyLoadControl")
            vals.add("LatentWithSensibleLoadControl")
            vals.add("LatentOrSensibleLoadControl")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `latent_load_control`'.format(value))

        self._data["Latent Load Control"] = value

    @property
    def supplemental_heating_coil_object_type(self):
        """Get supplemental_heating_coil_object_type

        Returns:
            str: the value of `supplemental_heating_coil_object_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Object Type"]

    @supplemental_heating_coil_object_type.setter
    def supplemental_heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_object_type`
        Enter the type of supplemental heating coil if included in the unitary system.
        Only required if dehumidification control type is "CoolReheat".

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Desuperheater
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Desuperheater")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_object_type`'.format(value))

        self._data["Supplemental Heating Coil Object Type"] = value

    @property
    def supplemental_heating_coil_name(self):
        """Get supplemental_heating_coil_name

        Returns:
            str: the value of `supplemental_heating_coil_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Name"]

    @supplemental_heating_coil_name.setter
    def supplemental_heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_name`
        Enter the name of the supplemental heating coil if included in the unitary system.
        Only required if dehumidification control type is "CoolReheat".

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_name`')

        self._data["Supplemental Heating Coil Name"] = value

    @property
    def supply_air_flow_rate_method_during_cooling_operation(self):
        """Get supply_air_flow_rate_method_during_cooling_operation

        Returns:
            str: the value of `supply_air_flow_rate_method_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate Method During Cooling Operation"]

    @supply_air_flow_rate_method_during_cooling_operation.setter
    def supply_air_flow_rate_method_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_method_during_cooling_operation`
        Enter the method used to determine the cooling supply air volume flow rate.
        None is used when a cooling coil is not included in the unitary system or this field may be blank.
        SupplyAirFlowRate is selected when the magnitude of the supply air volume is used.
        FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area
        served by the unitary system.
        FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the
        value determined by the simulation.
        FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling
        capacity as determined by the simulation.

        Args:
            value (str): value for IDD Field `supply_air_flow_rate_method_during_cooling_operation`
                Accepted values are:
                      - None
                      - SupplyAirFlowRate
                      - FlowPerFloorArea
                      - FractionOfAutosizedCoolingValue
                      - FlowPerCoolingCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_flow_rate_method_during_cooling_operation`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_flow_rate_method_during_cooling_operation`')
            vals = set()
            vals.add("None")
            vals.add("SupplyAirFlowRate")
            vals.add("FlowPerFloorArea")
            vals.add("FractionOfAutosizedCoolingValue")
            vals.add("FlowPerCoolingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_flow_rate_method_during_cooling_operation`'.format(value))

        self._data["Supply Air Flow Rate Method During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`
        Enter the magnitude of the supply air volume flow rate during cooling operation.
        Required field when Supply air Flow Rate Method During Cooling Operation is SupplyAirFlowRate.
        This field may be blank if a cooling coil is not included in the unitary system.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_per_floor_area_during_cooling_operation(self):
        """Get supply_air_flow_rate_per_floor_area_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_per_floor_area_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate Per Floor Area During Cooling Operation"]

    @supply_air_flow_rate_per_floor_area_during_cooling_operation.setter
    def supply_air_flow_rate_per_floor_area_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_per_floor_area_during_cooling_operation`
        Enter the supply air volume flow rate per total floor area fraction.
        Required field when Supply air Flow Rate Method During Cooling Operation is FlowPerFloorArea.
        This field may be blank if a cooling coil is not included in the unitary system.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_per_floor_area_during_cooling_operation`
                Unit: m3/s-m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_per_floor_area_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_per_floor_area_during_cooling_operation`')

        self._data["Supply Air Flow Rate Per Floor Area During Cooling Operation"] = value

    @property
    def fraction_of_autosized_design_cooling_supply_air_flow_rate(self):
        """Get fraction_of_autosized_design_cooling_supply_air_flow_rate

        Returns:
            float: the value of `fraction_of_autosized_design_cooling_supply_air_flow_rate` or None if not set
        """
        return self._data["Fraction of Autosized Design Cooling Supply Air Flow Rate"]

    @fraction_of_autosized_design_cooling_supply_air_flow_rate.setter
    def fraction_of_autosized_design_cooling_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `fraction_of_autosized_design_cooling_supply_air_flow_rate`
        Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate.
        Required field when Supply air Flow Rate Method During Cooling Operation is FractionOfAutosizedCoolingValue.
        This field may be blank if a cooling coil is not included in the unitary system.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_design_cooling_supply_air_flow_rate`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_design_cooling_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_design_cooling_supply_air_flow_rate`')

        self._data["Fraction of Autosized Design Cooling Supply Air Flow Rate"] = value

    @property
    def design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation(self):
        """Get design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation

        Returns:
            float: the value of `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation` or None if not set
        """
        return self._data["Design Supply Air Flow Rate Per Unit of Capacity During Cooling Operation"]

    @design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation.setter
    def design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation`
        Enter the supply air volume flow rate as a fraction of the cooling capacity.
        Required field when Supply air Flow Rate Method During Cooling Operation is FlowPerCoolingCapacity.
        This field may be blank if a cooling coil is not included in the unitary system.

        Args:
            value (float): value for IDD Field `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation`
                Unit: m3/s-W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation`')

        self._data["Design Supply Air Flow Rate Per Unit of Capacity During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_method_during_heating_operation(self):
        """Get supply_air_flow_rate_method_during_heating_operation

        Returns:
            str: the value of `supply_air_flow_rate_method_during_heating_operation` or None if not set
        """
        return self._data["Supply air Flow Rate Method During Heating Operation"]

    @supply_air_flow_rate_method_during_heating_operation.setter
    def supply_air_flow_rate_method_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_method_during_heating_operation`
        Enter the method used to determine the heating supply air volume flow rate.
        None is used when a heating coil is not included in the unitary system or this field may be blank.
        SupplyAirFlowRate is selected when the magnitude of the supply air volume is used.
        FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area
        served by the unitary system.
        FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the
        value determined by the simulation.
        FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating
        capacity as determined by the simulation.

        Args:
            value (str): value for IDD Field `supply_air_flow_rate_method_during_heating_operation`
                Accepted values are:
                      - None
                      - SupplyAirFlowRate
                      - FlowPerFloorArea
                      - FractionOfAutosizedHeatingValue
                      - FlowPerHeatingCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_flow_rate_method_during_heating_operation`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_flow_rate_method_during_heating_operation`')
            vals = set()
            vals.add("None")
            vals.add("SupplyAirFlowRate")
            vals.add("FlowPerFloorArea")
            vals.add("FractionOfAutosizedHeatingValue")
            vals.add("FlowPerHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_flow_rate_method_during_heating_operation`'.format(value))

        self._data["Supply air Flow Rate Method During Heating Operation"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`
        Enter the magnitude of the supply air volume flow rate during heating operation.
        Required field when Supply air Flow Rate Method During Heating Operation is SupplyAirFlowRate.
        This field may be blank if a heating coil is not included in the unitary system.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_per_floor_area_during_heating_operation(self):
        """Get supply_air_flow_rate_per_floor_area_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_per_floor_area_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate Per Floor Area during Heating Operation"]

    @supply_air_flow_rate_per_floor_area_during_heating_operation.setter
    def supply_air_flow_rate_per_floor_area_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_per_floor_area_during_heating_operation`
        Enter the supply air volume flow rate per total floor area fraction.
        Required field when Supply air Flow Rate Method During Heating Operation is FlowPerFloorArea.
        This field may be blank if a heating coil is not included in the unitary system.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_per_floor_area_during_heating_operation`
                Unit: m3/s-m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_per_floor_area_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_per_floor_area_during_heating_operation`')

        self._data["Supply Air Flow Rate Per Floor Area during Heating Operation"] = value

    @property
    def fraction_of_autosized_design_heating_supply_air_flow_rate(self):
        """Get fraction_of_autosized_design_heating_supply_air_flow_rate

        Returns:
            float: the value of `fraction_of_autosized_design_heating_supply_air_flow_rate` or None if not set
        """
        return self._data["Fraction of Autosized Design Heating Supply Air Flow Rate"]

    @fraction_of_autosized_design_heating_supply_air_flow_rate.setter
    def fraction_of_autosized_design_heating_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `fraction_of_autosized_design_heating_supply_air_flow_rate`
        Enter the supply air volume flow rate as a fraction of the heating supply air flow rate.
        Required field when Supply air Flow Rate Method During Heating Operation is FractionOfAutosizedHeatingValue.
        This field may be blank if a heating coil is not included in the unitary system.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_design_heating_supply_air_flow_rate`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_design_heating_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_design_heating_supply_air_flow_rate`')

        self._data["Fraction of Autosized Design Heating Supply Air Flow Rate"] = value

    @property
    def design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation(self):
        """Get design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation

        Returns:
            float: the value of `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation` or None if not set
        """
        return self._data["Design Supply Air Flow Rate Per Unit of Capacity During Heating Operation"]

    @design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation.setter
    def design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation`
        Enter the supply air volume flow rate as a fraction of the heating capacity.
        Required field when Supply air Flow Rate Method During Heating Operation is FlowPerHeatingCapacity.
        This field may be blank if a heating coil is not included in the unitary system.

        Args:
            value (float): value for IDD Field `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation`
                Unit: m3/s-W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation`')

        self._data["Design Supply Air Flow Rate Per Unit of Capacity During Heating Operation"] = value

    @property
    def supply_air_flow_rate_method_when_no_cooling_or_heating_is_required(self):
        """Get supply_air_flow_rate_method_when_no_cooling_or_heating_is_required

        Returns:
            str: the value of `supply_air_flow_rate_method_when_no_cooling_or_heating_is_required` or None if not set
        """
        return self._data["Supply Air Flow Rate Method When No Cooling or Heating is Required"]

    @supply_air_flow_rate_method_when_no_cooling_or_heating_is_required.setter
    def supply_air_flow_rate_method_when_no_cooling_or_heating_is_required(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_method_when_no_cooling_or_heating_is_required`
        Enter the method used to determine the supply air volume flow rate when no cooling or heating is required.
        None is used when a heating coil is not included in the unitary system or this field may be blank.
        SupplyAirFlowRate is selected when the magnitude of the supply air volume is used.
        FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area
        served by the unitary system.
        FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the
        cooling value determined by the simulation.
        FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the
        heating value determined by the simulation.
        FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling
        capacity as determined by the simulation.
        FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating
        capacity as determined by the simulation.

        Args:
            value (str): value for IDD Field `supply_air_flow_rate_method_when_no_cooling_or_heating_is_required`
                Accepted values are:
                      - None
                      - SupplyAirFlowRate
                      - FlowPerFloorArea
                      - FractionOfAutosizedCoolingValue
                      - FractionOfAutosizedHeatingValue
                      - FlowPerCoolingCapacity
                      - FlowPerHeatingCapacity
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_flow_rate_method_when_no_cooling_or_heating_is_required`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_flow_rate_method_when_no_cooling_or_heating_is_required`')
            vals = set()
            vals.add("None")
            vals.add("SupplyAirFlowRate")
            vals.add("FlowPerFloorArea")
            vals.add("FractionOfAutosizedCoolingValue")
            vals.add("FractionOfAutosizedHeatingValue")
            vals.add("FlowPerCoolingCapacity")
            vals.add("FlowPerHeatingCapacity")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_flow_rate_method_when_no_cooling_or_heating_is_required`'.format(value))

        self._data["Supply Air Flow Rate Method When No Cooling or Heating is Required"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_or_heating_is_required(self):
        """Get supply_air_flow_rate_when_no_cooling_or_heating_is_required

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_or_heating_is_required` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling or Heating is Required"]

    @supply_air_flow_rate_when_no_cooling_or_heating_is_required.setter
    def supply_air_flow_rate_when_no_cooling_or_heating_is_required(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_required`
        Enter the magnitude of the supply air volume flow rate during when no cooling or heating is required.
        Required field when Supply air Flow Rate Method When No Cooling or Heating is Required is SupplyAirFlowRate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_required`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_required`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_required`')

        self._data["Supply Air Flow Rate When No Cooling or Heating is Required"] = value

    @property
    def supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required(self):
        """Get supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required

        Returns:
            float: the value of `supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required` or None if not set
        """
        return self._data["Supply Air Flow Rate Per Floor Area When No Cooling or Heating is Required"]

    @supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required.setter
    def supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required`
        Enter the supply air volume flow rate per total floor area fraction.
        Required field when Supply air Flow Rate Method When No Cooling or Heating is Required is FlowPerFloorArea.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required`
                Unit: m3/s-m2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required`')

        self._data["Supply Air Flow Rate Per Floor Area When No Cooling or Heating is Required"] = value

    @property
    def fraction_of_autosized_design_cooling_supply_air_flow_rate(self):
        """Get fraction_of_autosized_design_cooling_supply_air_flow_rate

        Returns:
            float: the value of `fraction_of_autosized_design_cooling_supply_air_flow_rate` or None if not set
        """
        return self._data["Fraction of Autosized Design Cooling Supply Air Flow Rate"]

    @fraction_of_autosized_design_cooling_supply_air_flow_rate.setter
    def fraction_of_autosized_design_cooling_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `fraction_of_autosized_design_cooling_supply_air_flow_rate`
        Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate.
        Required field when Supply air Flow Rate Method When No Cooling or Heating is Required is FractionOfAutosizedCoolingValue.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_design_cooling_supply_air_flow_rate`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_design_cooling_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_design_cooling_supply_air_flow_rate`')

        self._data["Fraction of Autosized Design Cooling Supply Air Flow Rate"] = value

    @property
    def fraction_of_autosized_design_heating_supply_air_flow_rate(self):
        """Get fraction_of_autosized_design_heating_supply_air_flow_rate

        Returns:
            float: the value of `fraction_of_autosized_design_heating_supply_air_flow_rate` or None if not set
        """
        return self._data["Fraction of Autosized Design Heating Supply Air Flow Rate"]

    @fraction_of_autosized_design_heating_supply_air_flow_rate.setter
    def fraction_of_autosized_design_heating_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `fraction_of_autosized_design_heating_supply_air_flow_rate`
        Enter the supply air volume flow rate as a fraction of the heating supply air flow rate.
        Required field when Supply air Flow Rate Method When No Cooling or Heating is Required is FractionOfAutosizedHeatingValue.

        Args:
            value (float): value for IDD Field `fraction_of_autosized_design_heating_supply_air_flow_rate`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_autosized_design_heating_supply_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_autosized_design_heating_supply_air_flow_rate`')

        self._data["Fraction of Autosized Design Heating Supply Air Flow Rate"] = value

    @property
    def design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation(self):
        """Get design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation

        Returns:
            float: the value of `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation` or None if not set
        """
        return self._data["Design Supply Air Flow Rate Per Unit of Capacity During Cooling Operation"]

    @design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation.setter
    def design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation`
        Enter the supply air volume flow rate as a fraction of the cooling capacity.
        Required field when Supply air Flow Rate Method During Heating Operation is FlowPerCoolingCapacity.

        Args:
            value (float): value for IDD Field `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation`
                Unit: m3/s-W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation`')

        self._data["Design Supply Air Flow Rate Per Unit of Capacity During Cooling Operation"] = value

    @property
    def design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation(self):
        """Get design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation

        Returns:
            float: the value of `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation` or None if not set
        """
        return self._data["Design Supply Air Flow Rate Per Unit of Capacity During Heating Operation"]

    @design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation.setter
    def design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation`
        Enter the supply air volume flow rate as a fraction of the heating capacity.
        Required field when Supply air Flow Rate Method During Heating Operation is FlowPerHeatingCapacity.

        Args:
            value (float): value for IDD Field `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation`
                Unit: m3/s-W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation`')

        self._data["Design Supply Air Flow Rate Per Unit of Capacity During Heating Operation"] = value

    @property
    def maximum_supply_air_temperature(self):
        """Get maximum_supply_air_temperature

        Returns:
            float: the value of `maximum_supply_air_temperature` or None if not set
        """
        return self._data["Maximum Supply Air Temperature"]

    @maximum_supply_air_temperature.setter
    def maximum_supply_air_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `maximum_supply_air_temperature`
        Enter the maximum supply air temperature leaving the heating coil.

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature`
                Unit: C
                Default value: 80.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature`'.format(value))

        self._data["Maximum Supply Air Temperature"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self, value=21.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`
        Enter the maximum outdoor dry-bulb temperature for supplemental heater operation.

        Args:
            value (float): value for IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`
                Unit: C
                Default value: 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`'.format(value))

        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = value

    @property
    def outdoor_drybulb_temperature_sensor_node_name(self):
        """Get outdoor_drybulb_temperature_sensor_node_name

        Returns:
            str: the value of `outdoor_drybulb_temperature_sensor_node_name` or None if not set
        """
        return self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"]

    @outdoor_drybulb_temperature_sensor_node_name.setter
    def outdoor_drybulb_temperature_sensor_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_drybulb_temperature_sensor_node_name`
        If this field is blank, outdoor temperature from the weather file is used.
        If this field is not blank, the node name specified determines the outdoor temperature used
        for controlling supplemental heater operation.

        Args:
            value (str): value for IDD Field `outdoor_drybulb_temperature_sensor_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_drybulb_temperature_sensor_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_drybulb_temperature_sensor_node_name`')

        self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"] = value

    @property
    def maximum_cycling_rate(self):
        """Get maximum_cycling_rate

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set
        """
        return self._data["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=2.5 ):
        """  Corresponds to IDD Field `maximum_cycling_rate`
        Used only for water source heat pump.
        The maximum on-off cycling rate for the compressor.
        Suggested value is 2.5 for a typical heat pump.

        Args:
            value (float): value for IDD Field `maximum_cycling_rate`
                Unit: cycles/hr
                Default value: 2.5
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `maximum_cycling_rate`')

        self._data["Maximum Cycling Rate"] = value

    @property
    def heat_pump_time_constant(self):
        """Get heat_pump_time_constant

        Returns:
            float: the value of `heat_pump_time_constant` or None if not set
        """
        return self._data["Heat Pump Time Constant"]

    @heat_pump_time_constant.setter
    def heat_pump_time_constant(self, value=60.0 ):
        """  Corresponds to IDD Field `heat_pump_time_constant`
        Used only for water source heat pump.
        Time constant for the cooling coil's capacity to reach steady state after startup.
        Suggested value is 60 for a typical heat pump.

        Args:
            value (float): value for IDD Field `heat_pump_time_constant`
                Unit: s
                Default value: 60.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `heat_pump_time_constant`')

        self._data["Heat Pump Time Constant"] = value

    @property
    def fraction_of_oncycle_power_use(self):
        """Get fraction_of_oncycle_power_use

        Returns:
            float: the value of `fraction_of_oncycle_power_use` or None if not set
        """
        return self._data["Fraction of On-Cycle Power Use"]

    @fraction_of_oncycle_power_use.setter
    def fraction_of_oncycle_power_use(self, value=0.01 ):
        """  Corresponds to IDD Field `fraction_of_oncycle_power_use`
        Used only for water source heat pump.
        The fraction of on-cycle power use to adjust the part load fraction based on
        the off-cycle power consumption due to crankcase heaters, controls, fans, and etc.
        Suggested value is 0.01 for a typical heat pump.

        Args:
            value (float): value for IDD Field `fraction_of_oncycle_power_use`
                Default value: 0.01
                value >= 0.0
                value <= 0.05
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_oncycle_power_use`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_oncycle_power_use`')
            if value > 0.05:
                raise ValueError('value need to be smaller 0.05 '
                                 'for field `fraction_of_oncycle_power_use`')

        self._data["Fraction of On-Cycle Power Use"] = value

    @property
    def heat_pump_fan_delay_time(self):
        """Get heat_pump_fan_delay_time

        Returns:
            float: the value of `heat_pump_fan_delay_time` or None if not set
        """
        return self._data["Heat Pump Fan Delay Time"]

    @heat_pump_fan_delay_time.setter
    def heat_pump_fan_delay_time(self, value=60.0 ):
        """  Corresponds to IDD Field `heat_pump_fan_delay_time`
        Used only for water source heat pump.
        Programmed time delay for heat pump fan to shut off after compressor cycle off.
        Only required when fan operating mode is cycling.
        Enter 0 when fan operating mode is continuous.

        Args:
            value (float): value for IDD Field `heat_pump_fan_delay_time`
                Unit: s
                Default value: 60.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_fan_delay_time`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_fan_delay_time`')

        self._data["Heat Pump Fan Delay Time"] = value

    @property
    def ancilliary_oncycle_electric_power(self):
        """Get ancilliary_oncycle_electric_power

        Returns:
            float: the value of `ancilliary_oncycle_electric_power` or None if not set
        """
        return self._data["Ancilliary On-Cycle Electric Power"]

    @ancilliary_oncycle_electric_power.setter
    def ancilliary_oncycle_electric_power(self, value=0.0 ):
        """  Corresponds to IDD Field `ancilliary_oncycle_electric_power`
        Enter the value of ancilliary electric power for controls or other devices consumed during the on cycle.

        Args:
            value (float): value for IDD Field `ancilliary_oncycle_electric_power`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_oncycle_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ancilliary_oncycle_electric_power`')

        self._data["Ancilliary On-Cycle Electric Power"] = value

    @property
    def ancilliary_offcycle_electric_power(self):
        """Get ancilliary_offcycle_electric_power

        Returns:
            float: the value of `ancilliary_offcycle_electric_power` or None if not set
        """
        return self._data["Ancilliary Off-Cycle Electric Power"]

    @ancilliary_offcycle_electric_power.setter
    def ancilliary_offcycle_electric_power(self, value=0.0 ):
        """  Corresponds to IDD Field `ancilliary_offcycle_electric_power`
        Enter the value of ancilliary electric power for controls or other devices consumed during the off cycle.

        Args:
            value (float): value for IDD Field `ancilliary_offcycle_electric_power`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancilliary_offcycle_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ancilliary_offcycle_electric_power`')

        self._data["Ancilliary Off-Cycle Electric Power"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.
        Used for heat recovery to an EnergyPlus plant loop.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def maximum_temperature_for_heat_recovery(self):
        """Get maximum_temperature_for_heat_recovery

        Returns:
            float: the value of `maximum_temperature_for_heat_recovery` or None if not set
        """
        return self._data["Maximum Temperature for Heat Recovery"]

    @maximum_temperature_for_heat_recovery.setter
    def maximum_temperature_for_heat_recovery(self, value=80.0 ):
        """  Corresponds to IDD Field `maximum_temperature_for_heat_recovery`
        Enter the maximum heat recovery inlet temperature allowed for heat recovery.

        Args:
            value (float): value for IDD Field `maximum_temperature_for_heat_recovery`
                Unit: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_temperature_for_heat_recovery`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_temperature_for_heat_recovery`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_temperature_for_heat_recovery`')

        self._data["Maximum Temperature for Heat Recovery"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_inlet_node_name`
        Enter the name of the heat recovery water inlet node if plant water loop connections are present.

        Args:
            value (str): value for IDD Field `heat_recovery_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')

        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_outlet_node_name`
        Enter the name of the heat recovery water outlet node if plant water loop connections are present.

        Args:
            value (str): value for IDD Field `heat_recovery_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')

        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def design_specification_multispeed_heat_pump_object_type(self):
        """Get design_specification_multispeed_heat_pump_object_type

        Returns:
            str: the value of `design_specification_multispeed_heat_pump_object_type` or None if not set
        """
        return self._data["Design Specification Multispeed Heat Pump Object Type"]

    @design_specification_multispeed_heat_pump_object_type.setter
    def design_specification_multispeed_heat_pump_object_type(self, value=None):
        """  Corresponds to IDD Field `design_specification_multispeed_heat_pump_object_type`
        Enter the type of performance specification object used to describe the multispeed coil.

        Args:
            value (str): value for IDD Field `design_specification_multispeed_heat_pump_object_type`
                Accepted values are:
                      - UnitarySystemPerformance:HeatPump:Multispeed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_multispeed_heat_pump_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_multispeed_heat_pump_object_type`')
            vals = set()
            vals.add("UnitarySystemPerformance:HeatPump:Multispeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `design_specification_multispeed_heat_pump_object_type`'.format(value))

        self._data["Design Specification Multispeed Heat Pump Object Type"] = value

    @property
    def design_specification_multispeed_heat_pump_object_name(self):
        """Get design_specification_multispeed_heat_pump_object_name

        Returns:
            str: the value of `design_specification_multispeed_heat_pump_object_name` or None if not set
        """
        return self._data["Design Specification Multispeed Heat Pump Object Name"]

    @design_specification_multispeed_heat_pump_object_name.setter
    def design_specification_multispeed_heat_pump_object_name(self, value=None):
        """  Corresponds to IDD Field `design_specification_multispeed_heat_pump_object_name`
        Enter the name of the performance specification object used to describe the multispeed coil.

        Args:
            value (str): value for IDD Field `design_specification_multispeed_heat_pump_object_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `design_specification_multispeed_heat_pump_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `design_specification_multispeed_heat_pump_object_name`')

        self._data["Design Specification Multispeed Heat Pump Object Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.control_type))
        out.append(self._to_str(self.controlling_zone_or_thermostat_location))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.supply_fan_object_type))
        out.append(self._to_str(self.supply_fan_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.dx_heating_coil_sizing_ratio))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.use_doas_dx_cooling_coil))
        out.append(self._to_str(self.doas_dx_cooling_coil_leaving_minimum_air_temperature))
        out.append(self._to_str(self.latent_load_control))
        out.append(self._to_str(self.supplemental_heating_coil_object_type))
        out.append(self._to_str(self.supplemental_heating_coil_name))
        out.append(self._to_str(self.supply_air_flow_rate_method_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_per_floor_area_during_cooling_operation))
        out.append(self._to_str(self.fraction_of_autosized_design_cooling_supply_air_flow_rate))
        out.append(self._to_str(self.design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_method_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_per_floor_area_during_heating_operation))
        out.append(self._to_str(self.fraction_of_autosized_design_heating_supply_air_flow_rate))
        out.append(self._to_str(self.design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_method_when_no_cooling_or_heating_is_required))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_or_heating_is_required))
        out.append(self._to_str(self.supply_air_flow_rate_per_floor_area_when_no_cooling_or_heating_is_required))
        out.append(self._to_str(self.fraction_of_autosized_design_cooling_supply_air_flow_rate))
        out.append(self._to_str(self.fraction_of_autosized_design_heating_supply_air_flow_rate))
        out.append(self._to_str(self.design_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation))
        out.append(self._to_str(self.design_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation))
        out.append(self._to_str(self.maximum_supply_air_temperature))
        out.append(self._to_str(self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation))
        out.append(self._to_str(self.outdoor_drybulb_temperature_sensor_node_name))
        out.append(self._to_str(self.maximum_cycling_rate))
        out.append(self._to_str(self.heat_pump_time_constant))
        out.append(self._to_str(self.fraction_of_oncycle_power_use))
        out.append(self._to_str(self.heat_pump_fan_delay_time))
        out.append(self._to_str(self.ancilliary_oncycle_electric_power))
        out.append(self._to_str(self.ancilliary_offcycle_electric_power))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.maximum_temperature_for_heat_recovery))
        out.append(self._to_str(self.heat_recovery_water_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_outlet_node_name))
        out.append(self._to_str(self.design_specification_multispeed_heat_pump_object_type))
        out.append(self._to_str(self.design_specification_multispeed_heat_pump_object_name))
        return ",".join(out)

class AirLoopHvacUnitaryFurnaceHeatOnly(object):
    """ Corresponds to IDD object `AirLoopHVAC:Unitary:Furnace:HeatOnly`
        Unitary system, heating-only with constant volume supply fan (continuous or cycling)
        and heating coil (gas, electric, hot water, or steam). Identical to
        AirLoopHVAC:UnitaryHeatOnly.
    """
    internal_name = "AirLoopHVAC:Unitary:Furnace:HeatOnly"
    field_count = 13

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:Unitary:Furnace:HeatOnly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Furnace Air Inlet Node Name"] = None
        self._data["Furnace Air Outlet Node Name"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Maximum Supply Air Temperature"] = None
        self._data["Supply Air Flow Rate"] = None
        self._data["Controlling Zone or Thermostat Location"] = None
        self._data["Supply Fan Object Type"] = None
        self._data["Supply Fan Name"] = None
        self._data["Fan Placement"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.furnace_air_inlet_node_name = None
        else:
            self.furnace_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.furnace_air_outlet_node_name = None
        else:
            self.furnace_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature = None
        else:
            self.maximum_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate = None
        else:
            self.supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controlling_zone_or_thermostat_location = None
        else:
            self.controlling_zone_or_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_object_type = None
        else:
            self.supply_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_name = None
        else:
            self.supply_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def furnace_air_inlet_node_name(self):
        """Get furnace_air_inlet_node_name

        Returns:
            str: the value of `furnace_air_inlet_node_name` or None if not set
        """
        return self._data["Furnace Air Inlet Node Name"]

    @furnace_air_inlet_node_name.setter
    def furnace_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `furnace_air_inlet_node_name`

        Args:
            value (str): value for IDD Field `furnace_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `furnace_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `furnace_air_inlet_node_name`')

        self._data["Furnace Air Inlet Node Name"] = value

    @property
    def furnace_air_outlet_node_name(self):
        """Get furnace_air_outlet_node_name

        Returns:
            str: the value of `furnace_air_outlet_node_name` or None if not set
        """
        return self._data["Furnace Air Outlet Node Name"]

    @furnace_air_outlet_node_name.setter
    def furnace_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `furnace_air_outlet_node_name`

        Args:
            value (str): value for IDD Field `furnace_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `furnace_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `furnace_air_outlet_node_name`')

        self._data["Furnace Air Outlet Node Name"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        A fan operating mode schedule value of 0 indicates cycling fan mode (supply air
        fan cycles on and off in tandem with the heating coil).
        Any other schedule value indicates continuous fan mode (supply air fan operates
        continuously regardless of heating coil operation).
        Leaving this schedule name blank will default to cycling fan mode for the
        entire simulation period.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def maximum_supply_air_temperature(self):
        """Get maximum_supply_air_temperature

        Returns:
            float: the value of `maximum_supply_air_temperature` or None if not set
        """
        return self._data["Maximum Supply Air Temperature"]

    @maximum_supply_air_temperature.setter
    def maximum_supply_air_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `maximum_supply_air_temperature`

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature`
                Unit: C
                Default value: 80.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature`'.format(value))

        self._data["Maximum Supply Air Temperature"] = value

    @property
    def supply_air_flow_rate(self):
        """Get supply_air_flow_rate

        Returns:
            float: the value of `supply_air_flow_rate` or None if not set
        """
        return self._data["Supply Air Flow Rate"]

    @supply_air_flow_rate.setter
    def supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate`
        This value should be > 0 and <= than the fan air flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate`')

        self._data["Supply Air Flow Rate"] = value

    @property
    def controlling_zone_or_thermostat_location(self):
        """Get controlling_zone_or_thermostat_location

        Returns:
            str: the value of `controlling_zone_or_thermostat_location` or None if not set
        """
        return self._data["Controlling Zone or Thermostat Location"]

    @controlling_zone_or_thermostat_location.setter
    def controlling_zone_or_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `controlling_zone_or_thermostat_location`

        Args:
            value (str): value for IDD Field `controlling_zone_or_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controlling_zone_or_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controlling_zone_or_thermostat_location`')

        self._data["Controlling Zone or Thermostat Location"] = value

    @property
    def supply_fan_object_type(self):
        """Get supply_fan_object_type

        Returns:
            str: the value of `supply_fan_object_type` or None if not set
        """
        return self._data["Supply Fan Object Type"]

    @supply_fan_object_type.setter
    def supply_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_fan_object_type`
        Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan
        operating mode schedule values are greater than 0).

        Args:
            value (str): value for IDD Field `supply_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_object_type`'.format(value))

        self._data["Supply Fan Object Type"] = value

    @property
    def supply_fan_name(self):
        """Get supply_fan_name

        Returns:
            str: the value of `supply_fan_name` or None if not set
        """
        return self._data["Supply Fan Name"]

    @supply_fan_name.setter
    def supply_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_name`

        Args:
            value (str): value for IDD Field `supply_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_name`')

        self._data["Supply Fan Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.furnace_air_inlet_node_name))
        out.append(self._to_str(self.furnace_air_outlet_node_name))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.maximum_supply_air_temperature))
        out.append(self._to_str(self.supply_air_flow_rate))
        out.append(self._to_str(self.controlling_zone_or_thermostat_location))
        out.append(self._to_str(self.supply_fan_object_type))
        out.append(self._to_str(self.supply_fan_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        return ",".join(out)

class AirLoopHvacUnitaryFurnaceHeatCool(object):
    """ Corresponds to IDD object `AirLoopHVAC:Unitary:Furnace:HeatCool`
        Unitary system, heating and cooling with constant volume supply fan (continuous or
        cycling), direct expansion (DX) cooling coil, heating coil (gas, electric,
        hot water, or steam), and optional reheat coil for dehumidification control.
        Identical to AirLoopHVAC:UnitaryHeatCool.
    """
    internal_name = "AirLoopHVAC:Unitary:Furnace:HeatCool"
    field_count = 20

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:Unitary:Furnace:HeatCool`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Furnace Air Inlet Node Name"] = None
        self._data["Furnace Air Outlet Node Name"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Maximum Supply Air Temperature"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Controlling Zone or Thermostat Location"] = None
        self._data["Supply Fan Object Type"] = None
        self._data["Supply Fan Name"] = None
        self._data["Fan Placement"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Reheat Coil Object Type"] = None
        self._data["Reheat Coil Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.furnace_air_inlet_node_name = None
        else:
            self.furnace_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.furnace_air_outlet_node_name = None
        else:
            self.furnace_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature = None
        else:
            self.maximum_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controlling_zone_or_thermostat_location = None
        else:
            self.controlling_zone_or_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_object_type = None
        else:
            self.supply_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_name = None
        else:
            self.supply_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_object_type = None
        else:
            self.reheat_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_name = None
        else:
            self.reheat_coil_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        A schedule value greater than zero (usually 1 is used) indicates that the unit is
        available to operate as needed. A value less than or equal to zero (usually zero
        is used) denotes that the unit must be off.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def furnace_air_inlet_node_name(self):
        """Get furnace_air_inlet_node_name

        Returns:
            str: the value of `furnace_air_inlet_node_name` or None if not set
        """
        return self._data["Furnace Air Inlet Node Name"]

    @furnace_air_inlet_node_name.setter
    def furnace_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `furnace_air_inlet_node_name`

        Args:
            value (str): value for IDD Field `furnace_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `furnace_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `furnace_air_inlet_node_name`')

        self._data["Furnace Air Inlet Node Name"] = value

    @property
    def furnace_air_outlet_node_name(self):
        """Get furnace_air_outlet_node_name

        Returns:
            str: the value of `furnace_air_outlet_node_name` or None if not set
        """
        return self._data["Furnace Air Outlet Node Name"]

    @furnace_air_outlet_node_name.setter
    def furnace_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `furnace_air_outlet_node_name`

        Args:
            value (str): value for IDD Field `furnace_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `furnace_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `furnace_air_outlet_node_name`')

        self._data["Furnace Air Outlet Node Name"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        A fan operating mode schedule value of 0 indicates cycling fan mode (supply air
        fan cycles on and off in tandem with the cooling or heating coil).
        Any other schedule value indicates continuous fan mode (supply air fan operates
        continuously regardless of cooling or heating coil operation). Provide a schedule
        with non-zero values when high humidity control is specified.
        Leaving this schedule name blank will default to cycling fan mode for the
        entire simulation period.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def maximum_supply_air_temperature(self):
        """Get maximum_supply_air_temperature

        Returns:
            float: the value of `maximum_supply_air_temperature` or None if not set
        """
        return self._data["Maximum Supply Air Temperature"]

    @maximum_supply_air_temperature.setter
    def maximum_supply_air_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `maximum_supply_air_temperature`

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature`
                Unit: C
                Default value: 80.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature`'.format(value))

        self._data["Maximum Supply Air Temperature"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`
        Must be less than or equal to the fan's maximum flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`
        Must be less than or equal to the fan's maximum flow fate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"]

    @supply_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Must be less than or equal to the fan's maximum flow rate.
        Only used when fan operating mode is continuous (disregarded for cycling fan mode).
        This air flow rate is used when no heating or cooling is required (i.e., the DX coil
        compressor and heating coil are off). If this field is left blank or zero, the supply
        air flow rate from the previous on cycle (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def controlling_zone_or_thermostat_location(self):
        """Get controlling_zone_or_thermostat_location

        Returns:
            str: the value of `controlling_zone_or_thermostat_location` or None if not set
        """
        return self._data["Controlling Zone or Thermostat Location"]

    @controlling_zone_or_thermostat_location.setter
    def controlling_zone_or_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `controlling_zone_or_thermostat_location`

        Args:
            value (str): value for IDD Field `controlling_zone_or_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controlling_zone_or_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controlling_zone_or_thermostat_location`')

        self._data["Controlling Zone or Thermostat Location"] = value

    @property
    def supply_fan_object_type(self):
        """Get supply_fan_object_type

        Returns:
            str: the value of `supply_fan_object_type` or None if not set
        """
        return self._data["Supply Fan Object Type"]

    @supply_fan_object_type.setter
    def supply_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_fan_object_type`
        Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply
        air fan operating mode schedule values not equal to 0).

        Args:
            value (str): value for IDD Field `supply_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_object_type`'.format(value))

        self._data["Supply Fan Object Type"] = value

    @property
    def supply_fan_name(self):
        """Get supply_fan_name

        Returns:
            str: the value of `supply_fan_name` or None if not set
        """
        return self._data["Supply Fan Name"]

    @supply_fan_name.setter
    def supply_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_name`

        Args:
            value (str): value for IDD Field `supply_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_name`')

        self._data["Supply Fan Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Only works with DX cooling coil types

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("CoilSystem:Cooling:DX:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        Multimode = activate enhanced dehumidification mode
        as needed and meet sensible load.  Valid only with
        cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted.
        This control mode allows the heat exchanger to be turned
        on and off based on the zone dehumidification requirements.
        A ZoneControl:Humidistat object is also required.
        CoolReheat = cool beyond the dry bulb setpoint.
        as required to meet the humidity setpoint.  Valid with all
        cooling coil types. When a heat exchanger assisted cooling
        coil is used, the heat exchanger is locked on at all times.
        A ZoneControl:Humidistat object is also required.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - Multimode
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("Multimode")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def reheat_coil_object_type(self):
        """Get reheat_coil_object_type

        Returns:
            str: the value of `reheat_coil_object_type` or None if not set
        """
        return self._data["Reheat Coil Object Type"]

    @reheat_coil_object_type.setter
    def reheat_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `reheat_coil_object_type`
        Only required if dehumidification control type is "CoolReheat"
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `reheat_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Desuperheater
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Desuperheater")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reheat_coil_object_type`'.format(value))

        self._data["Reheat Coil Object Type"] = value

    @property
    def reheat_coil_name(self):
        """Get reheat_coil_name

        Returns:
            str: the value of `reheat_coil_name` or None if not set
        """
        return self._data["Reheat Coil Name"]

    @reheat_coil_name.setter
    def reheat_coil_name(self, value=None):
        """  Corresponds to IDD Field `reheat_coil_name`
        Only required if dehumidification control type is "CoolReheat"

        Args:
            value (str): value for IDD Field `reheat_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_name`')

        self._data["Reheat Coil Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.furnace_air_inlet_node_name))
        out.append(self._to_str(self.furnace_air_outlet_node_name))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.maximum_supply_air_temperature))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.controlling_zone_or_thermostat_location))
        out.append(self._to_str(self.supply_fan_object_type))
        out.append(self._to_str(self.supply_fan_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.reheat_coil_object_type))
        out.append(self._to_str(self.reheat_coil_name))
        return ",".join(out)

class AirLoopHvacUnitaryHeatOnly(object):
    """ Corresponds to IDD object `AirLoopHVAC:UnitaryHeatOnly`
        Unitary system, heating-only with constant volume supply fan (continuous or cycling)
        and heating coil (gas, electric, hot water, or steam). Identical to
        AirLoopHVAC:Unitary:Furnace:HeatOnly.
    """
    internal_name = "AirLoopHVAC:UnitaryHeatOnly"
    field_count = 13

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:UnitaryHeatOnly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Unitary System Air Inlet Node Name"] = None
        self._data["Unitary System Air Outlet Node Name"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Maximum Supply Air Temperature"] = None
        self._data["Supply Air Flow Rate"] = None
        self._data["Controlling Zone or Thermostat Location"] = None
        self._data["Supply Fan Object Type"] = None
        self._data["Supply Fan Name"] = None
        self._data["Fan Placement"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.unitary_system_air_inlet_node_name = None
        else:
            self.unitary_system_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.unitary_system_air_outlet_node_name = None
        else:
            self.unitary_system_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature = None
        else:
            self.maximum_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate = None
        else:
            self.supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controlling_zone_or_thermostat_location = None
        else:
            self.controlling_zone_or_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_object_type = None
        else:
            self.supply_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_name = None
        else:
            self.supply_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def unitary_system_air_inlet_node_name(self):
        """Get unitary_system_air_inlet_node_name

        Returns:
            str: the value of `unitary_system_air_inlet_node_name` or None if not set
        """
        return self._data["Unitary System Air Inlet Node Name"]

    @unitary_system_air_inlet_node_name.setter
    def unitary_system_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `unitary_system_air_inlet_node_name`

        Args:
            value (str): value for IDD Field `unitary_system_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `unitary_system_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `unitary_system_air_inlet_node_name`')

        self._data["Unitary System Air Inlet Node Name"] = value

    @property
    def unitary_system_air_outlet_node_name(self):
        """Get unitary_system_air_outlet_node_name

        Returns:
            str: the value of `unitary_system_air_outlet_node_name` or None if not set
        """
        return self._data["Unitary System Air Outlet Node Name"]

    @unitary_system_air_outlet_node_name.setter
    def unitary_system_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `unitary_system_air_outlet_node_name`

        Args:
            value (str): value for IDD Field `unitary_system_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `unitary_system_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `unitary_system_air_outlet_node_name`')

        self._data["Unitary System Air Outlet Node Name"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        A fan operating mode schedule value of 0 indicates cycling fan mode (supply air
        fan cycles on and off in tandem with the heating coil).
        Any other schedule value indicates continuous fan mode (supply air fan operates
        continuously regardless of heating coil operation).
        Leaving this schedule name blank will default to cycling fan mode for the
        entire simulation period.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def maximum_supply_air_temperature(self):
        """Get maximum_supply_air_temperature

        Returns:
            float: the value of `maximum_supply_air_temperature` or None if not set
        """
        return self._data["Maximum Supply Air Temperature"]

    @maximum_supply_air_temperature.setter
    def maximum_supply_air_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `maximum_supply_air_temperature`

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature`
                Unit: C
                Default value: 80.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature`'.format(value))

        self._data["Maximum Supply Air Temperature"] = value

    @property
    def supply_air_flow_rate(self):
        """Get supply_air_flow_rate

        Returns:
            float: the value of `supply_air_flow_rate` or None if not set
        """
        return self._data["Supply Air Flow Rate"]

    @supply_air_flow_rate.setter
    def supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate`
        This value should be > 0 and <= than the fan air flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate`')

        self._data["Supply Air Flow Rate"] = value

    @property
    def controlling_zone_or_thermostat_location(self):
        """Get controlling_zone_or_thermostat_location

        Returns:
            str: the value of `controlling_zone_or_thermostat_location` or None if not set
        """
        return self._data["Controlling Zone or Thermostat Location"]

    @controlling_zone_or_thermostat_location.setter
    def controlling_zone_or_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `controlling_zone_or_thermostat_location`

        Args:
            value (str): value for IDD Field `controlling_zone_or_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controlling_zone_or_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controlling_zone_or_thermostat_location`')

        self._data["Controlling Zone or Thermostat Location"] = value

    @property
    def supply_fan_object_type(self):
        """Get supply_fan_object_type

        Returns:
            str: the value of `supply_fan_object_type` or None if not set
        """
        return self._data["Supply Fan Object Type"]

    @supply_fan_object_type.setter
    def supply_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_fan_object_type`
        Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan
        operating mode schedule values are greater than 0).

        Args:
            value (str): value for IDD Field `supply_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_object_type`'.format(value))

        self._data["Supply Fan Object Type"] = value

    @property
    def supply_fan_name(self):
        """Get supply_fan_name

        Returns:
            str: the value of `supply_fan_name` or None if not set
        """
        return self._data["Supply Fan Name"]

    @supply_fan_name.setter
    def supply_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_name`

        Args:
            value (str): value for IDD Field `supply_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_name`')

        self._data["Supply Fan Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.unitary_system_air_inlet_node_name))
        out.append(self._to_str(self.unitary_system_air_outlet_node_name))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.maximum_supply_air_temperature))
        out.append(self._to_str(self.supply_air_flow_rate))
        out.append(self._to_str(self.controlling_zone_or_thermostat_location))
        out.append(self._to_str(self.supply_fan_object_type))
        out.append(self._to_str(self.supply_fan_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        return ",".join(out)

class AirLoopHvacUnitaryHeatCool(object):
    """ Corresponds to IDD object `AirLoopHVAC:UnitaryHeatCool`
        Unitary system, heating and cooling with constant volume supply fan (continuous or
        cycling), direct expansion (DX) cooling coil, heating coil (gas, electric,
        hot water, or steam), and optional reheat coil for dehumidification control.
        Identical to AirLoopHVAC:Unitary:Furnace:HeatCool.
    """
    internal_name = "AirLoopHVAC:UnitaryHeatCool"
    field_count = 20

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:UnitaryHeatCool`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Unitary System Air Inlet Node Name"] = None
        self._data["Unitary System Air Outlet Node Name"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Maximum Supply Air Temperature"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Controlling Zone or Thermostat Location"] = None
        self._data["Supply Fan Object Type"] = None
        self._data["Supply Fan Name"] = None
        self._data["Fan Placement"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Reheat Coil Object Type"] = None
        self._data["Reheat Coil Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.unitary_system_air_inlet_node_name = None
        else:
            self.unitary_system_air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.unitary_system_air_outlet_node_name = None
        else:
            self.unitary_system_air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature = None
        else:
            self.maximum_supply_air_temperature = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controlling_zone_or_thermostat_location = None
        else:
            self.controlling_zone_or_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_object_type = None
        else:
            self.supply_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_fan_name = None
        else:
            self.supply_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_object_type = None
        else:
            self.reheat_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reheat_coil_name = None
        else:
            self.reheat_coil_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def unitary_system_air_inlet_node_name(self):
        """Get unitary_system_air_inlet_node_name

        Returns:
            str: the value of `unitary_system_air_inlet_node_name` or None if not set
        """
        return self._data["Unitary System Air Inlet Node Name"]

    @unitary_system_air_inlet_node_name.setter
    def unitary_system_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `unitary_system_air_inlet_node_name`

        Args:
            value (str): value for IDD Field `unitary_system_air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `unitary_system_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `unitary_system_air_inlet_node_name`')

        self._data["Unitary System Air Inlet Node Name"] = value

    @property
    def unitary_system_air_outlet_node_name(self):
        """Get unitary_system_air_outlet_node_name

        Returns:
            str: the value of `unitary_system_air_outlet_node_name` or None if not set
        """
        return self._data["Unitary System Air Outlet Node Name"]

    @unitary_system_air_outlet_node_name.setter
    def unitary_system_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `unitary_system_air_outlet_node_name`

        Args:
            value (str): value for IDD Field `unitary_system_air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `unitary_system_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `unitary_system_air_outlet_node_name`')

        self._data["Unitary System Air Outlet Node Name"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        A fan operating mode schedule value of 0 indicates cycling fan mode (supply air
        fan cycles on and off in tandem with the cooling or heating coil).
        Any other schedule value indicates continuous fan mode (supply air fan operates
        continuously regardless of cooling or heating coil operation). Provide a schedule
        with non-zero values when high humidity control is specified.
        Leaving this schedule name blank will default to cycling fan mode for the
        entire simulation period.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def maximum_supply_air_temperature(self):
        """Get maximum_supply_air_temperature

        Returns:
            float: the value of `maximum_supply_air_temperature` or None if not set
        """
        return self._data["Maximum Supply Air Temperature"]

    @maximum_supply_air_temperature.setter
    def maximum_supply_air_temperature(self, value=80.0 ):
        """  Corresponds to IDD Field `maximum_supply_air_temperature`

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature`
                Unit: C
                Default value: 80.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature`'.format(value))

        self._data["Maximum Supply Air Temperature"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`
        Must be less than or equal to the fan's maximum flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`
        Must be less than or equal to the fan's maximum flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"]

    @supply_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Must be less than or equal to the fan's maximum flow rate.
        Only used when fan operating mode is continuous (disregarded for cycling fan mode).
        This air flow rate is used when no heating or cooling is required (i.e., the DX coil
        compressor and heating coil are off). If this field is left blank or zero, the supply
        air flow rate from the previous on cycle (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def controlling_zone_or_thermostat_location(self):
        """Get controlling_zone_or_thermostat_location

        Returns:
            str: the value of `controlling_zone_or_thermostat_location` or None if not set
        """
        return self._data["Controlling Zone or Thermostat Location"]

    @controlling_zone_or_thermostat_location.setter
    def controlling_zone_or_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `controlling_zone_or_thermostat_location`

        Args:
            value (str): value for IDD Field `controlling_zone_or_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controlling_zone_or_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controlling_zone_or_thermostat_location`')

        self._data["Controlling Zone or Thermostat Location"] = value

    @property
    def supply_fan_object_type(self):
        """Get supply_fan_object_type

        Returns:
            str: the value of `supply_fan_object_type` or None if not set
        """
        return self._data["Supply Fan Object Type"]

    @supply_fan_object_type.setter
    def supply_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_fan_object_type`
        Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply
        air fan operating mode schedule values not equal to 0).

        Args:
            value (str): value for IDD Field `supply_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_fan_object_type`'.format(value))

        self._data["Supply Fan Object Type"] = value

    @property
    def supply_fan_name(self):
        """Get supply_fan_name

        Returns:
            str: the value of `supply_fan_name` or None if not set
        """
        return self._data["Supply Fan Name"]

    @supply_fan_name.setter
    def supply_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_fan_name`

        Args:
            value (str): value for IDD Field `supply_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_fan_name`')

        self._data["Supply Fan Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Only works with DX cooling coil types or
        Coil:Cooling:DX:VariableSpeed.

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Cooling:DX:VariableSpeed
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("Coil:Cooling:DX:VariableSpeed")
            vals.add("CoilSystem:Cooling:DX:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        Multimode = activate enhanced dehumidification mode
        as needed and meet sensible load.  Valid only with
        cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted.
        This control mode allows the heat exchanger to be turned
        on and off based on the zone dehumidification requirements.
        A ZoneControl:Humidistat object is also required.
        CoolReheat = cool beyond the dry bulb setpoint.
        as required to meet the humidity setpoint.  Valid with all
        cooling coil types. When a heat exchanger assisted Cooling
        coil is used, the heat exchanger is locked on at all times.
        A ZoneControl:Humidistat object is also required.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - Multimode
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("Multimode")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def reheat_coil_object_type(self):
        """Get reheat_coil_object_type

        Returns:
            str: the value of `reheat_coil_object_type` or None if not set
        """
        return self._data["Reheat Coil Object Type"]

    @reheat_coil_object_type.setter
    def reheat_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `reheat_coil_object_type`
        Only required if dehumidification control type is "CoolReheat"
        works with gas, electric, desuperheating, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `reheat_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Desuperheater
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Desuperheater")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reheat_coil_object_type`'.format(value))

        self._data["Reheat Coil Object Type"] = value

    @property
    def reheat_coil_name(self):
        """Get reheat_coil_name

        Returns:
            str: the value of `reheat_coil_name` or None if not set
        """
        return self._data["Reheat Coil Name"]

    @reheat_coil_name.setter
    def reheat_coil_name(self, value=None):
        """  Corresponds to IDD Field `reheat_coil_name`
        Only required if dehumidification control type is "CoolReheat"

        Args:
            value (str): value for IDD Field `reheat_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reheat_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reheat_coil_name`')

        self._data["Reheat Coil Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.unitary_system_air_inlet_node_name))
        out.append(self._to_str(self.unitary_system_air_outlet_node_name))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.maximum_supply_air_temperature))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.controlling_zone_or_thermostat_location))
        out.append(self._to_str(self.supply_fan_object_type))
        out.append(self._to_str(self.supply_fan_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.reheat_coil_object_type))
        out.append(self._to_str(self.reheat_coil_name))
        return ",".join(out)

class AirLoopHvacUnitaryHeatPumpAirToAir(object):
    """ Corresponds to IDD object `AirLoopHVAC:UnitaryHeatPump:AirToAir`
        Unitary heat pump system, heating and cooling, single-speed with supply fan, direct
        expansion (DX) cooling coil, DX heating coil (air-to-air heat pump), and supplemental
        heating coil (gas, electric, hot water, or steam).
    """
    internal_name = "AirLoopHVAC:UnitaryHeatPump:AirToAir"
    field_count = 21

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:UnitaryHeatPump:AirToAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Supply Air Flow Rate During Heating Operation"] = None
        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Controlling Zone or Thermostat Location"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Supplemental Heating Coil Object Type"] = None
        self._data["Supplemental Heating Coil Name"] = None
        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = None
        self._data["Fan Placement"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Dehumidification Control Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_cooling_operation = None
        else:
            self.supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_during_heating_operation = None
        else:
            self.supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controlling_zone_or_thermostat_location = None
        else:
            self.controlling_zone_or_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_object_type = None
        else:
            self.supplemental_heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_name = None
        else:
            self.supplemental_heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature_from_supplemental_heater = None
        else:
            self.maximum_supply_air_temperature_from_supplemental_heater = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        A schedule value greater than zero (usually 1 is used) indicates that the unit is
        available to operate as needed. A value less than or equal to zero (usually zero
        is used) denotes that the unit must be off.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """Get supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_cooling_operation`
        Must be less than or equal to the fan's maximum flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_cooling_operation`')

        self._data["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """Get supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_during_heating_operation`
        Must be less than or equal to the fan's maximum flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate_during_heating_operation`')

        self._data["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"]

    @supply_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Must be less than or equal to the fans maximum flow rate.
        Only used when fan operating mode is continuous (disregarded for cycling fan mode).
        This air flow rate is used when no heating or cooling is required (i.e., the DX coil
        compressor and supplemental heating coil are off). If this field is left blank or zero,
        the supply air flow rate from the previous on cycle (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def controlling_zone_or_thermostat_location(self):
        """Get controlling_zone_or_thermostat_location

        Returns:
            str: the value of `controlling_zone_or_thermostat_location` or None if not set
        """
        return self._data["Controlling Zone or Thermostat Location"]

    @controlling_zone_or_thermostat_location.setter
    def controlling_zone_or_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `controlling_zone_or_thermostat_location`

        Args:
            value (str): value for IDD Field `controlling_zone_or_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controlling_zone_or_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controlling_zone_or_thermostat_location`')

        self._data["Controlling Zone or Thermostat Location"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan
        operating mode schedule values are greater than 0 or the fan operating mode
        schedule name field is left blank).

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Needs to match in the fan object

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        Only works with Coil:Heating:DX:SingleSpeed or
        Coil:Heating:DX:VariableSpeed

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:DX:SingleSpeed
                      - Coil:Heating:DX:VariableSpeed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:DX:SingleSpeed")
            vals.add("Coil:Heating:DX:VariableSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`
        Needs to match in the DX heating coil object

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Only works with Coil:Cooling:DX:SingleSpeed or
        CoilSystem:Cooling:DX:HeatExchangerAssisted or
        Coil:Cooling:DX:VariableSpeed

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Cooling:DX:VariableSpeed
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("Coil:Cooling:DX:VariableSpeed")
            vals.add("CoilSystem:Cooling:DX:HeatExchangerAssisted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`
        Needs to match in the DX cooling coil object

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def supplemental_heating_coil_object_type(self):
        """Get supplemental_heating_coil_object_type

        Returns:
            str: the value of `supplemental_heating_coil_object_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Object Type"]

    @supplemental_heating_coil_object_type.setter
    def supplemental_heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_object_type`
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_object_type`'.format(value))

        self._data["Supplemental Heating Coil Object Type"] = value

    @property
    def supplemental_heating_coil_name(self):
        """Get supplemental_heating_coil_name

        Returns:
            str: the value of `supplemental_heating_coil_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Name"]

    @supplemental_heating_coil_name.setter
    def supplemental_heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_name`
        Needs to match in the supplemental heating coil object

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_name`')

        self._data["Supplemental Heating Coil Name"] = value

    @property
    def maximum_supply_air_temperature_from_supplemental_heater(self):
        """Get maximum_supply_air_temperature_from_supplemental_heater

        Returns:
            float: the value of `maximum_supply_air_temperature_from_supplemental_heater` or None if not set
        """
        return self._data["Maximum Supply Air Temperature from Supplemental Heater"]

    @maximum_supply_air_temperature_from_supplemental_heater.setter
    def maximum_supply_air_temperature_from_supplemental_heater(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_temperature_from_supplemental_heater`

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature_from_supplemental_heater`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature_from_supplemental_heater`'.format(value))

        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self, value=21.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`

        Args:
            value (float): value for IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`
                Unit: C
                Default value: 21.0
                value <= 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`'.format(value))
            if value > 21.0:
                raise ValueError('value need to be smaller 21.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`')

        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        A fan operating mode schedule value of 0 indicates cycling fan mode (supply air
        fan cycles on and off in tandem with the cooling or heating coil).
        Any other schedule value indicates continuous fan mode (supply air fan operates
        continuously regardless of cooling or heating coil operation).
        Leaving this schedule name blank will default to cycling fan mode for the
        entire simulation period.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        Multimode = activate enhanced dehumidification mode
        as needed and meet sensible load.  Valid only with
        cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted.
        This control mode allows the heat exchanger to be turned
        on and off based on the zone dehumidification requirements.
        A ZoneControl:Humidistat object is also required.
        CoolReheat = cool beyond the dry bulb setpoint.
        as required to meet the humidity setpoint.  Valid with all
        cooling coil types. When a heat exchanger assisted Cooling
        coil is used, the heat exchanger is locked on at all times.
        A ZoneControl:Humidistat object is also required.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - Multimode
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("Multimode")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.controlling_zone_or_thermostat_location))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.supplemental_heating_coil_object_type))
        out.append(self._to_str(self.supplemental_heating_coil_name))
        out.append(self._to_str(self.maximum_supply_air_temperature_from_supplemental_heater))
        out.append(self._to_str(self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.dehumidification_control_type))
        return ",".join(out)

class AirLoopHvacUnitaryHeatPumpWaterToAir(object):
    """ Corresponds to IDD object `AirLoopHVAC:UnitaryHeatPump:WaterToAir`
        Unitary heat pump system, heating and cooling, single-speed with constant volume
        supply fan (continuous or cycling), direct expansion (DX) cooling coil, DX heating
        coil (water-to-air heat pump), and supplemental heating coil (gas, electric,
        hot water, or steam).
    """
    internal_name = "AirLoopHVAC:UnitaryHeatPump:WaterToAir"
    field_count = 27

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:UnitaryHeatPump:WaterToAir`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Supply Air Flow Rate"] = None
        self._data["Controlling Zone or Thermostat Location"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Heating Convergence"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Cooling Convergence"] = None
        self._data["Maximum Cycling Rate"] = None
        self._data["Heat Pump Time Constant"] = None
        self._data["Fraction of On-Cycle Power Use"] = None
        self._data["Heat Pump Fan Delay Time"] = None
        self._data["Supplemental Heating Coil Object Type"] = None
        self._data["Supplemental Heating Coil Name"] = None
        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = None
        self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"] = None
        self._data["Fan Placement"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Heat Pump Coil Water Flow Mode"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate = None
        else:
            self.supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controlling_zone_or_thermostat_location = None
        else:
            self.controlling_zone_or_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_convergence = None
        else:
            self.heating_convergence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_convergence = None
        else:
            self.cooling_convergence = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_cycling_rate = None
        else:
            self.maximum_cycling_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_time_constant = None
        else:
            self.heat_pump_time_constant = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fraction_of_oncycle_power_use = None
        else:
            self.fraction_of_oncycle_power_use = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_fan_delay_time = None
        else:
            self.heat_pump_fan_delay_time = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_object_type = None
        else:
            self.supplemental_heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_name = None
        else:
            self.supplemental_heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature_from_supplemental_heater = None
        else:
            self.maximum_supply_air_temperature_from_supplemental_heater = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_drybulb_temperature_sensor_node_name = None
        else:
            self.outdoor_drybulb_temperature_sensor_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fan_placement = None
        else:
            self.fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_pump_coil_water_flow_mode = None
        else:
            self.heat_pump_coil_water_flow_mode = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def supply_air_flow_rate(self):
        """Get supply_air_flow_rate

        Returns:
            float: the value of `supply_air_flow_rate` or None if not set
        """
        return self._data["Supply Air Flow Rate"]

    @supply_air_flow_rate.setter
    def supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate`
        This value should be > 0 and <= than the fan air flow rate.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `supply_air_flow_rate`')

        self._data["Supply Air Flow Rate"] = value

    @property
    def controlling_zone_or_thermostat_location(self):
        """Get controlling_zone_or_thermostat_location

        Returns:
            str: the value of `controlling_zone_or_thermostat_location` or None if not set
        """
        return self._data["Controlling Zone or Thermostat Location"]

    @controlling_zone_or_thermostat_location.setter
    def controlling_zone_or_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `controlling_zone_or_thermostat_location`

        Args:
            value (str): value for IDD Field `controlling_zone_or_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controlling_zone_or_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controlling_zone_or_thermostat_location`')

        self._data["Controlling Zone or Thermostat Location"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Only works with On/Off Fan

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Needs to match Fan:OnOff object

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:WaterToAirHeatPump:ParameterEstimation
                      - Coil:Heating:WaterToAirHeatPump:EquationFit
                      - Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")
            vals.add("Coil:Heating:WaterToAirHeatPump:EquationFit")
            vals.add("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`
        Needs to match in the water-to-air heatpump heating coil object

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def heating_convergence(self):
        """Get heating_convergence

        Returns:
            float: the value of `heating_convergence` or None if not set
        """
        return self._data["Heating Convergence"]

    @heating_convergence.setter
    def heating_convergence(self, value=0.001 ):
        """  Corresponds to IDD Field `heating_convergence`

        Args:
            value (float): value for IDD Field `heating_convergence`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_convergence`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_convergence`')

        self._data["Heating Convergence"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:WaterToAirHeatPump:ParameterEstimation
                      - Coil:Cooling:WaterToAirHeatPump:EquationFit
                      - Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")
            vals.add("Coil:Cooling:WaterToAirHeatPump:EquationFit")
            vals.add("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`
        Needs to match in the water-to-air heatpump cooling coil object

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def cooling_convergence(self):
        """Get cooling_convergence

        Returns:
            float: the value of `cooling_convergence` or None if not set
        """
        return self._data["Cooling Convergence"]

    @cooling_convergence.setter
    def cooling_convergence(self, value=0.001 ):
        """  Corresponds to IDD Field `cooling_convergence`

        Args:
            value (float): value for IDD Field `cooling_convergence`
                Default value: 0.001
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_convergence`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_convergence`')

        self._data["Cooling Convergence"] = value

    @property
    def maximum_cycling_rate(self):
        """Get maximum_cycling_rate

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set
        """
        return self._data["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=2.5 ):
        """  Corresponds to IDD Field `maximum_cycling_rate`
        The maximum on-off cycling rate for the compressor
        Suggested value is 2.5 for a typical heat pump

        Args:
            value (float): value for IDD Field `maximum_cycling_rate`
                Unit: cycles/hr
                Default value: 2.5
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `maximum_cycling_rate`')

        self._data["Maximum Cycling Rate"] = value

    @property
    def heat_pump_time_constant(self):
        """Get heat_pump_time_constant

        Returns:
            float: the value of `heat_pump_time_constant` or None if not set
        """
        return self._data["Heat Pump Time Constant"]

    @heat_pump_time_constant.setter
    def heat_pump_time_constant(self, value=60.0 ):
        """  Corresponds to IDD Field `heat_pump_time_constant`
        Time constant for the cooling coil's capacity to reach steady state after startup
        Suggested value is 60 for a typical heat pump

        Args:
            value (float): value for IDD Field `heat_pump_time_constant`
                Unit: s
                Default value: 60.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `heat_pump_time_constant`')

        self._data["Heat Pump Time Constant"] = value

    @property
    def fraction_of_oncycle_power_use(self):
        """Get fraction_of_oncycle_power_use

        Returns:
            float: the value of `fraction_of_oncycle_power_use` or None if not set
        """
        return self._data["Fraction of On-Cycle Power Use"]

    @fraction_of_oncycle_power_use.setter
    def fraction_of_oncycle_power_use(self, value=0.01 ):
        """  Corresponds to IDD Field `fraction_of_oncycle_power_use`
        The fraction of on-cycle power use to adjust the part load fraction based on
        the off-cycle power consumption due to crankcase heaters, controls, fans, and etc.
        Suggested value is 0.01 for a typical heat pump

        Args:
            value (float): value for IDD Field `fraction_of_oncycle_power_use`
                Default value: 0.01
                value >= 0.0
                value <= 0.05
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_oncycle_power_use`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_oncycle_power_use`')
            if value > 0.05:
                raise ValueError('value need to be smaller 0.05 '
                                 'for field `fraction_of_oncycle_power_use`')

        self._data["Fraction of On-Cycle Power Use"] = value

    @property
    def heat_pump_fan_delay_time(self):
        """Get heat_pump_fan_delay_time

        Returns:
            float: the value of `heat_pump_fan_delay_time` or None if not set
        """
        return self._data["Heat Pump Fan Delay Time"]

    @heat_pump_fan_delay_time.setter
    def heat_pump_fan_delay_time(self, value=60.0 ):
        """  Corresponds to IDD Field `heat_pump_fan_delay_time`
        Programmed time delay for heat pump fan to shut off after compressor cycle off.
        Only required when fan operating mode is cycling
        Enter 0 when fan operating mode is continuous

        Args:
            value (float): value for IDD Field `heat_pump_fan_delay_time`
                Unit: s
                Default value: 60.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_pump_fan_delay_time`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_pump_fan_delay_time`')

        self._data["Heat Pump Fan Delay Time"] = value

    @property
    def supplemental_heating_coil_object_type(self):
        """Get supplemental_heating_coil_object_type

        Returns:
            str: the value of `supplemental_heating_coil_object_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Object Type"]

    @supplemental_heating_coil_object_type.setter
    def supplemental_heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_object_type`
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_object_type`'.format(value))

        self._data["Supplemental Heating Coil Object Type"] = value

    @property
    def supplemental_heating_coil_name(self):
        """Get supplemental_heating_coil_name

        Returns:
            str: the value of `supplemental_heating_coil_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Name"]

    @supplemental_heating_coil_name.setter
    def supplemental_heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_name`
        Needs to match in the supplemental heating coil object

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_name`')

        self._data["Supplemental Heating Coil Name"] = value

    @property
    def maximum_supply_air_temperature_from_supplemental_heater(self):
        """Get maximum_supply_air_temperature_from_supplemental_heater

        Returns:
            float: the value of `maximum_supply_air_temperature_from_supplemental_heater` or None if not set
        """
        return self._data["Maximum Supply Air Temperature from Supplemental Heater"]

    @maximum_supply_air_temperature_from_supplemental_heater.setter
    def maximum_supply_air_temperature_from_supplemental_heater(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_temperature_from_supplemental_heater`

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature_from_supplemental_heater`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature_from_supplemental_heater`'.format(value))

        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self, value=21.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`

        Args:
            value (float): value for IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`
                Unit: C
                Default value: 21.0
                value <= 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`'.format(value))
            if value > 21.0:
                raise ValueError('value need to be smaller 21.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`')

        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = value

    @property
    def outdoor_drybulb_temperature_sensor_node_name(self):
        """Get outdoor_drybulb_temperature_sensor_node_name

        Returns:
            str: the value of `outdoor_drybulb_temperature_sensor_node_name` or None if not set
        """
        return self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"]

    @outdoor_drybulb_temperature_sensor_node_name.setter
    def outdoor_drybulb_temperature_sensor_node_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_drybulb_temperature_sensor_node_name`

        Args:
            value (str): value for IDD Field `outdoor_drybulb_temperature_sensor_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_drybulb_temperature_sensor_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_drybulb_temperature_sensor_node_name`')

        self._data["Outdoor Dry-Bulb Temperature Sensor Node Name"] = value

    @property
    def fan_placement(self):
        """Get fan_placement

        Returns:
            str: the value of `fan_placement` or None if not set
        """
        return self._data["Fan Placement"]

    @fan_placement.setter
    def fan_placement(self, value="BlowThrough"):
        """  Corresponds to IDD Field `fan_placement`

        Args:
            value (str): value for IDD Field `fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: BlowThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fan_placement`'.format(value))

        self._data["Fan Placement"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule that controls fan operation. Schedule values of 0 denote
        cycling fan operation (fan cycles with cooling or heating coil). Schedule values greater
        than 0 denote constant fan operation (fan runs continually regardless of coil operation).
        The fan operating mode defaults to cycling fan operation if this field is left blank.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry bulb setpoint.
        as required to meet the humidity setpoint.  Valid only with
        Coil:Cooling:WaterToAirHeatPump:EquationFit or
        Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @property
    def heat_pump_coil_water_flow_mode(self):
        """Get heat_pump_coil_water_flow_mode

        Returns:
            str: the value of `heat_pump_coil_water_flow_mode` or None if not set
        """
        return self._data["Heat Pump Coil Water Flow Mode"]

    @heat_pump_coil_water_flow_mode.setter
    def heat_pump_coil_water_flow_mode(self, value="Cycling"):
        """  Corresponds to IDD Field `heat_pump_coil_water_flow_mode`
        used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit
        Constant results in 100% water flow regardless of compressor PLR
        Cycling results in water flow that matches compressor PLR
        ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load

        Args:
            value (str): value for IDD Field `heat_pump_coil_water_flow_mode`
                Accepted values are:
                      - Constant
                      - Cycling
                      - ConstantOnDemand
                Default value: Cycling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_pump_coil_water_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_pump_coil_water_flow_mode`')
            vals = set()
            vals.add("Constant")
            vals.add("Cycling")
            vals.add("ConstantOnDemand")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heat_pump_coil_water_flow_mode`'.format(value))

        self._data["Heat Pump Coil Water Flow Mode"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.supply_air_flow_rate))
        out.append(self._to_str(self.controlling_zone_or_thermostat_location))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.heating_convergence))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.cooling_convergence))
        out.append(self._to_str(self.maximum_cycling_rate))
        out.append(self._to_str(self.heat_pump_time_constant))
        out.append(self._to_str(self.fraction_of_oncycle_power_use))
        out.append(self._to_str(self.heat_pump_fan_delay_time))
        out.append(self._to_str(self.supplemental_heating_coil_object_type))
        out.append(self._to_str(self.supplemental_heating_coil_name))
        out.append(self._to_str(self.maximum_supply_air_temperature_from_supplemental_heater))
        out.append(self._to_str(self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation))
        out.append(self._to_str(self.outdoor_drybulb_temperature_sensor_node_name))
        out.append(self._to_str(self.fan_placement))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.dehumidification_control_type))
        out.append(self._to_str(self.heat_pump_coil_water_flow_mode))
        return ",".join(out)

class AirLoopHvacUnitaryHeatCoolVavchangeoverBypass(object):
    """ Corresponds to IDD object `AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass`
        Unitary system, heating and cooling with constant volume supply fan (continuous or
        cycling), direct expansion (DX) cooling coil, heating coil (gas, electric,
        hot water, steam, or DX air-to-air heat pump) and bypass damper for variable volume
        flow to terminal units. Used with AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat
        or AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat.
    """
    internal_name = "AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass"
    field_count = 27

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["System Air Flow Rate During Cooling Operation"] = None
        self._data["System Air Flow Rate During Heating Operation"] = None
        self._data["System Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Outdoor Air Flow Rate During Cooling Operation"] = None
        self._data["Outdoor Air Flow Rate During Heating Operation"] = None
        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Outdoor Air Flow Rate Multiplier Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Bypass Duct Mixer Node Name"] = None
        self._data["Bypass Duct Splitter Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Outdoor Air Mixer Object Type"] = None
        self._data["Outdoor Air Mixer Name"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Supply Air Fan Placement"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Priority Control Mode"] = None
        self._data["Minimum Outlet Air Temperature During Cooling Operation"] = None
        self._data["Maximum Outlet Air Temperature During Heating Operation"] = None
        self._data["Dehumidification Control Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_air_flow_rate_during_cooling_operation = None
        else:
            self.system_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_air_flow_rate_during_heating_operation = None
        else:
            self.system_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.system_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.system_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_cooling_operation = None
        else:
            self.outdoor_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_during_heating_operation = None
        else:
            self.outdoor_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_flow_rate_multiplier_schedule_name = None
        else:
            self.outdoor_air_flow_rate_multiplier_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.bypass_duct_mixer_node_name = None
        else:
            self.bypass_duct_mixer_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.bypass_duct_splitter_node_name = None
        else:
            self.bypass_duct_splitter_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_object_type = None
        else:
            self.outdoor_air_mixer_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_mixer_name = None
        else:
            self.outdoor_air_mixer_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_placement = None
        else:
            self.supply_air_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.priority_control_mode = None
        else:
            self.priority_control_mode = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outlet_air_temperature_during_cooling_operation = None
        else:
            self.minimum_outlet_air_temperature_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outlet_air_temperature_during_heating_operation = None
        else:
            self.maximum_outlet_air_temperature_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Enter a unique name for this unitary system.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        Enter the availability schedule name. Schedule values of zero denote system
        is Off. Non-zero schedule values denote system is available to operate.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def system_air_flow_rate_during_cooling_operation(self):
        """Get system_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `system_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["System Air Flow Rate During Cooling Operation"]

    @system_air_flow_rate_during_cooling_operation.setter
    def system_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `system_air_flow_rate_during_cooling_operation`
        Enter the system air flow rate during cooling
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `system_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `system_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `system_air_flow_rate_during_cooling_operation`')

        self._data["System Air Flow Rate During Cooling Operation"] = value

    @property
    def system_air_flow_rate_during_heating_operation(self):
        """Get system_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `system_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["System Air Flow Rate During Heating Operation"]

    @system_air_flow_rate_during_heating_operation.setter
    def system_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `system_air_flow_rate_during_heating_operation`
        Enter the system air flow rate during heating
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `system_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `system_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `system_air_flow_rate_during_heating_operation`')

        self._data["System Air Flow Rate During Heating Operation"] = value

    @property
    def system_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get system_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `system_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["System Air Flow Rate When No Cooling or Heating is Needed"]

    @system_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def system_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `system_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Only used when the supply air fan operating mode is continuous (see field
        Supply air fan operating mode schedule name). This system air flow rate
        is used when no heating or cooling is required and the coils are off.
        If this field is left blank or zero, the system air flow rate from the
        previous on cycle (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `system_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `system_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `system_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["System Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def outdoor_air_flow_rate_during_cooling_operation(self):
        """Get outdoor_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Cooling Operation"]

    @outdoor_air_flow_rate_during_cooling_operation.setter
    def outdoor_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_cooling_operation`
        Enter the outdoor air flow rate during
        cooling operation or specify autosize.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_cooling_operation`')

        self._data["Outdoor Air Flow Rate During Cooling Operation"] = value

    @property
    def outdoor_air_flow_rate_during_heating_operation(self):
        """Get outdoor_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `outdoor_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Outdoor Air Flow Rate During Heating Operation"]

    @outdoor_air_flow_rate_during_heating_operation.setter
    def outdoor_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_during_heating_operation`
        Enter the outdoor air flow rate during
        heating operation or specify autosize.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_during_heating_operation`')

        self._data["Outdoor Air Flow Rate During Heating Operation"] = value

    @property
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"]

    @outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Only used when the supply air fan operating mode is continuous (see field
        Supply air fan operating mode schedule name). This outdoor air flow rate
        is used when no heating or cooling is required and the coils are off.
        If this field is left blank or zero, the outdoor air flow rate from the previous on cycle
        (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def outdoor_air_flow_rate_multiplier_schedule_name(self):
        """Get outdoor_air_flow_rate_multiplier_schedule_name

        Returns:
            str: the value of `outdoor_air_flow_rate_multiplier_schedule_name` or None if not set
        """
        return self._data["Outdoor Air Flow Rate Multiplier Schedule Name"]

    @outdoor_air_flow_rate_multiplier_schedule_name.setter
    def outdoor_air_flow_rate_multiplier_schedule_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_flow_rate_multiplier_schedule_name`
        Enter the name of a schedule that contains multipliers for the outdoor air
        flow rates. Schedule values must be from 0 to 1.
        If field is left blank, model assumes multiplier is 1 for the entire simulation period.

        Args:
            value (str): value for IDD Field `outdoor_air_flow_rate_multiplier_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_flow_rate_multiplier_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_flow_rate_multiplier_schedule_name`')

        self._data["Outdoor Air Flow Rate Multiplier Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`
        Enter the name of the unitary system's air inlet node.

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def bypass_duct_mixer_node_name(self):
        """Get bypass_duct_mixer_node_name

        Returns:
            str: the value of `bypass_duct_mixer_node_name` or None if not set
        """
        return self._data["Bypass Duct Mixer Node Name"]

    @bypass_duct_mixer_node_name.setter
    def bypass_duct_mixer_node_name(self, value=None):
        """  Corresponds to IDD Field `bypass_duct_mixer_node_name`
        Enter the name of the bypass duct mixer node. This name should be the name
        of the return air node for the outdoor air mixer associated with this system.
        This node name must be different from the air inlet node name.

        Args:
            value (str): value for IDD Field `bypass_duct_mixer_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `bypass_duct_mixer_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `bypass_duct_mixer_node_name`')

        self._data["Bypass Duct Mixer Node Name"] = value

    @property
    def bypass_duct_splitter_node_name(self):
        """Get bypass_duct_splitter_node_name

        Returns:
            str: the value of `bypass_duct_splitter_node_name` or None if not set
        """
        return self._data["Bypass Duct Splitter Node Name"]

    @bypass_duct_splitter_node_name.setter
    def bypass_duct_splitter_node_name(self, value=None):
        """  Corresponds to IDD Field `bypass_duct_splitter_node_name`
        Enter the name of the bypass duct splitter node.
        This splitter air node is the outlet node of the last component in this unitary
        system. For blow through fan placement, the splitter air node is the outlet
        node of the heating coil. For draw through fan placement, the splitter node
        is the outlet node of the supply air fan.

        Args:
            value (str): value for IDD Field `bypass_duct_splitter_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `bypass_duct_splitter_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `bypass_duct_splitter_node_name`')

        self._data["Bypass Duct Splitter Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`
        Enter the name of the unitary system's air outlet node.

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def outdoor_air_mixer_object_type(self):
        """Get outdoor_air_mixer_object_type

        Returns:
            str: the value of `outdoor_air_mixer_object_type` or None if not set
        """
        return self._data["Outdoor Air Mixer Object Type"]

    @outdoor_air_mixer_object_type.setter
    def outdoor_air_mixer_object_type(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_object_type`
        currently only one type OutdoorAir:Mixer object is available.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_object_type`
                Accepted values are:
                      - OutdoorAir:Mixer
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_object_type`')
            vals = set()
            vals.add("OutdoorAir:Mixer")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `outdoor_air_mixer_object_type`'.format(value))

        self._data["Outdoor Air Mixer Object Type"] = value

    @property
    def outdoor_air_mixer_name(self):
        """Get outdoor_air_mixer_name

        Returns:
            str: the value of `outdoor_air_mixer_name` or None if not set
        """
        return self._data["Outdoor Air Mixer Name"]

    @outdoor_air_mixer_name.setter
    def outdoor_air_mixer_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_mixer_name`
        Enter the name of the outdoor air mixer used with this unitary system.

        Args:
            value (str): value for IDD Field `outdoor_air_mixer_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_mixer_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_mixer_name`')

        self._data["Outdoor Air Mixer Name"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Specify the type of supply air fan used in this unitary system.

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Enter the name of the supply air fan used in this unitary system.

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def supply_air_fan_placement(self):
        """Get supply_air_fan_placement

        Returns:
            str: the value of `supply_air_fan_placement` or None if not set
        """
        return self._data["Supply Air Fan Placement"]

    @supply_air_fan_placement.setter
    def supply_air_fan_placement(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_placement`
        Specify supply air fan placement as either blow through or draw through.
        BlowThrough means the supply air fan is located before the cooling
        coil. DrawThrough means the supply air fan is located after the heating coil.

        Args:
            value (str): value for IDD Field `supply_air_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_placement`'.format(value))

        self._data["Supply Air Fan Placement"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule to control the supply air fan. Schedule Name values of zero
        mean that the supply air fan will cycle off if there is no cooling or heating load
        in any of the zones being served by this system. Non-zero schedule values mean
        that the supply air fan will operate continuously even if there is no cooling or
        heating load in any of the zones being served. If this field is left blank,
        the supply air fan will operate continuously for the entire simulation period.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Specify the type of cooling coil used in this unitary system.

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                      - Coil:Cooling:DX:TwoStageWithHumidityControlMode
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("CoilSystem:Cooling:DX:HeatExchangerAssisted")
            vals.add("Coil:Cooling:DX:TwoStageWithHumidityControlMode")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`
        Enter the name of the cooling coil used in this unitary system.

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        works with DX, gas, electric, hot water and steam heating coils
        Specify the type of heating coil used in this unitary system.

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:DX:SingleSpeed
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:DX:SingleSpeed")
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`
        Enter the name of the heating coil used in this unitary system.

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def priority_control_mode(self):
        """Get priority_control_mode

        Returns:
            str: the value of `priority_control_mode` or None if not set
        """
        return self._data["Priority Control Mode"]

    @priority_control_mode.setter
    def priority_control_mode(self, value="ZonePriority"):
        """  Corresponds to IDD Field `priority_control_mode`
        CoolingPriority = system provides cooling if any zone requires cooling.
        HeatingPriority = system provides heating if any zone requires heating.
        ZonePriority = system controlled based on the total number of zones
        requiring cooling or heating (highest number of zones
        in cooling or heating determines the system's operating mode).

        Args:
            value (str): value for IDD Field `priority_control_mode`
                Accepted values are:
                      - CoolingPriority
                      - HeatingPriority
                      - ZonePriority
                Default value: ZonePriority
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `priority_control_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `priority_control_mode`')
            vals = set()
            vals.add("CoolingPriority")
            vals.add("HeatingPriority")
            vals.add("ZonePriority")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `priority_control_mode`'.format(value))

        self._data["Priority Control Mode"] = value

    @property
    def minimum_outlet_air_temperature_during_cooling_operation(self):
        """Get minimum_outlet_air_temperature_during_cooling_operation

        Returns:
            float: the value of `minimum_outlet_air_temperature_during_cooling_operation` or None if not set
        """
        return self._data["Minimum Outlet Air Temperature During Cooling Operation"]

    @minimum_outlet_air_temperature_during_cooling_operation.setter
    def minimum_outlet_air_temperature_during_cooling_operation(self, value=8.0 ):
        """  Corresponds to IDD Field `minimum_outlet_air_temperature_during_cooling_operation`
        Specify the minimum outlet air temperature allowed for this unitary system
        during cooling operation. This value should be less than the maximum outlet
        air temperature during heating operation.

        Args:
            value (float): value for IDD Field `minimum_outlet_air_temperature_during_cooling_operation`
                Unit: C
                Default value: 8.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outlet_air_temperature_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_outlet_air_temperature_during_cooling_operation`')

        self._data["Minimum Outlet Air Temperature During Cooling Operation"] = value

    @property
    def maximum_outlet_air_temperature_during_heating_operation(self):
        """Get maximum_outlet_air_temperature_during_heating_operation

        Returns:
            float: the value of `maximum_outlet_air_temperature_during_heating_operation` or None if not set
        """
        return self._data["Maximum Outlet Air Temperature During Heating Operation"]

    @maximum_outlet_air_temperature_during_heating_operation.setter
    def maximum_outlet_air_temperature_during_heating_operation(self, value=50.0 ):
        """  Corresponds to IDD Field `maximum_outlet_air_temperature_during_heating_operation`
        Specify the maximum outlet air temperature allowed for this unitary system
        during heating operation. This value should be greater than the minimum outlet
        air temperature during cooling operation.

        Args:
            value (float): value for IDD Field `maximum_outlet_air_temperature_during_heating_operation`
                Unit: C
                Default value: 50.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outlet_air_temperature_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_outlet_air_temperature_during_heating_operation`')

        self._data["Maximum Outlet Air Temperature During Heating Operation"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `dehumidification_control_type`
        None = meet sensible load only.
        Multimode = activate enhanced dehumidification mode
        as needed and meet sensible load.  Valid only with
        Coil:Cooling:DX:TwoStageWithHumidityControlMode.
        CoolReheat = cool beyond the Dry-Bulb temperature setpoint
        as required to meet the humidity setpoint.  Valid only with
        Coil:Cooling:DX:TwoStageWithHumidityControlMode.
        For all dehumidification controls, the max humidity setpoint
        on this unitary system's air outlet node is used.
        This must be set using ZoneControl:Humidistat and
        SetpointManager:SingleZone:Humidity:Maximum,
        SetpointManager:MultiZone:Humidity:Maximum or
        SetpointManager:MultiZone:MaximumHumidity:Average objects.

        Args:
            value (str): value for IDD Field `dehumidification_control_type`
                Accepted values are:
                      - None
                      - Multimode
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            vals = set()
            vals.add("None")
            vals.add("Multimode")
            vals.add("CoolReheat")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `dehumidification_control_type`'.format(value))

        self._data["Dehumidification Control Type"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.system_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.system_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.system_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.outdoor_air_flow_rate_multiplier_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.bypass_duct_mixer_node_name))
        out.append(self._to_str(self.bypass_duct_splitter_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.outdoor_air_mixer_object_type))
        out.append(self._to_str(self.outdoor_air_mixer_name))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.supply_air_fan_placement))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.priority_control_mode))
        out.append(self._to_str(self.minimum_outlet_air_temperature_during_cooling_operation))
        out.append(self._to_str(self.maximum_outlet_air_temperature_during_heating_operation))
        out.append(self._to_str(self.dehumidification_control_type))
        return ",".join(out)

class AirLoopHvacUnitaryHeatPumpAirToAirMultiSpeed(object):
    """ Corresponds to IDD object `AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed`
        Unitary system, heating and cooling, multi-speed with constant volume supply fan
        (continuous or cycling), direct expansion (DX) cooling coil, heating coil
        (DX air-to-air heat pump, gas, electric, hot water, or steam), and supplemental
        heating coil (gas, electric, hot water, or steam).
    """
    internal_name = "AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed"
    field_count = 35

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Controlling Zone or Thermostat Location"] = None
        self._data["Supply Air Fan Object Type"] = None
        self._data["Supply Air Fan Name"] = None
        self._data["Supply Air Fan Placement"] = None
        self._data["Supply Air Fan Operating Mode Schedule Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Supplemental Heating Coil Object Type"] = None
        self._data["Supplemental Heating Coil Name"] = None
        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = None
        self._data["Auxiliary On-Cycle Electric Power"] = None
        self._data["Auxiliary Off-Cycle Electric Power"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Maximum Temperature for Heat Recovery"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = None
        self._data["Number of Speeds for Heating"] = None
        self._data["Number of Speeds for Cooling"] = None
        self._data["Speed 1 Supply Air Flow Rate During Heating Operation"] = None
        self._data["Speed 2 Supply Air Flow Rate During Heating Operation"] = None
        self._data["Speed 3 Supply Air Flow Rate During Heating Operation"] = None
        self._data["Speed 4 Supply Air Flow Rate During Heating Operation"] = None
        self._data["Speed 1 Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Speed 2 Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Speed 3 Supply Air Flow Rate During Cooling Operation"] = None
        self._data["Speed 4 Supply Air Flow Rate During Cooling Operation"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controlling_zone_or_thermostat_location = None
        else:
            self.controlling_zone_or_thermostat_location = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_object_type = None
        else:
            self.supply_air_fan_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_name = None
        else:
            self.supply_air_fan_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_placement = None
        else:
            self.supply_air_fan_placement = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_fan_operating_mode_schedule_name = None
        else:
            self.supply_air_fan_operating_mode_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = None
        else:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_object_type = None
        else:
            self.supplemental_heating_coil_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supplemental_heating_coil_name = None
        else:
            self.supplemental_heating_coil_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_supply_air_temperature_from_supplemental_heater = None
        else:
            self.maximum_supply_air_temperature_from_supplemental_heater = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.auxiliary_oncycle_electric_power = None
        else:
            self.auxiliary_oncycle_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.auxiliary_offcycle_electric_power = None
        else:
            self.auxiliary_offcycle_electric_power = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.maximum_temperature_for_heat_recovery = None
        else:
            self.maximum_temperature_for_heat_recovery = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = None
        else:
            self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_speeds_for_heating = None
        else:
            self.number_of_speeds_for_heating = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_speeds_for_cooling = None
        else:
            self.number_of_speeds_for_cooling = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.speed_1_supply_air_flow_rate_during_heating_operation = None
        else:
            self.speed_1_supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.speed_2_supply_air_flow_rate_during_heating_operation = None
        else:
            self.speed_2_supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.speed_3_supply_air_flow_rate_during_heating_operation = None
        else:
            self.speed_3_supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.speed_4_supply_air_flow_rate_during_heating_operation = None
        else:
            self.speed_4_supply_air_flow_rate_during_heating_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.speed_1_supply_air_flow_rate_during_cooling_operation = None
        else:
            self.speed_1_supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.speed_2_supply_air_flow_rate_during_cooling_operation = None
        else:
            self.speed_2_supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.speed_3_supply_air_flow_rate_during_cooling_operation = None
        else:
            self.speed_3_supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.speed_4_supply_air_flow_rate_during_cooling_operation = None
        else:
            self.speed_4_supply_air_flow_rate_during_cooling_operation = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `availability_schedule_name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `availability_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')

        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_inlet_node_name`

        Args:
            value (str): value for IDD Field `air_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')

        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `air_outlet_node_name`

        Args:
            value (str): value for IDD Field `air_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')

        self._data["Air Outlet Node Name"] = value

    @property
    def controlling_zone_or_thermostat_location(self):
        """Get controlling_zone_or_thermostat_location

        Returns:
            str: the value of `controlling_zone_or_thermostat_location` or None if not set
        """
        return self._data["Controlling Zone or Thermostat Location"]

    @controlling_zone_or_thermostat_location.setter
    def controlling_zone_or_thermostat_location(self, value=None):
        """  Corresponds to IDD Field `controlling_zone_or_thermostat_location`

        Args:
            value (str): value for IDD Field `controlling_zone_or_thermostat_location`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controlling_zone_or_thermostat_location`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controlling_zone_or_thermostat_location`')

        self._data["Controlling Zone or Thermostat Location"] = value

    @property
    def supply_air_fan_object_type(self):
        """Get supply_air_fan_object_type

        Returns:
            str: the value of `supply_air_fan_object_type` or None if not set
        """
        return self._data["Supply Air Fan Object Type"]

    @supply_air_fan_object_type.setter
    def supply_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_object_type`
        Select the type of supply air fan used in this unitary system.

        Args:
            value (str): value for IDD Field `supply_air_fan_object_type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_object_type`')
            vals = set()
            vals.add("Fan:OnOff")
            vals.add("Fan:ConstantVolume")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_object_type`'.format(value))

        self._data["Supply Air Fan Object Type"] = value

    @property
    def supply_air_fan_name(self):
        """Get supply_air_fan_name

        Returns:
            str: the value of `supply_air_fan_name` or None if not set
        """
        return self._data["Supply Air Fan Name"]

    @supply_air_fan_name.setter
    def supply_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_name`
        Enter the name of the supply air fan used in this unitary system.

        Args:
            value (str): value for IDD Field `supply_air_fan_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_name`')

        self._data["Supply Air Fan Name"] = value

    @property
    def supply_air_fan_placement(self):
        """Get supply_air_fan_placement

        Returns:
            str: the value of `supply_air_fan_placement` or None if not set
        """
        return self._data["Supply Air Fan Placement"]

    @supply_air_fan_placement.setter
    def supply_air_fan_placement(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_placement`
        Select supply air fan placement as either BlowThrough or DrawThrough.
        BlowThrough means the supply air fan is located before the cooling
        coil. DrawThrough means the supply air fan is located after the heating coil
        but before the optional supplemental heating coil.

        Args:
            value (str): value for IDD Field `supply_air_fan_placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_placement`')
            vals = set()
            vals.add("BlowThrough")
            vals.add("DrawThrough")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supply_air_fan_placement`'.format(value))

        self._data["Supply Air Fan Placement"] = value

    @property
    def supply_air_fan_operating_mode_schedule_name(self):
        """Get supply_air_fan_operating_mode_schedule_name

        Returns:
            str: the value of `supply_air_fan_operating_mode_schedule_name` or None if not set
        """
        return self._data["Supply Air Fan Operating Mode Schedule Name"]

    @supply_air_fan_operating_mode_schedule_name.setter
    def supply_air_fan_operating_mode_schedule_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_fan_operating_mode_schedule_name`
        Enter the name of a schedule to control the supply air fan. Schedule values of zero
        mean that the supply air fan will cycle off if there is no cooling or heating load
        in the control zone. Non-zero schedule values mean that the supply air fan
        will operate continuously even if there is no cooling or heating load
        in the control zone. If this field is left blank, the supply air fan will
        operate continuously for the entire simulation period.

        Args:
            value (str): value for IDD Field `supply_air_fan_operating_mode_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_fan_operating_mode_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_fan_operating_mode_schedule_name`')

        self._data["Supply Air Fan Operating Mode Schedule Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `heating_coil_object_type`
        Multi Speed DX, Electric, Gas, and Single speed Water and Steam coils

        Args:
            value (str): value for IDD Field `heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:DX:MultiSpeed
                      - Coil:Heating:Electric:MultiStage
                      - Coil:Heating:Gas:MultiStage
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:DX:MultiSpeed")
            vals.add("Coil:Heating:Electric:MultiStage")
            vals.add("Coil:Heating:Gas:MultiStage")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `heating_coil_object_type`'.format(value))

        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `heating_coil_name`

        Args:
            value (str): value for IDD Field `heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')

        self._data["Heating Coil Name"] = value

    @property
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self):
        """Get minimum_outdoor_drybulb_temperature_for_compressor_operation

        Returns:
            float: the value of `minimum_outdoor_drybulb_temperature_for_compressor_operation` or None if not set
        """
        return self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"]

    @minimum_outdoor_drybulb_temperature_for_compressor_operation.setter
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self, value=-8.0 ):
        """  Corresponds to IDD Field `minimum_outdoor_drybulb_temperature_for_compressor_operation`
        Needs to match the corresponding minimum outdoor temperature defined
        in the DX heating coil object.

        Args:
            value (float): value for IDD Field `minimum_outdoor_drybulb_temperature_for_compressor_operation`
                Unit: C
                Default value: -8.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_drybulb_temperature_for_compressor_operation`'.format(value))

        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_object_type`
        Only works with Coil:Cooling:DX:MultiSpeed

        Args:
            value (str): value for IDD Field `cooling_coil_object_type`
                Accepted values are:
                      - Coil:Cooling:DX:MultiSpeed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            vals = set()
            vals.add("Coil:Cooling:DX:MultiSpeed")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `cooling_coil_object_type`'.format(value))

        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `cooling_coil_name`
        Needs to match in the DX Cooling Coil object

        Args:
            value (str): value for IDD Field `cooling_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')

        self._data["Cooling Coil Name"] = value

    @property
    def supplemental_heating_coil_object_type(self):
        """Get supplemental_heating_coil_object_type

        Returns:
            str: the value of `supplemental_heating_coil_object_type` or None if not set
        """
        return self._data["Supplemental Heating Coil Object Type"]

    @supplemental_heating_coil_object_type.setter
    def supplemental_heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_object_type`
        works with gas, electric, hot water and steam heating coils

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_object_type`
                Accepted values are:
                      - Coil:Heating:Gas
                      - Coil:Heating:Electric
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_object_type`')
            vals = set()
            vals.add("Coil:Heating:Gas")
            vals.add("Coil:Heating:Electric")
            vals.add("Coil:Heating:Water")
            vals.add("Coil:Heating:Steam")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `supplemental_heating_coil_object_type`'.format(value))

        self._data["Supplemental Heating Coil Object Type"] = value

    @property
    def supplemental_heating_coil_name(self):
        """Get supplemental_heating_coil_name

        Returns:
            str: the value of `supplemental_heating_coil_name` or None if not set
        """
        return self._data["Supplemental Heating Coil Name"]

    @supplemental_heating_coil_name.setter
    def supplemental_heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `supplemental_heating_coil_name`
        Needs to match in the supplemental heating coil object

        Args:
            value (str): value for IDD Field `supplemental_heating_coil_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supplemental_heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supplemental_heating_coil_name`')

        self._data["Supplemental Heating Coil Name"] = value

    @property
    def maximum_supply_air_temperature_from_supplemental_heater(self):
        """Get maximum_supply_air_temperature_from_supplemental_heater

        Returns:
            float: the value of `maximum_supply_air_temperature_from_supplemental_heater` or None if not set
        """
        return self._data["Maximum Supply Air Temperature from Supplemental Heater"]

    @maximum_supply_air_temperature_from_supplemental_heater.setter
    def maximum_supply_air_temperature_from_supplemental_heater(self, value=None):
        """  Corresponds to IDD Field `maximum_supply_air_temperature_from_supplemental_heater`

        Args:
            value (float): value for IDD Field `maximum_supply_air_temperature_from_supplemental_heater`
                Unit: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_supply_air_temperature_from_supplemental_heater`'.format(value))

        self._data["Maximum Supply Air Temperature from Supplemental Heater"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation(self, value=21.0 ):
        """  Corresponds to IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`

        Args:
            value (float): value for IDD Field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`
                Unit: C
                Default value: 21.0
                value <= 21.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`'.format(value))
            if value > 21.0:
                raise ValueError('value need to be smaller 21.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation`')

        self._data["Maximum Outdoor Dry-Bulb Temperature for Supplemental Heater Operation"] = value

    @property
    def auxiliary_oncycle_electric_power(self):
        """Get auxiliary_oncycle_electric_power

        Returns:
            float: the value of `auxiliary_oncycle_electric_power` or None if not set
        """
        return self._data["Auxiliary On-Cycle Electric Power"]

    @auxiliary_oncycle_electric_power.setter
    def auxiliary_oncycle_electric_power(self, value=0.0 ):
        """  Corresponds to IDD Field `auxiliary_oncycle_electric_power`

        Args:
            value (float): value for IDD Field `auxiliary_oncycle_electric_power`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `auxiliary_oncycle_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `auxiliary_oncycle_electric_power`')

        self._data["Auxiliary On-Cycle Electric Power"] = value

    @property
    def auxiliary_offcycle_electric_power(self):
        """Get auxiliary_offcycle_electric_power

        Returns:
            float: the value of `auxiliary_offcycle_electric_power` or None if not set
        """
        return self._data["Auxiliary Off-Cycle Electric Power"]

    @auxiliary_offcycle_electric_power.setter
    def auxiliary_offcycle_electric_power(self, value=0.0 ):
        """  Corresponds to IDD Field `auxiliary_offcycle_electric_power`

        Args:
            value (float): value for IDD Field `auxiliary_offcycle_electric_power`
                Unit: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `auxiliary_offcycle_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `auxiliary_offcycle_electric_power`')

        self._data["Auxiliary Off-Cycle Electric Power"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_heat_recovery_water_flow_rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.
        Used for heat recovery to an EnergyPlus plant loop.

        Args:
            value (float): value for IDD Field `design_heat_recovery_water_flow_rate`
                Unit: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')

        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def maximum_temperature_for_heat_recovery(self):
        """Get maximum_temperature_for_heat_recovery

        Returns:
            float: the value of `maximum_temperature_for_heat_recovery` or None if not set
        """
        return self._data["Maximum Temperature for Heat Recovery"]

    @maximum_temperature_for_heat_recovery.setter
    def maximum_temperature_for_heat_recovery(self, value=80.0 ):
        """  Corresponds to IDD Field `maximum_temperature_for_heat_recovery`

        Args:
            value (float): value for IDD Field `maximum_temperature_for_heat_recovery`
                Unit: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_temperature_for_heat_recovery`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_temperature_for_heat_recovery`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_temperature_for_heat_recovery`')

        self._data["Maximum Temperature for Heat Recovery"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_inlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')

        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `heat_recovery_water_outlet_node_name`

        Args:
            value (str): value for IDD Field `heat_recovery_water_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')

        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """Get supply_air_flow_rate_when_no_cooling_or_heating_is_needed

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set
        """
        return self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"]

    @supply_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_or_heating_is_needed(self, value=None):
        """  Corresponds to IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
        Only used when the supply air fan operating mode is continuous (see field
        Supply Air Fan Operating Mode Schedule Name). This air flow rate
        is used when no heating or cooling is required and the coils are off.
        If this field is left blank or zero, the supply air flow rate from the
        previous on cycle (either cooling or heating) is used.

        Args:
            value (float): value for IDD Field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`
                Unit: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `supply_air_flow_rate_when_no_cooling_or_heating_is_needed`')

        self._data["Supply Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def number_of_speeds_for_heating(self):
        """Get number_of_speeds_for_heating

        Returns:
            int: the value of `number_of_speeds_for_heating` or None if not set
        """
        return self._data["Number of Speeds for Heating"]

    @number_of_speeds_for_heating.setter
    def number_of_speeds_for_heating(self, value=None):
        """  Corresponds to IDD Field `number_of_speeds_for_heating`
        Enter the number of the following sets of data for air flow rates.
        If Heating Coil Object Type is Coil:Heating:Water or Coil:Heating:Steam,
        this field should be 1.

        Args:
            value (int): value for IDD Field `number_of_speeds_for_heating`
                value >= 1
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds_for_heating`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_speeds_for_heating`')
            if value > 4:
                raise ValueError('value need to be smaller 4 '
                                 'for field `number_of_speeds_for_heating`')

        self._data["Number of Speeds for Heating"] = value

    @property
    def number_of_speeds_for_cooling(self):
        """Get number_of_speeds_for_cooling

        Returns:
            int: the value of `number_of_speeds_for_cooling` or None if not set
        """
        return self._data["Number of Speeds for Cooling"]

    @number_of_speeds_for_cooling.setter
    def number_of_speeds_for_cooling(self, value=None):
        """  Corresponds to IDD Field `number_of_speeds_for_cooling`
        Enter the number of the following sets of data for air flow rates.

        Args:
            value (int): value for IDD Field `number_of_speeds_for_cooling`
                value >= 2
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds_for_cooling`'.format(value))
            if value < 2:
                raise ValueError('value need to be greater or equal 2 '
                                 'for field `number_of_speeds_for_cooling`')
            if value > 4:
                raise ValueError('value need to be smaller 4 '
                                 'for field `number_of_speeds_for_cooling`')

        self._data["Number of Speeds for Cooling"] = value

    @property
    def speed_1_supply_air_flow_rate_during_heating_operation(self):
        """Get speed_1_supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `speed_1_supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Speed 1 Supply Air Flow Rate During Heating Operation"]

    @speed_1_supply_air_flow_rate_during_heating_operation.setter
    def speed_1_supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `speed_1_supply_air_flow_rate_during_heating_operation`
        Enter the operating supply air flow rate during heating
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `speed_1_supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_supply_air_flow_rate_during_heating_operation`')

        self._data["Speed 1 Supply Air Flow Rate During Heating Operation"] = value

    @property
    def speed_2_supply_air_flow_rate_during_heating_operation(self):
        """Get speed_2_supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `speed_2_supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Speed 2 Supply Air Flow Rate During Heating Operation"]

    @speed_2_supply_air_flow_rate_during_heating_operation.setter
    def speed_2_supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `speed_2_supply_air_flow_rate_during_heating_operation`
        Enter the operating supply air flow rate during heating
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `speed_2_supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_supply_air_flow_rate_during_heating_operation`')

        self._data["Speed 2 Supply Air Flow Rate During Heating Operation"] = value

    @property
    def speed_3_supply_air_flow_rate_during_heating_operation(self):
        """Get speed_3_supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `speed_3_supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Speed 3 Supply Air Flow Rate During Heating Operation"]

    @speed_3_supply_air_flow_rate_during_heating_operation.setter
    def speed_3_supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `speed_3_supply_air_flow_rate_during_heating_operation`
        Enter the operating supply air flow rate during heating
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `speed_3_supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_supply_air_flow_rate_during_heating_operation`')

        self._data["Speed 3 Supply Air Flow Rate During Heating Operation"] = value

    @property
    def speed_4_supply_air_flow_rate_during_heating_operation(self):
        """Get speed_4_supply_air_flow_rate_during_heating_operation

        Returns:
            float: the value of `speed_4_supply_air_flow_rate_during_heating_operation` or None if not set
        """
        return self._data["Speed 4 Supply Air Flow Rate During Heating Operation"]

    @speed_4_supply_air_flow_rate_during_heating_operation.setter
    def speed_4_supply_air_flow_rate_during_heating_operation(self, value=None):
        """  Corresponds to IDD Field `speed_4_supply_air_flow_rate_during_heating_operation`
        Enter the operating supply air flow rate during heating
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `speed_4_supply_air_flow_rate_during_heating_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_supply_air_flow_rate_during_heating_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_supply_air_flow_rate_during_heating_operation`')

        self._data["Speed 4 Supply Air Flow Rate During Heating Operation"] = value

    @property
    def speed_1_supply_air_flow_rate_during_cooling_operation(self):
        """Get speed_1_supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `speed_1_supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Speed 1 Supply Air Flow Rate During Cooling Operation"]

    @speed_1_supply_air_flow_rate_during_cooling_operation.setter
    def speed_1_supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `speed_1_supply_air_flow_rate_during_cooling_operation`
        Enter the operating supply air flow rate during cooling
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `speed_1_supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_supply_air_flow_rate_during_cooling_operation`')

        self._data["Speed 1 Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def speed_2_supply_air_flow_rate_during_cooling_operation(self):
        """Get speed_2_supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `speed_2_supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Speed 2 Supply Air Flow Rate During Cooling Operation"]

    @speed_2_supply_air_flow_rate_during_cooling_operation.setter
    def speed_2_supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `speed_2_supply_air_flow_rate_during_cooling_operation`
        Enter the operating supply air flow rate during cooling
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `speed_2_supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_supply_air_flow_rate_during_cooling_operation`')

        self._data["Speed 2 Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def speed_3_supply_air_flow_rate_during_cooling_operation(self):
        """Get speed_3_supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `speed_3_supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Speed 3 Supply Air Flow Rate During Cooling Operation"]

    @speed_3_supply_air_flow_rate_during_cooling_operation.setter
    def speed_3_supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `speed_3_supply_air_flow_rate_during_cooling_operation`
        Enter the operating supply air flow rate during cooling
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `speed_3_supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_supply_air_flow_rate_during_cooling_operation`')

        self._data["Speed 3 Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def speed_4_supply_air_flow_rate_during_cooling_operation(self):
        """Get speed_4_supply_air_flow_rate_during_cooling_operation

        Returns:
            float: the value of `speed_4_supply_air_flow_rate_during_cooling_operation` or None if not set
        """
        return self._data["Speed 4 Supply Air Flow Rate During Cooling Operation"]

    @speed_4_supply_air_flow_rate_during_cooling_operation.setter
    def speed_4_supply_air_flow_rate_during_cooling_operation(self, value=None):
        """  Corresponds to IDD Field `speed_4_supply_air_flow_rate_during_cooling_operation`
        Enter the operating supply air flow rate during cooling
        operation or specify autosize.

        Args:
            value (float): value for IDD Field `speed_4_supply_air_flow_rate_during_cooling_operation`
                Unit: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_supply_air_flow_rate_during_cooling_operation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_supply_air_flow_rate_during_cooling_operation`')

        self._data["Speed 4 Supply Air Flow Rate During Cooling Operation"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.availability_schedule_name))
        out.append(self._to_str(self.air_inlet_node_name))
        out.append(self._to_str(self.air_outlet_node_name))
        out.append(self._to_str(self.controlling_zone_or_thermostat_location))
        out.append(self._to_str(self.supply_air_fan_object_type))
        out.append(self._to_str(self.supply_air_fan_name))
        out.append(self._to_str(self.supply_air_fan_placement))
        out.append(self._to_str(self.supply_air_fan_operating_mode_schedule_name))
        out.append(self._to_str(self.heating_coil_object_type))
        out.append(self._to_str(self.heating_coil_name))
        out.append(self._to_str(self.minimum_outdoor_drybulb_temperature_for_compressor_operation))
        out.append(self._to_str(self.cooling_coil_object_type))
        out.append(self._to_str(self.cooling_coil_name))
        out.append(self._to_str(self.supplemental_heating_coil_object_type))
        out.append(self._to_str(self.supplemental_heating_coil_name))
        out.append(self._to_str(self.maximum_supply_air_temperature_from_supplemental_heater))
        out.append(self._to_str(self.maximum_outdoor_drybulb_temperature_for_supplemental_heater_operation))
        out.append(self._to_str(self.auxiliary_oncycle_electric_power))
        out.append(self._to_str(self.auxiliary_offcycle_electric_power))
        out.append(self._to_str(self.design_heat_recovery_water_flow_rate))
        out.append(self._to_str(self.maximum_temperature_for_heat_recovery))
        out.append(self._to_str(self.heat_recovery_water_inlet_node_name))
        out.append(self._to_str(self.heat_recovery_water_outlet_node_name))
        out.append(self._to_str(self.supply_air_flow_rate_when_no_cooling_or_heating_is_needed))
        out.append(self._to_str(self.number_of_speeds_for_heating))
        out.append(self._to_str(self.number_of_speeds_for_cooling))
        out.append(self._to_str(self.speed_1_supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.speed_2_supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.speed_3_supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.speed_4_supply_air_flow_rate_during_heating_operation))
        out.append(self._to_str(self.speed_1_supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.speed_2_supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.speed_3_supply_air_flow_rate_during_cooling_operation))
        out.append(self._to_str(self.speed_4_supply_air_flow_rate_during_cooling_operation))
        return ",".join(out)

class AirLoopHvacControllerList(object):
    """ Corresponds to IDD object `AirLoopHVAC:ControllerList`
        List controllers in order of control sequence
    """
    internal_name = "AirLoopHVAC:ControllerList"
    field_count = 17

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:ControllerList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Controller 1 Object Type"] = None
        self._data["Controller 1 Name"] = None
        self._data["Controller 2 Object Type"] = None
        self._data["Controller 2 Name"] = None
        self._data["Controller 3 Object Type"] = None
        self._data["Controller 3 Name"] = None
        self._data["Controller 4 Object Type"] = None
        self._data["Controller 4 Name"] = None
        self._data["Controller 5 Object Type"] = None
        self._data["Controller 5 Name"] = None
        self._data["Controller 6 Object Type"] = None
        self._data["Controller 6 Name"] = None
        self._data["Controller 7 Object Type"] = None
        self._data["Controller 7 Name"] = None
        self._data["Controller 8 Object Type"] = None
        self._data["Controller 8 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_1_object_type = None
        else:
            self.controller_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_1_name = None
        else:
            self.controller_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_2_object_type = None
        else:
            self.controller_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_2_name = None
        else:
            self.controller_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_3_object_type = None
        else:
            self.controller_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_3_name = None
        else:
            self.controller_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_4_object_type = None
        else:
            self.controller_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_4_name = None
        else:
            self.controller_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_5_object_type = None
        else:
            self.controller_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_5_name = None
        else:
            self.controller_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_6_object_type = None
        else:
            self.controller_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_6_name = None
        else:
            self.controller_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_7_object_type = None
        else:
            self.controller_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_7_name = None
        else:
            self.controller_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_8_object_type = None
        else:
            self.controller_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_8_name = None
        else:
            self.controller_8_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def controller_1_object_type(self):
        """Get controller_1_object_type

        Returns:
            str: the value of `controller_1_object_type` or None if not set
        """
        return self._data["Controller 1 Object Type"]

    @controller_1_object_type.setter
    def controller_1_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_1_object_type`

        Args:
            value (str): value for IDD Field `controller_1_object_type`
                Accepted values are:
                      - Controller:WaterCoil
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_1_object_type`')
            vals = set()
            vals.add("Controller:WaterCoil")
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_1_object_type`'.format(value))

        self._data["Controller 1 Object Type"] = value

    @property
    def controller_1_name(self):
        """Get controller_1_name

        Returns:
            str: the value of `controller_1_name` or None if not set
        """
        return self._data["Controller 1 Name"]

    @controller_1_name.setter
    def controller_1_name(self, value=None):
        """  Corresponds to IDD Field `controller_1_name`

        Args:
            value (str): value for IDD Field `controller_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_1_name`')

        self._data["Controller 1 Name"] = value

    @property
    def controller_2_object_type(self):
        """Get controller_2_object_type

        Returns:
            str: the value of `controller_2_object_type` or None if not set
        """
        return self._data["Controller 2 Object Type"]

    @controller_2_object_type.setter
    def controller_2_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_2_object_type`

        Args:
            value (str): value for IDD Field `controller_2_object_type`
                Accepted values are:
                      - Controller:WaterCoil
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_2_object_type`')
            vals = set()
            vals.add("Controller:WaterCoil")
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_2_object_type`'.format(value))

        self._data["Controller 2 Object Type"] = value

    @property
    def controller_2_name(self):
        """Get controller_2_name

        Returns:
            str: the value of `controller_2_name` or None if not set
        """
        return self._data["Controller 2 Name"]

    @controller_2_name.setter
    def controller_2_name(self, value=None):
        """  Corresponds to IDD Field `controller_2_name`

        Args:
            value (str): value for IDD Field `controller_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_2_name`')

        self._data["Controller 2 Name"] = value

    @property
    def controller_3_object_type(self):
        """Get controller_3_object_type

        Returns:
            str: the value of `controller_3_object_type` or None if not set
        """
        return self._data["Controller 3 Object Type"]

    @controller_3_object_type.setter
    def controller_3_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_3_object_type`

        Args:
            value (str): value for IDD Field `controller_3_object_type`
                Accepted values are:
                      - Controller:WaterCoil
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_3_object_type`')
            vals = set()
            vals.add("Controller:WaterCoil")
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_3_object_type`'.format(value))

        self._data["Controller 3 Object Type"] = value

    @property
    def controller_3_name(self):
        """Get controller_3_name

        Returns:
            str: the value of `controller_3_name` or None if not set
        """
        return self._data["Controller 3 Name"]

    @controller_3_name.setter
    def controller_3_name(self, value=None):
        """  Corresponds to IDD Field `controller_3_name`

        Args:
            value (str): value for IDD Field `controller_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_3_name`')

        self._data["Controller 3 Name"] = value

    @property
    def controller_4_object_type(self):
        """Get controller_4_object_type

        Returns:
            str: the value of `controller_4_object_type` or None if not set
        """
        return self._data["Controller 4 Object Type"]

    @controller_4_object_type.setter
    def controller_4_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_4_object_type`

        Args:
            value (str): value for IDD Field `controller_4_object_type`
                Accepted values are:
                      - Controller:WaterCoil
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_4_object_type`')
            vals = set()
            vals.add("Controller:WaterCoil")
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_4_object_type`'.format(value))

        self._data["Controller 4 Object Type"] = value

    @property
    def controller_4_name(self):
        """Get controller_4_name

        Returns:
            str: the value of `controller_4_name` or None if not set
        """
        return self._data["Controller 4 Name"]

    @controller_4_name.setter
    def controller_4_name(self, value=None):
        """  Corresponds to IDD Field `controller_4_name`

        Args:
            value (str): value for IDD Field `controller_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_4_name`')

        self._data["Controller 4 Name"] = value

    @property
    def controller_5_object_type(self):
        """Get controller_5_object_type

        Returns:
            str: the value of `controller_5_object_type` or None if not set
        """
        return self._data["Controller 5 Object Type"]

    @controller_5_object_type.setter
    def controller_5_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_5_object_type`

        Args:
            value (str): value for IDD Field `controller_5_object_type`
                Accepted values are:
                      - Controller:WaterCoil
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_5_object_type`')
            vals = set()
            vals.add("Controller:WaterCoil")
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_5_object_type`'.format(value))

        self._data["Controller 5 Object Type"] = value

    @property
    def controller_5_name(self):
        """Get controller_5_name

        Returns:
            str: the value of `controller_5_name` or None if not set
        """
        return self._data["Controller 5 Name"]

    @controller_5_name.setter
    def controller_5_name(self, value=None):
        """  Corresponds to IDD Field `controller_5_name`

        Args:
            value (str): value for IDD Field `controller_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_5_name`')

        self._data["Controller 5 Name"] = value

    @property
    def controller_6_object_type(self):
        """Get controller_6_object_type

        Returns:
            str: the value of `controller_6_object_type` or None if not set
        """
        return self._data["Controller 6 Object Type"]

    @controller_6_object_type.setter
    def controller_6_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_6_object_type`

        Args:
            value (str): value for IDD Field `controller_6_object_type`
                Accepted values are:
                      - Controller:WaterCoil
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_6_object_type`')
            vals = set()
            vals.add("Controller:WaterCoil")
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_6_object_type`'.format(value))

        self._data["Controller 6 Object Type"] = value

    @property
    def controller_6_name(self):
        """Get controller_6_name

        Returns:
            str: the value of `controller_6_name` or None if not set
        """
        return self._data["Controller 6 Name"]

    @controller_6_name.setter
    def controller_6_name(self, value=None):
        """  Corresponds to IDD Field `controller_6_name`

        Args:
            value (str): value for IDD Field `controller_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_6_name`')

        self._data["Controller 6 Name"] = value

    @property
    def controller_7_object_type(self):
        """Get controller_7_object_type

        Returns:
            str: the value of `controller_7_object_type` or None if not set
        """
        return self._data["Controller 7 Object Type"]

    @controller_7_object_type.setter
    def controller_7_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_7_object_type`

        Args:
            value (str): value for IDD Field `controller_7_object_type`
                Accepted values are:
                      - Controller:WaterCoil
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_7_object_type`')
            vals = set()
            vals.add("Controller:WaterCoil")
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_7_object_type`'.format(value))

        self._data["Controller 7 Object Type"] = value

    @property
    def controller_7_name(self):
        """Get controller_7_name

        Returns:
            str: the value of `controller_7_name` or None if not set
        """
        return self._data["Controller 7 Name"]

    @controller_7_name.setter
    def controller_7_name(self, value=None):
        """  Corresponds to IDD Field `controller_7_name`

        Args:
            value (str): value for IDD Field `controller_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_7_name`')

        self._data["Controller 7 Name"] = value

    @property
    def controller_8_object_type(self):
        """Get controller_8_object_type

        Returns:
            str: the value of `controller_8_object_type` or None if not set
        """
        return self._data["Controller 8 Object Type"]

    @controller_8_object_type.setter
    def controller_8_object_type(self, value=None):
        """  Corresponds to IDD Field `controller_8_object_type`

        Args:
            value (str): value for IDD Field `controller_8_object_type`
                Accepted values are:
                      - Controller:WaterCoil
                      - Controller:OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_8_object_type`')
            vals = set()
            vals.add("Controller:WaterCoil")
            vals.add("Controller:OutdoorAir")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `controller_8_object_type`'.format(value))

        self._data["Controller 8 Object Type"] = value

    @property
    def controller_8_name(self):
        """Get controller_8_name

        Returns:
            str: the value of `controller_8_name` or None if not set
        """
        return self._data["Controller 8 Name"]

    @controller_8_name.setter
    def controller_8_name(self, value=None):
        """  Corresponds to IDD Field `controller_8_name`

        Args:
            value (str): value for IDD Field `controller_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_8_name`')

        self._data["Controller 8 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.controller_1_object_type))
        out.append(self._to_str(self.controller_1_name))
        out.append(self._to_str(self.controller_2_object_type))
        out.append(self._to_str(self.controller_2_name))
        out.append(self._to_str(self.controller_3_object_type))
        out.append(self._to_str(self.controller_3_name))
        out.append(self._to_str(self.controller_4_object_type))
        out.append(self._to_str(self.controller_4_name))
        out.append(self._to_str(self.controller_5_object_type))
        out.append(self._to_str(self.controller_5_name))
        out.append(self._to_str(self.controller_6_object_type))
        out.append(self._to_str(self.controller_6_name))
        out.append(self._to_str(self.controller_7_object_type))
        out.append(self._to_str(self.controller_7_name))
        out.append(self._to_str(self.controller_8_object_type))
        out.append(self._to_str(self.controller_8_name))
        return ",".join(out)

class AirLoopHvac(object):
    """ Corresponds to IDD object `AirLoopHVAC`
        Defines a central forced air system.
    """
    internal_name = "AirLoopHVAC"
    field_count = 10

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Controller List Name"] = None
        self._data["Availability Manager List Name"] = None
        self._data["Design Supply Air Flow Rate"] = None
        self._data["Branch List Name"] = None
        self._data["Connector List Name"] = None
        self._data["Supply Side Inlet Node Name"] = None
        self._data["Demand Side Outlet Node Name"] = None
        self._data["Demand Side Inlet Node Names"] = None
        self._data["Supply Side Outlet Node Names"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_list_name = None
        else:
            self.controller_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_supply_air_flow_rate = None
        else:
            self.design_supply_air_flow_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.branch_list_name = None
        else:
            self.branch_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.connector_list_name = None
        else:
            self.connector_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_side_inlet_node_name = None
        else:
            self.supply_side_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_outlet_node_name = None
        else:
            self.demand_side_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_side_inlet_node_names = None
        else:
            self.demand_side_inlet_node_names = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_side_outlet_node_names = None
        else:
            self.supply_side_outlet_node_names = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def controller_list_name(self):
        """Get controller_list_name

        Returns:
            str: the value of `controller_list_name` or None if not set
        """
        return self._data["Controller List Name"]

    @controller_list_name.setter
    def controller_list_name(self, value=None):
        """  Corresponds to IDD Field `controller_list_name`
        Enter the name of an AirLoopHVAC:ControllerList object.

        Args:
            value (str): value for IDD Field `controller_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_list_name`')

        self._data["Controller List Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @property
    def design_supply_air_flow_rate(self):
        """Get design_supply_air_flow_rate

        Returns:
            float: the value of `design_supply_air_flow_rate` or None if not set
        """
        return self._data["Design Supply Air Flow Rate"]

    @design_supply_air_flow_rate.setter
    def design_supply_air_flow_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `design_supply_air_flow_rate`

        Args:
            value (float): value for IDD Field `design_supply_air_flow_rate`
                Unit: m3/s
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_supply_air_flow_rate`'.format(value))

        self._data["Design Supply Air Flow Rate"] = value

    @property
    def branch_list_name(self):
        """Get branch_list_name

        Returns:
            str: the value of `branch_list_name` or None if not set
        """
        return self._data["Branch List Name"]

    @branch_list_name.setter
    def branch_list_name(self, value=None):
        """  Corresponds to IDD Field `branch_list_name`
        Name of a BranchList containing all the branches in this air loop

        Args:
            value (str): value for IDD Field `branch_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `branch_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `branch_list_name`')

        self._data["Branch List Name"] = value

    @property
    def connector_list_name(self):
        """Get connector_list_name

        Returns:
            str: the value of `connector_list_name` or None if not set
        """
        return self._data["Connector List Name"]

    @connector_list_name.setter
    def connector_list_name(self, value=None):
        """  Corresponds to IDD Field `connector_list_name`
        Name of a ConnectorList containing all the splitters and mixers in the loop

        Args:
            value (str): value for IDD Field `connector_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `connector_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `connector_list_name`')

        self._data["Connector List Name"] = value

    @property
    def supply_side_inlet_node_name(self):
        """Get supply_side_inlet_node_name

        Returns:
            str: the value of `supply_side_inlet_node_name` or None if not set
        """
        return self._data["Supply Side Inlet Node Name"]

    @supply_side_inlet_node_name.setter
    def supply_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `supply_side_inlet_node_name`
        Name of inlet node where return air enters the supply side of the air loop

        Args:
            value (str): value for IDD Field `supply_side_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_side_inlet_node_name`')

        self._data["Supply Side Inlet Node Name"] = value

    @property
    def demand_side_outlet_node_name(self):
        """Get demand_side_outlet_node_name

        Returns:
            str: the value of `demand_side_outlet_node_name` or None if not set
        """
        return self._data["Demand Side Outlet Node Name"]

    @demand_side_outlet_node_name.setter
    def demand_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `demand_side_outlet_node_name`
        Name of outlet node where return air leaves the demand side and enters the supply side.

        Args:
            value (str): value for IDD Field `demand_side_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_outlet_node_name`')

        self._data["Demand Side Outlet Node Name"] = value

    @property
    def demand_side_inlet_node_names(self):
        """Get demand_side_inlet_node_names

        Returns:
            str: the value of `demand_side_inlet_node_names` or None if not set
        """
        return self._data["Demand Side Inlet Node Names"]

    @demand_side_inlet_node_names.setter
    def demand_side_inlet_node_names(self, value=None):
        """  Corresponds to IDD Field `demand_side_inlet_node_names`
        Name of a Node or NodeList containing the inlet node(s) supplying air to zone equipment.

        Args:
            value (str): value for IDD Field `demand_side_inlet_node_names`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_side_inlet_node_names`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_side_inlet_node_names`')

        self._data["Demand Side Inlet Node Names"] = value

    @property
    def supply_side_outlet_node_names(self):
        """Get supply_side_outlet_node_names

        Returns:
            str: the value of `supply_side_outlet_node_names` or None if not set
        """
        return self._data["Supply Side Outlet Node Names"]

    @supply_side_outlet_node_names.setter
    def supply_side_outlet_node_names(self, value=None):
        """  Corresponds to IDD Field `supply_side_outlet_node_names`
        Name of a Node or NodeList containing the outlet node(s) supplying air to the demand side.

        Args:
            value (str): value for IDD Field `supply_side_outlet_node_names`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_side_outlet_node_names`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_side_outlet_node_names`')

        self._data["Supply Side Outlet Node Names"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.controller_list_name))
        out.append(self._to_str(self.availability_manager_list_name))
        out.append(self._to_str(self.design_supply_air_flow_rate))
        out.append(self._to_str(self.branch_list_name))
        out.append(self._to_str(self.connector_list_name))
        out.append(self._to_str(self.supply_side_inlet_node_name))
        out.append(self._to_str(self.demand_side_outlet_node_name))
        out.append(self._to_str(self.demand_side_inlet_node_names))
        out.append(self._to_str(self.supply_side_outlet_node_names))
        return ",".join(out)

class AirLoopHvacOutdoorAirSystemEquipmentList(object):
    """ Corresponds to IDD object `AirLoopHVAC:OutdoorAirSystem:EquipmentList`
        List equipment in simulation order
    """
    internal_name = "AirLoopHVAC:OutdoorAirSystem:EquipmentList"
    field_count = 19

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:OutdoorAirSystem:EquipmentList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Component 1 Object Type"] = None
        self._data["Component 1 Name"] = None
        self._data["Component 2 Object Type"] = None
        self._data["Component 2 Name"] = None
        self._data["Component 3 Object Type"] = None
        self._data["Component 3 Name"] = None
        self._data["Component 4 Object Type"] = None
        self._data["Component 4 Name"] = None
        self._data["Component 5 Object Type"] = None
        self._data["Component 5 Name"] = None
        self._data["Component 6 Object Type"] = None
        self._data["Component 6 Name"] = None
        self._data["Component 7 Object Type"] = None
        self._data["Component 7 Name"] = None
        self._data["Component 8 Object Type"] = None
        self._data["Component 8 Name"] = None
        self._data["Component 9 Object Type"] = None
        self._data["Component 9 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_object_type = None
        else:
            self.component_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_name = None
        else:
            self.component_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_object_type = None
        else:
            self.component_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_name = None
        else:
            self.component_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_object_type = None
        else:
            self.component_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_name = None
        else:
            self.component_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_object_type = None
        else:
            self.component_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_name = None
        else:
            self.component_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_object_type = None
        else:
            self.component_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_name = None
        else:
            self.component_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_object_type = None
        else:
            self.component_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_name = None
        else:
            self.component_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_object_type = None
        else:
            self.component_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_name = None
        else:
            self.component_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_object_type = None
        else:
            self.component_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_name = None
        else:
            self.component_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_9_object_type = None
        else:
            self.component_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_9_name = None
        else:
            self.component_9_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def component_1_object_type(self):
        """Get component_1_object_type

        Returns:
            str: the value of `component_1_object_type` or None if not set
        """
        return self._data["Component 1 Object Type"]

    @component_1_object_type.setter
    def component_1_object_type(self, value=None):
        """  Corresponds to IDD Field `component_1_object_type`

        Args:
            value (str): value for IDD Field `component_1_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_1_object_type`')

        self._data["Component 1 Object Type"] = value

    @property
    def component_1_name(self):
        """Get component_1_name

        Returns:
            str: the value of `component_1_name` or None if not set
        """
        return self._data["Component 1 Name"]

    @component_1_name.setter
    def component_1_name(self, value=None):
        """  Corresponds to IDD Field `component_1_name`

        Args:
            value (str): value for IDD Field `component_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_1_name`')

        self._data["Component 1 Name"] = value

    @property
    def component_2_object_type(self):
        """Get component_2_object_type

        Returns:
            str: the value of `component_2_object_type` or None if not set
        """
        return self._data["Component 2 Object Type"]

    @component_2_object_type.setter
    def component_2_object_type(self, value=None):
        """  Corresponds to IDD Field `component_2_object_type`

        Args:
            value (str): value for IDD Field `component_2_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_2_object_type`')

        self._data["Component 2 Object Type"] = value

    @property
    def component_2_name(self):
        """Get component_2_name

        Returns:
            str: the value of `component_2_name` or None if not set
        """
        return self._data["Component 2 Name"]

    @component_2_name.setter
    def component_2_name(self, value=None):
        """  Corresponds to IDD Field `component_2_name`

        Args:
            value (str): value for IDD Field `component_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_2_name`')

        self._data["Component 2 Name"] = value

    @property
    def component_3_object_type(self):
        """Get component_3_object_type

        Returns:
            str: the value of `component_3_object_type` or None if not set
        """
        return self._data["Component 3 Object Type"]

    @component_3_object_type.setter
    def component_3_object_type(self, value=None):
        """  Corresponds to IDD Field `component_3_object_type`

        Args:
            value (str): value for IDD Field `component_3_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_3_object_type`')

        self._data["Component 3 Object Type"] = value

    @property
    def component_3_name(self):
        """Get component_3_name

        Returns:
            str: the value of `component_3_name` or None if not set
        """
        return self._data["Component 3 Name"]

    @component_3_name.setter
    def component_3_name(self, value=None):
        """  Corresponds to IDD Field `component_3_name`

        Args:
            value (str): value for IDD Field `component_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_3_name`')

        self._data["Component 3 Name"] = value

    @property
    def component_4_object_type(self):
        """Get component_4_object_type

        Returns:
            str: the value of `component_4_object_type` or None if not set
        """
        return self._data["Component 4 Object Type"]

    @component_4_object_type.setter
    def component_4_object_type(self, value=None):
        """  Corresponds to IDD Field `component_4_object_type`

        Args:
            value (str): value for IDD Field `component_4_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_4_object_type`')

        self._data["Component 4 Object Type"] = value

    @property
    def component_4_name(self):
        """Get component_4_name

        Returns:
            str: the value of `component_4_name` or None if not set
        """
        return self._data["Component 4 Name"]

    @component_4_name.setter
    def component_4_name(self, value=None):
        """  Corresponds to IDD Field `component_4_name`

        Args:
            value (str): value for IDD Field `component_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_4_name`')

        self._data["Component 4 Name"] = value

    @property
    def component_5_object_type(self):
        """Get component_5_object_type

        Returns:
            str: the value of `component_5_object_type` or None if not set
        """
        return self._data["Component 5 Object Type"]

    @component_5_object_type.setter
    def component_5_object_type(self, value=None):
        """  Corresponds to IDD Field `component_5_object_type`

        Args:
            value (str): value for IDD Field `component_5_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_5_object_type`')

        self._data["Component 5 Object Type"] = value

    @property
    def component_5_name(self):
        """Get component_5_name

        Returns:
            str: the value of `component_5_name` or None if not set
        """
        return self._data["Component 5 Name"]

    @component_5_name.setter
    def component_5_name(self, value=None):
        """  Corresponds to IDD Field `component_5_name`

        Args:
            value (str): value for IDD Field `component_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_5_name`')

        self._data["Component 5 Name"] = value

    @property
    def component_6_object_type(self):
        """Get component_6_object_type

        Returns:
            str: the value of `component_6_object_type` or None if not set
        """
        return self._data["Component 6 Object Type"]

    @component_6_object_type.setter
    def component_6_object_type(self, value=None):
        """  Corresponds to IDD Field `component_6_object_type`

        Args:
            value (str): value for IDD Field `component_6_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_6_object_type`')

        self._data["Component 6 Object Type"] = value

    @property
    def component_6_name(self):
        """Get component_6_name

        Returns:
            str: the value of `component_6_name` or None if not set
        """
        return self._data["Component 6 Name"]

    @component_6_name.setter
    def component_6_name(self, value=None):
        """  Corresponds to IDD Field `component_6_name`

        Args:
            value (str): value for IDD Field `component_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_6_name`')

        self._data["Component 6 Name"] = value

    @property
    def component_7_object_type(self):
        """Get component_7_object_type

        Returns:
            str: the value of `component_7_object_type` or None if not set
        """
        return self._data["Component 7 Object Type"]

    @component_7_object_type.setter
    def component_7_object_type(self, value=None):
        """  Corresponds to IDD Field `component_7_object_type`

        Args:
            value (str): value for IDD Field `component_7_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_7_object_type`')

        self._data["Component 7 Object Type"] = value

    @property
    def component_7_name(self):
        """Get component_7_name

        Returns:
            str: the value of `component_7_name` or None if not set
        """
        return self._data["Component 7 Name"]

    @component_7_name.setter
    def component_7_name(self, value=None):
        """  Corresponds to IDD Field `component_7_name`

        Args:
            value (str): value for IDD Field `component_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_7_name`')

        self._data["Component 7 Name"] = value

    @property
    def component_8_object_type(self):
        """Get component_8_object_type

        Returns:
            str: the value of `component_8_object_type` or None if not set
        """
        return self._data["Component 8 Object Type"]

    @component_8_object_type.setter
    def component_8_object_type(self, value=None):
        """  Corresponds to IDD Field `component_8_object_type`

        Args:
            value (str): value for IDD Field `component_8_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_8_object_type`')

        self._data["Component 8 Object Type"] = value

    @property
    def component_8_name(self):
        """Get component_8_name

        Returns:
            str: the value of `component_8_name` or None if not set
        """
        return self._data["Component 8 Name"]

    @component_8_name.setter
    def component_8_name(self, value=None):
        """  Corresponds to IDD Field `component_8_name`

        Args:
            value (str): value for IDD Field `component_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_8_name`')

        self._data["Component 8 Name"] = value

    @property
    def component_9_object_type(self):
        """Get component_9_object_type

        Returns:
            str: the value of `component_9_object_type` or None if not set
        """
        return self._data["Component 9 Object Type"]

    @component_9_object_type.setter
    def component_9_object_type(self, value=None):
        """  Corresponds to IDD Field `component_9_object_type`

        Args:
            value (str): value for IDD Field `component_9_object_type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_9_object_type`')

        self._data["Component 9 Object Type"] = value

    @property
    def component_9_name(self):
        """Get component_9_name

        Returns:
            str: the value of `component_9_name` or None if not set
        """
        return self._data["Component 9 Name"]

    @component_9_name.setter
    def component_9_name(self, value=None):
        """  Corresponds to IDD Field `component_9_name`

        Args:
            value (str): value for IDD Field `component_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_9_name`')

        self._data["Component 9 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.component_1_object_type))
        out.append(self._to_str(self.component_1_name))
        out.append(self._to_str(self.component_2_object_type))
        out.append(self._to_str(self.component_2_name))
        out.append(self._to_str(self.component_3_object_type))
        out.append(self._to_str(self.component_3_name))
        out.append(self._to_str(self.component_4_object_type))
        out.append(self._to_str(self.component_4_name))
        out.append(self._to_str(self.component_5_object_type))
        out.append(self._to_str(self.component_5_name))
        out.append(self._to_str(self.component_6_object_type))
        out.append(self._to_str(self.component_6_name))
        out.append(self._to_str(self.component_7_object_type))
        out.append(self._to_str(self.component_7_name))
        out.append(self._to_str(self.component_8_object_type))
        out.append(self._to_str(self.component_8_name))
        out.append(self._to_str(self.component_9_object_type))
        out.append(self._to_str(self.component_9_name))
        return ",".join(out)

class AirLoopHvacOutdoorAirSystem(object):
    """ Corresponds to IDD object `AirLoopHVAC:OutdoorAirSystem`
        Outdoor air subsystem for an AirLoopHVAC. Includes an outdoor air mixing box and
        optional outdoor air conditioning equipment such as heat recovery, preheat, and precool
        coils. From the perspective of the primary air loop the outdoor air system is treated
        as a single component.
    """
    internal_name = "AirLoopHVAC:OutdoorAirSystem"
    field_count = 4

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:OutdoorAirSystem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Controller List Name"] = None
        self._data["Outdoor Air Equipment List Name"] = None
        self._data["Availability Manager List Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.controller_list_name = None
        else:
            self.controller_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outdoor_air_equipment_list_name = None
        else:
            self.outdoor_air_equipment_list_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.availability_manager_list_name = None
        else:
            self.availability_manager_list_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def controller_list_name(self):
        """Get controller_list_name

        Returns:
            str: the value of `controller_list_name` or None if not set
        """
        return self._data["Controller List Name"]

    @controller_list_name.setter
    def controller_list_name(self, value=None):
        """  Corresponds to IDD Field `controller_list_name`
        Enter the name of an AirLoopHVAC:ControllerList object.

        Args:
            value (str): value for IDD Field `controller_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `controller_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `controller_list_name`')

        self._data["Controller List Name"] = value

    @property
    def outdoor_air_equipment_list_name(self):
        """Get outdoor_air_equipment_list_name

        Returns:
            str: the value of `outdoor_air_equipment_list_name` or None if not set
        """
        return self._data["Outdoor Air Equipment List Name"]

    @outdoor_air_equipment_list_name.setter
    def outdoor_air_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `outdoor_air_equipment_list_name`
        Enter the name of an AirLoopHVAC:OutdoorAirSystem:EquipmentList object.

        Args:
            value (str): value for IDD Field `outdoor_air_equipment_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outdoor_air_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_equipment_list_name`')

        self._data["Outdoor Air Equipment List Name"] = value

    @property
    def availability_manager_list_name(self):
        """Get availability_manager_list_name

        Returns:
            str: the value of `availability_manager_list_name` or None if not set
        """
        return self._data["Availability Manager List Name"]

    @availability_manager_list_name.setter
    def availability_manager_list_name(self, value=None):
        """  Corresponds to IDD Field `availability_manager_list_name`
        Enter the name of an AvailabilityManagerAssignmentList object.

        Args:
            value (str): value for IDD Field `availability_manager_list_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_manager_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_manager_list_name`')

        self._data["Availability Manager List Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.controller_list_name))
        out.append(self._to_str(self.outdoor_air_equipment_list_name))
        out.append(self._to_str(self.availability_manager_list_name))
        return ",".join(out)

class AirLoopHvacZoneSplitter(object):
    """ Corresponds to IDD object `AirLoopHVAC:ZoneSplitter`
        Split one air stream into N outlet streams (currently 500 per air loop, but extensible).  Node names
        cannot be duplicated within a single zone splitter (AirLoopHVAC:ZoneSplitter) list.
    """
    internal_name = "AirLoopHVAC:ZoneSplitter"
    field_count = 142

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:ZoneSplitter`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet 1 Node Name"] = None
        self._data["Outlet 2 Node Name"] = None
        self._data["Outlet 3 Node Name"] = None
        self._data["Outlet 4 Node Name"] = None
        self._data["Outlet 5 Node Name"] = None
        self._data["Outlet 6 Node Name"] = None
        self._data["Outlet 7 Node Name"] = None
        self._data["Outlet 8 Node Name"] = None
        self._data["Outlet 9 Node Name"] = None
        self._data["Outlet 10 Node Name"] = None
        self._data["Outlet 11 Node Name"] = None
        self._data["Outlet 12 Node Name"] = None
        self._data["Outlet 13 Node Name"] = None
        self._data["Outlet 14 Node Name"] = None
        self._data["Outlet 15 Node Name"] = None
        self._data["Outlet 16 Node Name"] = None
        self._data["Outlet 17 Node Name"] = None
        self._data["Outlet 18 Node Name"] = None
        self._data["Outlet 19 Node Name"] = None
        self._data["Outlet 20 Node Name"] = None
        self._data["Outlet 21 Node Name"] = None
        self._data["Outlet 22 Node Name"] = None
        self._data["Outlet 23 Node Name"] = None
        self._data["Outlet 24 Node Name"] = None
        self._data["Outlet 25 Node Name"] = None
        self._data["Outlet 26 Node Name"] = None
        self._data["Outlet 27 Node Name"] = None
        self._data["Outlet 28 Node Name"] = None
        self._data["Outlet 29 Node Name"] = None
        self._data["Outlet 30 Node Name"] = None
        self._data["Outlet 31 Node Name"] = None
        self._data["Outlet 32 Node Name"] = None
        self._data["Outlet 33 Node Name"] = None
        self._data["Outlet 34 Node Name"] = None
        self._data["Outlet 35 Node Name"] = None
        self._data["Outlet 36 Node Name"] = None
        self._data["Outlet 37 Node Name"] = None
        self._data["Outlet 38 Node Name"] = None
        self._data["Outlet 39 Node Name"] = None
        self._data["Outlet 40 Node Name"] = None
        self._data["Outlet 41 Node Name"] = None
        self._data["Outlet 42 Node Name"] = None
        self._data["Outlet 43 Node Name"] = None
        self._data["Outlet 44 Node Name"] = None
        self._data["Outlet 45 Node Name"] = None
        self._data["Outlet 46 Node Name"] = None
        self._data["Outlet 47 Node Name"] = None
        self._data["Outlet 48 Node Name"] = None
        self._data["Outlet 49 Node Name"] = None
        self._data["Outlet 50 Node Name"] = None
        self._data["Outlet 51 Node Name"] = None
        self._data["Outlet 52 Node Name"] = None
        self._data["Outlet 53 Node Name"] = None
        self._data["Outlet 54 Node Name"] = None
        self._data["Outlet 55 Node Name"] = None
        self._data["Outlet 56 Node Name"] = None
        self._data["Outlet 57 Node Name"] = None
        self._data["Outlet 58 Node Name"] = None
        self._data["Outlet 59 Node Name"] = None
        self._data["Outlet 60 Node Name"] = None
        self._data["Outlet 61 Node Name"] = None
        self._data["Outlet 62 Node Name"] = None
        self._data["Outlet 63 Node Name"] = None
        self._data["Outlet 64 Node Name"] = None
        self._data["Outlet 65 Node Name"] = None
        self._data["Outlet 66 Node Name"] = None
        self._data["Outlet 67 Node Name"] = None
        self._data["Outlet 68 Node Name"] = None
        self._data["Outlet 69 Node Name"] = None
        self._data["Outlet 70 Node Name"] = None
        self._data["Outlet 71 Node Name"] = None
        self._data["Outlet 72 Node Name"] = None
        self._data["Outlet 73 Node Name"] = None
        self._data["Outlet 74 Node Name"] = None
        self._data["Outlet 75 Node Name"] = None
        self._data["Outlet 76 Node Name"] = None
        self._data["Outlet 77 Node Name"] = None
        self._data["Outlet 78 Node Name"] = None
        self._data["Outlet 79 Node Name"] = None
        self._data["Outlet 80 Node Name"] = None
        self._data["Outlet 81 Node Name"] = None
        self._data["Outlet 82 Node Name"] = None
        self._data["Outlet 83 Node Name"] = None
        self._data["Outlet 84 Node Name"] = None
        self._data["Outlet 85 Node Name"] = None
        self._data["Outlet 86 Node Name"] = None
        self._data["Outlet 87 Node Name"] = None
        self._data["Outlet 88 Node Name"] = None
        self._data["Outlet 89 Node Name"] = None
        self._data["Outlet 90 Node Name"] = None
        self._data["Outlet 91 Node Name"] = None
        self._data["Outlet 92 Node Name"] = None
        self._data["Outlet 93 Node Name"] = None
        self._data["Outlet 94 Node Name"] = None
        self._data["Outlet 95 Node Name"] = None
        self._data["Outlet 96 Node Name"] = None
        self._data["Outlet 97 Node Name"] = None
        self._data["Outlet 98 Node Name"] = None
        self._data["Outlet 99 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_1_node_name = None
        else:
            self.outlet_1_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_2_node_name = None
        else:
            self.outlet_2_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_3_node_name = None
        else:
            self.outlet_3_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_4_node_name = None
        else:
            self.outlet_4_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_5_node_name = None
        else:
            self.outlet_5_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_6_node_name = None
        else:
            self.outlet_6_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_7_node_name = None
        else:
            self.outlet_7_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_8_node_name = None
        else:
            self.outlet_8_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_9_node_name = None
        else:
            self.outlet_9_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_10_node_name = None
        else:
            self.outlet_10_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_11_node_name = None
        else:
            self.outlet_11_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_12_node_name = None
        else:
            self.outlet_12_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_13_node_name = None
        else:
            self.outlet_13_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_14_node_name = None
        else:
            self.outlet_14_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_15_node_name = None
        else:
            self.outlet_15_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_16_node_name = None
        else:
            self.outlet_16_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_17_node_name = None
        else:
            self.outlet_17_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_18_node_name = None
        else:
            self.outlet_18_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_19_node_name = None
        else:
            self.outlet_19_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_20_node_name = None
        else:
            self.outlet_20_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_21_node_name = None
        else:
            self.outlet_21_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_22_node_name = None
        else:
            self.outlet_22_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_23_node_name = None
        else:
            self.outlet_23_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_24_node_name = None
        else:
            self.outlet_24_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_25_node_name = None
        else:
            self.outlet_25_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_26_node_name = None
        else:
            self.outlet_26_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_27_node_name = None
        else:
            self.outlet_27_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_28_node_name = None
        else:
            self.outlet_28_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_29_node_name = None
        else:
            self.outlet_29_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_30_node_name = None
        else:
            self.outlet_30_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_31_node_name = None
        else:
            self.outlet_31_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_32_node_name = None
        else:
            self.outlet_32_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_33_node_name = None
        else:
            self.outlet_33_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_34_node_name = None
        else:
            self.outlet_34_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_35_node_name = None
        else:
            self.outlet_35_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_36_node_name = None
        else:
            self.outlet_36_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_37_node_name = None
        else:
            self.outlet_37_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_38_node_name = None
        else:
            self.outlet_38_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_39_node_name = None
        else:
            self.outlet_39_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_40_node_name = None
        else:
            self.outlet_40_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_41_node_name = None
        else:
            self.outlet_41_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_42_node_name = None
        else:
            self.outlet_42_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_43_node_name = None
        else:
            self.outlet_43_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_44_node_name = None
        else:
            self.outlet_44_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_45_node_name = None
        else:
            self.outlet_45_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_46_node_name = None
        else:
            self.outlet_46_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_47_node_name = None
        else:
            self.outlet_47_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_48_node_name = None
        else:
            self.outlet_48_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_49_node_name = None
        else:
            self.outlet_49_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_50_node_name = None
        else:
            self.outlet_50_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_51_node_name = None
        else:
            self.outlet_51_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_52_node_name = None
        else:
            self.outlet_52_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_53_node_name = None
        else:
            self.outlet_53_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_54_node_name = None
        else:
            self.outlet_54_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_55_node_name = None
        else:
            self.outlet_55_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_56_node_name = None
        else:
            self.outlet_56_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_57_node_name = None
        else:
            self.outlet_57_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_58_node_name = None
        else:
            self.outlet_58_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_59_node_name = None
        else:
            self.outlet_59_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_60_node_name = None
        else:
            self.outlet_60_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_61_node_name = None
        else:
            self.outlet_61_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_62_node_name = None
        else:
            self.outlet_62_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_63_node_name = None
        else:
            self.outlet_63_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_64_node_name = None
        else:
            self.outlet_64_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_65_node_name = None
        else:
            self.outlet_65_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_66_node_name = None
        else:
            self.outlet_66_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_67_node_name = None
        else:
            self.outlet_67_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_68_node_name = None
        else:
            self.outlet_68_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_69_node_name = None
        else:
            self.outlet_69_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_70_node_name = None
        else:
            self.outlet_70_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_71_node_name = None
        else:
            self.outlet_71_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_72_node_name = None
        else:
            self.outlet_72_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_73_node_name = None
        else:
            self.outlet_73_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_74_node_name = None
        else:
            self.outlet_74_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_75_node_name = None
        else:
            self.outlet_75_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_76_node_name = None
        else:
            self.outlet_76_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_77_node_name = None
        else:
            self.outlet_77_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_78_node_name = None
        else:
            self.outlet_78_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_79_node_name = None
        else:
            self.outlet_79_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_80_node_name = None
        else:
            self.outlet_80_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_81_node_name = None
        else:
            self.outlet_81_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_82_node_name = None
        else:
            self.outlet_82_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_83_node_name = None
        else:
            self.outlet_83_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_84_node_name = None
        else:
            self.outlet_84_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_85_node_name = None
        else:
            self.outlet_85_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_86_node_name = None
        else:
            self.outlet_86_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_87_node_name = None
        else:
            self.outlet_87_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_88_node_name = None
        else:
            self.outlet_88_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_89_node_name = None
        else:
            self.outlet_89_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_90_node_name = None
        else:
            self.outlet_90_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_91_node_name = None
        else:
            self.outlet_91_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_92_node_name = None
        else:
            self.outlet_92_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_93_node_name = None
        else:
            self.outlet_93_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_94_node_name = None
        else:
            self.outlet_94_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_95_node_name = None
        else:
            self.outlet_95_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_96_node_name = None
        else:
            self.outlet_96_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_97_node_name = None
        else:
            self.outlet_97_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_98_node_name = None
        else:
            self.outlet_98_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_99_node_name = None
        else:
            self.outlet_99_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_1_node_name(self):
        """Get outlet_1_node_name

        Returns:
            str: the value of `outlet_1_node_name` or None if not set
        """
        return self._data["Outlet 1 Node Name"]

    @outlet_1_node_name.setter
    def outlet_1_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_1_node_name`

        Args:
            value (str): value for IDD Field `outlet_1_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_1_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_1_node_name`')

        self._data["Outlet 1 Node Name"] = value

    @property
    def outlet_2_node_name(self):
        """Get outlet_2_node_name

        Returns:
            str: the value of `outlet_2_node_name` or None if not set
        """
        return self._data["Outlet 2 Node Name"]

    @outlet_2_node_name.setter
    def outlet_2_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_2_node_name`

        Args:
            value (str): value for IDD Field `outlet_2_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_2_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_2_node_name`')

        self._data["Outlet 2 Node Name"] = value

    @property
    def outlet_3_node_name(self):
        """Get outlet_3_node_name

        Returns:
            str: the value of `outlet_3_node_name` or None if not set
        """
        return self._data["Outlet 3 Node Name"]

    @outlet_3_node_name.setter
    def outlet_3_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_3_node_name`

        Args:
            value (str): value for IDD Field `outlet_3_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_3_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_3_node_name`')

        self._data["Outlet 3 Node Name"] = value

    @property
    def outlet_4_node_name(self):
        """Get outlet_4_node_name

        Returns:
            str: the value of `outlet_4_node_name` or None if not set
        """
        return self._data["Outlet 4 Node Name"]

    @outlet_4_node_name.setter
    def outlet_4_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_4_node_name`

        Args:
            value (str): value for IDD Field `outlet_4_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_4_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_4_node_name`')

        self._data["Outlet 4 Node Name"] = value

    @property
    def outlet_5_node_name(self):
        """Get outlet_5_node_name

        Returns:
            str: the value of `outlet_5_node_name` or None if not set
        """
        return self._data["Outlet 5 Node Name"]

    @outlet_5_node_name.setter
    def outlet_5_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_5_node_name`

        Args:
            value (str): value for IDD Field `outlet_5_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_5_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_5_node_name`')

        self._data["Outlet 5 Node Name"] = value

    @property
    def outlet_6_node_name(self):
        """Get outlet_6_node_name

        Returns:
            str: the value of `outlet_6_node_name` or None if not set
        """
        return self._data["Outlet 6 Node Name"]

    @outlet_6_node_name.setter
    def outlet_6_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_6_node_name`

        Args:
            value (str): value for IDD Field `outlet_6_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_6_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_6_node_name`')

        self._data["Outlet 6 Node Name"] = value

    @property
    def outlet_7_node_name(self):
        """Get outlet_7_node_name

        Returns:
            str: the value of `outlet_7_node_name` or None if not set
        """
        return self._data["Outlet 7 Node Name"]

    @outlet_7_node_name.setter
    def outlet_7_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_7_node_name`

        Args:
            value (str): value for IDD Field `outlet_7_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_7_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_7_node_name`')

        self._data["Outlet 7 Node Name"] = value

    @property
    def outlet_8_node_name(self):
        """Get outlet_8_node_name

        Returns:
            str: the value of `outlet_8_node_name` or None if not set
        """
        return self._data["Outlet 8 Node Name"]

    @outlet_8_node_name.setter
    def outlet_8_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_8_node_name`

        Args:
            value (str): value for IDD Field `outlet_8_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_8_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_8_node_name`')

        self._data["Outlet 8 Node Name"] = value

    @property
    def outlet_9_node_name(self):
        """Get outlet_9_node_name

        Returns:
            str: the value of `outlet_9_node_name` or None if not set
        """
        return self._data["Outlet 9 Node Name"]

    @outlet_9_node_name.setter
    def outlet_9_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_9_node_name`

        Args:
            value (str): value for IDD Field `outlet_9_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_9_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_9_node_name`')

        self._data["Outlet 9 Node Name"] = value

    @property
    def outlet_10_node_name(self):
        """Get outlet_10_node_name

        Returns:
            str: the value of `outlet_10_node_name` or None if not set
        """
        return self._data["Outlet 10 Node Name"]

    @outlet_10_node_name.setter
    def outlet_10_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_10_node_name`

        Args:
            value (str): value for IDD Field `outlet_10_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_10_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_10_node_name`')

        self._data["Outlet 10 Node Name"] = value

    @property
    def outlet_11_node_name(self):
        """Get outlet_11_node_name

        Returns:
            str: the value of `outlet_11_node_name` or None if not set
        """
        return self._data["Outlet 11 Node Name"]

    @outlet_11_node_name.setter
    def outlet_11_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_11_node_name`

        Args:
            value (str): value for IDD Field `outlet_11_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_11_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_11_node_name`')

        self._data["Outlet 11 Node Name"] = value

    @property
    def outlet_12_node_name(self):
        """Get outlet_12_node_name

        Returns:
            str: the value of `outlet_12_node_name` or None if not set
        """
        return self._data["Outlet 12 Node Name"]

    @outlet_12_node_name.setter
    def outlet_12_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_12_node_name`

        Args:
            value (str): value for IDD Field `outlet_12_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_12_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_12_node_name`')

        self._data["Outlet 12 Node Name"] = value

    @property
    def outlet_13_node_name(self):
        """Get outlet_13_node_name

        Returns:
            str: the value of `outlet_13_node_name` or None if not set
        """
        return self._data["Outlet 13 Node Name"]

    @outlet_13_node_name.setter
    def outlet_13_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_13_node_name`

        Args:
            value (str): value for IDD Field `outlet_13_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_13_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_13_node_name`')

        self._data["Outlet 13 Node Name"] = value

    @property
    def outlet_14_node_name(self):
        """Get outlet_14_node_name

        Returns:
            str: the value of `outlet_14_node_name` or None if not set
        """
        return self._data["Outlet 14 Node Name"]

    @outlet_14_node_name.setter
    def outlet_14_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_14_node_name`

        Args:
            value (str): value for IDD Field `outlet_14_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_14_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_14_node_name`')

        self._data["Outlet 14 Node Name"] = value

    @property
    def outlet_15_node_name(self):
        """Get outlet_15_node_name

        Returns:
            str: the value of `outlet_15_node_name` or None if not set
        """
        return self._data["Outlet 15 Node Name"]

    @outlet_15_node_name.setter
    def outlet_15_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_15_node_name`

        Args:
            value (str): value for IDD Field `outlet_15_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_15_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_15_node_name`')

        self._data["Outlet 15 Node Name"] = value

    @property
    def outlet_16_node_name(self):
        """Get outlet_16_node_name

        Returns:
            str: the value of `outlet_16_node_name` or None if not set
        """
        return self._data["Outlet 16 Node Name"]

    @outlet_16_node_name.setter
    def outlet_16_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_16_node_name`

        Args:
            value (str): value for IDD Field `outlet_16_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_16_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_16_node_name`')

        self._data["Outlet 16 Node Name"] = value

    @property
    def outlet_17_node_name(self):
        """Get outlet_17_node_name

        Returns:
            str: the value of `outlet_17_node_name` or None if not set
        """
        return self._data["Outlet 17 Node Name"]

    @outlet_17_node_name.setter
    def outlet_17_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_17_node_name`

        Args:
            value (str): value for IDD Field `outlet_17_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_17_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_17_node_name`')

        self._data["Outlet 17 Node Name"] = value

    @property
    def outlet_18_node_name(self):
        """Get outlet_18_node_name

        Returns:
            str: the value of `outlet_18_node_name` or None if not set
        """
        return self._data["Outlet 18 Node Name"]

    @outlet_18_node_name.setter
    def outlet_18_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_18_node_name`

        Args:
            value (str): value for IDD Field `outlet_18_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_18_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_18_node_name`')

        self._data["Outlet 18 Node Name"] = value

    @property
    def outlet_19_node_name(self):
        """Get outlet_19_node_name

        Returns:
            str: the value of `outlet_19_node_name` or None if not set
        """
        return self._data["Outlet 19 Node Name"]

    @outlet_19_node_name.setter
    def outlet_19_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_19_node_name`

        Args:
            value (str): value for IDD Field `outlet_19_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_19_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_19_node_name`')

        self._data["Outlet 19 Node Name"] = value

    @property
    def outlet_20_node_name(self):
        """Get outlet_20_node_name

        Returns:
            str: the value of `outlet_20_node_name` or None if not set
        """
        return self._data["Outlet 20 Node Name"]

    @outlet_20_node_name.setter
    def outlet_20_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_20_node_name`

        Args:
            value (str): value for IDD Field `outlet_20_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_20_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_20_node_name`')

        self._data["Outlet 20 Node Name"] = value

    @property
    def outlet_21_node_name(self):
        """Get outlet_21_node_name

        Returns:
            str: the value of `outlet_21_node_name` or None if not set
        """
        return self._data["Outlet 21 Node Name"]

    @outlet_21_node_name.setter
    def outlet_21_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_21_node_name`

        Args:
            value (str): value for IDD Field `outlet_21_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_21_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_21_node_name`')

        self._data["Outlet 21 Node Name"] = value

    @property
    def outlet_22_node_name(self):
        """Get outlet_22_node_name

        Returns:
            str: the value of `outlet_22_node_name` or None if not set
        """
        return self._data["Outlet 22 Node Name"]

    @outlet_22_node_name.setter
    def outlet_22_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_22_node_name`

        Args:
            value (str): value for IDD Field `outlet_22_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_22_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_22_node_name`')

        self._data["Outlet 22 Node Name"] = value

    @property
    def outlet_23_node_name(self):
        """Get outlet_23_node_name

        Returns:
            str: the value of `outlet_23_node_name` or None if not set
        """
        return self._data["Outlet 23 Node Name"]

    @outlet_23_node_name.setter
    def outlet_23_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_23_node_name`

        Args:
            value (str): value for IDD Field `outlet_23_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_23_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_23_node_name`')

        self._data["Outlet 23 Node Name"] = value

    @property
    def outlet_24_node_name(self):
        """Get outlet_24_node_name

        Returns:
            str: the value of `outlet_24_node_name` or None if not set
        """
        return self._data["Outlet 24 Node Name"]

    @outlet_24_node_name.setter
    def outlet_24_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_24_node_name`

        Args:
            value (str): value for IDD Field `outlet_24_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_24_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_24_node_name`')

        self._data["Outlet 24 Node Name"] = value

    @property
    def outlet_25_node_name(self):
        """Get outlet_25_node_name

        Returns:
            str: the value of `outlet_25_node_name` or None if not set
        """
        return self._data["Outlet 25 Node Name"]

    @outlet_25_node_name.setter
    def outlet_25_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_25_node_name`

        Args:
            value (str): value for IDD Field `outlet_25_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_25_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_25_node_name`')

        self._data["Outlet 25 Node Name"] = value

    @property
    def outlet_26_node_name(self):
        """Get outlet_26_node_name

        Returns:
            str: the value of `outlet_26_node_name` or None if not set
        """
        return self._data["Outlet 26 Node Name"]

    @outlet_26_node_name.setter
    def outlet_26_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_26_node_name`

        Args:
            value (str): value for IDD Field `outlet_26_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_26_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_26_node_name`')

        self._data["Outlet 26 Node Name"] = value

    @property
    def outlet_27_node_name(self):
        """Get outlet_27_node_name

        Returns:
            str: the value of `outlet_27_node_name` or None if not set
        """
        return self._data["Outlet 27 Node Name"]

    @outlet_27_node_name.setter
    def outlet_27_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_27_node_name`

        Args:
            value (str): value for IDD Field `outlet_27_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_27_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_27_node_name`')

        self._data["Outlet 27 Node Name"] = value

    @property
    def outlet_28_node_name(self):
        """Get outlet_28_node_name

        Returns:
            str: the value of `outlet_28_node_name` or None if not set
        """
        return self._data["Outlet 28 Node Name"]

    @outlet_28_node_name.setter
    def outlet_28_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_28_node_name`

        Args:
            value (str): value for IDD Field `outlet_28_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_28_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_28_node_name`')

        self._data["Outlet 28 Node Name"] = value

    @property
    def outlet_29_node_name(self):
        """Get outlet_29_node_name

        Returns:
            str: the value of `outlet_29_node_name` or None if not set
        """
        return self._data["Outlet 29 Node Name"]

    @outlet_29_node_name.setter
    def outlet_29_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_29_node_name`

        Args:
            value (str): value for IDD Field `outlet_29_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_29_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_29_node_name`')

        self._data["Outlet 29 Node Name"] = value

    @property
    def outlet_30_node_name(self):
        """Get outlet_30_node_name

        Returns:
            str: the value of `outlet_30_node_name` or None if not set
        """
        return self._data["Outlet 30 Node Name"]

    @outlet_30_node_name.setter
    def outlet_30_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_30_node_name`

        Args:
            value (str): value for IDD Field `outlet_30_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_30_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_30_node_name`')

        self._data["Outlet 30 Node Name"] = value

    @property
    def outlet_31_node_name(self):
        """Get outlet_31_node_name

        Returns:
            str: the value of `outlet_31_node_name` or None if not set
        """
        return self._data["Outlet 31 Node Name"]

    @outlet_31_node_name.setter
    def outlet_31_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_31_node_name`

        Args:
            value (str): value for IDD Field `outlet_31_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_31_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_31_node_name`')

        self._data["Outlet 31 Node Name"] = value

    @property
    def outlet_32_node_name(self):
        """Get outlet_32_node_name

        Returns:
            str: the value of `outlet_32_node_name` or None if not set
        """
        return self._data["Outlet 32 Node Name"]

    @outlet_32_node_name.setter
    def outlet_32_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_32_node_name`

        Args:
            value (str): value for IDD Field `outlet_32_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_32_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_32_node_name`')

        self._data["Outlet 32 Node Name"] = value

    @property
    def outlet_33_node_name(self):
        """Get outlet_33_node_name

        Returns:
            str: the value of `outlet_33_node_name` or None if not set
        """
        return self._data["Outlet 33 Node Name"]

    @outlet_33_node_name.setter
    def outlet_33_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_33_node_name`

        Args:
            value (str): value for IDD Field `outlet_33_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_33_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_33_node_name`')

        self._data["Outlet 33 Node Name"] = value

    @property
    def outlet_34_node_name(self):
        """Get outlet_34_node_name

        Returns:
            str: the value of `outlet_34_node_name` or None if not set
        """
        return self._data["Outlet 34 Node Name"]

    @outlet_34_node_name.setter
    def outlet_34_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_34_node_name`

        Args:
            value (str): value for IDD Field `outlet_34_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_34_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_34_node_name`')

        self._data["Outlet 34 Node Name"] = value

    @property
    def outlet_35_node_name(self):
        """Get outlet_35_node_name

        Returns:
            str: the value of `outlet_35_node_name` or None if not set
        """
        return self._data["Outlet 35 Node Name"]

    @outlet_35_node_name.setter
    def outlet_35_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_35_node_name`

        Args:
            value (str): value for IDD Field `outlet_35_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_35_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_35_node_name`')

        self._data["Outlet 35 Node Name"] = value

    @property
    def outlet_36_node_name(self):
        """Get outlet_36_node_name

        Returns:
            str: the value of `outlet_36_node_name` or None if not set
        """
        return self._data["Outlet 36 Node Name"]

    @outlet_36_node_name.setter
    def outlet_36_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_36_node_name`

        Args:
            value (str): value for IDD Field `outlet_36_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_36_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_36_node_name`')

        self._data["Outlet 36 Node Name"] = value

    @property
    def outlet_37_node_name(self):
        """Get outlet_37_node_name

        Returns:
            str: the value of `outlet_37_node_name` or None if not set
        """
        return self._data["Outlet 37 Node Name"]

    @outlet_37_node_name.setter
    def outlet_37_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_37_node_name`

        Args:
            value (str): value for IDD Field `outlet_37_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_37_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_37_node_name`')

        self._data["Outlet 37 Node Name"] = value

    @property
    def outlet_38_node_name(self):
        """Get outlet_38_node_name

        Returns:
            str: the value of `outlet_38_node_name` or None if not set
        """
        return self._data["Outlet 38 Node Name"]

    @outlet_38_node_name.setter
    def outlet_38_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_38_node_name`

        Args:
            value (str): value for IDD Field `outlet_38_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_38_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_38_node_name`')

        self._data["Outlet 38 Node Name"] = value

    @property
    def outlet_39_node_name(self):
        """Get outlet_39_node_name

        Returns:
            str: the value of `outlet_39_node_name` or None if not set
        """
        return self._data["Outlet 39 Node Name"]

    @outlet_39_node_name.setter
    def outlet_39_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_39_node_name`

        Args:
            value (str): value for IDD Field `outlet_39_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_39_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_39_node_name`')

        self._data["Outlet 39 Node Name"] = value

    @property
    def outlet_40_node_name(self):
        """Get outlet_40_node_name

        Returns:
            str: the value of `outlet_40_node_name` or None if not set
        """
        return self._data["Outlet 40 Node Name"]

    @outlet_40_node_name.setter
    def outlet_40_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_40_node_name`

        Args:
            value (str): value for IDD Field `outlet_40_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_40_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_40_node_name`')

        self._data["Outlet 40 Node Name"] = value

    @property
    def outlet_41_node_name(self):
        """Get outlet_41_node_name

        Returns:
            str: the value of `outlet_41_node_name` or None if not set
        """
        return self._data["Outlet 41 Node Name"]

    @outlet_41_node_name.setter
    def outlet_41_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_41_node_name`

        Args:
            value (str): value for IDD Field `outlet_41_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_41_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_41_node_name`')

        self._data["Outlet 41 Node Name"] = value

    @property
    def outlet_42_node_name(self):
        """Get outlet_42_node_name

        Returns:
            str: the value of `outlet_42_node_name` or None if not set
        """
        return self._data["Outlet 42 Node Name"]

    @outlet_42_node_name.setter
    def outlet_42_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_42_node_name`

        Args:
            value (str): value for IDD Field `outlet_42_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_42_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_42_node_name`')

        self._data["Outlet 42 Node Name"] = value

    @property
    def outlet_43_node_name(self):
        """Get outlet_43_node_name

        Returns:
            str: the value of `outlet_43_node_name` or None if not set
        """
        return self._data["Outlet 43 Node Name"]

    @outlet_43_node_name.setter
    def outlet_43_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_43_node_name`

        Args:
            value (str): value for IDD Field `outlet_43_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_43_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_43_node_name`')

        self._data["Outlet 43 Node Name"] = value

    @property
    def outlet_44_node_name(self):
        """Get outlet_44_node_name

        Returns:
            str: the value of `outlet_44_node_name` or None if not set
        """
        return self._data["Outlet 44 Node Name"]

    @outlet_44_node_name.setter
    def outlet_44_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_44_node_name`

        Args:
            value (str): value for IDD Field `outlet_44_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_44_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_44_node_name`')

        self._data["Outlet 44 Node Name"] = value

    @property
    def outlet_45_node_name(self):
        """Get outlet_45_node_name

        Returns:
            str: the value of `outlet_45_node_name` or None if not set
        """
        return self._data["Outlet 45 Node Name"]

    @outlet_45_node_name.setter
    def outlet_45_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_45_node_name`

        Args:
            value (str): value for IDD Field `outlet_45_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_45_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_45_node_name`')

        self._data["Outlet 45 Node Name"] = value

    @property
    def outlet_46_node_name(self):
        """Get outlet_46_node_name

        Returns:
            str: the value of `outlet_46_node_name` or None if not set
        """
        return self._data["Outlet 46 Node Name"]

    @outlet_46_node_name.setter
    def outlet_46_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_46_node_name`

        Args:
            value (str): value for IDD Field `outlet_46_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_46_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_46_node_name`')

        self._data["Outlet 46 Node Name"] = value

    @property
    def outlet_47_node_name(self):
        """Get outlet_47_node_name

        Returns:
            str: the value of `outlet_47_node_name` or None if not set
        """
        return self._data["Outlet 47 Node Name"]

    @outlet_47_node_name.setter
    def outlet_47_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_47_node_name`

        Args:
            value (str): value for IDD Field `outlet_47_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_47_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_47_node_name`')

        self._data["Outlet 47 Node Name"] = value

    @property
    def outlet_48_node_name(self):
        """Get outlet_48_node_name

        Returns:
            str: the value of `outlet_48_node_name` or None if not set
        """
        return self._data["Outlet 48 Node Name"]

    @outlet_48_node_name.setter
    def outlet_48_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_48_node_name`

        Args:
            value (str): value for IDD Field `outlet_48_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_48_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_48_node_name`')

        self._data["Outlet 48 Node Name"] = value

    @property
    def outlet_49_node_name(self):
        """Get outlet_49_node_name

        Returns:
            str: the value of `outlet_49_node_name` or None if not set
        """
        return self._data["Outlet 49 Node Name"]

    @outlet_49_node_name.setter
    def outlet_49_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_49_node_name`

        Args:
            value (str): value for IDD Field `outlet_49_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_49_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_49_node_name`')

        self._data["Outlet 49 Node Name"] = value

    @property
    def outlet_50_node_name(self):
        """Get outlet_50_node_name

        Returns:
            str: the value of `outlet_50_node_name` or None if not set
        """
        return self._data["Outlet 50 Node Name"]

    @outlet_50_node_name.setter
    def outlet_50_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_50_node_name`

        Args:
            value (str): value for IDD Field `outlet_50_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_50_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_50_node_name`')

        self._data["Outlet 50 Node Name"] = value

    @property
    def outlet_51_node_name(self):
        """Get outlet_51_node_name

        Returns:
            str: the value of `outlet_51_node_name` or None if not set
        """
        return self._data["Outlet 51 Node Name"]

    @outlet_51_node_name.setter
    def outlet_51_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_51_node_name`

        Args:
            value (str): value for IDD Field `outlet_51_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_51_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_51_node_name`')

        self._data["Outlet 51 Node Name"] = value

    @property
    def outlet_52_node_name(self):
        """Get outlet_52_node_name

        Returns:
            str: the value of `outlet_52_node_name` or None if not set
        """
        return self._data["Outlet 52 Node Name"]

    @outlet_52_node_name.setter
    def outlet_52_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_52_node_name`

        Args:
            value (str): value for IDD Field `outlet_52_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_52_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_52_node_name`')

        self._data["Outlet 52 Node Name"] = value

    @property
    def outlet_53_node_name(self):
        """Get outlet_53_node_name

        Returns:
            str: the value of `outlet_53_node_name` or None if not set
        """
        return self._data["Outlet 53 Node Name"]

    @outlet_53_node_name.setter
    def outlet_53_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_53_node_name`

        Args:
            value (str): value for IDD Field `outlet_53_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_53_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_53_node_name`')

        self._data["Outlet 53 Node Name"] = value

    @property
    def outlet_54_node_name(self):
        """Get outlet_54_node_name

        Returns:
            str: the value of `outlet_54_node_name` or None if not set
        """
        return self._data["Outlet 54 Node Name"]

    @outlet_54_node_name.setter
    def outlet_54_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_54_node_name`

        Args:
            value (str): value for IDD Field `outlet_54_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_54_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_54_node_name`')

        self._data["Outlet 54 Node Name"] = value

    @property
    def outlet_55_node_name(self):
        """Get outlet_55_node_name

        Returns:
            str: the value of `outlet_55_node_name` or None if not set
        """
        return self._data["Outlet 55 Node Name"]

    @outlet_55_node_name.setter
    def outlet_55_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_55_node_name`

        Args:
            value (str): value for IDD Field `outlet_55_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_55_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_55_node_name`')

        self._data["Outlet 55 Node Name"] = value

    @property
    def outlet_56_node_name(self):
        """Get outlet_56_node_name

        Returns:
            str: the value of `outlet_56_node_name` or None if not set
        """
        return self._data["Outlet 56 Node Name"]

    @outlet_56_node_name.setter
    def outlet_56_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_56_node_name`

        Args:
            value (str): value for IDD Field `outlet_56_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_56_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_56_node_name`')

        self._data["Outlet 56 Node Name"] = value

    @property
    def outlet_57_node_name(self):
        """Get outlet_57_node_name

        Returns:
            str: the value of `outlet_57_node_name` or None if not set
        """
        return self._data["Outlet 57 Node Name"]

    @outlet_57_node_name.setter
    def outlet_57_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_57_node_name`

        Args:
            value (str): value for IDD Field `outlet_57_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_57_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_57_node_name`')

        self._data["Outlet 57 Node Name"] = value

    @property
    def outlet_58_node_name(self):
        """Get outlet_58_node_name

        Returns:
            str: the value of `outlet_58_node_name` or None if not set
        """
        return self._data["Outlet 58 Node Name"]

    @outlet_58_node_name.setter
    def outlet_58_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_58_node_name`

        Args:
            value (str): value for IDD Field `outlet_58_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_58_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_58_node_name`')

        self._data["Outlet 58 Node Name"] = value

    @property
    def outlet_59_node_name(self):
        """Get outlet_59_node_name

        Returns:
            str: the value of `outlet_59_node_name` or None if not set
        """
        return self._data["Outlet 59 Node Name"]

    @outlet_59_node_name.setter
    def outlet_59_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_59_node_name`

        Args:
            value (str): value for IDD Field `outlet_59_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_59_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_59_node_name`')

        self._data["Outlet 59 Node Name"] = value

    @property
    def outlet_60_node_name(self):
        """Get outlet_60_node_name

        Returns:
            str: the value of `outlet_60_node_name` or None if not set
        """
        return self._data["Outlet 60 Node Name"]

    @outlet_60_node_name.setter
    def outlet_60_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_60_node_name`

        Args:
            value (str): value for IDD Field `outlet_60_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_60_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_60_node_name`')

        self._data["Outlet 60 Node Name"] = value

    @property
    def outlet_61_node_name(self):
        """Get outlet_61_node_name

        Returns:
            str: the value of `outlet_61_node_name` or None if not set
        """
        return self._data["Outlet 61 Node Name"]

    @outlet_61_node_name.setter
    def outlet_61_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_61_node_name`

        Args:
            value (str): value for IDD Field `outlet_61_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_61_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_61_node_name`')

        self._data["Outlet 61 Node Name"] = value

    @property
    def outlet_62_node_name(self):
        """Get outlet_62_node_name

        Returns:
            str: the value of `outlet_62_node_name` or None if not set
        """
        return self._data["Outlet 62 Node Name"]

    @outlet_62_node_name.setter
    def outlet_62_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_62_node_name`

        Args:
            value (str): value for IDD Field `outlet_62_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_62_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_62_node_name`')

        self._data["Outlet 62 Node Name"] = value

    @property
    def outlet_63_node_name(self):
        """Get outlet_63_node_name

        Returns:
            str: the value of `outlet_63_node_name` or None if not set
        """
        return self._data["Outlet 63 Node Name"]

    @outlet_63_node_name.setter
    def outlet_63_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_63_node_name`

        Args:
            value (str): value for IDD Field `outlet_63_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_63_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_63_node_name`')

        self._data["Outlet 63 Node Name"] = value

    @property
    def outlet_64_node_name(self):
        """Get outlet_64_node_name

        Returns:
            str: the value of `outlet_64_node_name` or None if not set
        """
        return self._data["Outlet 64 Node Name"]

    @outlet_64_node_name.setter
    def outlet_64_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_64_node_name`

        Args:
            value (str): value for IDD Field `outlet_64_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_64_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_64_node_name`')

        self._data["Outlet 64 Node Name"] = value

    @property
    def outlet_65_node_name(self):
        """Get outlet_65_node_name

        Returns:
            str: the value of `outlet_65_node_name` or None if not set
        """
        return self._data["Outlet 65 Node Name"]

    @outlet_65_node_name.setter
    def outlet_65_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_65_node_name`

        Args:
            value (str): value for IDD Field `outlet_65_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_65_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_65_node_name`')

        self._data["Outlet 65 Node Name"] = value

    @property
    def outlet_66_node_name(self):
        """Get outlet_66_node_name

        Returns:
            str: the value of `outlet_66_node_name` or None if not set
        """
        return self._data["Outlet 66 Node Name"]

    @outlet_66_node_name.setter
    def outlet_66_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_66_node_name`

        Args:
            value (str): value for IDD Field `outlet_66_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_66_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_66_node_name`')

        self._data["Outlet 66 Node Name"] = value

    @property
    def outlet_67_node_name(self):
        """Get outlet_67_node_name

        Returns:
            str: the value of `outlet_67_node_name` or None if not set
        """
        return self._data["Outlet 67 Node Name"]

    @outlet_67_node_name.setter
    def outlet_67_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_67_node_name`

        Args:
            value (str): value for IDD Field `outlet_67_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_67_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_67_node_name`')

        self._data["Outlet 67 Node Name"] = value

    @property
    def outlet_68_node_name(self):
        """Get outlet_68_node_name

        Returns:
            str: the value of `outlet_68_node_name` or None if not set
        """
        return self._data["Outlet 68 Node Name"]

    @outlet_68_node_name.setter
    def outlet_68_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_68_node_name`

        Args:
            value (str): value for IDD Field `outlet_68_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_68_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_68_node_name`')

        self._data["Outlet 68 Node Name"] = value

    @property
    def outlet_69_node_name(self):
        """Get outlet_69_node_name

        Returns:
            str: the value of `outlet_69_node_name` or None if not set
        """
        return self._data["Outlet 69 Node Name"]

    @outlet_69_node_name.setter
    def outlet_69_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_69_node_name`

        Args:
            value (str): value for IDD Field `outlet_69_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_69_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_69_node_name`')

        self._data["Outlet 69 Node Name"] = value

    @property
    def outlet_70_node_name(self):
        """Get outlet_70_node_name

        Returns:
            str: the value of `outlet_70_node_name` or None if not set
        """
        return self._data["Outlet 70 Node Name"]

    @outlet_70_node_name.setter
    def outlet_70_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_70_node_name`

        Args:
            value (str): value for IDD Field `outlet_70_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_70_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_70_node_name`')

        self._data["Outlet 70 Node Name"] = value

    @property
    def outlet_71_node_name(self):
        """Get outlet_71_node_name

        Returns:
            str: the value of `outlet_71_node_name` or None if not set
        """
        return self._data["Outlet 71 Node Name"]

    @outlet_71_node_name.setter
    def outlet_71_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_71_node_name`

        Args:
            value (str): value for IDD Field `outlet_71_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_71_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_71_node_name`')

        self._data["Outlet 71 Node Name"] = value

    @property
    def outlet_72_node_name(self):
        """Get outlet_72_node_name

        Returns:
            str: the value of `outlet_72_node_name` or None if not set
        """
        return self._data["Outlet 72 Node Name"]

    @outlet_72_node_name.setter
    def outlet_72_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_72_node_name`

        Args:
            value (str): value for IDD Field `outlet_72_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_72_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_72_node_name`')

        self._data["Outlet 72 Node Name"] = value

    @property
    def outlet_73_node_name(self):
        """Get outlet_73_node_name

        Returns:
            str: the value of `outlet_73_node_name` or None if not set
        """
        return self._data["Outlet 73 Node Name"]

    @outlet_73_node_name.setter
    def outlet_73_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_73_node_name`

        Args:
            value (str): value for IDD Field `outlet_73_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_73_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_73_node_name`')

        self._data["Outlet 73 Node Name"] = value

    @property
    def outlet_74_node_name(self):
        """Get outlet_74_node_name

        Returns:
            str: the value of `outlet_74_node_name` or None if not set
        """
        return self._data["Outlet 74 Node Name"]

    @outlet_74_node_name.setter
    def outlet_74_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_74_node_name`

        Args:
            value (str): value for IDD Field `outlet_74_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_74_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_74_node_name`')

        self._data["Outlet 74 Node Name"] = value

    @property
    def outlet_75_node_name(self):
        """Get outlet_75_node_name

        Returns:
            str: the value of `outlet_75_node_name` or None if not set
        """
        return self._data["Outlet 75 Node Name"]

    @outlet_75_node_name.setter
    def outlet_75_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_75_node_name`

        Args:
            value (str): value for IDD Field `outlet_75_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_75_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_75_node_name`')

        self._data["Outlet 75 Node Name"] = value

    @property
    def outlet_76_node_name(self):
        """Get outlet_76_node_name

        Returns:
            str: the value of `outlet_76_node_name` or None if not set
        """
        return self._data["Outlet 76 Node Name"]

    @outlet_76_node_name.setter
    def outlet_76_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_76_node_name`

        Args:
            value (str): value for IDD Field `outlet_76_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_76_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_76_node_name`')

        self._data["Outlet 76 Node Name"] = value

    @property
    def outlet_77_node_name(self):
        """Get outlet_77_node_name

        Returns:
            str: the value of `outlet_77_node_name` or None if not set
        """
        return self._data["Outlet 77 Node Name"]

    @outlet_77_node_name.setter
    def outlet_77_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_77_node_name`

        Args:
            value (str): value for IDD Field `outlet_77_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_77_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_77_node_name`')

        self._data["Outlet 77 Node Name"] = value

    @property
    def outlet_78_node_name(self):
        """Get outlet_78_node_name

        Returns:
            str: the value of `outlet_78_node_name` or None if not set
        """
        return self._data["Outlet 78 Node Name"]

    @outlet_78_node_name.setter
    def outlet_78_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_78_node_name`

        Args:
            value (str): value for IDD Field `outlet_78_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_78_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_78_node_name`')

        self._data["Outlet 78 Node Name"] = value

    @property
    def outlet_79_node_name(self):
        """Get outlet_79_node_name

        Returns:
            str: the value of `outlet_79_node_name` or None if not set
        """
        return self._data["Outlet 79 Node Name"]

    @outlet_79_node_name.setter
    def outlet_79_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_79_node_name`

        Args:
            value (str): value for IDD Field `outlet_79_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_79_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_79_node_name`')

        self._data["Outlet 79 Node Name"] = value

    @property
    def outlet_80_node_name(self):
        """Get outlet_80_node_name

        Returns:
            str: the value of `outlet_80_node_name` or None if not set
        """
        return self._data["Outlet 80 Node Name"]

    @outlet_80_node_name.setter
    def outlet_80_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_80_node_name`

        Args:
            value (str): value for IDD Field `outlet_80_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_80_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_80_node_name`')

        self._data["Outlet 80 Node Name"] = value

    @property
    def outlet_81_node_name(self):
        """Get outlet_81_node_name

        Returns:
            str: the value of `outlet_81_node_name` or None if not set
        """
        return self._data["Outlet 81 Node Name"]

    @outlet_81_node_name.setter
    def outlet_81_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_81_node_name`

        Args:
            value (str): value for IDD Field `outlet_81_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_81_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_81_node_name`')

        self._data["Outlet 81 Node Name"] = value

    @property
    def outlet_82_node_name(self):
        """Get outlet_82_node_name

        Returns:
            str: the value of `outlet_82_node_name` or None if not set
        """
        return self._data["Outlet 82 Node Name"]

    @outlet_82_node_name.setter
    def outlet_82_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_82_node_name`

        Args:
            value (str): value for IDD Field `outlet_82_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_82_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_82_node_name`')

        self._data["Outlet 82 Node Name"] = value

    @property
    def outlet_83_node_name(self):
        """Get outlet_83_node_name

        Returns:
            str: the value of `outlet_83_node_name` or None if not set
        """
        return self._data["Outlet 83 Node Name"]

    @outlet_83_node_name.setter
    def outlet_83_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_83_node_name`

        Args:
            value (str): value for IDD Field `outlet_83_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_83_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_83_node_name`')

        self._data["Outlet 83 Node Name"] = value

    @property
    def outlet_84_node_name(self):
        """Get outlet_84_node_name

        Returns:
            str: the value of `outlet_84_node_name` or None if not set
        """
        return self._data["Outlet 84 Node Name"]

    @outlet_84_node_name.setter
    def outlet_84_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_84_node_name`

        Args:
            value (str): value for IDD Field `outlet_84_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_84_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_84_node_name`')

        self._data["Outlet 84 Node Name"] = value

    @property
    def outlet_85_node_name(self):
        """Get outlet_85_node_name

        Returns:
            str: the value of `outlet_85_node_name` or None if not set
        """
        return self._data["Outlet 85 Node Name"]

    @outlet_85_node_name.setter
    def outlet_85_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_85_node_name`

        Args:
            value (str): value for IDD Field `outlet_85_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_85_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_85_node_name`')

        self._data["Outlet 85 Node Name"] = value

    @property
    def outlet_86_node_name(self):
        """Get outlet_86_node_name

        Returns:
            str: the value of `outlet_86_node_name` or None if not set
        """
        return self._data["Outlet 86 Node Name"]

    @outlet_86_node_name.setter
    def outlet_86_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_86_node_name`

        Args:
            value (str): value for IDD Field `outlet_86_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_86_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_86_node_name`')

        self._data["Outlet 86 Node Name"] = value

    @property
    def outlet_87_node_name(self):
        """Get outlet_87_node_name

        Returns:
            str: the value of `outlet_87_node_name` or None if not set
        """
        return self._data["Outlet 87 Node Name"]

    @outlet_87_node_name.setter
    def outlet_87_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_87_node_name`

        Args:
            value (str): value for IDD Field `outlet_87_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_87_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_87_node_name`')

        self._data["Outlet 87 Node Name"] = value

    @property
    def outlet_88_node_name(self):
        """Get outlet_88_node_name

        Returns:
            str: the value of `outlet_88_node_name` or None if not set
        """
        return self._data["Outlet 88 Node Name"]

    @outlet_88_node_name.setter
    def outlet_88_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_88_node_name`

        Args:
            value (str): value for IDD Field `outlet_88_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_88_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_88_node_name`')

        self._data["Outlet 88 Node Name"] = value

    @property
    def outlet_89_node_name(self):
        """Get outlet_89_node_name

        Returns:
            str: the value of `outlet_89_node_name` or None if not set
        """
        return self._data["Outlet 89 Node Name"]

    @outlet_89_node_name.setter
    def outlet_89_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_89_node_name`

        Args:
            value (str): value for IDD Field `outlet_89_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_89_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_89_node_name`')

        self._data["Outlet 89 Node Name"] = value

    @property
    def outlet_90_node_name(self):
        """Get outlet_90_node_name

        Returns:
            str: the value of `outlet_90_node_name` or None if not set
        """
        return self._data["Outlet 90 Node Name"]

    @outlet_90_node_name.setter
    def outlet_90_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_90_node_name`

        Args:
            value (str): value for IDD Field `outlet_90_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_90_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_90_node_name`')

        self._data["Outlet 90 Node Name"] = value

    @property
    def outlet_91_node_name(self):
        """Get outlet_91_node_name

        Returns:
            str: the value of `outlet_91_node_name` or None if not set
        """
        return self._data["Outlet 91 Node Name"]

    @outlet_91_node_name.setter
    def outlet_91_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_91_node_name`

        Args:
            value (str): value for IDD Field `outlet_91_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_91_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_91_node_name`')

        self._data["Outlet 91 Node Name"] = value

    @property
    def outlet_92_node_name(self):
        """Get outlet_92_node_name

        Returns:
            str: the value of `outlet_92_node_name` or None if not set
        """
        return self._data["Outlet 92 Node Name"]

    @outlet_92_node_name.setter
    def outlet_92_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_92_node_name`

        Args:
            value (str): value for IDD Field `outlet_92_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_92_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_92_node_name`')

        self._data["Outlet 92 Node Name"] = value

    @property
    def outlet_93_node_name(self):
        """Get outlet_93_node_name

        Returns:
            str: the value of `outlet_93_node_name` or None if not set
        """
        return self._data["Outlet 93 Node Name"]

    @outlet_93_node_name.setter
    def outlet_93_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_93_node_name`

        Args:
            value (str): value for IDD Field `outlet_93_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_93_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_93_node_name`')

        self._data["Outlet 93 Node Name"] = value

    @property
    def outlet_94_node_name(self):
        """Get outlet_94_node_name

        Returns:
            str: the value of `outlet_94_node_name` or None if not set
        """
        return self._data["Outlet 94 Node Name"]

    @outlet_94_node_name.setter
    def outlet_94_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_94_node_name`

        Args:
            value (str): value for IDD Field `outlet_94_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_94_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_94_node_name`')

        self._data["Outlet 94 Node Name"] = value

    @property
    def outlet_95_node_name(self):
        """Get outlet_95_node_name

        Returns:
            str: the value of `outlet_95_node_name` or None if not set
        """
        return self._data["Outlet 95 Node Name"]

    @outlet_95_node_name.setter
    def outlet_95_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_95_node_name`

        Args:
            value (str): value for IDD Field `outlet_95_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_95_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_95_node_name`')

        self._data["Outlet 95 Node Name"] = value

    @property
    def outlet_96_node_name(self):
        """Get outlet_96_node_name

        Returns:
            str: the value of `outlet_96_node_name` or None if not set
        """
        return self._data["Outlet 96 Node Name"]

    @outlet_96_node_name.setter
    def outlet_96_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_96_node_name`

        Args:
            value (str): value for IDD Field `outlet_96_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_96_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_96_node_name`')

        self._data["Outlet 96 Node Name"] = value

    @property
    def outlet_97_node_name(self):
        """Get outlet_97_node_name

        Returns:
            str: the value of `outlet_97_node_name` or None if not set
        """
        return self._data["Outlet 97 Node Name"]

    @outlet_97_node_name.setter
    def outlet_97_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_97_node_name`

        Args:
            value (str): value for IDD Field `outlet_97_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_97_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_97_node_name`')

        self._data["Outlet 97 Node Name"] = value

    @property
    def outlet_98_node_name(self):
        """Get outlet_98_node_name

        Returns:
            str: the value of `outlet_98_node_name` or None if not set
        """
        return self._data["Outlet 98 Node Name"]

    @outlet_98_node_name.setter
    def outlet_98_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_98_node_name`

        Args:
            value (str): value for IDD Field `outlet_98_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_98_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_98_node_name`')

        self._data["Outlet 98 Node Name"] = value

    @property
    def outlet_99_node_name(self):
        """Get outlet_99_node_name

        Returns:
            str: the value of `outlet_99_node_name` or None if not set
        """
        return self._data["Outlet 99 Node Name"]

    @outlet_99_node_name.setter
    def outlet_99_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_99_node_name`

        Args:
            value (str): value for IDD Field `outlet_99_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_99_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_99_node_name`')

        self._data["Outlet 99 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_1_node_name))
        out.append(self._to_str(self.outlet_2_node_name))
        out.append(self._to_str(self.outlet_3_node_name))
        out.append(self._to_str(self.outlet_4_node_name))
        out.append(self._to_str(self.outlet_5_node_name))
        out.append(self._to_str(self.outlet_6_node_name))
        out.append(self._to_str(self.outlet_7_node_name))
        out.append(self._to_str(self.outlet_8_node_name))
        out.append(self._to_str(self.outlet_9_node_name))
        out.append(self._to_str(self.outlet_10_node_name))
        out.append(self._to_str(self.outlet_11_node_name))
        out.append(self._to_str(self.outlet_12_node_name))
        out.append(self._to_str(self.outlet_13_node_name))
        out.append(self._to_str(self.outlet_14_node_name))
        out.append(self._to_str(self.outlet_15_node_name))
        out.append(self._to_str(self.outlet_16_node_name))
        out.append(self._to_str(self.outlet_17_node_name))
        out.append(self._to_str(self.outlet_18_node_name))
        out.append(self._to_str(self.outlet_19_node_name))
        out.append(self._to_str(self.outlet_20_node_name))
        out.append(self._to_str(self.outlet_21_node_name))
        out.append(self._to_str(self.outlet_22_node_name))
        out.append(self._to_str(self.outlet_23_node_name))
        out.append(self._to_str(self.outlet_24_node_name))
        out.append(self._to_str(self.outlet_25_node_name))
        out.append(self._to_str(self.outlet_26_node_name))
        out.append(self._to_str(self.outlet_27_node_name))
        out.append(self._to_str(self.outlet_28_node_name))
        out.append(self._to_str(self.outlet_29_node_name))
        out.append(self._to_str(self.outlet_30_node_name))
        out.append(self._to_str(self.outlet_31_node_name))
        out.append(self._to_str(self.outlet_32_node_name))
        out.append(self._to_str(self.outlet_33_node_name))
        out.append(self._to_str(self.outlet_34_node_name))
        out.append(self._to_str(self.outlet_35_node_name))
        out.append(self._to_str(self.outlet_36_node_name))
        out.append(self._to_str(self.outlet_37_node_name))
        out.append(self._to_str(self.outlet_38_node_name))
        out.append(self._to_str(self.outlet_39_node_name))
        out.append(self._to_str(self.outlet_40_node_name))
        out.append(self._to_str(self.outlet_41_node_name))
        out.append(self._to_str(self.outlet_42_node_name))
        out.append(self._to_str(self.outlet_43_node_name))
        out.append(self._to_str(self.outlet_44_node_name))
        out.append(self._to_str(self.outlet_45_node_name))
        out.append(self._to_str(self.outlet_46_node_name))
        out.append(self._to_str(self.outlet_47_node_name))
        out.append(self._to_str(self.outlet_48_node_name))
        out.append(self._to_str(self.outlet_49_node_name))
        out.append(self._to_str(self.outlet_50_node_name))
        out.append(self._to_str(self.outlet_51_node_name))
        out.append(self._to_str(self.outlet_52_node_name))
        out.append(self._to_str(self.outlet_53_node_name))
        out.append(self._to_str(self.outlet_54_node_name))
        out.append(self._to_str(self.outlet_55_node_name))
        out.append(self._to_str(self.outlet_56_node_name))
        out.append(self._to_str(self.outlet_57_node_name))
        out.append(self._to_str(self.outlet_58_node_name))
        out.append(self._to_str(self.outlet_59_node_name))
        out.append(self._to_str(self.outlet_60_node_name))
        out.append(self._to_str(self.outlet_61_node_name))
        out.append(self._to_str(self.outlet_62_node_name))
        out.append(self._to_str(self.outlet_63_node_name))
        out.append(self._to_str(self.outlet_64_node_name))
        out.append(self._to_str(self.outlet_65_node_name))
        out.append(self._to_str(self.outlet_66_node_name))
        out.append(self._to_str(self.outlet_67_node_name))
        out.append(self._to_str(self.outlet_68_node_name))
        out.append(self._to_str(self.outlet_69_node_name))
        out.append(self._to_str(self.outlet_70_node_name))
        out.append(self._to_str(self.outlet_71_node_name))
        out.append(self._to_str(self.outlet_72_node_name))
        out.append(self._to_str(self.outlet_73_node_name))
        out.append(self._to_str(self.outlet_74_node_name))
        out.append(self._to_str(self.outlet_75_node_name))
        out.append(self._to_str(self.outlet_76_node_name))
        out.append(self._to_str(self.outlet_77_node_name))
        out.append(self._to_str(self.outlet_78_node_name))
        out.append(self._to_str(self.outlet_79_node_name))
        out.append(self._to_str(self.outlet_80_node_name))
        out.append(self._to_str(self.outlet_81_node_name))
        out.append(self._to_str(self.outlet_82_node_name))
        out.append(self._to_str(self.outlet_83_node_name))
        out.append(self._to_str(self.outlet_84_node_name))
        out.append(self._to_str(self.outlet_85_node_name))
        out.append(self._to_str(self.outlet_86_node_name))
        out.append(self._to_str(self.outlet_87_node_name))
        out.append(self._to_str(self.outlet_88_node_name))
        out.append(self._to_str(self.outlet_89_node_name))
        out.append(self._to_str(self.outlet_90_node_name))
        out.append(self._to_str(self.outlet_91_node_name))
        out.append(self._to_str(self.outlet_92_node_name))
        out.append(self._to_str(self.outlet_93_node_name))
        out.append(self._to_str(self.outlet_94_node_name))
        out.append(self._to_str(self.outlet_95_node_name))
        out.append(self._to_str(self.outlet_96_node_name))
        out.append(self._to_str(self.outlet_97_node_name))
        out.append(self._to_str(self.outlet_98_node_name))
        out.append(self._to_str(self.outlet_99_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        return ",".join(out)

class AirLoopHvacSupplyPlenum(object):
    """ Corresponds to IDD object `AirLoopHVAC:SupplyPlenum`
        Connects 1 zone inlet air stream, through zone supply plenum, to one or more outlets.
        Node names cannot be duplicated within a single supply plenum list.
    """
    internal_name = "AirLoopHVAC:SupplyPlenum"
    field_count = 144

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:SupplyPlenum`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Zone Name"] = None
        self._data["Zone Node Name"] = None
        self._data["Inlet Node Name"] = None
        self._data["Outlet 1 Node Name"] = None
        self._data["Outlet 2 Node Name"] = None
        self._data["Outlet 3 Node Name"] = None
        self._data["Outlet 4 Node Name"] = None
        self._data["Outlet 5 Node Name"] = None
        self._data["Outlet 6 Node Name"] = None
        self._data["Outlet 7 Node Name"] = None
        self._data["Outlet 8 Node Name"] = None
        self._data["Outlet 9 Node Name"] = None
        self._data["Outlet 10 Node Name"] = None
        self._data["Outlet 11 Node Name"] = None
        self._data["Outlet 12 Node Name"] = None
        self._data["Outlet 13 Node Name"] = None
        self._data["Outlet 14 Node Name"] = None
        self._data["Outlet 15 Node Name"] = None
        self._data["Outlet 16 Node Name"] = None
        self._data["Outlet 17 Node Name"] = None
        self._data["Outlet 18 Node Name"] = None
        self._data["Outlet 19 Node Name"] = None
        self._data["Outlet 20 Node Name"] = None
        self._data["Outlet 21 Node Name"] = None
        self._data["Outlet 22 Node Name"] = None
        self._data["Outlet 23 Node Name"] = None
        self._data["Outlet 24 Node Name"] = None
        self._data["Outlet 25 Node Name"] = None
        self._data["Outlet 26 Node Name"] = None
        self._data["Outlet 27 Node Name"] = None
        self._data["Outlet 28 Node Name"] = None
        self._data["Outlet 29 Node Name"] = None
        self._data["Outlet 30 Node Name"] = None
        self._data["Outlet 31 Node Name"] = None
        self._data["Outlet 32 Node Name"] = None
        self._data["Outlet 33 Node Name"] = None
        self._data["Outlet 34 Node Name"] = None
        self._data["Outlet 35 Node Name"] = None
        self._data["Outlet 36 Node Name"] = None
        self._data["Outlet 37 Node Name"] = None
        self._data["Outlet 38 Node Name"] = None
        self._data["Outlet 39 Node Name"] = None
        self._data["Outlet 40 Node Name"] = None
        self._data["Outlet 41 Node Name"] = None
        self._data["Outlet 42 Node Name"] = None
        self._data["Outlet 43 Node Name"] = None
        self._data["Outlet 44 Node Name"] = None
        self._data["Outlet 45 Node Name"] = None
        self._data["Outlet 46 Node Name"] = None
        self._data["Outlet 47 Node Name"] = None
        self._data["Outlet 48 Node Name"] = None
        self._data["Outlet 49 Node Name"] = None
        self._data["Outlet 50 Node Name"] = None
        self._data["Outlet 51 Node Name"] = None
        self._data["Outlet 52 Node Name"] = None
        self._data["Outlet 53 Node Name"] = None
        self._data["Outlet 54 Node Name"] = None
        self._data["Outlet 55 Node Name"] = None
        self._data["Outlet 56 Node Name"] = None
        self._data["Outlet 57 Node Name"] = None
        self._data["Outlet 58 Node Name"] = None
        self._data["Outlet 59 Node Name"] = None
        self._data["Outlet 60 Node Name"] = None
        self._data["Outlet 61 Node Name"] = None
        self._data["Outlet 62 Node Name"] = None
        self._data["Outlet 63 Node Name"] = None
        self._data["Outlet 64 Node Name"] = None
        self._data["Outlet 65 Node Name"] = None
        self._data["Outlet 66 Node Name"] = None
        self._data["Outlet 67 Node Name"] = None
        self._data["Outlet 68 Node Name"] = None
        self._data["Outlet 69 Node Name"] = None
        self._data["Outlet 70 Node Name"] = None
        self._data["Outlet 71 Node Name"] = None
        self._data["Outlet 72 Node Name"] = None
        self._data["Outlet 73 Node Name"] = None
        self._data["Outlet 74 Node Name"] = None
        self._data["Outlet 75 Node Name"] = None
        self._data["Outlet 76 Node Name"] = None
        self._data["Outlet 77 Node Name"] = None
        self._data["Outlet 78 Node Name"] = None
        self._data["Outlet 79 Node Name"] = None
        self._data["Outlet 80 Node Name"] = None
        self._data["Outlet 81 Node Name"] = None
        self._data["Outlet 82 Node Name"] = None
        self._data["Outlet 83 Node Name"] = None
        self._data["Outlet 84 Node Name"] = None
        self._data["Outlet 85 Node Name"] = None
        self._data["Outlet 86 Node Name"] = None
        self._data["Outlet 87 Node Name"] = None
        self._data["Outlet 88 Node Name"] = None
        self._data["Outlet 89 Node Name"] = None
        self._data["Outlet 90 Node Name"] = None
        self._data["Outlet 91 Node Name"] = None
        self._data["Outlet 92 Node Name"] = None
        self._data["Outlet 93 Node Name"] = None
        self._data["Outlet 94 Node Name"] = None
        self._data["Outlet 95 Node Name"] = None
        self._data["Outlet 96 Node Name"] = None
        self._data["Outlet 97 Node Name"] = None
        self._data["Outlet 98 Node Name"] = None
        self._data["Outlet 99 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None
        self._data["Outlet 100 Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_node_name = None
        else:
            self.zone_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_node_name = None
        else:
            self.inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_1_node_name = None
        else:
            self.outlet_1_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_2_node_name = None
        else:
            self.outlet_2_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_3_node_name = None
        else:
            self.outlet_3_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_4_node_name = None
        else:
            self.outlet_4_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_5_node_name = None
        else:
            self.outlet_5_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_6_node_name = None
        else:
            self.outlet_6_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_7_node_name = None
        else:
            self.outlet_7_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_8_node_name = None
        else:
            self.outlet_8_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_9_node_name = None
        else:
            self.outlet_9_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_10_node_name = None
        else:
            self.outlet_10_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_11_node_name = None
        else:
            self.outlet_11_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_12_node_name = None
        else:
            self.outlet_12_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_13_node_name = None
        else:
            self.outlet_13_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_14_node_name = None
        else:
            self.outlet_14_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_15_node_name = None
        else:
            self.outlet_15_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_16_node_name = None
        else:
            self.outlet_16_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_17_node_name = None
        else:
            self.outlet_17_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_18_node_name = None
        else:
            self.outlet_18_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_19_node_name = None
        else:
            self.outlet_19_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_20_node_name = None
        else:
            self.outlet_20_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_21_node_name = None
        else:
            self.outlet_21_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_22_node_name = None
        else:
            self.outlet_22_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_23_node_name = None
        else:
            self.outlet_23_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_24_node_name = None
        else:
            self.outlet_24_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_25_node_name = None
        else:
            self.outlet_25_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_26_node_name = None
        else:
            self.outlet_26_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_27_node_name = None
        else:
            self.outlet_27_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_28_node_name = None
        else:
            self.outlet_28_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_29_node_name = None
        else:
            self.outlet_29_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_30_node_name = None
        else:
            self.outlet_30_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_31_node_name = None
        else:
            self.outlet_31_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_32_node_name = None
        else:
            self.outlet_32_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_33_node_name = None
        else:
            self.outlet_33_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_34_node_name = None
        else:
            self.outlet_34_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_35_node_name = None
        else:
            self.outlet_35_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_36_node_name = None
        else:
            self.outlet_36_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_37_node_name = None
        else:
            self.outlet_37_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_38_node_name = None
        else:
            self.outlet_38_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_39_node_name = None
        else:
            self.outlet_39_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_40_node_name = None
        else:
            self.outlet_40_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_41_node_name = None
        else:
            self.outlet_41_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_42_node_name = None
        else:
            self.outlet_42_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_43_node_name = None
        else:
            self.outlet_43_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_44_node_name = None
        else:
            self.outlet_44_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_45_node_name = None
        else:
            self.outlet_45_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_46_node_name = None
        else:
            self.outlet_46_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_47_node_name = None
        else:
            self.outlet_47_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_48_node_name = None
        else:
            self.outlet_48_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_49_node_name = None
        else:
            self.outlet_49_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_50_node_name = None
        else:
            self.outlet_50_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_51_node_name = None
        else:
            self.outlet_51_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_52_node_name = None
        else:
            self.outlet_52_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_53_node_name = None
        else:
            self.outlet_53_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_54_node_name = None
        else:
            self.outlet_54_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_55_node_name = None
        else:
            self.outlet_55_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_56_node_name = None
        else:
            self.outlet_56_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_57_node_name = None
        else:
            self.outlet_57_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_58_node_name = None
        else:
            self.outlet_58_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_59_node_name = None
        else:
            self.outlet_59_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_60_node_name = None
        else:
            self.outlet_60_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_61_node_name = None
        else:
            self.outlet_61_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_62_node_name = None
        else:
            self.outlet_62_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_63_node_name = None
        else:
            self.outlet_63_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_64_node_name = None
        else:
            self.outlet_64_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_65_node_name = None
        else:
            self.outlet_65_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_66_node_name = None
        else:
            self.outlet_66_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_67_node_name = None
        else:
            self.outlet_67_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_68_node_name = None
        else:
            self.outlet_68_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_69_node_name = None
        else:
            self.outlet_69_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_70_node_name = None
        else:
            self.outlet_70_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_71_node_name = None
        else:
            self.outlet_71_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_72_node_name = None
        else:
            self.outlet_72_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_73_node_name = None
        else:
            self.outlet_73_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_74_node_name = None
        else:
            self.outlet_74_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_75_node_name = None
        else:
            self.outlet_75_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_76_node_name = None
        else:
            self.outlet_76_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_77_node_name = None
        else:
            self.outlet_77_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_78_node_name = None
        else:
            self.outlet_78_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_79_node_name = None
        else:
            self.outlet_79_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_80_node_name = None
        else:
            self.outlet_80_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_81_node_name = None
        else:
            self.outlet_81_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_82_node_name = None
        else:
            self.outlet_82_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_83_node_name = None
        else:
            self.outlet_83_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_84_node_name = None
        else:
            self.outlet_84_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_85_node_name = None
        else:
            self.outlet_85_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_86_node_name = None
        else:
            self.outlet_86_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_87_node_name = None
        else:
            self.outlet_87_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_88_node_name = None
        else:
            self.outlet_88_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_89_node_name = None
        else:
            self.outlet_89_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_90_node_name = None
        else:
            self.outlet_90_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_91_node_name = None
        else:
            self.outlet_91_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_92_node_name = None
        else:
            self.outlet_92_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_93_node_name = None
        else:
            self.outlet_93_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_94_node_name = None
        else:
            self.outlet_94_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_95_node_name = None
        else:
            self.outlet_95_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_96_node_name = None
        else:
            self.outlet_96_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_97_node_name = None
        else:
            self.outlet_97_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_98_node_name = None
        else:
            self.outlet_98_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_99_node_name = None
        else:
            self.outlet_99_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_100_node_name = None
        else:
            self.outlet_100_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def zone_node_name(self):
        """Get zone_node_name

        Returns:
            str: the value of `zone_node_name` or None if not set
        """
        return self._data["Zone Node Name"]

    @zone_node_name.setter
    def zone_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_node_name`

        Args:
            value (str): value for IDD Field `zone_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_node_name`')

        self._data["Zone Node Name"] = value

    @property
    def inlet_node_name(self):
        """Get inlet_node_name

        Returns:
            str: the value of `inlet_node_name` or None if not set
        """
        return self._data["Inlet Node Name"]

    @inlet_node_name.setter
    def inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_node_name`

        Args:
            value (str): value for IDD Field `inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node_name`')

        self._data["Inlet Node Name"] = value

    @property
    def outlet_1_node_name(self):
        """Get outlet_1_node_name

        Returns:
            str: the value of `outlet_1_node_name` or None if not set
        """
        return self._data["Outlet 1 Node Name"]

    @outlet_1_node_name.setter
    def outlet_1_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_1_node_name`

        Args:
            value (str): value for IDD Field `outlet_1_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_1_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_1_node_name`')

        self._data["Outlet 1 Node Name"] = value

    @property
    def outlet_2_node_name(self):
        """Get outlet_2_node_name

        Returns:
            str: the value of `outlet_2_node_name` or None if not set
        """
        return self._data["Outlet 2 Node Name"]

    @outlet_2_node_name.setter
    def outlet_2_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_2_node_name`

        Args:
            value (str): value for IDD Field `outlet_2_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_2_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_2_node_name`')

        self._data["Outlet 2 Node Name"] = value

    @property
    def outlet_3_node_name(self):
        """Get outlet_3_node_name

        Returns:
            str: the value of `outlet_3_node_name` or None if not set
        """
        return self._data["Outlet 3 Node Name"]

    @outlet_3_node_name.setter
    def outlet_3_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_3_node_name`

        Args:
            value (str): value for IDD Field `outlet_3_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_3_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_3_node_name`')

        self._data["Outlet 3 Node Name"] = value

    @property
    def outlet_4_node_name(self):
        """Get outlet_4_node_name

        Returns:
            str: the value of `outlet_4_node_name` or None if not set
        """
        return self._data["Outlet 4 Node Name"]

    @outlet_4_node_name.setter
    def outlet_4_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_4_node_name`

        Args:
            value (str): value for IDD Field `outlet_4_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_4_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_4_node_name`')

        self._data["Outlet 4 Node Name"] = value

    @property
    def outlet_5_node_name(self):
        """Get outlet_5_node_name

        Returns:
            str: the value of `outlet_5_node_name` or None if not set
        """
        return self._data["Outlet 5 Node Name"]

    @outlet_5_node_name.setter
    def outlet_5_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_5_node_name`

        Args:
            value (str): value for IDD Field `outlet_5_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_5_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_5_node_name`')

        self._data["Outlet 5 Node Name"] = value

    @property
    def outlet_6_node_name(self):
        """Get outlet_6_node_name

        Returns:
            str: the value of `outlet_6_node_name` or None if not set
        """
        return self._data["Outlet 6 Node Name"]

    @outlet_6_node_name.setter
    def outlet_6_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_6_node_name`

        Args:
            value (str): value for IDD Field `outlet_6_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_6_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_6_node_name`')

        self._data["Outlet 6 Node Name"] = value

    @property
    def outlet_7_node_name(self):
        """Get outlet_7_node_name

        Returns:
            str: the value of `outlet_7_node_name` or None if not set
        """
        return self._data["Outlet 7 Node Name"]

    @outlet_7_node_name.setter
    def outlet_7_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_7_node_name`

        Args:
            value (str): value for IDD Field `outlet_7_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_7_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_7_node_name`')

        self._data["Outlet 7 Node Name"] = value

    @property
    def outlet_8_node_name(self):
        """Get outlet_8_node_name

        Returns:
            str: the value of `outlet_8_node_name` or None if not set
        """
        return self._data["Outlet 8 Node Name"]

    @outlet_8_node_name.setter
    def outlet_8_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_8_node_name`

        Args:
            value (str): value for IDD Field `outlet_8_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_8_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_8_node_name`')

        self._data["Outlet 8 Node Name"] = value

    @property
    def outlet_9_node_name(self):
        """Get outlet_9_node_name

        Returns:
            str: the value of `outlet_9_node_name` or None if not set
        """
        return self._data["Outlet 9 Node Name"]

    @outlet_9_node_name.setter
    def outlet_9_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_9_node_name`

        Args:
            value (str): value for IDD Field `outlet_9_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_9_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_9_node_name`')

        self._data["Outlet 9 Node Name"] = value

    @property
    def outlet_10_node_name(self):
        """Get outlet_10_node_name

        Returns:
            str: the value of `outlet_10_node_name` or None if not set
        """
        return self._data["Outlet 10 Node Name"]

    @outlet_10_node_name.setter
    def outlet_10_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_10_node_name`

        Args:
            value (str): value for IDD Field `outlet_10_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_10_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_10_node_name`')

        self._data["Outlet 10 Node Name"] = value

    @property
    def outlet_11_node_name(self):
        """Get outlet_11_node_name

        Returns:
            str: the value of `outlet_11_node_name` or None if not set
        """
        return self._data["Outlet 11 Node Name"]

    @outlet_11_node_name.setter
    def outlet_11_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_11_node_name`

        Args:
            value (str): value for IDD Field `outlet_11_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_11_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_11_node_name`')

        self._data["Outlet 11 Node Name"] = value

    @property
    def outlet_12_node_name(self):
        """Get outlet_12_node_name

        Returns:
            str: the value of `outlet_12_node_name` or None if not set
        """
        return self._data["Outlet 12 Node Name"]

    @outlet_12_node_name.setter
    def outlet_12_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_12_node_name`

        Args:
            value (str): value for IDD Field `outlet_12_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_12_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_12_node_name`')

        self._data["Outlet 12 Node Name"] = value

    @property
    def outlet_13_node_name(self):
        """Get outlet_13_node_name

        Returns:
            str: the value of `outlet_13_node_name` or None if not set
        """
        return self._data["Outlet 13 Node Name"]

    @outlet_13_node_name.setter
    def outlet_13_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_13_node_name`

        Args:
            value (str): value for IDD Field `outlet_13_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_13_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_13_node_name`')

        self._data["Outlet 13 Node Name"] = value

    @property
    def outlet_14_node_name(self):
        """Get outlet_14_node_name

        Returns:
            str: the value of `outlet_14_node_name` or None if not set
        """
        return self._data["Outlet 14 Node Name"]

    @outlet_14_node_name.setter
    def outlet_14_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_14_node_name`

        Args:
            value (str): value for IDD Field `outlet_14_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_14_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_14_node_name`')

        self._data["Outlet 14 Node Name"] = value

    @property
    def outlet_15_node_name(self):
        """Get outlet_15_node_name

        Returns:
            str: the value of `outlet_15_node_name` or None if not set
        """
        return self._data["Outlet 15 Node Name"]

    @outlet_15_node_name.setter
    def outlet_15_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_15_node_name`

        Args:
            value (str): value for IDD Field `outlet_15_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_15_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_15_node_name`')

        self._data["Outlet 15 Node Name"] = value

    @property
    def outlet_16_node_name(self):
        """Get outlet_16_node_name

        Returns:
            str: the value of `outlet_16_node_name` or None if not set
        """
        return self._data["Outlet 16 Node Name"]

    @outlet_16_node_name.setter
    def outlet_16_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_16_node_name`

        Args:
            value (str): value for IDD Field `outlet_16_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_16_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_16_node_name`')

        self._data["Outlet 16 Node Name"] = value

    @property
    def outlet_17_node_name(self):
        """Get outlet_17_node_name

        Returns:
            str: the value of `outlet_17_node_name` or None if not set
        """
        return self._data["Outlet 17 Node Name"]

    @outlet_17_node_name.setter
    def outlet_17_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_17_node_name`

        Args:
            value (str): value for IDD Field `outlet_17_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_17_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_17_node_name`')

        self._data["Outlet 17 Node Name"] = value

    @property
    def outlet_18_node_name(self):
        """Get outlet_18_node_name

        Returns:
            str: the value of `outlet_18_node_name` or None if not set
        """
        return self._data["Outlet 18 Node Name"]

    @outlet_18_node_name.setter
    def outlet_18_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_18_node_name`

        Args:
            value (str): value for IDD Field `outlet_18_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_18_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_18_node_name`')

        self._data["Outlet 18 Node Name"] = value

    @property
    def outlet_19_node_name(self):
        """Get outlet_19_node_name

        Returns:
            str: the value of `outlet_19_node_name` or None if not set
        """
        return self._data["Outlet 19 Node Name"]

    @outlet_19_node_name.setter
    def outlet_19_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_19_node_name`

        Args:
            value (str): value for IDD Field `outlet_19_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_19_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_19_node_name`')

        self._data["Outlet 19 Node Name"] = value

    @property
    def outlet_20_node_name(self):
        """Get outlet_20_node_name

        Returns:
            str: the value of `outlet_20_node_name` or None if not set
        """
        return self._data["Outlet 20 Node Name"]

    @outlet_20_node_name.setter
    def outlet_20_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_20_node_name`

        Args:
            value (str): value for IDD Field `outlet_20_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_20_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_20_node_name`')

        self._data["Outlet 20 Node Name"] = value

    @property
    def outlet_21_node_name(self):
        """Get outlet_21_node_name

        Returns:
            str: the value of `outlet_21_node_name` or None if not set
        """
        return self._data["Outlet 21 Node Name"]

    @outlet_21_node_name.setter
    def outlet_21_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_21_node_name`

        Args:
            value (str): value for IDD Field `outlet_21_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_21_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_21_node_name`')

        self._data["Outlet 21 Node Name"] = value

    @property
    def outlet_22_node_name(self):
        """Get outlet_22_node_name

        Returns:
            str: the value of `outlet_22_node_name` or None if not set
        """
        return self._data["Outlet 22 Node Name"]

    @outlet_22_node_name.setter
    def outlet_22_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_22_node_name`

        Args:
            value (str): value for IDD Field `outlet_22_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_22_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_22_node_name`')

        self._data["Outlet 22 Node Name"] = value

    @property
    def outlet_23_node_name(self):
        """Get outlet_23_node_name

        Returns:
            str: the value of `outlet_23_node_name` or None if not set
        """
        return self._data["Outlet 23 Node Name"]

    @outlet_23_node_name.setter
    def outlet_23_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_23_node_name`

        Args:
            value (str): value for IDD Field `outlet_23_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_23_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_23_node_name`')

        self._data["Outlet 23 Node Name"] = value

    @property
    def outlet_24_node_name(self):
        """Get outlet_24_node_name

        Returns:
            str: the value of `outlet_24_node_name` or None if not set
        """
        return self._data["Outlet 24 Node Name"]

    @outlet_24_node_name.setter
    def outlet_24_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_24_node_name`

        Args:
            value (str): value for IDD Field `outlet_24_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_24_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_24_node_name`')

        self._data["Outlet 24 Node Name"] = value

    @property
    def outlet_25_node_name(self):
        """Get outlet_25_node_name

        Returns:
            str: the value of `outlet_25_node_name` or None if not set
        """
        return self._data["Outlet 25 Node Name"]

    @outlet_25_node_name.setter
    def outlet_25_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_25_node_name`

        Args:
            value (str): value for IDD Field `outlet_25_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_25_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_25_node_name`')

        self._data["Outlet 25 Node Name"] = value

    @property
    def outlet_26_node_name(self):
        """Get outlet_26_node_name

        Returns:
            str: the value of `outlet_26_node_name` or None if not set
        """
        return self._data["Outlet 26 Node Name"]

    @outlet_26_node_name.setter
    def outlet_26_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_26_node_name`

        Args:
            value (str): value for IDD Field `outlet_26_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_26_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_26_node_name`')

        self._data["Outlet 26 Node Name"] = value

    @property
    def outlet_27_node_name(self):
        """Get outlet_27_node_name

        Returns:
            str: the value of `outlet_27_node_name` or None if not set
        """
        return self._data["Outlet 27 Node Name"]

    @outlet_27_node_name.setter
    def outlet_27_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_27_node_name`

        Args:
            value (str): value for IDD Field `outlet_27_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_27_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_27_node_name`')

        self._data["Outlet 27 Node Name"] = value

    @property
    def outlet_28_node_name(self):
        """Get outlet_28_node_name

        Returns:
            str: the value of `outlet_28_node_name` or None if not set
        """
        return self._data["Outlet 28 Node Name"]

    @outlet_28_node_name.setter
    def outlet_28_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_28_node_name`

        Args:
            value (str): value for IDD Field `outlet_28_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_28_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_28_node_name`')

        self._data["Outlet 28 Node Name"] = value

    @property
    def outlet_29_node_name(self):
        """Get outlet_29_node_name

        Returns:
            str: the value of `outlet_29_node_name` or None if not set
        """
        return self._data["Outlet 29 Node Name"]

    @outlet_29_node_name.setter
    def outlet_29_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_29_node_name`

        Args:
            value (str): value for IDD Field `outlet_29_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_29_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_29_node_name`')

        self._data["Outlet 29 Node Name"] = value

    @property
    def outlet_30_node_name(self):
        """Get outlet_30_node_name

        Returns:
            str: the value of `outlet_30_node_name` or None if not set
        """
        return self._data["Outlet 30 Node Name"]

    @outlet_30_node_name.setter
    def outlet_30_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_30_node_name`

        Args:
            value (str): value for IDD Field `outlet_30_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_30_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_30_node_name`')

        self._data["Outlet 30 Node Name"] = value

    @property
    def outlet_31_node_name(self):
        """Get outlet_31_node_name

        Returns:
            str: the value of `outlet_31_node_name` or None if not set
        """
        return self._data["Outlet 31 Node Name"]

    @outlet_31_node_name.setter
    def outlet_31_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_31_node_name`

        Args:
            value (str): value for IDD Field `outlet_31_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_31_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_31_node_name`')

        self._data["Outlet 31 Node Name"] = value

    @property
    def outlet_32_node_name(self):
        """Get outlet_32_node_name

        Returns:
            str: the value of `outlet_32_node_name` or None if not set
        """
        return self._data["Outlet 32 Node Name"]

    @outlet_32_node_name.setter
    def outlet_32_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_32_node_name`

        Args:
            value (str): value for IDD Field `outlet_32_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_32_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_32_node_name`')

        self._data["Outlet 32 Node Name"] = value

    @property
    def outlet_33_node_name(self):
        """Get outlet_33_node_name

        Returns:
            str: the value of `outlet_33_node_name` or None if not set
        """
        return self._data["Outlet 33 Node Name"]

    @outlet_33_node_name.setter
    def outlet_33_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_33_node_name`

        Args:
            value (str): value for IDD Field `outlet_33_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_33_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_33_node_name`')

        self._data["Outlet 33 Node Name"] = value

    @property
    def outlet_34_node_name(self):
        """Get outlet_34_node_name

        Returns:
            str: the value of `outlet_34_node_name` or None if not set
        """
        return self._data["Outlet 34 Node Name"]

    @outlet_34_node_name.setter
    def outlet_34_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_34_node_name`

        Args:
            value (str): value for IDD Field `outlet_34_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_34_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_34_node_name`')

        self._data["Outlet 34 Node Name"] = value

    @property
    def outlet_35_node_name(self):
        """Get outlet_35_node_name

        Returns:
            str: the value of `outlet_35_node_name` or None if not set
        """
        return self._data["Outlet 35 Node Name"]

    @outlet_35_node_name.setter
    def outlet_35_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_35_node_name`

        Args:
            value (str): value for IDD Field `outlet_35_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_35_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_35_node_name`')

        self._data["Outlet 35 Node Name"] = value

    @property
    def outlet_36_node_name(self):
        """Get outlet_36_node_name

        Returns:
            str: the value of `outlet_36_node_name` or None if not set
        """
        return self._data["Outlet 36 Node Name"]

    @outlet_36_node_name.setter
    def outlet_36_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_36_node_name`

        Args:
            value (str): value for IDD Field `outlet_36_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_36_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_36_node_name`')

        self._data["Outlet 36 Node Name"] = value

    @property
    def outlet_37_node_name(self):
        """Get outlet_37_node_name

        Returns:
            str: the value of `outlet_37_node_name` or None if not set
        """
        return self._data["Outlet 37 Node Name"]

    @outlet_37_node_name.setter
    def outlet_37_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_37_node_name`

        Args:
            value (str): value for IDD Field `outlet_37_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_37_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_37_node_name`')

        self._data["Outlet 37 Node Name"] = value

    @property
    def outlet_38_node_name(self):
        """Get outlet_38_node_name

        Returns:
            str: the value of `outlet_38_node_name` or None if not set
        """
        return self._data["Outlet 38 Node Name"]

    @outlet_38_node_name.setter
    def outlet_38_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_38_node_name`

        Args:
            value (str): value for IDD Field `outlet_38_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_38_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_38_node_name`')

        self._data["Outlet 38 Node Name"] = value

    @property
    def outlet_39_node_name(self):
        """Get outlet_39_node_name

        Returns:
            str: the value of `outlet_39_node_name` or None if not set
        """
        return self._data["Outlet 39 Node Name"]

    @outlet_39_node_name.setter
    def outlet_39_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_39_node_name`

        Args:
            value (str): value for IDD Field `outlet_39_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_39_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_39_node_name`')

        self._data["Outlet 39 Node Name"] = value

    @property
    def outlet_40_node_name(self):
        """Get outlet_40_node_name

        Returns:
            str: the value of `outlet_40_node_name` or None if not set
        """
        return self._data["Outlet 40 Node Name"]

    @outlet_40_node_name.setter
    def outlet_40_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_40_node_name`

        Args:
            value (str): value for IDD Field `outlet_40_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_40_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_40_node_name`')

        self._data["Outlet 40 Node Name"] = value

    @property
    def outlet_41_node_name(self):
        """Get outlet_41_node_name

        Returns:
            str: the value of `outlet_41_node_name` or None if not set
        """
        return self._data["Outlet 41 Node Name"]

    @outlet_41_node_name.setter
    def outlet_41_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_41_node_name`

        Args:
            value (str): value for IDD Field `outlet_41_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_41_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_41_node_name`')

        self._data["Outlet 41 Node Name"] = value

    @property
    def outlet_42_node_name(self):
        """Get outlet_42_node_name

        Returns:
            str: the value of `outlet_42_node_name` or None if not set
        """
        return self._data["Outlet 42 Node Name"]

    @outlet_42_node_name.setter
    def outlet_42_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_42_node_name`

        Args:
            value (str): value for IDD Field `outlet_42_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_42_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_42_node_name`')

        self._data["Outlet 42 Node Name"] = value

    @property
    def outlet_43_node_name(self):
        """Get outlet_43_node_name

        Returns:
            str: the value of `outlet_43_node_name` or None if not set
        """
        return self._data["Outlet 43 Node Name"]

    @outlet_43_node_name.setter
    def outlet_43_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_43_node_name`

        Args:
            value (str): value for IDD Field `outlet_43_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_43_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_43_node_name`')

        self._data["Outlet 43 Node Name"] = value

    @property
    def outlet_44_node_name(self):
        """Get outlet_44_node_name

        Returns:
            str: the value of `outlet_44_node_name` or None if not set
        """
        return self._data["Outlet 44 Node Name"]

    @outlet_44_node_name.setter
    def outlet_44_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_44_node_name`

        Args:
            value (str): value for IDD Field `outlet_44_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_44_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_44_node_name`')

        self._data["Outlet 44 Node Name"] = value

    @property
    def outlet_45_node_name(self):
        """Get outlet_45_node_name

        Returns:
            str: the value of `outlet_45_node_name` or None if not set
        """
        return self._data["Outlet 45 Node Name"]

    @outlet_45_node_name.setter
    def outlet_45_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_45_node_name`

        Args:
            value (str): value for IDD Field `outlet_45_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_45_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_45_node_name`')

        self._data["Outlet 45 Node Name"] = value

    @property
    def outlet_46_node_name(self):
        """Get outlet_46_node_name

        Returns:
            str: the value of `outlet_46_node_name` or None if not set
        """
        return self._data["Outlet 46 Node Name"]

    @outlet_46_node_name.setter
    def outlet_46_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_46_node_name`

        Args:
            value (str): value for IDD Field `outlet_46_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_46_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_46_node_name`')

        self._data["Outlet 46 Node Name"] = value

    @property
    def outlet_47_node_name(self):
        """Get outlet_47_node_name

        Returns:
            str: the value of `outlet_47_node_name` or None if not set
        """
        return self._data["Outlet 47 Node Name"]

    @outlet_47_node_name.setter
    def outlet_47_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_47_node_name`

        Args:
            value (str): value for IDD Field `outlet_47_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_47_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_47_node_name`')

        self._data["Outlet 47 Node Name"] = value

    @property
    def outlet_48_node_name(self):
        """Get outlet_48_node_name

        Returns:
            str: the value of `outlet_48_node_name` or None if not set
        """
        return self._data["Outlet 48 Node Name"]

    @outlet_48_node_name.setter
    def outlet_48_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_48_node_name`

        Args:
            value (str): value for IDD Field `outlet_48_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_48_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_48_node_name`')

        self._data["Outlet 48 Node Name"] = value

    @property
    def outlet_49_node_name(self):
        """Get outlet_49_node_name

        Returns:
            str: the value of `outlet_49_node_name` or None if not set
        """
        return self._data["Outlet 49 Node Name"]

    @outlet_49_node_name.setter
    def outlet_49_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_49_node_name`

        Args:
            value (str): value for IDD Field `outlet_49_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_49_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_49_node_name`')

        self._data["Outlet 49 Node Name"] = value

    @property
    def outlet_50_node_name(self):
        """Get outlet_50_node_name

        Returns:
            str: the value of `outlet_50_node_name` or None if not set
        """
        return self._data["Outlet 50 Node Name"]

    @outlet_50_node_name.setter
    def outlet_50_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_50_node_name`

        Args:
            value (str): value for IDD Field `outlet_50_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_50_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_50_node_name`')

        self._data["Outlet 50 Node Name"] = value

    @property
    def outlet_51_node_name(self):
        """Get outlet_51_node_name

        Returns:
            str: the value of `outlet_51_node_name` or None if not set
        """
        return self._data["Outlet 51 Node Name"]

    @outlet_51_node_name.setter
    def outlet_51_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_51_node_name`

        Args:
            value (str): value for IDD Field `outlet_51_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_51_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_51_node_name`')

        self._data["Outlet 51 Node Name"] = value

    @property
    def outlet_52_node_name(self):
        """Get outlet_52_node_name

        Returns:
            str: the value of `outlet_52_node_name` or None if not set
        """
        return self._data["Outlet 52 Node Name"]

    @outlet_52_node_name.setter
    def outlet_52_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_52_node_name`

        Args:
            value (str): value for IDD Field `outlet_52_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_52_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_52_node_name`')

        self._data["Outlet 52 Node Name"] = value

    @property
    def outlet_53_node_name(self):
        """Get outlet_53_node_name

        Returns:
            str: the value of `outlet_53_node_name` or None if not set
        """
        return self._data["Outlet 53 Node Name"]

    @outlet_53_node_name.setter
    def outlet_53_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_53_node_name`

        Args:
            value (str): value for IDD Field `outlet_53_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_53_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_53_node_name`')

        self._data["Outlet 53 Node Name"] = value

    @property
    def outlet_54_node_name(self):
        """Get outlet_54_node_name

        Returns:
            str: the value of `outlet_54_node_name` or None if not set
        """
        return self._data["Outlet 54 Node Name"]

    @outlet_54_node_name.setter
    def outlet_54_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_54_node_name`

        Args:
            value (str): value for IDD Field `outlet_54_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_54_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_54_node_name`')

        self._data["Outlet 54 Node Name"] = value

    @property
    def outlet_55_node_name(self):
        """Get outlet_55_node_name

        Returns:
            str: the value of `outlet_55_node_name` or None if not set
        """
        return self._data["Outlet 55 Node Name"]

    @outlet_55_node_name.setter
    def outlet_55_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_55_node_name`

        Args:
            value (str): value for IDD Field `outlet_55_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_55_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_55_node_name`')

        self._data["Outlet 55 Node Name"] = value

    @property
    def outlet_56_node_name(self):
        """Get outlet_56_node_name

        Returns:
            str: the value of `outlet_56_node_name` or None if not set
        """
        return self._data["Outlet 56 Node Name"]

    @outlet_56_node_name.setter
    def outlet_56_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_56_node_name`

        Args:
            value (str): value for IDD Field `outlet_56_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_56_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_56_node_name`')

        self._data["Outlet 56 Node Name"] = value

    @property
    def outlet_57_node_name(self):
        """Get outlet_57_node_name

        Returns:
            str: the value of `outlet_57_node_name` or None if not set
        """
        return self._data["Outlet 57 Node Name"]

    @outlet_57_node_name.setter
    def outlet_57_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_57_node_name`

        Args:
            value (str): value for IDD Field `outlet_57_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_57_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_57_node_name`')

        self._data["Outlet 57 Node Name"] = value

    @property
    def outlet_58_node_name(self):
        """Get outlet_58_node_name

        Returns:
            str: the value of `outlet_58_node_name` or None if not set
        """
        return self._data["Outlet 58 Node Name"]

    @outlet_58_node_name.setter
    def outlet_58_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_58_node_name`

        Args:
            value (str): value for IDD Field `outlet_58_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_58_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_58_node_name`')

        self._data["Outlet 58 Node Name"] = value

    @property
    def outlet_59_node_name(self):
        """Get outlet_59_node_name

        Returns:
            str: the value of `outlet_59_node_name` or None if not set
        """
        return self._data["Outlet 59 Node Name"]

    @outlet_59_node_name.setter
    def outlet_59_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_59_node_name`

        Args:
            value (str): value for IDD Field `outlet_59_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_59_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_59_node_name`')

        self._data["Outlet 59 Node Name"] = value

    @property
    def outlet_60_node_name(self):
        """Get outlet_60_node_name

        Returns:
            str: the value of `outlet_60_node_name` or None if not set
        """
        return self._data["Outlet 60 Node Name"]

    @outlet_60_node_name.setter
    def outlet_60_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_60_node_name`

        Args:
            value (str): value for IDD Field `outlet_60_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_60_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_60_node_name`')

        self._data["Outlet 60 Node Name"] = value

    @property
    def outlet_61_node_name(self):
        """Get outlet_61_node_name

        Returns:
            str: the value of `outlet_61_node_name` or None if not set
        """
        return self._data["Outlet 61 Node Name"]

    @outlet_61_node_name.setter
    def outlet_61_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_61_node_name`

        Args:
            value (str): value for IDD Field `outlet_61_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_61_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_61_node_name`')

        self._data["Outlet 61 Node Name"] = value

    @property
    def outlet_62_node_name(self):
        """Get outlet_62_node_name

        Returns:
            str: the value of `outlet_62_node_name` or None if not set
        """
        return self._data["Outlet 62 Node Name"]

    @outlet_62_node_name.setter
    def outlet_62_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_62_node_name`

        Args:
            value (str): value for IDD Field `outlet_62_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_62_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_62_node_name`')

        self._data["Outlet 62 Node Name"] = value

    @property
    def outlet_63_node_name(self):
        """Get outlet_63_node_name

        Returns:
            str: the value of `outlet_63_node_name` or None if not set
        """
        return self._data["Outlet 63 Node Name"]

    @outlet_63_node_name.setter
    def outlet_63_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_63_node_name`

        Args:
            value (str): value for IDD Field `outlet_63_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_63_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_63_node_name`')

        self._data["Outlet 63 Node Name"] = value

    @property
    def outlet_64_node_name(self):
        """Get outlet_64_node_name

        Returns:
            str: the value of `outlet_64_node_name` or None if not set
        """
        return self._data["Outlet 64 Node Name"]

    @outlet_64_node_name.setter
    def outlet_64_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_64_node_name`

        Args:
            value (str): value for IDD Field `outlet_64_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_64_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_64_node_name`')

        self._data["Outlet 64 Node Name"] = value

    @property
    def outlet_65_node_name(self):
        """Get outlet_65_node_name

        Returns:
            str: the value of `outlet_65_node_name` or None if not set
        """
        return self._data["Outlet 65 Node Name"]

    @outlet_65_node_name.setter
    def outlet_65_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_65_node_name`

        Args:
            value (str): value for IDD Field `outlet_65_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_65_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_65_node_name`')

        self._data["Outlet 65 Node Name"] = value

    @property
    def outlet_66_node_name(self):
        """Get outlet_66_node_name

        Returns:
            str: the value of `outlet_66_node_name` or None if not set
        """
        return self._data["Outlet 66 Node Name"]

    @outlet_66_node_name.setter
    def outlet_66_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_66_node_name`

        Args:
            value (str): value for IDD Field `outlet_66_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_66_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_66_node_name`')

        self._data["Outlet 66 Node Name"] = value

    @property
    def outlet_67_node_name(self):
        """Get outlet_67_node_name

        Returns:
            str: the value of `outlet_67_node_name` or None if not set
        """
        return self._data["Outlet 67 Node Name"]

    @outlet_67_node_name.setter
    def outlet_67_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_67_node_name`

        Args:
            value (str): value for IDD Field `outlet_67_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_67_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_67_node_name`')

        self._data["Outlet 67 Node Name"] = value

    @property
    def outlet_68_node_name(self):
        """Get outlet_68_node_name

        Returns:
            str: the value of `outlet_68_node_name` or None if not set
        """
        return self._data["Outlet 68 Node Name"]

    @outlet_68_node_name.setter
    def outlet_68_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_68_node_name`

        Args:
            value (str): value for IDD Field `outlet_68_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_68_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_68_node_name`')

        self._data["Outlet 68 Node Name"] = value

    @property
    def outlet_69_node_name(self):
        """Get outlet_69_node_name

        Returns:
            str: the value of `outlet_69_node_name` or None if not set
        """
        return self._data["Outlet 69 Node Name"]

    @outlet_69_node_name.setter
    def outlet_69_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_69_node_name`

        Args:
            value (str): value for IDD Field `outlet_69_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_69_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_69_node_name`')

        self._data["Outlet 69 Node Name"] = value

    @property
    def outlet_70_node_name(self):
        """Get outlet_70_node_name

        Returns:
            str: the value of `outlet_70_node_name` or None if not set
        """
        return self._data["Outlet 70 Node Name"]

    @outlet_70_node_name.setter
    def outlet_70_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_70_node_name`

        Args:
            value (str): value for IDD Field `outlet_70_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_70_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_70_node_name`')

        self._data["Outlet 70 Node Name"] = value

    @property
    def outlet_71_node_name(self):
        """Get outlet_71_node_name

        Returns:
            str: the value of `outlet_71_node_name` or None if not set
        """
        return self._data["Outlet 71 Node Name"]

    @outlet_71_node_name.setter
    def outlet_71_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_71_node_name`

        Args:
            value (str): value for IDD Field `outlet_71_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_71_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_71_node_name`')

        self._data["Outlet 71 Node Name"] = value

    @property
    def outlet_72_node_name(self):
        """Get outlet_72_node_name

        Returns:
            str: the value of `outlet_72_node_name` or None if not set
        """
        return self._data["Outlet 72 Node Name"]

    @outlet_72_node_name.setter
    def outlet_72_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_72_node_name`

        Args:
            value (str): value for IDD Field `outlet_72_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_72_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_72_node_name`')

        self._data["Outlet 72 Node Name"] = value

    @property
    def outlet_73_node_name(self):
        """Get outlet_73_node_name

        Returns:
            str: the value of `outlet_73_node_name` or None if not set
        """
        return self._data["Outlet 73 Node Name"]

    @outlet_73_node_name.setter
    def outlet_73_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_73_node_name`

        Args:
            value (str): value for IDD Field `outlet_73_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_73_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_73_node_name`')

        self._data["Outlet 73 Node Name"] = value

    @property
    def outlet_74_node_name(self):
        """Get outlet_74_node_name

        Returns:
            str: the value of `outlet_74_node_name` or None if not set
        """
        return self._data["Outlet 74 Node Name"]

    @outlet_74_node_name.setter
    def outlet_74_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_74_node_name`

        Args:
            value (str): value for IDD Field `outlet_74_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_74_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_74_node_name`')

        self._data["Outlet 74 Node Name"] = value

    @property
    def outlet_75_node_name(self):
        """Get outlet_75_node_name

        Returns:
            str: the value of `outlet_75_node_name` or None if not set
        """
        return self._data["Outlet 75 Node Name"]

    @outlet_75_node_name.setter
    def outlet_75_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_75_node_name`

        Args:
            value (str): value for IDD Field `outlet_75_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_75_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_75_node_name`')

        self._data["Outlet 75 Node Name"] = value

    @property
    def outlet_76_node_name(self):
        """Get outlet_76_node_name

        Returns:
            str: the value of `outlet_76_node_name` or None if not set
        """
        return self._data["Outlet 76 Node Name"]

    @outlet_76_node_name.setter
    def outlet_76_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_76_node_name`

        Args:
            value (str): value for IDD Field `outlet_76_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_76_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_76_node_name`')

        self._data["Outlet 76 Node Name"] = value

    @property
    def outlet_77_node_name(self):
        """Get outlet_77_node_name

        Returns:
            str: the value of `outlet_77_node_name` or None if not set
        """
        return self._data["Outlet 77 Node Name"]

    @outlet_77_node_name.setter
    def outlet_77_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_77_node_name`

        Args:
            value (str): value for IDD Field `outlet_77_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_77_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_77_node_name`')

        self._data["Outlet 77 Node Name"] = value

    @property
    def outlet_78_node_name(self):
        """Get outlet_78_node_name

        Returns:
            str: the value of `outlet_78_node_name` or None if not set
        """
        return self._data["Outlet 78 Node Name"]

    @outlet_78_node_name.setter
    def outlet_78_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_78_node_name`

        Args:
            value (str): value for IDD Field `outlet_78_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_78_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_78_node_name`')

        self._data["Outlet 78 Node Name"] = value

    @property
    def outlet_79_node_name(self):
        """Get outlet_79_node_name

        Returns:
            str: the value of `outlet_79_node_name` or None if not set
        """
        return self._data["Outlet 79 Node Name"]

    @outlet_79_node_name.setter
    def outlet_79_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_79_node_name`

        Args:
            value (str): value for IDD Field `outlet_79_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_79_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_79_node_name`')

        self._data["Outlet 79 Node Name"] = value

    @property
    def outlet_80_node_name(self):
        """Get outlet_80_node_name

        Returns:
            str: the value of `outlet_80_node_name` or None if not set
        """
        return self._data["Outlet 80 Node Name"]

    @outlet_80_node_name.setter
    def outlet_80_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_80_node_name`

        Args:
            value (str): value for IDD Field `outlet_80_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_80_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_80_node_name`')

        self._data["Outlet 80 Node Name"] = value

    @property
    def outlet_81_node_name(self):
        """Get outlet_81_node_name

        Returns:
            str: the value of `outlet_81_node_name` or None if not set
        """
        return self._data["Outlet 81 Node Name"]

    @outlet_81_node_name.setter
    def outlet_81_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_81_node_name`

        Args:
            value (str): value for IDD Field `outlet_81_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_81_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_81_node_name`')

        self._data["Outlet 81 Node Name"] = value

    @property
    def outlet_82_node_name(self):
        """Get outlet_82_node_name

        Returns:
            str: the value of `outlet_82_node_name` or None if not set
        """
        return self._data["Outlet 82 Node Name"]

    @outlet_82_node_name.setter
    def outlet_82_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_82_node_name`

        Args:
            value (str): value for IDD Field `outlet_82_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_82_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_82_node_name`')

        self._data["Outlet 82 Node Name"] = value

    @property
    def outlet_83_node_name(self):
        """Get outlet_83_node_name

        Returns:
            str: the value of `outlet_83_node_name` or None if not set
        """
        return self._data["Outlet 83 Node Name"]

    @outlet_83_node_name.setter
    def outlet_83_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_83_node_name`

        Args:
            value (str): value for IDD Field `outlet_83_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_83_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_83_node_name`')

        self._data["Outlet 83 Node Name"] = value

    @property
    def outlet_84_node_name(self):
        """Get outlet_84_node_name

        Returns:
            str: the value of `outlet_84_node_name` or None if not set
        """
        return self._data["Outlet 84 Node Name"]

    @outlet_84_node_name.setter
    def outlet_84_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_84_node_name`

        Args:
            value (str): value for IDD Field `outlet_84_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_84_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_84_node_name`')

        self._data["Outlet 84 Node Name"] = value

    @property
    def outlet_85_node_name(self):
        """Get outlet_85_node_name

        Returns:
            str: the value of `outlet_85_node_name` or None if not set
        """
        return self._data["Outlet 85 Node Name"]

    @outlet_85_node_name.setter
    def outlet_85_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_85_node_name`

        Args:
            value (str): value for IDD Field `outlet_85_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_85_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_85_node_name`')

        self._data["Outlet 85 Node Name"] = value

    @property
    def outlet_86_node_name(self):
        """Get outlet_86_node_name

        Returns:
            str: the value of `outlet_86_node_name` or None if not set
        """
        return self._data["Outlet 86 Node Name"]

    @outlet_86_node_name.setter
    def outlet_86_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_86_node_name`

        Args:
            value (str): value for IDD Field `outlet_86_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_86_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_86_node_name`')

        self._data["Outlet 86 Node Name"] = value

    @property
    def outlet_87_node_name(self):
        """Get outlet_87_node_name

        Returns:
            str: the value of `outlet_87_node_name` or None if not set
        """
        return self._data["Outlet 87 Node Name"]

    @outlet_87_node_name.setter
    def outlet_87_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_87_node_name`

        Args:
            value (str): value for IDD Field `outlet_87_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_87_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_87_node_name`')

        self._data["Outlet 87 Node Name"] = value

    @property
    def outlet_88_node_name(self):
        """Get outlet_88_node_name

        Returns:
            str: the value of `outlet_88_node_name` or None if not set
        """
        return self._data["Outlet 88 Node Name"]

    @outlet_88_node_name.setter
    def outlet_88_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_88_node_name`

        Args:
            value (str): value for IDD Field `outlet_88_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_88_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_88_node_name`')

        self._data["Outlet 88 Node Name"] = value

    @property
    def outlet_89_node_name(self):
        """Get outlet_89_node_name

        Returns:
            str: the value of `outlet_89_node_name` or None if not set
        """
        return self._data["Outlet 89 Node Name"]

    @outlet_89_node_name.setter
    def outlet_89_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_89_node_name`

        Args:
            value (str): value for IDD Field `outlet_89_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_89_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_89_node_name`')

        self._data["Outlet 89 Node Name"] = value

    @property
    def outlet_90_node_name(self):
        """Get outlet_90_node_name

        Returns:
            str: the value of `outlet_90_node_name` or None if not set
        """
        return self._data["Outlet 90 Node Name"]

    @outlet_90_node_name.setter
    def outlet_90_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_90_node_name`

        Args:
            value (str): value for IDD Field `outlet_90_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_90_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_90_node_name`')

        self._data["Outlet 90 Node Name"] = value

    @property
    def outlet_91_node_name(self):
        """Get outlet_91_node_name

        Returns:
            str: the value of `outlet_91_node_name` or None if not set
        """
        return self._data["Outlet 91 Node Name"]

    @outlet_91_node_name.setter
    def outlet_91_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_91_node_name`

        Args:
            value (str): value for IDD Field `outlet_91_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_91_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_91_node_name`')

        self._data["Outlet 91 Node Name"] = value

    @property
    def outlet_92_node_name(self):
        """Get outlet_92_node_name

        Returns:
            str: the value of `outlet_92_node_name` or None if not set
        """
        return self._data["Outlet 92 Node Name"]

    @outlet_92_node_name.setter
    def outlet_92_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_92_node_name`

        Args:
            value (str): value for IDD Field `outlet_92_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_92_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_92_node_name`')

        self._data["Outlet 92 Node Name"] = value

    @property
    def outlet_93_node_name(self):
        """Get outlet_93_node_name

        Returns:
            str: the value of `outlet_93_node_name` or None if not set
        """
        return self._data["Outlet 93 Node Name"]

    @outlet_93_node_name.setter
    def outlet_93_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_93_node_name`

        Args:
            value (str): value for IDD Field `outlet_93_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_93_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_93_node_name`')

        self._data["Outlet 93 Node Name"] = value

    @property
    def outlet_94_node_name(self):
        """Get outlet_94_node_name

        Returns:
            str: the value of `outlet_94_node_name` or None if not set
        """
        return self._data["Outlet 94 Node Name"]

    @outlet_94_node_name.setter
    def outlet_94_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_94_node_name`

        Args:
            value (str): value for IDD Field `outlet_94_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_94_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_94_node_name`')

        self._data["Outlet 94 Node Name"] = value

    @property
    def outlet_95_node_name(self):
        """Get outlet_95_node_name

        Returns:
            str: the value of `outlet_95_node_name` or None if not set
        """
        return self._data["Outlet 95 Node Name"]

    @outlet_95_node_name.setter
    def outlet_95_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_95_node_name`

        Args:
            value (str): value for IDD Field `outlet_95_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_95_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_95_node_name`')

        self._data["Outlet 95 Node Name"] = value

    @property
    def outlet_96_node_name(self):
        """Get outlet_96_node_name

        Returns:
            str: the value of `outlet_96_node_name` or None if not set
        """
        return self._data["Outlet 96 Node Name"]

    @outlet_96_node_name.setter
    def outlet_96_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_96_node_name`

        Args:
            value (str): value for IDD Field `outlet_96_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_96_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_96_node_name`')

        self._data["Outlet 96 Node Name"] = value

    @property
    def outlet_97_node_name(self):
        """Get outlet_97_node_name

        Returns:
            str: the value of `outlet_97_node_name` or None if not set
        """
        return self._data["Outlet 97 Node Name"]

    @outlet_97_node_name.setter
    def outlet_97_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_97_node_name`

        Args:
            value (str): value for IDD Field `outlet_97_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_97_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_97_node_name`')

        self._data["Outlet 97 Node Name"] = value

    @property
    def outlet_98_node_name(self):
        """Get outlet_98_node_name

        Returns:
            str: the value of `outlet_98_node_name` or None if not set
        """
        return self._data["Outlet 98 Node Name"]

    @outlet_98_node_name.setter
    def outlet_98_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_98_node_name`

        Args:
            value (str): value for IDD Field `outlet_98_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_98_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_98_node_name`')

        self._data["Outlet 98 Node Name"] = value

    @property
    def outlet_99_node_name(self):
        """Get outlet_99_node_name

        Returns:
            str: the value of `outlet_99_node_name` or None if not set
        """
        return self._data["Outlet 99 Node Name"]

    @outlet_99_node_name.setter
    def outlet_99_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_99_node_name`

        Args:
            value (str): value for IDD Field `outlet_99_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_99_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_99_node_name`')

        self._data["Outlet 99 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @property
    def outlet_100_node_name(self):
        """Get outlet_100_node_name

        Returns:
            str: the value of `outlet_100_node_name` or None if not set
        """
        return self._data["Outlet 100 Node Name"]

    @outlet_100_node_name.setter
    def outlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_100_node_name`

        Args:
            value (str): value for IDD Field `outlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_100_node_name`')

        self._data["Outlet 100 Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.zone_node_name))
        out.append(self._to_str(self.inlet_node_name))
        out.append(self._to_str(self.outlet_1_node_name))
        out.append(self._to_str(self.outlet_2_node_name))
        out.append(self._to_str(self.outlet_3_node_name))
        out.append(self._to_str(self.outlet_4_node_name))
        out.append(self._to_str(self.outlet_5_node_name))
        out.append(self._to_str(self.outlet_6_node_name))
        out.append(self._to_str(self.outlet_7_node_name))
        out.append(self._to_str(self.outlet_8_node_name))
        out.append(self._to_str(self.outlet_9_node_name))
        out.append(self._to_str(self.outlet_10_node_name))
        out.append(self._to_str(self.outlet_11_node_name))
        out.append(self._to_str(self.outlet_12_node_name))
        out.append(self._to_str(self.outlet_13_node_name))
        out.append(self._to_str(self.outlet_14_node_name))
        out.append(self._to_str(self.outlet_15_node_name))
        out.append(self._to_str(self.outlet_16_node_name))
        out.append(self._to_str(self.outlet_17_node_name))
        out.append(self._to_str(self.outlet_18_node_name))
        out.append(self._to_str(self.outlet_19_node_name))
        out.append(self._to_str(self.outlet_20_node_name))
        out.append(self._to_str(self.outlet_21_node_name))
        out.append(self._to_str(self.outlet_22_node_name))
        out.append(self._to_str(self.outlet_23_node_name))
        out.append(self._to_str(self.outlet_24_node_name))
        out.append(self._to_str(self.outlet_25_node_name))
        out.append(self._to_str(self.outlet_26_node_name))
        out.append(self._to_str(self.outlet_27_node_name))
        out.append(self._to_str(self.outlet_28_node_name))
        out.append(self._to_str(self.outlet_29_node_name))
        out.append(self._to_str(self.outlet_30_node_name))
        out.append(self._to_str(self.outlet_31_node_name))
        out.append(self._to_str(self.outlet_32_node_name))
        out.append(self._to_str(self.outlet_33_node_name))
        out.append(self._to_str(self.outlet_34_node_name))
        out.append(self._to_str(self.outlet_35_node_name))
        out.append(self._to_str(self.outlet_36_node_name))
        out.append(self._to_str(self.outlet_37_node_name))
        out.append(self._to_str(self.outlet_38_node_name))
        out.append(self._to_str(self.outlet_39_node_name))
        out.append(self._to_str(self.outlet_40_node_name))
        out.append(self._to_str(self.outlet_41_node_name))
        out.append(self._to_str(self.outlet_42_node_name))
        out.append(self._to_str(self.outlet_43_node_name))
        out.append(self._to_str(self.outlet_44_node_name))
        out.append(self._to_str(self.outlet_45_node_name))
        out.append(self._to_str(self.outlet_46_node_name))
        out.append(self._to_str(self.outlet_47_node_name))
        out.append(self._to_str(self.outlet_48_node_name))
        out.append(self._to_str(self.outlet_49_node_name))
        out.append(self._to_str(self.outlet_50_node_name))
        out.append(self._to_str(self.outlet_51_node_name))
        out.append(self._to_str(self.outlet_52_node_name))
        out.append(self._to_str(self.outlet_53_node_name))
        out.append(self._to_str(self.outlet_54_node_name))
        out.append(self._to_str(self.outlet_55_node_name))
        out.append(self._to_str(self.outlet_56_node_name))
        out.append(self._to_str(self.outlet_57_node_name))
        out.append(self._to_str(self.outlet_58_node_name))
        out.append(self._to_str(self.outlet_59_node_name))
        out.append(self._to_str(self.outlet_60_node_name))
        out.append(self._to_str(self.outlet_61_node_name))
        out.append(self._to_str(self.outlet_62_node_name))
        out.append(self._to_str(self.outlet_63_node_name))
        out.append(self._to_str(self.outlet_64_node_name))
        out.append(self._to_str(self.outlet_65_node_name))
        out.append(self._to_str(self.outlet_66_node_name))
        out.append(self._to_str(self.outlet_67_node_name))
        out.append(self._to_str(self.outlet_68_node_name))
        out.append(self._to_str(self.outlet_69_node_name))
        out.append(self._to_str(self.outlet_70_node_name))
        out.append(self._to_str(self.outlet_71_node_name))
        out.append(self._to_str(self.outlet_72_node_name))
        out.append(self._to_str(self.outlet_73_node_name))
        out.append(self._to_str(self.outlet_74_node_name))
        out.append(self._to_str(self.outlet_75_node_name))
        out.append(self._to_str(self.outlet_76_node_name))
        out.append(self._to_str(self.outlet_77_node_name))
        out.append(self._to_str(self.outlet_78_node_name))
        out.append(self._to_str(self.outlet_79_node_name))
        out.append(self._to_str(self.outlet_80_node_name))
        out.append(self._to_str(self.outlet_81_node_name))
        out.append(self._to_str(self.outlet_82_node_name))
        out.append(self._to_str(self.outlet_83_node_name))
        out.append(self._to_str(self.outlet_84_node_name))
        out.append(self._to_str(self.outlet_85_node_name))
        out.append(self._to_str(self.outlet_86_node_name))
        out.append(self._to_str(self.outlet_87_node_name))
        out.append(self._to_str(self.outlet_88_node_name))
        out.append(self._to_str(self.outlet_89_node_name))
        out.append(self._to_str(self.outlet_90_node_name))
        out.append(self._to_str(self.outlet_91_node_name))
        out.append(self._to_str(self.outlet_92_node_name))
        out.append(self._to_str(self.outlet_93_node_name))
        out.append(self._to_str(self.outlet_94_node_name))
        out.append(self._to_str(self.outlet_95_node_name))
        out.append(self._to_str(self.outlet_96_node_name))
        out.append(self._to_str(self.outlet_97_node_name))
        out.append(self._to_str(self.outlet_98_node_name))
        out.append(self._to_str(self.outlet_99_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        out.append(self._to_str(self.outlet_100_node_name))
        return ",".join(out)

class AirLoopHvacSupplyPath(object):
    """ Corresponds to IDD object `AirLoopHVAC:SupplyPath`
        A supply path can only contain AirLoopHVAC:ZoneSplitter and AirLoopHVAC:SupplyPlenum objects
        which may be in series or parallel.
    """
    internal_name = "AirLoopHVAC:SupplyPath"
    field_count = 52

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:SupplyPath`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Supply Air Path Inlet Node Name"] = None
        self._data["Component 1 Object Type"] = None
        self._data["Component 1 Name"] = None
        self._data["Component 2 Object Type"] = None
        self._data["Component 2 Name"] = None
        self._data["Component 3 Object Type"] = None
        self._data["Component 3 Name"] = None
        self._data["Component 4 Object Type"] = None
        self._data["Component 4 Name"] = None
        self._data["Component 5 Object Type"] = None
        self._data["Component 5 Name"] = None
        self._data["Component 6 Object Type"] = None
        self._data["Component 6 Name"] = None
        self._data["Component 7 Object Type"] = None
        self._data["Component 7 Name"] = None
        self._data["Component 8 Object Type"] = None
        self._data["Component 8 Name"] = None
        self._data["Component 9 Object Type"] = None
        self._data["Component 9 Name"] = None
        self._data["Component 10 Object Type"] = None
        self._data["Component 10 Name"] = None
        self._data["Component 11 Object Type"] = None
        self._data["Component 11 Name"] = None
        self._data["Component 12 Object Type"] = None
        self._data["Component 12 Name"] = None
        self._data["Component 13 Object Type"] = None
        self._data["Component 13 Name"] = None
        self._data["Component 14 Object Type"] = None
        self._data["Component 14 Name"] = None
        self._data["Component 15 Object Type"] = None
        self._data["Component 15 Name"] = None
        self._data["Component 16 Object Type"] = None
        self._data["Component 16 Name"] = None
        self._data["Component 17 Object Type"] = None
        self._data["Component 17 Name"] = None
        self._data["Component 18 Object Type"] = None
        self._data["Component 18 Name"] = None
        self._data["Component 19 Object Type"] = None
        self._data["Component 19 Name"] = None
        self._data["Component 20 Object Type"] = None
        self._data["Component 20 Name"] = None
        self._data["Component 21 Object Type"] = None
        self._data["Component 21 Name"] = None
        self._data["Component 22 Object Type"] = None
        self._data["Component 22 Name"] = None
        self._data["Component 23 Object Type"] = None
        self._data["Component 23 Name"] = None
        self._data["Component 24 Object Type"] = None
        self._data["Component 24 Name"] = None
        self._data["Component 25 Object Type"] = None
        self._data["Component 25 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.supply_air_path_inlet_node_name = None
        else:
            self.supply_air_path_inlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_object_type = None
        else:
            self.component_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_name = None
        else:
            self.component_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_object_type = None
        else:
            self.component_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_name = None
        else:
            self.component_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_object_type = None
        else:
            self.component_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_name = None
        else:
            self.component_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_object_type = None
        else:
            self.component_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_name = None
        else:
            self.component_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_object_type = None
        else:
            self.component_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_name = None
        else:
            self.component_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_object_type = None
        else:
            self.component_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_name = None
        else:
            self.component_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_object_type = None
        else:
            self.component_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_name = None
        else:
            self.component_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_object_type = None
        else:
            self.component_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_name = None
        else:
            self.component_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_9_object_type = None
        else:
            self.component_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_9_name = None
        else:
            self.component_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_10_object_type = None
        else:
            self.component_10_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_10_name = None
        else:
            self.component_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_11_object_type = None
        else:
            self.component_11_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_11_name = None
        else:
            self.component_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_12_object_type = None
        else:
            self.component_12_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_12_name = None
        else:
            self.component_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_13_object_type = None
        else:
            self.component_13_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_13_name = None
        else:
            self.component_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_14_object_type = None
        else:
            self.component_14_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_14_name = None
        else:
            self.component_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_15_object_type = None
        else:
            self.component_15_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_15_name = None
        else:
            self.component_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_16_object_type = None
        else:
            self.component_16_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_16_name = None
        else:
            self.component_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_17_object_type = None
        else:
            self.component_17_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_17_name = None
        else:
            self.component_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_18_object_type = None
        else:
            self.component_18_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_18_name = None
        else:
            self.component_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_19_object_type = None
        else:
            self.component_19_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_19_name = None
        else:
            self.component_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_20_object_type = None
        else:
            self.component_20_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_20_name = None
        else:
            self.component_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_21_object_type = None
        else:
            self.component_21_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_21_name = None
        else:
            self.component_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_22_object_type = None
        else:
            self.component_22_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_22_name = None
        else:
            self.component_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_23_object_type = None
        else:
            self.component_23_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_23_name = None
        else:
            self.component_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_24_object_type = None
        else:
            self.component_24_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_24_name = None
        else:
            self.component_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_25_object_type = None
        else:
            self.component_25_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_25_name = None
        else:
            self.component_25_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def supply_air_path_inlet_node_name(self):
        """Get supply_air_path_inlet_node_name

        Returns:
            str: the value of `supply_air_path_inlet_node_name` or None if not set
        """
        return self._data["Supply Air Path Inlet Node Name"]

    @supply_air_path_inlet_node_name.setter
    def supply_air_path_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `supply_air_path_inlet_node_name`

        Args:
            value (str): value for IDD Field `supply_air_path_inlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_path_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_path_inlet_node_name`')

        self._data["Supply Air Path Inlet Node Name"] = value

    @property
    def component_1_object_type(self):
        """Get component_1_object_type

        Returns:
            str: the value of `component_1_object_type` or None if not set
        """
        return self._data["Component 1 Object Type"]

    @component_1_object_type.setter
    def component_1_object_type(self, value=None):
        """  Corresponds to IDD Field `component_1_object_type`
        Supply path components must be listed in flow order.

        Args:
            value (str): value for IDD Field `component_1_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_1_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_1_object_type`'.format(value))

        self._data["Component 1 Object Type"] = value

    @property
    def component_1_name(self):
        """Get component_1_name

        Returns:
            str: the value of `component_1_name` or None if not set
        """
        return self._data["Component 1 Name"]

    @component_1_name.setter
    def component_1_name(self, value=None):
        """  Corresponds to IDD Field `component_1_name`

        Args:
            value (str): value for IDD Field `component_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_1_name`')

        self._data["Component 1 Name"] = value

    @property
    def component_2_object_type(self):
        """Get component_2_object_type

        Returns:
            str: the value of `component_2_object_type` or None if not set
        """
        return self._data["Component 2 Object Type"]

    @component_2_object_type.setter
    def component_2_object_type(self, value=None):
        """  Corresponds to IDD Field `component_2_object_type`

        Args:
            value (str): value for IDD Field `component_2_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_2_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_2_object_type`'.format(value))

        self._data["Component 2 Object Type"] = value

    @property
    def component_2_name(self):
        """Get component_2_name

        Returns:
            str: the value of `component_2_name` or None if not set
        """
        return self._data["Component 2 Name"]

    @component_2_name.setter
    def component_2_name(self, value=None):
        """  Corresponds to IDD Field `component_2_name`

        Args:
            value (str): value for IDD Field `component_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_2_name`')

        self._data["Component 2 Name"] = value

    @property
    def component_3_object_type(self):
        """Get component_3_object_type

        Returns:
            str: the value of `component_3_object_type` or None if not set
        """
        return self._data["Component 3 Object Type"]

    @component_3_object_type.setter
    def component_3_object_type(self, value=None):
        """  Corresponds to IDD Field `component_3_object_type`

        Args:
            value (str): value for IDD Field `component_3_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_3_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_3_object_type`'.format(value))

        self._data["Component 3 Object Type"] = value

    @property
    def component_3_name(self):
        """Get component_3_name

        Returns:
            str: the value of `component_3_name` or None if not set
        """
        return self._data["Component 3 Name"]

    @component_3_name.setter
    def component_3_name(self, value=None):
        """  Corresponds to IDD Field `component_3_name`

        Args:
            value (str): value for IDD Field `component_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_3_name`')

        self._data["Component 3 Name"] = value

    @property
    def component_4_object_type(self):
        """Get component_4_object_type

        Returns:
            str: the value of `component_4_object_type` or None if not set
        """
        return self._data["Component 4 Object Type"]

    @component_4_object_type.setter
    def component_4_object_type(self, value=None):
        """  Corresponds to IDD Field `component_4_object_type`

        Args:
            value (str): value for IDD Field `component_4_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_4_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_4_object_type`'.format(value))

        self._data["Component 4 Object Type"] = value

    @property
    def component_4_name(self):
        """Get component_4_name

        Returns:
            str: the value of `component_4_name` or None if not set
        """
        return self._data["Component 4 Name"]

    @component_4_name.setter
    def component_4_name(self, value=None):
        """  Corresponds to IDD Field `component_4_name`

        Args:
            value (str): value for IDD Field `component_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_4_name`')

        self._data["Component 4 Name"] = value

    @property
    def component_5_object_type(self):
        """Get component_5_object_type

        Returns:
            str: the value of `component_5_object_type` or None if not set
        """
        return self._data["Component 5 Object Type"]

    @component_5_object_type.setter
    def component_5_object_type(self, value=None):
        """  Corresponds to IDD Field `component_5_object_type`

        Args:
            value (str): value for IDD Field `component_5_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_5_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_5_object_type`'.format(value))

        self._data["Component 5 Object Type"] = value

    @property
    def component_5_name(self):
        """Get component_5_name

        Returns:
            str: the value of `component_5_name` or None if not set
        """
        return self._data["Component 5 Name"]

    @component_5_name.setter
    def component_5_name(self, value=None):
        """  Corresponds to IDD Field `component_5_name`

        Args:
            value (str): value for IDD Field `component_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_5_name`')

        self._data["Component 5 Name"] = value

    @property
    def component_6_object_type(self):
        """Get component_6_object_type

        Returns:
            str: the value of `component_6_object_type` or None if not set
        """
        return self._data["Component 6 Object Type"]

    @component_6_object_type.setter
    def component_6_object_type(self, value=None):
        """  Corresponds to IDD Field `component_6_object_type`

        Args:
            value (str): value for IDD Field `component_6_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_6_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_6_object_type`'.format(value))

        self._data["Component 6 Object Type"] = value

    @property
    def component_6_name(self):
        """Get component_6_name

        Returns:
            str: the value of `component_6_name` or None if not set
        """
        return self._data["Component 6 Name"]

    @component_6_name.setter
    def component_6_name(self, value=None):
        """  Corresponds to IDD Field `component_6_name`

        Args:
            value (str): value for IDD Field `component_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_6_name`')

        self._data["Component 6 Name"] = value

    @property
    def component_7_object_type(self):
        """Get component_7_object_type

        Returns:
            str: the value of `component_7_object_type` or None if not set
        """
        return self._data["Component 7 Object Type"]

    @component_7_object_type.setter
    def component_7_object_type(self, value=None):
        """  Corresponds to IDD Field `component_7_object_type`

        Args:
            value (str): value for IDD Field `component_7_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_7_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_7_object_type`'.format(value))

        self._data["Component 7 Object Type"] = value

    @property
    def component_7_name(self):
        """Get component_7_name

        Returns:
            str: the value of `component_7_name` or None if not set
        """
        return self._data["Component 7 Name"]

    @component_7_name.setter
    def component_7_name(self, value=None):
        """  Corresponds to IDD Field `component_7_name`

        Args:
            value (str): value for IDD Field `component_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_7_name`')

        self._data["Component 7 Name"] = value

    @property
    def component_8_object_type(self):
        """Get component_8_object_type

        Returns:
            str: the value of `component_8_object_type` or None if not set
        """
        return self._data["Component 8 Object Type"]

    @component_8_object_type.setter
    def component_8_object_type(self, value=None):
        """  Corresponds to IDD Field `component_8_object_type`

        Args:
            value (str): value for IDD Field `component_8_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_8_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_8_object_type`'.format(value))

        self._data["Component 8 Object Type"] = value

    @property
    def component_8_name(self):
        """Get component_8_name

        Returns:
            str: the value of `component_8_name` or None if not set
        """
        return self._data["Component 8 Name"]

    @component_8_name.setter
    def component_8_name(self, value=None):
        """  Corresponds to IDD Field `component_8_name`

        Args:
            value (str): value for IDD Field `component_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_8_name`')

        self._data["Component 8 Name"] = value

    @property
    def component_9_object_type(self):
        """Get component_9_object_type

        Returns:
            str: the value of `component_9_object_type` or None if not set
        """
        return self._data["Component 9 Object Type"]

    @component_9_object_type.setter
    def component_9_object_type(self, value=None):
        """  Corresponds to IDD Field `component_9_object_type`

        Args:
            value (str): value for IDD Field `component_9_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_9_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_9_object_type`'.format(value))

        self._data["Component 9 Object Type"] = value

    @property
    def component_9_name(self):
        """Get component_9_name

        Returns:
            str: the value of `component_9_name` or None if not set
        """
        return self._data["Component 9 Name"]

    @component_9_name.setter
    def component_9_name(self, value=None):
        """  Corresponds to IDD Field `component_9_name`

        Args:
            value (str): value for IDD Field `component_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_9_name`')

        self._data["Component 9 Name"] = value

    @property
    def component_10_object_type(self):
        """Get component_10_object_type

        Returns:
            str: the value of `component_10_object_type` or None if not set
        """
        return self._data["Component 10 Object Type"]

    @component_10_object_type.setter
    def component_10_object_type(self, value=None):
        """  Corresponds to IDD Field `component_10_object_type`

        Args:
            value (str): value for IDD Field `component_10_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_10_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_10_object_type`'.format(value))

        self._data["Component 10 Object Type"] = value

    @property
    def component_10_name(self):
        """Get component_10_name

        Returns:
            str: the value of `component_10_name` or None if not set
        """
        return self._data["Component 10 Name"]

    @component_10_name.setter
    def component_10_name(self, value=None):
        """  Corresponds to IDD Field `component_10_name`

        Args:
            value (str): value for IDD Field `component_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_10_name`')

        self._data["Component 10 Name"] = value

    @property
    def component_11_object_type(self):
        """Get component_11_object_type

        Returns:
            str: the value of `component_11_object_type` or None if not set
        """
        return self._data["Component 11 Object Type"]

    @component_11_object_type.setter
    def component_11_object_type(self, value=None):
        """  Corresponds to IDD Field `component_11_object_type`

        Args:
            value (str): value for IDD Field `component_11_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_11_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_11_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_11_object_type`'.format(value))

        self._data["Component 11 Object Type"] = value

    @property
    def component_11_name(self):
        """Get component_11_name

        Returns:
            str: the value of `component_11_name` or None if not set
        """
        return self._data["Component 11 Name"]

    @component_11_name.setter
    def component_11_name(self, value=None):
        """  Corresponds to IDD Field `component_11_name`

        Args:
            value (str): value for IDD Field `component_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_11_name`')

        self._data["Component 11 Name"] = value

    @property
    def component_12_object_type(self):
        """Get component_12_object_type

        Returns:
            str: the value of `component_12_object_type` or None if not set
        """
        return self._data["Component 12 Object Type"]

    @component_12_object_type.setter
    def component_12_object_type(self, value=None):
        """  Corresponds to IDD Field `component_12_object_type`

        Args:
            value (str): value for IDD Field `component_12_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_12_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_12_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_12_object_type`'.format(value))

        self._data["Component 12 Object Type"] = value

    @property
    def component_12_name(self):
        """Get component_12_name

        Returns:
            str: the value of `component_12_name` or None if not set
        """
        return self._data["Component 12 Name"]

    @component_12_name.setter
    def component_12_name(self, value=None):
        """  Corresponds to IDD Field `component_12_name`

        Args:
            value (str): value for IDD Field `component_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_12_name`')

        self._data["Component 12 Name"] = value

    @property
    def component_13_object_type(self):
        """Get component_13_object_type

        Returns:
            str: the value of `component_13_object_type` or None if not set
        """
        return self._data["Component 13 Object Type"]

    @component_13_object_type.setter
    def component_13_object_type(self, value=None):
        """  Corresponds to IDD Field `component_13_object_type`

        Args:
            value (str): value for IDD Field `component_13_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_13_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_13_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_13_object_type`'.format(value))

        self._data["Component 13 Object Type"] = value

    @property
    def component_13_name(self):
        """Get component_13_name

        Returns:
            str: the value of `component_13_name` or None if not set
        """
        return self._data["Component 13 Name"]

    @component_13_name.setter
    def component_13_name(self, value=None):
        """  Corresponds to IDD Field `component_13_name`

        Args:
            value (str): value for IDD Field `component_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_13_name`')

        self._data["Component 13 Name"] = value

    @property
    def component_14_object_type(self):
        """Get component_14_object_type

        Returns:
            str: the value of `component_14_object_type` or None if not set
        """
        return self._data["Component 14 Object Type"]

    @component_14_object_type.setter
    def component_14_object_type(self, value=None):
        """  Corresponds to IDD Field `component_14_object_type`

        Args:
            value (str): value for IDD Field `component_14_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_14_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_14_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_14_object_type`'.format(value))

        self._data["Component 14 Object Type"] = value

    @property
    def component_14_name(self):
        """Get component_14_name

        Returns:
            str: the value of `component_14_name` or None if not set
        """
        return self._data["Component 14 Name"]

    @component_14_name.setter
    def component_14_name(self, value=None):
        """  Corresponds to IDD Field `component_14_name`

        Args:
            value (str): value for IDD Field `component_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_14_name`')

        self._data["Component 14 Name"] = value

    @property
    def component_15_object_type(self):
        """Get component_15_object_type

        Returns:
            str: the value of `component_15_object_type` or None if not set
        """
        return self._data["Component 15 Object Type"]

    @component_15_object_type.setter
    def component_15_object_type(self, value=None):
        """  Corresponds to IDD Field `component_15_object_type`

        Args:
            value (str): value for IDD Field `component_15_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_15_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_15_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_15_object_type`'.format(value))

        self._data["Component 15 Object Type"] = value

    @property
    def component_15_name(self):
        """Get component_15_name

        Returns:
            str: the value of `component_15_name` or None if not set
        """
        return self._data["Component 15 Name"]

    @component_15_name.setter
    def component_15_name(self, value=None):
        """  Corresponds to IDD Field `component_15_name`

        Args:
            value (str): value for IDD Field `component_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_15_name`')

        self._data["Component 15 Name"] = value

    @property
    def component_16_object_type(self):
        """Get component_16_object_type

        Returns:
            str: the value of `component_16_object_type` or None if not set
        """
        return self._data["Component 16 Object Type"]

    @component_16_object_type.setter
    def component_16_object_type(self, value=None):
        """  Corresponds to IDD Field `component_16_object_type`

        Args:
            value (str): value for IDD Field `component_16_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_16_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_16_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_16_object_type`'.format(value))

        self._data["Component 16 Object Type"] = value

    @property
    def component_16_name(self):
        """Get component_16_name

        Returns:
            str: the value of `component_16_name` or None if not set
        """
        return self._data["Component 16 Name"]

    @component_16_name.setter
    def component_16_name(self, value=None):
        """  Corresponds to IDD Field `component_16_name`

        Args:
            value (str): value for IDD Field `component_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_16_name`')

        self._data["Component 16 Name"] = value

    @property
    def component_17_object_type(self):
        """Get component_17_object_type

        Returns:
            str: the value of `component_17_object_type` or None if not set
        """
        return self._data["Component 17 Object Type"]

    @component_17_object_type.setter
    def component_17_object_type(self, value=None):
        """  Corresponds to IDD Field `component_17_object_type`

        Args:
            value (str): value for IDD Field `component_17_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_17_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_17_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_17_object_type`'.format(value))

        self._data["Component 17 Object Type"] = value

    @property
    def component_17_name(self):
        """Get component_17_name

        Returns:
            str: the value of `component_17_name` or None if not set
        """
        return self._data["Component 17 Name"]

    @component_17_name.setter
    def component_17_name(self, value=None):
        """  Corresponds to IDD Field `component_17_name`

        Args:
            value (str): value for IDD Field `component_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_17_name`')

        self._data["Component 17 Name"] = value

    @property
    def component_18_object_type(self):
        """Get component_18_object_type

        Returns:
            str: the value of `component_18_object_type` or None if not set
        """
        return self._data["Component 18 Object Type"]

    @component_18_object_type.setter
    def component_18_object_type(self, value=None):
        """  Corresponds to IDD Field `component_18_object_type`

        Args:
            value (str): value for IDD Field `component_18_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_18_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_18_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_18_object_type`'.format(value))

        self._data["Component 18 Object Type"] = value

    @property
    def component_18_name(self):
        """Get component_18_name

        Returns:
            str: the value of `component_18_name` or None if not set
        """
        return self._data["Component 18 Name"]

    @component_18_name.setter
    def component_18_name(self, value=None):
        """  Corresponds to IDD Field `component_18_name`

        Args:
            value (str): value for IDD Field `component_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_18_name`')

        self._data["Component 18 Name"] = value

    @property
    def component_19_object_type(self):
        """Get component_19_object_type

        Returns:
            str: the value of `component_19_object_type` or None if not set
        """
        return self._data["Component 19 Object Type"]

    @component_19_object_type.setter
    def component_19_object_type(self, value=None):
        """  Corresponds to IDD Field `component_19_object_type`

        Args:
            value (str): value for IDD Field `component_19_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_19_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_19_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_19_object_type`'.format(value))

        self._data["Component 19 Object Type"] = value

    @property
    def component_19_name(self):
        """Get component_19_name

        Returns:
            str: the value of `component_19_name` or None if not set
        """
        return self._data["Component 19 Name"]

    @component_19_name.setter
    def component_19_name(self, value=None):
        """  Corresponds to IDD Field `component_19_name`

        Args:
            value (str): value for IDD Field `component_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_19_name`')

        self._data["Component 19 Name"] = value

    @property
    def component_20_object_type(self):
        """Get component_20_object_type

        Returns:
            str: the value of `component_20_object_type` or None if not set
        """
        return self._data["Component 20 Object Type"]

    @component_20_object_type.setter
    def component_20_object_type(self, value=None):
        """  Corresponds to IDD Field `component_20_object_type`

        Args:
            value (str): value for IDD Field `component_20_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_20_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_20_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_20_object_type`'.format(value))

        self._data["Component 20 Object Type"] = value

    @property
    def component_20_name(self):
        """Get component_20_name

        Returns:
            str: the value of `component_20_name` or None if not set
        """
        return self._data["Component 20 Name"]

    @component_20_name.setter
    def component_20_name(self, value=None):
        """  Corresponds to IDD Field `component_20_name`

        Args:
            value (str): value for IDD Field `component_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_20_name`')

        self._data["Component 20 Name"] = value

    @property
    def component_21_object_type(self):
        """Get component_21_object_type

        Returns:
            str: the value of `component_21_object_type` or None if not set
        """
        return self._data["Component 21 Object Type"]

    @component_21_object_type.setter
    def component_21_object_type(self, value=None):
        """  Corresponds to IDD Field `component_21_object_type`

        Args:
            value (str): value for IDD Field `component_21_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_21_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_21_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_21_object_type`'.format(value))

        self._data["Component 21 Object Type"] = value

    @property
    def component_21_name(self):
        """Get component_21_name

        Returns:
            str: the value of `component_21_name` or None if not set
        """
        return self._data["Component 21 Name"]

    @component_21_name.setter
    def component_21_name(self, value=None):
        """  Corresponds to IDD Field `component_21_name`

        Args:
            value (str): value for IDD Field `component_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_21_name`')

        self._data["Component 21 Name"] = value

    @property
    def component_22_object_type(self):
        """Get component_22_object_type

        Returns:
            str: the value of `component_22_object_type` or None if not set
        """
        return self._data["Component 22 Object Type"]

    @component_22_object_type.setter
    def component_22_object_type(self, value=None):
        """  Corresponds to IDD Field `component_22_object_type`

        Args:
            value (str): value for IDD Field `component_22_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_22_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_22_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_22_object_type`'.format(value))

        self._data["Component 22 Object Type"] = value

    @property
    def component_22_name(self):
        """Get component_22_name

        Returns:
            str: the value of `component_22_name` or None if not set
        """
        return self._data["Component 22 Name"]

    @component_22_name.setter
    def component_22_name(self, value=None):
        """  Corresponds to IDD Field `component_22_name`

        Args:
            value (str): value for IDD Field `component_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_22_name`')

        self._data["Component 22 Name"] = value

    @property
    def component_23_object_type(self):
        """Get component_23_object_type

        Returns:
            str: the value of `component_23_object_type` or None if not set
        """
        return self._data["Component 23 Object Type"]

    @component_23_object_type.setter
    def component_23_object_type(self, value=None):
        """  Corresponds to IDD Field `component_23_object_type`

        Args:
            value (str): value for IDD Field `component_23_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_23_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_23_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_23_object_type`'.format(value))

        self._data["Component 23 Object Type"] = value

    @property
    def component_23_name(self):
        """Get component_23_name

        Returns:
            str: the value of `component_23_name` or None if not set
        """
        return self._data["Component 23 Name"]

    @component_23_name.setter
    def component_23_name(self, value=None):
        """  Corresponds to IDD Field `component_23_name`

        Args:
            value (str): value for IDD Field `component_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_23_name`')

        self._data["Component 23 Name"] = value

    @property
    def component_24_object_type(self):
        """Get component_24_object_type

        Returns:
            str: the value of `component_24_object_type` or None if not set
        """
        return self._data["Component 24 Object Type"]

    @component_24_object_type.setter
    def component_24_object_type(self, value=None):
        """  Corresponds to IDD Field `component_24_object_type`

        Args:
            value (str): value for IDD Field `component_24_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_24_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_24_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_24_object_type`'.format(value))

        self._data["Component 24 Object Type"] = value

    @property
    def component_24_name(self):
        """Get component_24_name

        Returns:
            str: the value of `component_24_name` or None if not set
        """
        return self._data["Component 24 Name"]

    @component_24_name.setter
    def component_24_name(self, value=None):
        """  Corresponds to IDD Field `component_24_name`

        Args:
            value (str): value for IDD Field `component_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_24_name`')

        self._data["Component 24 Name"] = value

    @property
    def component_25_object_type(self):
        """Get component_25_object_type

        Returns:
            str: the value of `component_25_object_type` or None if not set
        """
        return self._data["Component 25 Object Type"]

    @component_25_object_type.setter
    def component_25_object_type(self, value=None):
        """  Corresponds to IDD Field `component_25_object_type`

        Args:
            value (str): value for IDD Field `component_25_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneSplitter
                      - AirLoopHVAC:SupplyPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_25_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_25_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneSplitter")
            vals.add("AirLoopHVAC:SupplyPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_25_object_type`'.format(value))

        self._data["Component 25 Object Type"] = value

    @property
    def component_25_name(self):
        """Get component_25_name

        Returns:
            str: the value of `component_25_name` or None if not set
        """
        return self._data["Component 25 Name"]

    @component_25_name.setter
    def component_25_name(self, value=None):
        """  Corresponds to IDD Field `component_25_name`

        Args:
            value (str): value for IDD Field `component_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_25_name`')

        self._data["Component 25 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.supply_air_path_inlet_node_name))
        out.append(self._to_str(self.component_1_object_type))
        out.append(self._to_str(self.component_1_name))
        out.append(self._to_str(self.component_2_object_type))
        out.append(self._to_str(self.component_2_name))
        out.append(self._to_str(self.component_3_object_type))
        out.append(self._to_str(self.component_3_name))
        out.append(self._to_str(self.component_4_object_type))
        out.append(self._to_str(self.component_4_name))
        out.append(self._to_str(self.component_5_object_type))
        out.append(self._to_str(self.component_5_name))
        out.append(self._to_str(self.component_6_object_type))
        out.append(self._to_str(self.component_6_name))
        out.append(self._to_str(self.component_7_object_type))
        out.append(self._to_str(self.component_7_name))
        out.append(self._to_str(self.component_8_object_type))
        out.append(self._to_str(self.component_8_name))
        out.append(self._to_str(self.component_9_object_type))
        out.append(self._to_str(self.component_9_name))
        out.append(self._to_str(self.component_10_object_type))
        out.append(self._to_str(self.component_10_name))
        out.append(self._to_str(self.component_11_object_type))
        out.append(self._to_str(self.component_11_name))
        out.append(self._to_str(self.component_12_object_type))
        out.append(self._to_str(self.component_12_name))
        out.append(self._to_str(self.component_13_object_type))
        out.append(self._to_str(self.component_13_name))
        out.append(self._to_str(self.component_14_object_type))
        out.append(self._to_str(self.component_14_name))
        out.append(self._to_str(self.component_15_object_type))
        out.append(self._to_str(self.component_15_name))
        out.append(self._to_str(self.component_16_object_type))
        out.append(self._to_str(self.component_16_name))
        out.append(self._to_str(self.component_17_object_type))
        out.append(self._to_str(self.component_17_name))
        out.append(self._to_str(self.component_18_object_type))
        out.append(self._to_str(self.component_18_name))
        out.append(self._to_str(self.component_19_object_type))
        out.append(self._to_str(self.component_19_name))
        out.append(self._to_str(self.component_20_object_type))
        out.append(self._to_str(self.component_20_name))
        out.append(self._to_str(self.component_21_object_type))
        out.append(self._to_str(self.component_21_name))
        out.append(self._to_str(self.component_22_object_type))
        out.append(self._to_str(self.component_22_name))
        out.append(self._to_str(self.component_23_object_type))
        out.append(self._to_str(self.component_23_name))
        out.append(self._to_str(self.component_24_object_type))
        out.append(self._to_str(self.component_24_name))
        out.append(self._to_str(self.component_25_object_type))
        out.append(self._to_str(self.component_25_name))
        return ",".join(out)

class AirLoopHvacZoneMixer(object):
    """ Corresponds to IDD object `AirLoopHVAC:ZoneMixer`
        Mix N inlet air streams into one (currently 500 per air loop, but extensible).  Node names cannot
        be duplicated within a single zone mixer (AirLoopHVAC:ZoneMixer) list.
    """
    internal_name = "AirLoopHVAC:ZoneMixer"
    field_count = 142

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:ZoneMixer`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Inlet 1 Node Name"] = None
        self._data["Inlet 2 Node Name"] = None
        self._data["Inlet 3 Node Name"] = None
        self._data["Inlet 4 Node Name"] = None
        self._data["Inlet 5 Node Name"] = None
        self._data["Inlet 6 Node Name"] = None
        self._data["Inlet 7 Node Name"] = None
        self._data["Inlet 8 Node Name"] = None
        self._data["Inlet 9 Node Name"] = None
        self._data["Inlet 10 Node Name"] = None
        self._data["Inlet 11 Node Name"] = None
        self._data["Inlet 12 Node Name"] = None
        self._data["Inlet 13 Node Name"] = None
        self._data["Inlet 14 Node Name"] = None
        self._data["Inlet 15 Node Name"] = None
        self._data["Inlet 16 Node Name"] = None
        self._data["Inlet 17 Node Name"] = None
        self._data["Inlet 18 Node Name"] = None
        self._data["Inlet 19 Node Name"] = None
        self._data["Inlet 20 Node Name"] = None
        self._data["Inlet 21 Node Name"] = None
        self._data["Inlet 22 Node Name"] = None
        self._data["Inlet 23 Node Name"] = None
        self._data["Inlet 24 Node Name"] = None
        self._data["Inlet 25 Node Name"] = None
        self._data["Inlet 26 Node Name"] = None
        self._data["Inlet 27 Node Name"] = None
        self._data["Inlet 28 Node Name"] = None
        self._data["Inlet 29 Node Name"] = None
        self._data["Inlet 30 Node Name"] = None
        self._data["Inlet 31 Node Name"] = None
        self._data["Inlet 32 Node Name"] = None
        self._data["Inlet 33 Node Name"] = None
        self._data["Inlet 34 Node Name"] = None
        self._data["Inlet 35 Node Name"] = None
        self._data["Inlet 36 Node Name"] = None
        self._data["Inlet 37 Node Name"] = None
        self._data["Inlet 38 Node Name"] = None
        self._data["Inlet 39 Node Name"] = None
        self._data["Inlet 40 Node Name"] = None
        self._data["Inlet 41 Node Name"] = None
        self._data["Inlet 42 Node Name"] = None
        self._data["Inlet 43 Node Name"] = None
        self._data["Inlet 44 Node Name"] = None
        self._data["Inlet 45 Node Name"] = None
        self._data["Inlet 46 Node Name"] = None
        self._data["Inlet 47 Node Name"] = None
        self._data["Inlet 48 Node Name"] = None
        self._data["Inlet 49 Node Name"] = None
        self._data["Inlet 50 Node Name"] = None
        self._data["Inlet 51 Node Name"] = None
        self._data["Inlet 52 Node Name"] = None
        self._data["Inlet 53 Node Name"] = None
        self._data["Inlet 54 Node Name"] = None
        self._data["Inlet 55 Node Name"] = None
        self._data["Inlet 56 Node Name"] = None
        self._data["Inlet 57 Node Name"] = None
        self._data["Inlet 58 Node Name"] = None
        self._data["Inlet 59 Node Name"] = None
        self._data["Inlet 60 Node Name"] = None
        self._data["Inlet 61 Node Name"] = None
        self._data["Inlet 62 Node Name"] = None
        self._data["Inlet 63 Node Name"] = None
        self._data["Inlet 64 Node Name"] = None
        self._data["Inlet 65 Node Name"] = None
        self._data["Inlet 66 Node Name"] = None
        self._data["Inlet 67 Node Name"] = None
        self._data["Inlet 68 Node Name"] = None
        self._data["Inlet 69 Node Name"] = None
        self._data["Inlet 70 Node Name"] = None
        self._data["Inlet 71 Node Name"] = None
        self._data["Inlet 72 Node Name"] = None
        self._data["Inlet 73 Node Name"] = None
        self._data["Inlet 74 Node Name"] = None
        self._data["Inlet 75 Node Name"] = None
        self._data["Inlet 76 Node Name"] = None
        self._data["Inlet 77 Node Name"] = None
        self._data["Inlet 78 Node Name"] = None
        self._data["Inlet 79 Node Name"] = None
        self._data["Inlet 80 Node Name"] = None
        self._data["Inlet 81 Node Name"] = None
        self._data["Inlet 82 Node Name"] = None
        self._data["Inlet 83 Node Name"] = None
        self._data["Inlet 84 Node Name"] = None
        self._data["Inlet 85 Node Name"] = None
        self._data["Inlet 86 Node Name"] = None
        self._data["Inlet 87 Node Name"] = None
        self._data["Inlet 88 Node Name"] = None
        self._data["Inlet 89 Node Name"] = None
        self._data["Inlet 90 Node Name"] = None
        self._data["Inlet 91 Node Name"] = None
        self._data["Inlet 92 Node Name"] = None
        self._data["Inlet 93 Node Name"] = None
        self._data["Inlet 94 Node Name"] = None
        self._data["Inlet 95 Node Name"] = None
        self._data["Inlet 96 Node Name"] = None
        self._data["Inlet 97 Node Name"] = None
        self._data["Inlet 98 Node Name"] = None
        self._data["Inlet 99 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_1_node_name = None
        else:
            self.inlet_1_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_2_node_name = None
        else:
            self.inlet_2_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_3_node_name = None
        else:
            self.inlet_3_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_4_node_name = None
        else:
            self.inlet_4_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_5_node_name = None
        else:
            self.inlet_5_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_6_node_name = None
        else:
            self.inlet_6_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_7_node_name = None
        else:
            self.inlet_7_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_8_node_name = None
        else:
            self.inlet_8_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_9_node_name = None
        else:
            self.inlet_9_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_10_node_name = None
        else:
            self.inlet_10_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_11_node_name = None
        else:
            self.inlet_11_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_12_node_name = None
        else:
            self.inlet_12_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_13_node_name = None
        else:
            self.inlet_13_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_14_node_name = None
        else:
            self.inlet_14_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_15_node_name = None
        else:
            self.inlet_15_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_16_node_name = None
        else:
            self.inlet_16_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_17_node_name = None
        else:
            self.inlet_17_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_18_node_name = None
        else:
            self.inlet_18_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_19_node_name = None
        else:
            self.inlet_19_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_20_node_name = None
        else:
            self.inlet_20_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_21_node_name = None
        else:
            self.inlet_21_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_22_node_name = None
        else:
            self.inlet_22_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_23_node_name = None
        else:
            self.inlet_23_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_24_node_name = None
        else:
            self.inlet_24_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_25_node_name = None
        else:
            self.inlet_25_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_26_node_name = None
        else:
            self.inlet_26_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_27_node_name = None
        else:
            self.inlet_27_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_28_node_name = None
        else:
            self.inlet_28_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_29_node_name = None
        else:
            self.inlet_29_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_30_node_name = None
        else:
            self.inlet_30_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_31_node_name = None
        else:
            self.inlet_31_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_32_node_name = None
        else:
            self.inlet_32_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_33_node_name = None
        else:
            self.inlet_33_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_34_node_name = None
        else:
            self.inlet_34_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_35_node_name = None
        else:
            self.inlet_35_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_36_node_name = None
        else:
            self.inlet_36_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_37_node_name = None
        else:
            self.inlet_37_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_38_node_name = None
        else:
            self.inlet_38_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_39_node_name = None
        else:
            self.inlet_39_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_40_node_name = None
        else:
            self.inlet_40_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_41_node_name = None
        else:
            self.inlet_41_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_42_node_name = None
        else:
            self.inlet_42_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_43_node_name = None
        else:
            self.inlet_43_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_44_node_name = None
        else:
            self.inlet_44_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_45_node_name = None
        else:
            self.inlet_45_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_46_node_name = None
        else:
            self.inlet_46_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_47_node_name = None
        else:
            self.inlet_47_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_48_node_name = None
        else:
            self.inlet_48_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_49_node_name = None
        else:
            self.inlet_49_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_50_node_name = None
        else:
            self.inlet_50_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_51_node_name = None
        else:
            self.inlet_51_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_52_node_name = None
        else:
            self.inlet_52_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_53_node_name = None
        else:
            self.inlet_53_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_54_node_name = None
        else:
            self.inlet_54_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_55_node_name = None
        else:
            self.inlet_55_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_56_node_name = None
        else:
            self.inlet_56_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_57_node_name = None
        else:
            self.inlet_57_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_58_node_name = None
        else:
            self.inlet_58_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_59_node_name = None
        else:
            self.inlet_59_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_60_node_name = None
        else:
            self.inlet_60_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_61_node_name = None
        else:
            self.inlet_61_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_62_node_name = None
        else:
            self.inlet_62_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_63_node_name = None
        else:
            self.inlet_63_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_64_node_name = None
        else:
            self.inlet_64_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_65_node_name = None
        else:
            self.inlet_65_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_66_node_name = None
        else:
            self.inlet_66_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_67_node_name = None
        else:
            self.inlet_67_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_68_node_name = None
        else:
            self.inlet_68_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_69_node_name = None
        else:
            self.inlet_69_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_70_node_name = None
        else:
            self.inlet_70_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_71_node_name = None
        else:
            self.inlet_71_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_72_node_name = None
        else:
            self.inlet_72_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_73_node_name = None
        else:
            self.inlet_73_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_74_node_name = None
        else:
            self.inlet_74_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_75_node_name = None
        else:
            self.inlet_75_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_76_node_name = None
        else:
            self.inlet_76_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_77_node_name = None
        else:
            self.inlet_77_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_78_node_name = None
        else:
            self.inlet_78_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_79_node_name = None
        else:
            self.inlet_79_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_80_node_name = None
        else:
            self.inlet_80_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_81_node_name = None
        else:
            self.inlet_81_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_82_node_name = None
        else:
            self.inlet_82_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_83_node_name = None
        else:
            self.inlet_83_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_84_node_name = None
        else:
            self.inlet_84_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_85_node_name = None
        else:
            self.inlet_85_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_86_node_name = None
        else:
            self.inlet_86_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_87_node_name = None
        else:
            self.inlet_87_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_88_node_name = None
        else:
            self.inlet_88_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_89_node_name = None
        else:
            self.inlet_89_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_90_node_name = None
        else:
            self.inlet_90_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_91_node_name = None
        else:
            self.inlet_91_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_92_node_name = None
        else:
            self.inlet_92_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_93_node_name = None
        else:
            self.inlet_93_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_94_node_name = None
        else:
            self.inlet_94_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_95_node_name = None
        else:
            self.inlet_95_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_96_node_name = None
        else:
            self.inlet_96_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_97_node_name = None
        else:
            self.inlet_97_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_98_node_name = None
        else:
            self.inlet_98_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_99_node_name = None
        else:
            self.inlet_99_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def inlet_1_node_name(self):
        """Get inlet_1_node_name

        Returns:
            str: the value of `inlet_1_node_name` or None if not set
        """
        return self._data["Inlet 1 Node Name"]

    @inlet_1_node_name.setter
    def inlet_1_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_1_node_name`

        Args:
            value (str): value for IDD Field `inlet_1_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_1_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_1_node_name`')

        self._data["Inlet 1 Node Name"] = value

    @property
    def inlet_2_node_name(self):
        """Get inlet_2_node_name

        Returns:
            str: the value of `inlet_2_node_name` or None if not set
        """
        return self._data["Inlet 2 Node Name"]

    @inlet_2_node_name.setter
    def inlet_2_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_2_node_name`

        Args:
            value (str): value for IDD Field `inlet_2_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_2_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_2_node_name`')

        self._data["Inlet 2 Node Name"] = value

    @property
    def inlet_3_node_name(self):
        """Get inlet_3_node_name

        Returns:
            str: the value of `inlet_3_node_name` or None if not set
        """
        return self._data["Inlet 3 Node Name"]

    @inlet_3_node_name.setter
    def inlet_3_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_3_node_name`

        Args:
            value (str): value for IDD Field `inlet_3_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_3_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_3_node_name`')

        self._data["Inlet 3 Node Name"] = value

    @property
    def inlet_4_node_name(self):
        """Get inlet_4_node_name

        Returns:
            str: the value of `inlet_4_node_name` or None if not set
        """
        return self._data["Inlet 4 Node Name"]

    @inlet_4_node_name.setter
    def inlet_4_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_4_node_name`

        Args:
            value (str): value for IDD Field `inlet_4_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_4_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_4_node_name`')

        self._data["Inlet 4 Node Name"] = value

    @property
    def inlet_5_node_name(self):
        """Get inlet_5_node_name

        Returns:
            str: the value of `inlet_5_node_name` or None if not set
        """
        return self._data["Inlet 5 Node Name"]

    @inlet_5_node_name.setter
    def inlet_5_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_5_node_name`

        Args:
            value (str): value for IDD Field `inlet_5_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_5_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_5_node_name`')

        self._data["Inlet 5 Node Name"] = value

    @property
    def inlet_6_node_name(self):
        """Get inlet_6_node_name

        Returns:
            str: the value of `inlet_6_node_name` or None if not set
        """
        return self._data["Inlet 6 Node Name"]

    @inlet_6_node_name.setter
    def inlet_6_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_6_node_name`

        Args:
            value (str): value for IDD Field `inlet_6_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_6_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_6_node_name`')

        self._data["Inlet 6 Node Name"] = value

    @property
    def inlet_7_node_name(self):
        """Get inlet_7_node_name

        Returns:
            str: the value of `inlet_7_node_name` or None if not set
        """
        return self._data["Inlet 7 Node Name"]

    @inlet_7_node_name.setter
    def inlet_7_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_7_node_name`

        Args:
            value (str): value for IDD Field `inlet_7_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_7_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_7_node_name`')

        self._data["Inlet 7 Node Name"] = value

    @property
    def inlet_8_node_name(self):
        """Get inlet_8_node_name

        Returns:
            str: the value of `inlet_8_node_name` or None if not set
        """
        return self._data["Inlet 8 Node Name"]

    @inlet_8_node_name.setter
    def inlet_8_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_8_node_name`

        Args:
            value (str): value for IDD Field `inlet_8_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_8_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_8_node_name`')

        self._data["Inlet 8 Node Name"] = value

    @property
    def inlet_9_node_name(self):
        """Get inlet_9_node_name

        Returns:
            str: the value of `inlet_9_node_name` or None if not set
        """
        return self._data["Inlet 9 Node Name"]

    @inlet_9_node_name.setter
    def inlet_9_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_9_node_name`

        Args:
            value (str): value for IDD Field `inlet_9_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_9_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_9_node_name`')

        self._data["Inlet 9 Node Name"] = value

    @property
    def inlet_10_node_name(self):
        """Get inlet_10_node_name

        Returns:
            str: the value of `inlet_10_node_name` or None if not set
        """
        return self._data["Inlet 10 Node Name"]

    @inlet_10_node_name.setter
    def inlet_10_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_10_node_name`

        Args:
            value (str): value for IDD Field `inlet_10_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_10_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_10_node_name`')

        self._data["Inlet 10 Node Name"] = value

    @property
    def inlet_11_node_name(self):
        """Get inlet_11_node_name

        Returns:
            str: the value of `inlet_11_node_name` or None if not set
        """
        return self._data["Inlet 11 Node Name"]

    @inlet_11_node_name.setter
    def inlet_11_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_11_node_name`

        Args:
            value (str): value for IDD Field `inlet_11_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_11_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_11_node_name`')

        self._data["Inlet 11 Node Name"] = value

    @property
    def inlet_12_node_name(self):
        """Get inlet_12_node_name

        Returns:
            str: the value of `inlet_12_node_name` or None if not set
        """
        return self._data["Inlet 12 Node Name"]

    @inlet_12_node_name.setter
    def inlet_12_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_12_node_name`

        Args:
            value (str): value for IDD Field `inlet_12_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_12_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_12_node_name`')

        self._data["Inlet 12 Node Name"] = value

    @property
    def inlet_13_node_name(self):
        """Get inlet_13_node_name

        Returns:
            str: the value of `inlet_13_node_name` or None if not set
        """
        return self._data["Inlet 13 Node Name"]

    @inlet_13_node_name.setter
    def inlet_13_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_13_node_name`

        Args:
            value (str): value for IDD Field `inlet_13_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_13_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_13_node_name`')

        self._data["Inlet 13 Node Name"] = value

    @property
    def inlet_14_node_name(self):
        """Get inlet_14_node_name

        Returns:
            str: the value of `inlet_14_node_name` or None if not set
        """
        return self._data["Inlet 14 Node Name"]

    @inlet_14_node_name.setter
    def inlet_14_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_14_node_name`

        Args:
            value (str): value for IDD Field `inlet_14_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_14_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_14_node_name`')

        self._data["Inlet 14 Node Name"] = value

    @property
    def inlet_15_node_name(self):
        """Get inlet_15_node_name

        Returns:
            str: the value of `inlet_15_node_name` or None if not set
        """
        return self._data["Inlet 15 Node Name"]

    @inlet_15_node_name.setter
    def inlet_15_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_15_node_name`

        Args:
            value (str): value for IDD Field `inlet_15_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_15_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_15_node_name`')

        self._data["Inlet 15 Node Name"] = value

    @property
    def inlet_16_node_name(self):
        """Get inlet_16_node_name

        Returns:
            str: the value of `inlet_16_node_name` or None if not set
        """
        return self._data["Inlet 16 Node Name"]

    @inlet_16_node_name.setter
    def inlet_16_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_16_node_name`

        Args:
            value (str): value for IDD Field `inlet_16_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_16_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_16_node_name`')

        self._data["Inlet 16 Node Name"] = value

    @property
    def inlet_17_node_name(self):
        """Get inlet_17_node_name

        Returns:
            str: the value of `inlet_17_node_name` or None if not set
        """
        return self._data["Inlet 17 Node Name"]

    @inlet_17_node_name.setter
    def inlet_17_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_17_node_name`

        Args:
            value (str): value for IDD Field `inlet_17_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_17_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_17_node_name`')

        self._data["Inlet 17 Node Name"] = value

    @property
    def inlet_18_node_name(self):
        """Get inlet_18_node_name

        Returns:
            str: the value of `inlet_18_node_name` or None if not set
        """
        return self._data["Inlet 18 Node Name"]

    @inlet_18_node_name.setter
    def inlet_18_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_18_node_name`

        Args:
            value (str): value for IDD Field `inlet_18_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_18_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_18_node_name`')

        self._data["Inlet 18 Node Name"] = value

    @property
    def inlet_19_node_name(self):
        """Get inlet_19_node_name

        Returns:
            str: the value of `inlet_19_node_name` or None if not set
        """
        return self._data["Inlet 19 Node Name"]

    @inlet_19_node_name.setter
    def inlet_19_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_19_node_name`

        Args:
            value (str): value for IDD Field `inlet_19_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_19_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_19_node_name`')

        self._data["Inlet 19 Node Name"] = value

    @property
    def inlet_20_node_name(self):
        """Get inlet_20_node_name

        Returns:
            str: the value of `inlet_20_node_name` or None if not set
        """
        return self._data["Inlet 20 Node Name"]

    @inlet_20_node_name.setter
    def inlet_20_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_20_node_name`

        Args:
            value (str): value for IDD Field `inlet_20_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_20_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_20_node_name`')

        self._data["Inlet 20 Node Name"] = value

    @property
    def inlet_21_node_name(self):
        """Get inlet_21_node_name

        Returns:
            str: the value of `inlet_21_node_name` or None if not set
        """
        return self._data["Inlet 21 Node Name"]

    @inlet_21_node_name.setter
    def inlet_21_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_21_node_name`

        Args:
            value (str): value for IDD Field `inlet_21_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_21_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_21_node_name`')

        self._data["Inlet 21 Node Name"] = value

    @property
    def inlet_22_node_name(self):
        """Get inlet_22_node_name

        Returns:
            str: the value of `inlet_22_node_name` or None if not set
        """
        return self._data["Inlet 22 Node Name"]

    @inlet_22_node_name.setter
    def inlet_22_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_22_node_name`

        Args:
            value (str): value for IDD Field `inlet_22_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_22_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_22_node_name`')

        self._data["Inlet 22 Node Name"] = value

    @property
    def inlet_23_node_name(self):
        """Get inlet_23_node_name

        Returns:
            str: the value of `inlet_23_node_name` or None if not set
        """
        return self._data["Inlet 23 Node Name"]

    @inlet_23_node_name.setter
    def inlet_23_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_23_node_name`

        Args:
            value (str): value for IDD Field `inlet_23_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_23_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_23_node_name`')

        self._data["Inlet 23 Node Name"] = value

    @property
    def inlet_24_node_name(self):
        """Get inlet_24_node_name

        Returns:
            str: the value of `inlet_24_node_name` or None if not set
        """
        return self._data["Inlet 24 Node Name"]

    @inlet_24_node_name.setter
    def inlet_24_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_24_node_name`

        Args:
            value (str): value for IDD Field `inlet_24_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_24_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_24_node_name`')

        self._data["Inlet 24 Node Name"] = value

    @property
    def inlet_25_node_name(self):
        """Get inlet_25_node_name

        Returns:
            str: the value of `inlet_25_node_name` or None if not set
        """
        return self._data["Inlet 25 Node Name"]

    @inlet_25_node_name.setter
    def inlet_25_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_25_node_name`

        Args:
            value (str): value for IDD Field `inlet_25_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_25_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_25_node_name`')

        self._data["Inlet 25 Node Name"] = value

    @property
    def inlet_26_node_name(self):
        """Get inlet_26_node_name

        Returns:
            str: the value of `inlet_26_node_name` or None if not set
        """
        return self._data["Inlet 26 Node Name"]

    @inlet_26_node_name.setter
    def inlet_26_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_26_node_name`

        Args:
            value (str): value for IDD Field `inlet_26_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_26_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_26_node_name`')

        self._data["Inlet 26 Node Name"] = value

    @property
    def inlet_27_node_name(self):
        """Get inlet_27_node_name

        Returns:
            str: the value of `inlet_27_node_name` or None if not set
        """
        return self._data["Inlet 27 Node Name"]

    @inlet_27_node_name.setter
    def inlet_27_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_27_node_name`

        Args:
            value (str): value for IDD Field `inlet_27_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_27_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_27_node_name`')

        self._data["Inlet 27 Node Name"] = value

    @property
    def inlet_28_node_name(self):
        """Get inlet_28_node_name

        Returns:
            str: the value of `inlet_28_node_name` or None if not set
        """
        return self._data["Inlet 28 Node Name"]

    @inlet_28_node_name.setter
    def inlet_28_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_28_node_name`

        Args:
            value (str): value for IDD Field `inlet_28_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_28_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_28_node_name`')

        self._data["Inlet 28 Node Name"] = value

    @property
    def inlet_29_node_name(self):
        """Get inlet_29_node_name

        Returns:
            str: the value of `inlet_29_node_name` or None if not set
        """
        return self._data["Inlet 29 Node Name"]

    @inlet_29_node_name.setter
    def inlet_29_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_29_node_name`

        Args:
            value (str): value for IDD Field `inlet_29_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_29_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_29_node_name`')

        self._data["Inlet 29 Node Name"] = value

    @property
    def inlet_30_node_name(self):
        """Get inlet_30_node_name

        Returns:
            str: the value of `inlet_30_node_name` or None if not set
        """
        return self._data["Inlet 30 Node Name"]

    @inlet_30_node_name.setter
    def inlet_30_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_30_node_name`

        Args:
            value (str): value for IDD Field `inlet_30_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_30_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_30_node_name`')

        self._data["Inlet 30 Node Name"] = value

    @property
    def inlet_31_node_name(self):
        """Get inlet_31_node_name

        Returns:
            str: the value of `inlet_31_node_name` or None if not set
        """
        return self._data["Inlet 31 Node Name"]

    @inlet_31_node_name.setter
    def inlet_31_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_31_node_name`

        Args:
            value (str): value for IDD Field `inlet_31_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_31_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_31_node_name`')

        self._data["Inlet 31 Node Name"] = value

    @property
    def inlet_32_node_name(self):
        """Get inlet_32_node_name

        Returns:
            str: the value of `inlet_32_node_name` or None if not set
        """
        return self._data["Inlet 32 Node Name"]

    @inlet_32_node_name.setter
    def inlet_32_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_32_node_name`

        Args:
            value (str): value for IDD Field `inlet_32_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_32_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_32_node_name`')

        self._data["Inlet 32 Node Name"] = value

    @property
    def inlet_33_node_name(self):
        """Get inlet_33_node_name

        Returns:
            str: the value of `inlet_33_node_name` or None if not set
        """
        return self._data["Inlet 33 Node Name"]

    @inlet_33_node_name.setter
    def inlet_33_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_33_node_name`

        Args:
            value (str): value for IDD Field `inlet_33_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_33_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_33_node_name`')

        self._data["Inlet 33 Node Name"] = value

    @property
    def inlet_34_node_name(self):
        """Get inlet_34_node_name

        Returns:
            str: the value of `inlet_34_node_name` or None if not set
        """
        return self._data["Inlet 34 Node Name"]

    @inlet_34_node_name.setter
    def inlet_34_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_34_node_name`

        Args:
            value (str): value for IDD Field `inlet_34_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_34_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_34_node_name`')

        self._data["Inlet 34 Node Name"] = value

    @property
    def inlet_35_node_name(self):
        """Get inlet_35_node_name

        Returns:
            str: the value of `inlet_35_node_name` or None if not set
        """
        return self._data["Inlet 35 Node Name"]

    @inlet_35_node_name.setter
    def inlet_35_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_35_node_name`

        Args:
            value (str): value for IDD Field `inlet_35_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_35_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_35_node_name`')

        self._data["Inlet 35 Node Name"] = value

    @property
    def inlet_36_node_name(self):
        """Get inlet_36_node_name

        Returns:
            str: the value of `inlet_36_node_name` or None if not set
        """
        return self._data["Inlet 36 Node Name"]

    @inlet_36_node_name.setter
    def inlet_36_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_36_node_name`

        Args:
            value (str): value for IDD Field `inlet_36_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_36_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_36_node_name`')

        self._data["Inlet 36 Node Name"] = value

    @property
    def inlet_37_node_name(self):
        """Get inlet_37_node_name

        Returns:
            str: the value of `inlet_37_node_name` or None if not set
        """
        return self._data["Inlet 37 Node Name"]

    @inlet_37_node_name.setter
    def inlet_37_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_37_node_name`

        Args:
            value (str): value for IDD Field `inlet_37_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_37_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_37_node_name`')

        self._data["Inlet 37 Node Name"] = value

    @property
    def inlet_38_node_name(self):
        """Get inlet_38_node_name

        Returns:
            str: the value of `inlet_38_node_name` or None if not set
        """
        return self._data["Inlet 38 Node Name"]

    @inlet_38_node_name.setter
    def inlet_38_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_38_node_name`

        Args:
            value (str): value for IDD Field `inlet_38_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_38_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_38_node_name`')

        self._data["Inlet 38 Node Name"] = value

    @property
    def inlet_39_node_name(self):
        """Get inlet_39_node_name

        Returns:
            str: the value of `inlet_39_node_name` or None if not set
        """
        return self._data["Inlet 39 Node Name"]

    @inlet_39_node_name.setter
    def inlet_39_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_39_node_name`

        Args:
            value (str): value for IDD Field `inlet_39_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_39_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_39_node_name`')

        self._data["Inlet 39 Node Name"] = value

    @property
    def inlet_40_node_name(self):
        """Get inlet_40_node_name

        Returns:
            str: the value of `inlet_40_node_name` or None if not set
        """
        return self._data["Inlet 40 Node Name"]

    @inlet_40_node_name.setter
    def inlet_40_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_40_node_name`

        Args:
            value (str): value for IDD Field `inlet_40_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_40_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_40_node_name`')

        self._data["Inlet 40 Node Name"] = value

    @property
    def inlet_41_node_name(self):
        """Get inlet_41_node_name

        Returns:
            str: the value of `inlet_41_node_name` or None if not set
        """
        return self._data["Inlet 41 Node Name"]

    @inlet_41_node_name.setter
    def inlet_41_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_41_node_name`

        Args:
            value (str): value for IDD Field `inlet_41_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_41_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_41_node_name`')

        self._data["Inlet 41 Node Name"] = value

    @property
    def inlet_42_node_name(self):
        """Get inlet_42_node_name

        Returns:
            str: the value of `inlet_42_node_name` or None if not set
        """
        return self._data["Inlet 42 Node Name"]

    @inlet_42_node_name.setter
    def inlet_42_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_42_node_name`

        Args:
            value (str): value for IDD Field `inlet_42_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_42_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_42_node_name`')

        self._data["Inlet 42 Node Name"] = value

    @property
    def inlet_43_node_name(self):
        """Get inlet_43_node_name

        Returns:
            str: the value of `inlet_43_node_name` or None if not set
        """
        return self._data["Inlet 43 Node Name"]

    @inlet_43_node_name.setter
    def inlet_43_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_43_node_name`

        Args:
            value (str): value for IDD Field `inlet_43_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_43_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_43_node_name`')

        self._data["Inlet 43 Node Name"] = value

    @property
    def inlet_44_node_name(self):
        """Get inlet_44_node_name

        Returns:
            str: the value of `inlet_44_node_name` or None if not set
        """
        return self._data["Inlet 44 Node Name"]

    @inlet_44_node_name.setter
    def inlet_44_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_44_node_name`

        Args:
            value (str): value for IDD Field `inlet_44_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_44_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_44_node_name`')

        self._data["Inlet 44 Node Name"] = value

    @property
    def inlet_45_node_name(self):
        """Get inlet_45_node_name

        Returns:
            str: the value of `inlet_45_node_name` or None if not set
        """
        return self._data["Inlet 45 Node Name"]

    @inlet_45_node_name.setter
    def inlet_45_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_45_node_name`

        Args:
            value (str): value for IDD Field `inlet_45_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_45_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_45_node_name`')

        self._data["Inlet 45 Node Name"] = value

    @property
    def inlet_46_node_name(self):
        """Get inlet_46_node_name

        Returns:
            str: the value of `inlet_46_node_name` or None if not set
        """
        return self._data["Inlet 46 Node Name"]

    @inlet_46_node_name.setter
    def inlet_46_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_46_node_name`

        Args:
            value (str): value for IDD Field `inlet_46_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_46_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_46_node_name`')

        self._data["Inlet 46 Node Name"] = value

    @property
    def inlet_47_node_name(self):
        """Get inlet_47_node_name

        Returns:
            str: the value of `inlet_47_node_name` or None if not set
        """
        return self._data["Inlet 47 Node Name"]

    @inlet_47_node_name.setter
    def inlet_47_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_47_node_name`

        Args:
            value (str): value for IDD Field `inlet_47_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_47_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_47_node_name`')

        self._data["Inlet 47 Node Name"] = value

    @property
    def inlet_48_node_name(self):
        """Get inlet_48_node_name

        Returns:
            str: the value of `inlet_48_node_name` or None if not set
        """
        return self._data["Inlet 48 Node Name"]

    @inlet_48_node_name.setter
    def inlet_48_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_48_node_name`

        Args:
            value (str): value for IDD Field `inlet_48_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_48_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_48_node_name`')

        self._data["Inlet 48 Node Name"] = value

    @property
    def inlet_49_node_name(self):
        """Get inlet_49_node_name

        Returns:
            str: the value of `inlet_49_node_name` or None if not set
        """
        return self._data["Inlet 49 Node Name"]

    @inlet_49_node_name.setter
    def inlet_49_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_49_node_name`

        Args:
            value (str): value for IDD Field `inlet_49_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_49_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_49_node_name`')

        self._data["Inlet 49 Node Name"] = value

    @property
    def inlet_50_node_name(self):
        """Get inlet_50_node_name

        Returns:
            str: the value of `inlet_50_node_name` or None if not set
        """
        return self._data["Inlet 50 Node Name"]

    @inlet_50_node_name.setter
    def inlet_50_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_50_node_name`

        Args:
            value (str): value for IDD Field `inlet_50_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_50_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_50_node_name`')

        self._data["Inlet 50 Node Name"] = value

    @property
    def inlet_51_node_name(self):
        """Get inlet_51_node_name

        Returns:
            str: the value of `inlet_51_node_name` or None if not set
        """
        return self._data["Inlet 51 Node Name"]

    @inlet_51_node_name.setter
    def inlet_51_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_51_node_name`

        Args:
            value (str): value for IDD Field `inlet_51_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_51_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_51_node_name`')

        self._data["Inlet 51 Node Name"] = value

    @property
    def inlet_52_node_name(self):
        """Get inlet_52_node_name

        Returns:
            str: the value of `inlet_52_node_name` or None if not set
        """
        return self._data["Inlet 52 Node Name"]

    @inlet_52_node_name.setter
    def inlet_52_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_52_node_name`

        Args:
            value (str): value for IDD Field `inlet_52_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_52_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_52_node_name`')

        self._data["Inlet 52 Node Name"] = value

    @property
    def inlet_53_node_name(self):
        """Get inlet_53_node_name

        Returns:
            str: the value of `inlet_53_node_name` or None if not set
        """
        return self._data["Inlet 53 Node Name"]

    @inlet_53_node_name.setter
    def inlet_53_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_53_node_name`

        Args:
            value (str): value for IDD Field `inlet_53_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_53_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_53_node_name`')

        self._data["Inlet 53 Node Name"] = value

    @property
    def inlet_54_node_name(self):
        """Get inlet_54_node_name

        Returns:
            str: the value of `inlet_54_node_name` or None if not set
        """
        return self._data["Inlet 54 Node Name"]

    @inlet_54_node_name.setter
    def inlet_54_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_54_node_name`

        Args:
            value (str): value for IDD Field `inlet_54_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_54_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_54_node_name`')

        self._data["Inlet 54 Node Name"] = value

    @property
    def inlet_55_node_name(self):
        """Get inlet_55_node_name

        Returns:
            str: the value of `inlet_55_node_name` or None if not set
        """
        return self._data["Inlet 55 Node Name"]

    @inlet_55_node_name.setter
    def inlet_55_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_55_node_name`

        Args:
            value (str): value for IDD Field `inlet_55_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_55_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_55_node_name`')

        self._data["Inlet 55 Node Name"] = value

    @property
    def inlet_56_node_name(self):
        """Get inlet_56_node_name

        Returns:
            str: the value of `inlet_56_node_name` or None if not set
        """
        return self._data["Inlet 56 Node Name"]

    @inlet_56_node_name.setter
    def inlet_56_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_56_node_name`

        Args:
            value (str): value for IDD Field `inlet_56_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_56_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_56_node_name`')

        self._data["Inlet 56 Node Name"] = value

    @property
    def inlet_57_node_name(self):
        """Get inlet_57_node_name

        Returns:
            str: the value of `inlet_57_node_name` or None if not set
        """
        return self._data["Inlet 57 Node Name"]

    @inlet_57_node_name.setter
    def inlet_57_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_57_node_name`

        Args:
            value (str): value for IDD Field `inlet_57_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_57_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_57_node_name`')

        self._data["Inlet 57 Node Name"] = value

    @property
    def inlet_58_node_name(self):
        """Get inlet_58_node_name

        Returns:
            str: the value of `inlet_58_node_name` or None if not set
        """
        return self._data["Inlet 58 Node Name"]

    @inlet_58_node_name.setter
    def inlet_58_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_58_node_name`

        Args:
            value (str): value for IDD Field `inlet_58_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_58_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_58_node_name`')

        self._data["Inlet 58 Node Name"] = value

    @property
    def inlet_59_node_name(self):
        """Get inlet_59_node_name

        Returns:
            str: the value of `inlet_59_node_name` or None if not set
        """
        return self._data["Inlet 59 Node Name"]

    @inlet_59_node_name.setter
    def inlet_59_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_59_node_name`

        Args:
            value (str): value for IDD Field `inlet_59_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_59_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_59_node_name`')

        self._data["Inlet 59 Node Name"] = value

    @property
    def inlet_60_node_name(self):
        """Get inlet_60_node_name

        Returns:
            str: the value of `inlet_60_node_name` or None if not set
        """
        return self._data["Inlet 60 Node Name"]

    @inlet_60_node_name.setter
    def inlet_60_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_60_node_name`

        Args:
            value (str): value for IDD Field `inlet_60_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_60_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_60_node_name`')

        self._data["Inlet 60 Node Name"] = value

    @property
    def inlet_61_node_name(self):
        """Get inlet_61_node_name

        Returns:
            str: the value of `inlet_61_node_name` or None if not set
        """
        return self._data["Inlet 61 Node Name"]

    @inlet_61_node_name.setter
    def inlet_61_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_61_node_name`

        Args:
            value (str): value for IDD Field `inlet_61_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_61_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_61_node_name`')

        self._data["Inlet 61 Node Name"] = value

    @property
    def inlet_62_node_name(self):
        """Get inlet_62_node_name

        Returns:
            str: the value of `inlet_62_node_name` or None if not set
        """
        return self._data["Inlet 62 Node Name"]

    @inlet_62_node_name.setter
    def inlet_62_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_62_node_name`

        Args:
            value (str): value for IDD Field `inlet_62_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_62_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_62_node_name`')

        self._data["Inlet 62 Node Name"] = value

    @property
    def inlet_63_node_name(self):
        """Get inlet_63_node_name

        Returns:
            str: the value of `inlet_63_node_name` or None if not set
        """
        return self._data["Inlet 63 Node Name"]

    @inlet_63_node_name.setter
    def inlet_63_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_63_node_name`

        Args:
            value (str): value for IDD Field `inlet_63_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_63_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_63_node_name`')

        self._data["Inlet 63 Node Name"] = value

    @property
    def inlet_64_node_name(self):
        """Get inlet_64_node_name

        Returns:
            str: the value of `inlet_64_node_name` or None if not set
        """
        return self._data["Inlet 64 Node Name"]

    @inlet_64_node_name.setter
    def inlet_64_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_64_node_name`

        Args:
            value (str): value for IDD Field `inlet_64_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_64_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_64_node_name`')

        self._data["Inlet 64 Node Name"] = value

    @property
    def inlet_65_node_name(self):
        """Get inlet_65_node_name

        Returns:
            str: the value of `inlet_65_node_name` or None if not set
        """
        return self._data["Inlet 65 Node Name"]

    @inlet_65_node_name.setter
    def inlet_65_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_65_node_name`

        Args:
            value (str): value for IDD Field `inlet_65_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_65_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_65_node_name`')

        self._data["Inlet 65 Node Name"] = value

    @property
    def inlet_66_node_name(self):
        """Get inlet_66_node_name

        Returns:
            str: the value of `inlet_66_node_name` or None if not set
        """
        return self._data["Inlet 66 Node Name"]

    @inlet_66_node_name.setter
    def inlet_66_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_66_node_name`

        Args:
            value (str): value for IDD Field `inlet_66_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_66_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_66_node_name`')

        self._data["Inlet 66 Node Name"] = value

    @property
    def inlet_67_node_name(self):
        """Get inlet_67_node_name

        Returns:
            str: the value of `inlet_67_node_name` or None if not set
        """
        return self._data["Inlet 67 Node Name"]

    @inlet_67_node_name.setter
    def inlet_67_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_67_node_name`

        Args:
            value (str): value for IDD Field `inlet_67_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_67_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_67_node_name`')

        self._data["Inlet 67 Node Name"] = value

    @property
    def inlet_68_node_name(self):
        """Get inlet_68_node_name

        Returns:
            str: the value of `inlet_68_node_name` or None if not set
        """
        return self._data["Inlet 68 Node Name"]

    @inlet_68_node_name.setter
    def inlet_68_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_68_node_name`

        Args:
            value (str): value for IDD Field `inlet_68_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_68_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_68_node_name`')

        self._data["Inlet 68 Node Name"] = value

    @property
    def inlet_69_node_name(self):
        """Get inlet_69_node_name

        Returns:
            str: the value of `inlet_69_node_name` or None if not set
        """
        return self._data["Inlet 69 Node Name"]

    @inlet_69_node_name.setter
    def inlet_69_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_69_node_name`

        Args:
            value (str): value for IDD Field `inlet_69_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_69_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_69_node_name`')

        self._data["Inlet 69 Node Name"] = value

    @property
    def inlet_70_node_name(self):
        """Get inlet_70_node_name

        Returns:
            str: the value of `inlet_70_node_name` or None if not set
        """
        return self._data["Inlet 70 Node Name"]

    @inlet_70_node_name.setter
    def inlet_70_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_70_node_name`

        Args:
            value (str): value for IDD Field `inlet_70_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_70_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_70_node_name`')

        self._data["Inlet 70 Node Name"] = value

    @property
    def inlet_71_node_name(self):
        """Get inlet_71_node_name

        Returns:
            str: the value of `inlet_71_node_name` or None if not set
        """
        return self._data["Inlet 71 Node Name"]

    @inlet_71_node_name.setter
    def inlet_71_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_71_node_name`

        Args:
            value (str): value for IDD Field `inlet_71_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_71_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_71_node_name`')

        self._data["Inlet 71 Node Name"] = value

    @property
    def inlet_72_node_name(self):
        """Get inlet_72_node_name

        Returns:
            str: the value of `inlet_72_node_name` or None if not set
        """
        return self._data["Inlet 72 Node Name"]

    @inlet_72_node_name.setter
    def inlet_72_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_72_node_name`

        Args:
            value (str): value for IDD Field `inlet_72_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_72_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_72_node_name`')

        self._data["Inlet 72 Node Name"] = value

    @property
    def inlet_73_node_name(self):
        """Get inlet_73_node_name

        Returns:
            str: the value of `inlet_73_node_name` or None if not set
        """
        return self._data["Inlet 73 Node Name"]

    @inlet_73_node_name.setter
    def inlet_73_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_73_node_name`

        Args:
            value (str): value for IDD Field `inlet_73_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_73_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_73_node_name`')

        self._data["Inlet 73 Node Name"] = value

    @property
    def inlet_74_node_name(self):
        """Get inlet_74_node_name

        Returns:
            str: the value of `inlet_74_node_name` or None if not set
        """
        return self._data["Inlet 74 Node Name"]

    @inlet_74_node_name.setter
    def inlet_74_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_74_node_name`

        Args:
            value (str): value for IDD Field `inlet_74_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_74_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_74_node_name`')

        self._data["Inlet 74 Node Name"] = value

    @property
    def inlet_75_node_name(self):
        """Get inlet_75_node_name

        Returns:
            str: the value of `inlet_75_node_name` or None if not set
        """
        return self._data["Inlet 75 Node Name"]

    @inlet_75_node_name.setter
    def inlet_75_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_75_node_name`

        Args:
            value (str): value for IDD Field `inlet_75_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_75_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_75_node_name`')

        self._data["Inlet 75 Node Name"] = value

    @property
    def inlet_76_node_name(self):
        """Get inlet_76_node_name

        Returns:
            str: the value of `inlet_76_node_name` or None if not set
        """
        return self._data["Inlet 76 Node Name"]

    @inlet_76_node_name.setter
    def inlet_76_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_76_node_name`

        Args:
            value (str): value for IDD Field `inlet_76_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_76_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_76_node_name`')

        self._data["Inlet 76 Node Name"] = value

    @property
    def inlet_77_node_name(self):
        """Get inlet_77_node_name

        Returns:
            str: the value of `inlet_77_node_name` or None if not set
        """
        return self._data["Inlet 77 Node Name"]

    @inlet_77_node_name.setter
    def inlet_77_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_77_node_name`

        Args:
            value (str): value for IDD Field `inlet_77_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_77_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_77_node_name`')

        self._data["Inlet 77 Node Name"] = value

    @property
    def inlet_78_node_name(self):
        """Get inlet_78_node_name

        Returns:
            str: the value of `inlet_78_node_name` or None if not set
        """
        return self._data["Inlet 78 Node Name"]

    @inlet_78_node_name.setter
    def inlet_78_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_78_node_name`

        Args:
            value (str): value for IDD Field `inlet_78_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_78_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_78_node_name`')

        self._data["Inlet 78 Node Name"] = value

    @property
    def inlet_79_node_name(self):
        """Get inlet_79_node_name

        Returns:
            str: the value of `inlet_79_node_name` or None if not set
        """
        return self._data["Inlet 79 Node Name"]

    @inlet_79_node_name.setter
    def inlet_79_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_79_node_name`

        Args:
            value (str): value for IDD Field `inlet_79_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_79_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_79_node_name`')

        self._data["Inlet 79 Node Name"] = value

    @property
    def inlet_80_node_name(self):
        """Get inlet_80_node_name

        Returns:
            str: the value of `inlet_80_node_name` or None if not set
        """
        return self._data["Inlet 80 Node Name"]

    @inlet_80_node_name.setter
    def inlet_80_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_80_node_name`

        Args:
            value (str): value for IDD Field `inlet_80_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_80_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_80_node_name`')

        self._data["Inlet 80 Node Name"] = value

    @property
    def inlet_81_node_name(self):
        """Get inlet_81_node_name

        Returns:
            str: the value of `inlet_81_node_name` or None if not set
        """
        return self._data["Inlet 81 Node Name"]

    @inlet_81_node_name.setter
    def inlet_81_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_81_node_name`

        Args:
            value (str): value for IDD Field `inlet_81_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_81_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_81_node_name`')

        self._data["Inlet 81 Node Name"] = value

    @property
    def inlet_82_node_name(self):
        """Get inlet_82_node_name

        Returns:
            str: the value of `inlet_82_node_name` or None if not set
        """
        return self._data["Inlet 82 Node Name"]

    @inlet_82_node_name.setter
    def inlet_82_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_82_node_name`

        Args:
            value (str): value for IDD Field `inlet_82_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_82_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_82_node_name`')

        self._data["Inlet 82 Node Name"] = value

    @property
    def inlet_83_node_name(self):
        """Get inlet_83_node_name

        Returns:
            str: the value of `inlet_83_node_name` or None if not set
        """
        return self._data["Inlet 83 Node Name"]

    @inlet_83_node_name.setter
    def inlet_83_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_83_node_name`

        Args:
            value (str): value for IDD Field `inlet_83_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_83_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_83_node_name`')

        self._data["Inlet 83 Node Name"] = value

    @property
    def inlet_84_node_name(self):
        """Get inlet_84_node_name

        Returns:
            str: the value of `inlet_84_node_name` or None if not set
        """
        return self._data["Inlet 84 Node Name"]

    @inlet_84_node_name.setter
    def inlet_84_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_84_node_name`

        Args:
            value (str): value for IDD Field `inlet_84_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_84_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_84_node_name`')

        self._data["Inlet 84 Node Name"] = value

    @property
    def inlet_85_node_name(self):
        """Get inlet_85_node_name

        Returns:
            str: the value of `inlet_85_node_name` or None if not set
        """
        return self._data["Inlet 85 Node Name"]

    @inlet_85_node_name.setter
    def inlet_85_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_85_node_name`

        Args:
            value (str): value for IDD Field `inlet_85_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_85_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_85_node_name`')

        self._data["Inlet 85 Node Name"] = value

    @property
    def inlet_86_node_name(self):
        """Get inlet_86_node_name

        Returns:
            str: the value of `inlet_86_node_name` or None if not set
        """
        return self._data["Inlet 86 Node Name"]

    @inlet_86_node_name.setter
    def inlet_86_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_86_node_name`

        Args:
            value (str): value for IDD Field `inlet_86_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_86_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_86_node_name`')

        self._data["Inlet 86 Node Name"] = value

    @property
    def inlet_87_node_name(self):
        """Get inlet_87_node_name

        Returns:
            str: the value of `inlet_87_node_name` or None if not set
        """
        return self._data["Inlet 87 Node Name"]

    @inlet_87_node_name.setter
    def inlet_87_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_87_node_name`

        Args:
            value (str): value for IDD Field `inlet_87_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_87_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_87_node_name`')

        self._data["Inlet 87 Node Name"] = value

    @property
    def inlet_88_node_name(self):
        """Get inlet_88_node_name

        Returns:
            str: the value of `inlet_88_node_name` or None if not set
        """
        return self._data["Inlet 88 Node Name"]

    @inlet_88_node_name.setter
    def inlet_88_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_88_node_name`

        Args:
            value (str): value for IDD Field `inlet_88_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_88_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_88_node_name`')

        self._data["Inlet 88 Node Name"] = value

    @property
    def inlet_89_node_name(self):
        """Get inlet_89_node_name

        Returns:
            str: the value of `inlet_89_node_name` or None if not set
        """
        return self._data["Inlet 89 Node Name"]

    @inlet_89_node_name.setter
    def inlet_89_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_89_node_name`

        Args:
            value (str): value for IDD Field `inlet_89_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_89_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_89_node_name`')

        self._data["Inlet 89 Node Name"] = value

    @property
    def inlet_90_node_name(self):
        """Get inlet_90_node_name

        Returns:
            str: the value of `inlet_90_node_name` or None if not set
        """
        return self._data["Inlet 90 Node Name"]

    @inlet_90_node_name.setter
    def inlet_90_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_90_node_name`

        Args:
            value (str): value for IDD Field `inlet_90_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_90_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_90_node_name`')

        self._data["Inlet 90 Node Name"] = value

    @property
    def inlet_91_node_name(self):
        """Get inlet_91_node_name

        Returns:
            str: the value of `inlet_91_node_name` or None if not set
        """
        return self._data["Inlet 91 Node Name"]

    @inlet_91_node_name.setter
    def inlet_91_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_91_node_name`

        Args:
            value (str): value for IDD Field `inlet_91_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_91_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_91_node_name`')

        self._data["Inlet 91 Node Name"] = value

    @property
    def inlet_92_node_name(self):
        """Get inlet_92_node_name

        Returns:
            str: the value of `inlet_92_node_name` or None if not set
        """
        return self._data["Inlet 92 Node Name"]

    @inlet_92_node_name.setter
    def inlet_92_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_92_node_name`

        Args:
            value (str): value for IDD Field `inlet_92_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_92_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_92_node_name`')

        self._data["Inlet 92 Node Name"] = value

    @property
    def inlet_93_node_name(self):
        """Get inlet_93_node_name

        Returns:
            str: the value of `inlet_93_node_name` or None if not set
        """
        return self._data["Inlet 93 Node Name"]

    @inlet_93_node_name.setter
    def inlet_93_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_93_node_name`

        Args:
            value (str): value for IDD Field `inlet_93_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_93_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_93_node_name`')

        self._data["Inlet 93 Node Name"] = value

    @property
    def inlet_94_node_name(self):
        """Get inlet_94_node_name

        Returns:
            str: the value of `inlet_94_node_name` or None if not set
        """
        return self._data["Inlet 94 Node Name"]

    @inlet_94_node_name.setter
    def inlet_94_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_94_node_name`

        Args:
            value (str): value for IDD Field `inlet_94_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_94_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_94_node_name`')

        self._data["Inlet 94 Node Name"] = value

    @property
    def inlet_95_node_name(self):
        """Get inlet_95_node_name

        Returns:
            str: the value of `inlet_95_node_name` or None if not set
        """
        return self._data["Inlet 95 Node Name"]

    @inlet_95_node_name.setter
    def inlet_95_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_95_node_name`

        Args:
            value (str): value for IDD Field `inlet_95_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_95_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_95_node_name`')

        self._data["Inlet 95 Node Name"] = value

    @property
    def inlet_96_node_name(self):
        """Get inlet_96_node_name

        Returns:
            str: the value of `inlet_96_node_name` or None if not set
        """
        return self._data["Inlet 96 Node Name"]

    @inlet_96_node_name.setter
    def inlet_96_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_96_node_name`

        Args:
            value (str): value for IDD Field `inlet_96_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_96_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_96_node_name`')

        self._data["Inlet 96 Node Name"] = value

    @property
    def inlet_97_node_name(self):
        """Get inlet_97_node_name

        Returns:
            str: the value of `inlet_97_node_name` or None if not set
        """
        return self._data["Inlet 97 Node Name"]

    @inlet_97_node_name.setter
    def inlet_97_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_97_node_name`

        Args:
            value (str): value for IDD Field `inlet_97_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_97_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_97_node_name`')

        self._data["Inlet 97 Node Name"] = value

    @property
    def inlet_98_node_name(self):
        """Get inlet_98_node_name

        Returns:
            str: the value of `inlet_98_node_name` or None if not set
        """
        return self._data["Inlet 98 Node Name"]

    @inlet_98_node_name.setter
    def inlet_98_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_98_node_name`

        Args:
            value (str): value for IDD Field `inlet_98_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_98_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_98_node_name`')

        self._data["Inlet 98 Node Name"] = value

    @property
    def inlet_99_node_name(self):
        """Get inlet_99_node_name

        Returns:
            str: the value of `inlet_99_node_name` or None if not set
        """
        return self._data["Inlet 99 Node Name"]

    @inlet_99_node_name.setter
    def inlet_99_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_99_node_name`

        Args:
            value (str): value for IDD Field `inlet_99_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_99_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_99_node_name`')

        self._data["Inlet 99 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.inlet_1_node_name))
        out.append(self._to_str(self.inlet_2_node_name))
        out.append(self._to_str(self.inlet_3_node_name))
        out.append(self._to_str(self.inlet_4_node_name))
        out.append(self._to_str(self.inlet_5_node_name))
        out.append(self._to_str(self.inlet_6_node_name))
        out.append(self._to_str(self.inlet_7_node_name))
        out.append(self._to_str(self.inlet_8_node_name))
        out.append(self._to_str(self.inlet_9_node_name))
        out.append(self._to_str(self.inlet_10_node_name))
        out.append(self._to_str(self.inlet_11_node_name))
        out.append(self._to_str(self.inlet_12_node_name))
        out.append(self._to_str(self.inlet_13_node_name))
        out.append(self._to_str(self.inlet_14_node_name))
        out.append(self._to_str(self.inlet_15_node_name))
        out.append(self._to_str(self.inlet_16_node_name))
        out.append(self._to_str(self.inlet_17_node_name))
        out.append(self._to_str(self.inlet_18_node_name))
        out.append(self._to_str(self.inlet_19_node_name))
        out.append(self._to_str(self.inlet_20_node_name))
        out.append(self._to_str(self.inlet_21_node_name))
        out.append(self._to_str(self.inlet_22_node_name))
        out.append(self._to_str(self.inlet_23_node_name))
        out.append(self._to_str(self.inlet_24_node_name))
        out.append(self._to_str(self.inlet_25_node_name))
        out.append(self._to_str(self.inlet_26_node_name))
        out.append(self._to_str(self.inlet_27_node_name))
        out.append(self._to_str(self.inlet_28_node_name))
        out.append(self._to_str(self.inlet_29_node_name))
        out.append(self._to_str(self.inlet_30_node_name))
        out.append(self._to_str(self.inlet_31_node_name))
        out.append(self._to_str(self.inlet_32_node_name))
        out.append(self._to_str(self.inlet_33_node_name))
        out.append(self._to_str(self.inlet_34_node_name))
        out.append(self._to_str(self.inlet_35_node_name))
        out.append(self._to_str(self.inlet_36_node_name))
        out.append(self._to_str(self.inlet_37_node_name))
        out.append(self._to_str(self.inlet_38_node_name))
        out.append(self._to_str(self.inlet_39_node_name))
        out.append(self._to_str(self.inlet_40_node_name))
        out.append(self._to_str(self.inlet_41_node_name))
        out.append(self._to_str(self.inlet_42_node_name))
        out.append(self._to_str(self.inlet_43_node_name))
        out.append(self._to_str(self.inlet_44_node_name))
        out.append(self._to_str(self.inlet_45_node_name))
        out.append(self._to_str(self.inlet_46_node_name))
        out.append(self._to_str(self.inlet_47_node_name))
        out.append(self._to_str(self.inlet_48_node_name))
        out.append(self._to_str(self.inlet_49_node_name))
        out.append(self._to_str(self.inlet_50_node_name))
        out.append(self._to_str(self.inlet_51_node_name))
        out.append(self._to_str(self.inlet_52_node_name))
        out.append(self._to_str(self.inlet_53_node_name))
        out.append(self._to_str(self.inlet_54_node_name))
        out.append(self._to_str(self.inlet_55_node_name))
        out.append(self._to_str(self.inlet_56_node_name))
        out.append(self._to_str(self.inlet_57_node_name))
        out.append(self._to_str(self.inlet_58_node_name))
        out.append(self._to_str(self.inlet_59_node_name))
        out.append(self._to_str(self.inlet_60_node_name))
        out.append(self._to_str(self.inlet_61_node_name))
        out.append(self._to_str(self.inlet_62_node_name))
        out.append(self._to_str(self.inlet_63_node_name))
        out.append(self._to_str(self.inlet_64_node_name))
        out.append(self._to_str(self.inlet_65_node_name))
        out.append(self._to_str(self.inlet_66_node_name))
        out.append(self._to_str(self.inlet_67_node_name))
        out.append(self._to_str(self.inlet_68_node_name))
        out.append(self._to_str(self.inlet_69_node_name))
        out.append(self._to_str(self.inlet_70_node_name))
        out.append(self._to_str(self.inlet_71_node_name))
        out.append(self._to_str(self.inlet_72_node_name))
        out.append(self._to_str(self.inlet_73_node_name))
        out.append(self._to_str(self.inlet_74_node_name))
        out.append(self._to_str(self.inlet_75_node_name))
        out.append(self._to_str(self.inlet_76_node_name))
        out.append(self._to_str(self.inlet_77_node_name))
        out.append(self._to_str(self.inlet_78_node_name))
        out.append(self._to_str(self.inlet_79_node_name))
        out.append(self._to_str(self.inlet_80_node_name))
        out.append(self._to_str(self.inlet_81_node_name))
        out.append(self._to_str(self.inlet_82_node_name))
        out.append(self._to_str(self.inlet_83_node_name))
        out.append(self._to_str(self.inlet_84_node_name))
        out.append(self._to_str(self.inlet_85_node_name))
        out.append(self._to_str(self.inlet_86_node_name))
        out.append(self._to_str(self.inlet_87_node_name))
        out.append(self._to_str(self.inlet_88_node_name))
        out.append(self._to_str(self.inlet_89_node_name))
        out.append(self._to_str(self.inlet_90_node_name))
        out.append(self._to_str(self.inlet_91_node_name))
        out.append(self._to_str(self.inlet_92_node_name))
        out.append(self._to_str(self.inlet_93_node_name))
        out.append(self._to_str(self.inlet_94_node_name))
        out.append(self._to_str(self.inlet_95_node_name))
        out.append(self._to_str(self.inlet_96_node_name))
        out.append(self._to_str(self.inlet_97_node_name))
        out.append(self._to_str(self.inlet_98_node_name))
        out.append(self._to_str(self.inlet_99_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        return ",".join(out)

class AirLoopHvacReturnPlenum(object):
    """ Corresponds to IDD object `AirLoopHVAC:ReturnPlenum`
        Connects N zone inlet air streams, through zone return plenum, to outlet
        (currently 500 per air loop)
        Node names cannot be duplicated within a single plenum list.
    """
    internal_name = "AirLoopHVAC:ReturnPlenum"
    field_count = 145

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:ReturnPlenum`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Zone Name"] = None
        self._data["Zone Node Name"] = None
        self._data["Outlet Node Name"] = None
        self._data["Induced Air Outlet Node or NodeList Name"] = None
        self._data["Inlet 1 Node Name"] = None
        self._data["Inlet 2 Node Name"] = None
        self._data["Inlet 3 Node Name"] = None
        self._data["Inlet 4 Node Name"] = None
        self._data["Inlet 5 Node Name"] = None
        self._data["Inlet 6 Node Name"] = None
        self._data["Inlet 7 Node Name"] = None
        self._data["Inlet 8 Node Name"] = None
        self._data["Inlet 9 Node Name"] = None
        self._data["Inlet 10 Node Name"] = None
        self._data["Inlet 11 Node Name"] = None
        self._data["Inlet 12 Node Name"] = None
        self._data["Inlet 13 Node Name"] = None
        self._data["Inlet 14 Node Name"] = None
        self._data["Inlet 15 Node Name"] = None
        self._data["Inlet 16 Node Name"] = None
        self._data["Inlet 17 Node Name"] = None
        self._data["Inlet 18 Node Name"] = None
        self._data["Inlet 19 Node Name"] = None
        self._data["Inlet 20 Node Name"] = None
        self._data["Inlet 21 Node Name"] = None
        self._data["Inlet 22 Node Name"] = None
        self._data["Inlet 23 Node Name"] = None
        self._data["Inlet 24 Node Name"] = None
        self._data["Inlet 25 Node Name"] = None
        self._data["Inlet 26 Node Name"] = None
        self._data["Inlet 27 Node Name"] = None
        self._data["Inlet 28 Node Name"] = None
        self._data["Inlet 29 Node Name"] = None
        self._data["Inlet 30 Node Name"] = None
        self._data["Inlet 31 Node Name"] = None
        self._data["Inlet 32 Node Name"] = None
        self._data["Inlet 33 Node Name"] = None
        self._data["Inlet 34 Node Name"] = None
        self._data["Inlet 35 Node Name"] = None
        self._data["Inlet 36 Node Name"] = None
        self._data["Inlet 37 Node Name"] = None
        self._data["Inlet 38 Node Name"] = None
        self._data["Inlet 39 Node Name"] = None
        self._data["Inlet 40 Node Name"] = None
        self._data["Inlet 41 Node Name"] = None
        self._data["Inlet 42 Node Name"] = None
        self._data["Inlet 43 Node Name"] = None
        self._data["Inlet 44 Node Name"] = None
        self._data["Inlet 45 Node Name"] = None
        self._data["Inlet 46 Node Name"] = None
        self._data["Inlet 47 Node Name"] = None
        self._data["Inlet 48 Node Name"] = None
        self._data["Inlet 49 Node Name"] = None
        self._data["Inlet 50 Node Name"] = None
        self._data["Inlet 51 Node Name"] = None
        self._data["Inlet 52 Node Name"] = None
        self._data["Inlet 53 Node Name"] = None
        self._data["Inlet 54 Node Name"] = None
        self._data["Inlet 55 Node Name"] = None
        self._data["Inlet 56 Node Name"] = None
        self._data["Inlet 57 Node Name"] = None
        self._data["Inlet 58 Node Name"] = None
        self._data["Inlet 59 Node Name"] = None
        self._data["Inlet 60 Node Name"] = None
        self._data["Inlet 61 Node Name"] = None
        self._data["Inlet 62 Node Name"] = None
        self._data["Inlet 63 Node Name"] = None
        self._data["Inlet 64 Node Name"] = None
        self._data["Inlet 65 Node Name"] = None
        self._data["Inlet 66 Node Name"] = None
        self._data["Inlet 67 Node Name"] = None
        self._data["Inlet 68 Node Name"] = None
        self._data["Inlet 69 Node Name"] = None
        self._data["Inlet 70 Node Name"] = None
        self._data["Inlet 71 Node Name"] = None
        self._data["Inlet 72 Node Name"] = None
        self._data["Inlet 73 Node Name"] = None
        self._data["Inlet 74 Node Name"] = None
        self._data["Inlet 75 Node Name"] = None
        self._data["Inlet 76 Node Name"] = None
        self._data["Inlet 77 Node Name"] = None
        self._data["Inlet 78 Node Name"] = None
        self._data["Inlet 79 Node Name"] = None
        self._data["Inlet 80 Node Name"] = None
        self._data["Inlet 81 Node Name"] = None
        self._data["Inlet 82 Node Name"] = None
        self._data["Inlet 83 Node Name"] = None
        self._data["Inlet 84 Node Name"] = None
        self._data["Inlet 85 Node Name"] = None
        self._data["Inlet 86 Node Name"] = None
        self._data["Inlet 87 Node Name"] = None
        self._data["Inlet 88 Node Name"] = None
        self._data["Inlet 89 Node Name"] = None
        self._data["Inlet 90 Node Name"] = None
        self._data["Inlet 91 Node Name"] = None
        self._data["Inlet 92 Node Name"] = None
        self._data["Inlet 93 Node Name"] = None
        self._data["Inlet 94 Node Name"] = None
        self._data["Inlet 95 Node Name"] = None
        self._data["Inlet 96 Node Name"] = None
        self._data["Inlet 97 Node Name"] = None
        self._data["Inlet 98 Node Name"] = None
        self._data["Inlet 99 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None
        self._data["Inlet 100 Node Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.zone_node_name = None
        else:
            self.zone_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.outlet_node_name = None
        else:
            self.outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.induced_air_outlet_node_or_nodelist_name = None
        else:
            self.induced_air_outlet_node_or_nodelist_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_1_node_name = None
        else:
            self.inlet_1_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_2_node_name = None
        else:
            self.inlet_2_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_3_node_name = None
        else:
            self.inlet_3_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_4_node_name = None
        else:
            self.inlet_4_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_5_node_name = None
        else:
            self.inlet_5_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_6_node_name = None
        else:
            self.inlet_6_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_7_node_name = None
        else:
            self.inlet_7_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_8_node_name = None
        else:
            self.inlet_8_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_9_node_name = None
        else:
            self.inlet_9_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_10_node_name = None
        else:
            self.inlet_10_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_11_node_name = None
        else:
            self.inlet_11_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_12_node_name = None
        else:
            self.inlet_12_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_13_node_name = None
        else:
            self.inlet_13_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_14_node_name = None
        else:
            self.inlet_14_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_15_node_name = None
        else:
            self.inlet_15_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_16_node_name = None
        else:
            self.inlet_16_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_17_node_name = None
        else:
            self.inlet_17_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_18_node_name = None
        else:
            self.inlet_18_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_19_node_name = None
        else:
            self.inlet_19_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_20_node_name = None
        else:
            self.inlet_20_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_21_node_name = None
        else:
            self.inlet_21_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_22_node_name = None
        else:
            self.inlet_22_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_23_node_name = None
        else:
            self.inlet_23_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_24_node_name = None
        else:
            self.inlet_24_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_25_node_name = None
        else:
            self.inlet_25_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_26_node_name = None
        else:
            self.inlet_26_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_27_node_name = None
        else:
            self.inlet_27_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_28_node_name = None
        else:
            self.inlet_28_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_29_node_name = None
        else:
            self.inlet_29_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_30_node_name = None
        else:
            self.inlet_30_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_31_node_name = None
        else:
            self.inlet_31_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_32_node_name = None
        else:
            self.inlet_32_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_33_node_name = None
        else:
            self.inlet_33_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_34_node_name = None
        else:
            self.inlet_34_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_35_node_name = None
        else:
            self.inlet_35_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_36_node_name = None
        else:
            self.inlet_36_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_37_node_name = None
        else:
            self.inlet_37_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_38_node_name = None
        else:
            self.inlet_38_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_39_node_name = None
        else:
            self.inlet_39_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_40_node_name = None
        else:
            self.inlet_40_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_41_node_name = None
        else:
            self.inlet_41_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_42_node_name = None
        else:
            self.inlet_42_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_43_node_name = None
        else:
            self.inlet_43_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_44_node_name = None
        else:
            self.inlet_44_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_45_node_name = None
        else:
            self.inlet_45_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_46_node_name = None
        else:
            self.inlet_46_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_47_node_name = None
        else:
            self.inlet_47_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_48_node_name = None
        else:
            self.inlet_48_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_49_node_name = None
        else:
            self.inlet_49_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_50_node_name = None
        else:
            self.inlet_50_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_51_node_name = None
        else:
            self.inlet_51_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_52_node_name = None
        else:
            self.inlet_52_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_53_node_name = None
        else:
            self.inlet_53_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_54_node_name = None
        else:
            self.inlet_54_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_55_node_name = None
        else:
            self.inlet_55_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_56_node_name = None
        else:
            self.inlet_56_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_57_node_name = None
        else:
            self.inlet_57_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_58_node_name = None
        else:
            self.inlet_58_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_59_node_name = None
        else:
            self.inlet_59_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_60_node_name = None
        else:
            self.inlet_60_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_61_node_name = None
        else:
            self.inlet_61_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_62_node_name = None
        else:
            self.inlet_62_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_63_node_name = None
        else:
            self.inlet_63_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_64_node_name = None
        else:
            self.inlet_64_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_65_node_name = None
        else:
            self.inlet_65_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_66_node_name = None
        else:
            self.inlet_66_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_67_node_name = None
        else:
            self.inlet_67_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_68_node_name = None
        else:
            self.inlet_68_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_69_node_name = None
        else:
            self.inlet_69_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_70_node_name = None
        else:
            self.inlet_70_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_71_node_name = None
        else:
            self.inlet_71_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_72_node_name = None
        else:
            self.inlet_72_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_73_node_name = None
        else:
            self.inlet_73_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_74_node_name = None
        else:
            self.inlet_74_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_75_node_name = None
        else:
            self.inlet_75_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_76_node_name = None
        else:
            self.inlet_76_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_77_node_name = None
        else:
            self.inlet_77_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_78_node_name = None
        else:
            self.inlet_78_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_79_node_name = None
        else:
            self.inlet_79_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_80_node_name = None
        else:
            self.inlet_80_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_81_node_name = None
        else:
            self.inlet_81_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_82_node_name = None
        else:
            self.inlet_82_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_83_node_name = None
        else:
            self.inlet_83_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_84_node_name = None
        else:
            self.inlet_84_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_85_node_name = None
        else:
            self.inlet_85_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_86_node_name = None
        else:
            self.inlet_86_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_87_node_name = None
        else:
            self.inlet_87_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_88_node_name = None
        else:
            self.inlet_88_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_89_node_name = None
        else:
            self.inlet_89_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_90_node_name = None
        else:
            self.inlet_90_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_91_node_name = None
        else:
            self.inlet_91_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_92_node_name = None
        else:
            self.inlet_92_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_93_node_name = None
        else:
            self.inlet_93_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_94_node_name = None
        else:
            self.inlet_94_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_95_node_name = None
        else:
            self.inlet_95_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_96_node_name = None
        else:
            self.inlet_96_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_97_node_name = None
        else:
            self.inlet_97_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_98_node_name = None
        else:
            self.inlet_98_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_99_node_name = None
        else:
            self.inlet_99_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inlet_100_node_name = None
        else:
            self.inlet_100_node_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `zone_name`

        Args:
            value (str): value for IDD Field `zone_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')

        self._data["Zone Name"] = value

    @property
    def zone_node_name(self):
        """Get zone_node_name

        Returns:
            str: the value of `zone_node_name` or None if not set
        """
        return self._data["Zone Node Name"]

    @zone_node_name.setter
    def zone_node_name(self, value=None):
        """  Corresponds to IDD Field `zone_node_name`

        Args:
            value (str): value for IDD Field `zone_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_node_name`')

        self._data["Zone Node Name"] = value

    @property
    def outlet_node_name(self):
        """Get outlet_node_name

        Returns:
            str: the value of `outlet_node_name` or None if not set
        """
        return self._data["Outlet Node Name"]

    @outlet_node_name.setter
    def outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `outlet_node_name`

        Args:
            value (str): value for IDD Field `outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node_name`')

        self._data["Outlet Node Name"] = value

    @property
    def induced_air_outlet_node_or_nodelist_name(self):
        """Get induced_air_outlet_node_or_nodelist_name

        Returns:
            str: the value of `induced_air_outlet_node_or_nodelist_name` or None if not set
        """
        return self._data["Induced Air Outlet Node or NodeList Name"]

    @induced_air_outlet_node_or_nodelist_name.setter
    def induced_air_outlet_node_or_nodelist_name(self, value=None):
        """  Corresponds to IDD Field `induced_air_outlet_node_or_nodelist_name`

        Args:
            value (str): value for IDD Field `induced_air_outlet_node_or_nodelist_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `induced_air_outlet_node_or_nodelist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `induced_air_outlet_node_or_nodelist_name`')

        self._data["Induced Air Outlet Node or NodeList Name"] = value

    @property
    def inlet_1_node_name(self):
        """Get inlet_1_node_name

        Returns:
            str: the value of `inlet_1_node_name` or None if not set
        """
        return self._data["Inlet 1 Node Name"]

    @inlet_1_node_name.setter
    def inlet_1_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_1_node_name`

        Args:
            value (str): value for IDD Field `inlet_1_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_1_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_1_node_name`')

        self._data["Inlet 1 Node Name"] = value

    @property
    def inlet_2_node_name(self):
        """Get inlet_2_node_name

        Returns:
            str: the value of `inlet_2_node_name` or None if not set
        """
        return self._data["Inlet 2 Node Name"]

    @inlet_2_node_name.setter
    def inlet_2_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_2_node_name`

        Args:
            value (str): value for IDD Field `inlet_2_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_2_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_2_node_name`')

        self._data["Inlet 2 Node Name"] = value

    @property
    def inlet_3_node_name(self):
        """Get inlet_3_node_name

        Returns:
            str: the value of `inlet_3_node_name` or None if not set
        """
        return self._data["Inlet 3 Node Name"]

    @inlet_3_node_name.setter
    def inlet_3_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_3_node_name`

        Args:
            value (str): value for IDD Field `inlet_3_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_3_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_3_node_name`')

        self._data["Inlet 3 Node Name"] = value

    @property
    def inlet_4_node_name(self):
        """Get inlet_4_node_name

        Returns:
            str: the value of `inlet_4_node_name` or None if not set
        """
        return self._data["Inlet 4 Node Name"]

    @inlet_4_node_name.setter
    def inlet_4_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_4_node_name`

        Args:
            value (str): value for IDD Field `inlet_4_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_4_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_4_node_name`')

        self._data["Inlet 4 Node Name"] = value

    @property
    def inlet_5_node_name(self):
        """Get inlet_5_node_name

        Returns:
            str: the value of `inlet_5_node_name` or None if not set
        """
        return self._data["Inlet 5 Node Name"]

    @inlet_5_node_name.setter
    def inlet_5_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_5_node_name`

        Args:
            value (str): value for IDD Field `inlet_5_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_5_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_5_node_name`')

        self._data["Inlet 5 Node Name"] = value

    @property
    def inlet_6_node_name(self):
        """Get inlet_6_node_name

        Returns:
            str: the value of `inlet_6_node_name` or None if not set
        """
        return self._data["Inlet 6 Node Name"]

    @inlet_6_node_name.setter
    def inlet_6_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_6_node_name`

        Args:
            value (str): value for IDD Field `inlet_6_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_6_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_6_node_name`')

        self._data["Inlet 6 Node Name"] = value

    @property
    def inlet_7_node_name(self):
        """Get inlet_7_node_name

        Returns:
            str: the value of `inlet_7_node_name` or None if not set
        """
        return self._data["Inlet 7 Node Name"]

    @inlet_7_node_name.setter
    def inlet_7_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_7_node_name`

        Args:
            value (str): value for IDD Field `inlet_7_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_7_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_7_node_name`')

        self._data["Inlet 7 Node Name"] = value

    @property
    def inlet_8_node_name(self):
        """Get inlet_8_node_name

        Returns:
            str: the value of `inlet_8_node_name` or None if not set
        """
        return self._data["Inlet 8 Node Name"]

    @inlet_8_node_name.setter
    def inlet_8_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_8_node_name`

        Args:
            value (str): value for IDD Field `inlet_8_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_8_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_8_node_name`')

        self._data["Inlet 8 Node Name"] = value

    @property
    def inlet_9_node_name(self):
        """Get inlet_9_node_name

        Returns:
            str: the value of `inlet_9_node_name` or None if not set
        """
        return self._data["Inlet 9 Node Name"]

    @inlet_9_node_name.setter
    def inlet_9_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_9_node_name`

        Args:
            value (str): value for IDD Field `inlet_9_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_9_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_9_node_name`')

        self._data["Inlet 9 Node Name"] = value

    @property
    def inlet_10_node_name(self):
        """Get inlet_10_node_name

        Returns:
            str: the value of `inlet_10_node_name` or None if not set
        """
        return self._data["Inlet 10 Node Name"]

    @inlet_10_node_name.setter
    def inlet_10_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_10_node_name`

        Args:
            value (str): value for IDD Field `inlet_10_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_10_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_10_node_name`')

        self._data["Inlet 10 Node Name"] = value

    @property
    def inlet_11_node_name(self):
        """Get inlet_11_node_name

        Returns:
            str: the value of `inlet_11_node_name` or None if not set
        """
        return self._data["Inlet 11 Node Name"]

    @inlet_11_node_name.setter
    def inlet_11_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_11_node_name`

        Args:
            value (str): value for IDD Field `inlet_11_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_11_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_11_node_name`')

        self._data["Inlet 11 Node Name"] = value

    @property
    def inlet_12_node_name(self):
        """Get inlet_12_node_name

        Returns:
            str: the value of `inlet_12_node_name` or None if not set
        """
        return self._data["Inlet 12 Node Name"]

    @inlet_12_node_name.setter
    def inlet_12_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_12_node_name`

        Args:
            value (str): value for IDD Field `inlet_12_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_12_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_12_node_name`')

        self._data["Inlet 12 Node Name"] = value

    @property
    def inlet_13_node_name(self):
        """Get inlet_13_node_name

        Returns:
            str: the value of `inlet_13_node_name` or None if not set
        """
        return self._data["Inlet 13 Node Name"]

    @inlet_13_node_name.setter
    def inlet_13_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_13_node_name`

        Args:
            value (str): value for IDD Field `inlet_13_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_13_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_13_node_name`')

        self._data["Inlet 13 Node Name"] = value

    @property
    def inlet_14_node_name(self):
        """Get inlet_14_node_name

        Returns:
            str: the value of `inlet_14_node_name` or None if not set
        """
        return self._data["Inlet 14 Node Name"]

    @inlet_14_node_name.setter
    def inlet_14_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_14_node_name`

        Args:
            value (str): value for IDD Field `inlet_14_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_14_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_14_node_name`')

        self._data["Inlet 14 Node Name"] = value

    @property
    def inlet_15_node_name(self):
        """Get inlet_15_node_name

        Returns:
            str: the value of `inlet_15_node_name` or None if not set
        """
        return self._data["Inlet 15 Node Name"]

    @inlet_15_node_name.setter
    def inlet_15_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_15_node_name`

        Args:
            value (str): value for IDD Field `inlet_15_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_15_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_15_node_name`')

        self._data["Inlet 15 Node Name"] = value

    @property
    def inlet_16_node_name(self):
        """Get inlet_16_node_name

        Returns:
            str: the value of `inlet_16_node_name` or None if not set
        """
        return self._data["Inlet 16 Node Name"]

    @inlet_16_node_name.setter
    def inlet_16_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_16_node_name`

        Args:
            value (str): value for IDD Field `inlet_16_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_16_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_16_node_name`')

        self._data["Inlet 16 Node Name"] = value

    @property
    def inlet_17_node_name(self):
        """Get inlet_17_node_name

        Returns:
            str: the value of `inlet_17_node_name` or None if not set
        """
        return self._data["Inlet 17 Node Name"]

    @inlet_17_node_name.setter
    def inlet_17_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_17_node_name`

        Args:
            value (str): value for IDD Field `inlet_17_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_17_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_17_node_name`')

        self._data["Inlet 17 Node Name"] = value

    @property
    def inlet_18_node_name(self):
        """Get inlet_18_node_name

        Returns:
            str: the value of `inlet_18_node_name` or None if not set
        """
        return self._data["Inlet 18 Node Name"]

    @inlet_18_node_name.setter
    def inlet_18_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_18_node_name`

        Args:
            value (str): value for IDD Field `inlet_18_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_18_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_18_node_name`')

        self._data["Inlet 18 Node Name"] = value

    @property
    def inlet_19_node_name(self):
        """Get inlet_19_node_name

        Returns:
            str: the value of `inlet_19_node_name` or None if not set
        """
        return self._data["Inlet 19 Node Name"]

    @inlet_19_node_name.setter
    def inlet_19_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_19_node_name`

        Args:
            value (str): value for IDD Field `inlet_19_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_19_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_19_node_name`')

        self._data["Inlet 19 Node Name"] = value

    @property
    def inlet_20_node_name(self):
        """Get inlet_20_node_name

        Returns:
            str: the value of `inlet_20_node_name` or None if not set
        """
        return self._data["Inlet 20 Node Name"]

    @inlet_20_node_name.setter
    def inlet_20_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_20_node_name`

        Args:
            value (str): value for IDD Field `inlet_20_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_20_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_20_node_name`')

        self._data["Inlet 20 Node Name"] = value

    @property
    def inlet_21_node_name(self):
        """Get inlet_21_node_name

        Returns:
            str: the value of `inlet_21_node_name` or None if not set
        """
        return self._data["Inlet 21 Node Name"]

    @inlet_21_node_name.setter
    def inlet_21_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_21_node_name`

        Args:
            value (str): value for IDD Field `inlet_21_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_21_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_21_node_name`')

        self._data["Inlet 21 Node Name"] = value

    @property
    def inlet_22_node_name(self):
        """Get inlet_22_node_name

        Returns:
            str: the value of `inlet_22_node_name` or None if not set
        """
        return self._data["Inlet 22 Node Name"]

    @inlet_22_node_name.setter
    def inlet_22_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_22_node_name`

        Args:
            value (str): value for IDD Field `inlet_22_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_22_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_22_node_name`')

        self._data["Inlet 22 Node Name"] = value

    @property
    def inlet_23_node_name(self):
        """Get inlet_23_node_name

        Returns:
            str: the value of `inlet_23_node_name` or None if not set
        """
        return self._data["Inlet 23 Node Name"]

    @inlet_23_node_name.setter
    def inlet_23_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_23_node_name`

        Args:
            value (str): value for IDD Field `inlet_23_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_23_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_23_node_name`')

        self._data["Inlet 23 Node Name"] = value

    @property
    def inlet_24_node_name(self):
        """Get inlet_24_node_name

        Returns:
            str: the value of `inlet_24_node_name` or None if not set
        """
        return self._data["Inlet 24 Node Name"]

    @inlet_24_node_name.setter
    def inlet_24_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_24_node_name`

        Args:
            value (str): value for IDD Field `inlet_24_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_24_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_24_node_name`')

        self._data["Inlet 24 Node Name"] = value

    @property
    def inlet_25_node_name(self):
        """Get inlet_25_node_name

        Returns:
            str: the value of `inlet_25_node_name` or None if not set
        """
        return self._data["Inlet 25 Node Name"]

    @inlet_25_node_name.setter
    def inlet_25_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_25_node_name`

        Args:
            value (str): value for IDD Field `inlet_25_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_25_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_25_node_name`')

        self._data["Inlet 25 Node Name"] = value

    @property
    def inlet_26_node_name(self):
        """Get inlet_26_node_name

        Returns:
            str: the value of `inlet_26_node_name` or None if not set
        """
        return self._data["Inlet 26 Node Name"]

    @inlet_26_node_name.setter
    def inlet_26_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_26_node_name`

        Args:
            value (str): value for IDD Field `inlet_26_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_26_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_26_node_name`')

        self._data["Inlet 26 Node Name"] = value

    @property
    def inlet_27_node_name(self):
        """Get inlet_27_node_name

        Returns:
            str: the value of `inlet_27_node_name` or None if not set
        """
        return self._data["Inlet 27 Node Name"]

    @inlet_27_node_name.setter
    def inlet_27_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_27_node_name`

        Args:
            value (str): value for IDD Field `inlet_27_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_27_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_27_node_name`')

        self._data["Inlet 27 Node Name"] = value

    @property
    def inlet_28_node_name(self):
        """Get inlet_28_node_name

        Returns:
            str: the value of `inlet_28_node_name` or None if not set
        """
        return self._data["Inlet 28 Node Name"]

    @inlet_28_node_name.setter
    def inlet_28_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_28_node_name`

        Args:
            value (str): value for IDD Field `inlet_28_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_28_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_28_node_name`')

        self._data["Inlet 28 Node Name"] = value

    @property
    def inlet_29_node_name(self):
        """Get inlet_29_node_name

        Returns:
            str: the value of `inlet_29_node_name` or None if not set
        """
        return self._data["Inlet 29 Node Name"]

    @inlet_29_node_name.setter
    def inlet_29_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_29_node_name`

        Args:
            value (str): value for IDD Field `inlet_29_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_29_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_29_node_name`')

        self._data["Inlet 29 Node Name"] = value

    @property
    def inlet_30_node_name(self):
        """Get inlet_30_node_name

        Returns:
            str: the value of `inlet_30_node_name` or None if not set
        """
        return self._data["Inlet 30 Node Name"]

    @inlet_30_node_name.setter
    def inlet_30_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_30_node_name`

        Args:
            value (str): value for IDD Field `inlet_30_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_30_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_30_node_name`')

        self._data["Inlet 30 Node Name"] = value

    @property
    def inlet_31_node_name(self):
        """Get inlet_31_node_name

        Returns:
            str: the value of `inlet_31_node_name` or None if not set
        """
        return self._data["Inlet 31 Node Name"]

    @inlet_31_node_name.setter
    def inlet_31_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_31_node_name`

        Args:
            value (str): value for IDD Field `inlet_31_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_31_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_31_node_name`')

        self._data["Inlet 31 Node Name"] = value

    @property
    def inlet_32_node_name(self):
        """Get inlet_32_node_name

        Returns:
            str: the value of `inlet_32_node_name` or None if not set
        """
        return self._data["Inlet 32 Node Name"]

    @inlet_32_node_name.setter
    def inlet_32_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_32_node_name`

        Args:
            value (str): value for IDD Field `inlet_32_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_32_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_32_node_name`')

        self._data["Inlet 32 Node Name"] = value

    @property
    def inlet_33_node_name(self):
        """Get inlet_33_node_name

        Returns:
            str: the value of `inlet_33_node_name` or None if not set
        """
        return self._data["Inlet 33 Node Name"]

    @inlet_33_node_name.setter
    def inlet_33_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_33_node_name`

        Args:
            value (str): value for IDD Field `inlet_33_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_33_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_33_node_name`')

        self._data["Inlet 33 Node Name"] = value

    @property
    def inlet_34_node_name(self):
        """Get inlet_34_node_name

        Returns:
            str: the value of `inlet_34_node_name` or None if not set
        """
        return self._data["Inlet 34 Node Name"]

    @inlet_34_node_name.setter
    def inlet_34_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_34_node_name`

        Args:
            value (str): value for IDD Field `inlet_34_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_34_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_34_node_name`')

        self._data["Inlet 34 Node Name"] = value

    @property
    def inlet_35_node_name(self):
        """Get inlet_35_node_name

        Returns:
            str: the value of `inlet_35_node_name` or None if not set
        """
        return self._data["Inlet 35 Node Name"]

    @inlet_35_node_name.setter
    def inlet_35_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_35_node_name`

        Args:
            value (str): value for IDD Field `inlet_35_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_35_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_35_node_name`')

        self._data["Inlet 35 Node Name"] = value

    @property
    def inlet_36_node_name(self):
        """Get inlet_36_node_name

        Returns:
            str: the value of `inlet_36_node_name` or None if not set
        """
        return self._data["Inlet 36 Node Name"]

    @inlet_36_node_name.setter
    def inlet_36_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_36_node_name`

        Args:
            value (str): value for IDD Field `inlet_36_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_36_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_36_node_name`')

        self._data["Inlet 36 Node Name"] = value

    @property
    def inlet_37_node_name(self):
        """Get inlet_37_node_name

        Returns:
            str: the value of `inlet_37_node_name` or None if not set
        """
        return self._data["Inlet 37 Node Name"]

    @inlet_37_node_name.setter
    def inlet_37_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_37_node_name`

        Args:
            value (str): value for IDD Field `inlet_37_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_37_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_37_node_name`')

        self._data["Inlet 37 Node Name"] = value

    @property
    def inlet_38_node_name(self):
        """Get inlet_38_node_name

        Returns:
            str: the value of `inlet_38_node_name` or None if not set
        """
        return self._data["Inlet 38 Node Name"]

    @inlet_38_node_name.setter
    def inlet_38_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_38_node_name`

        Args:
            value (str): value for IDD Field `inlet_38_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_38_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_38_node_name`')

        self._data["Inlet 38 Node Name"] = value

    @property
    def inlet_39_node_name(self):
        """Get inlet_39_node_name

        Returns:
            str: the value of `inlet_39_node_name` or None if not set
        """
        return self._data["Inlet 39 Node Name"]

    @inlet_39_node_name.setter
    def inlet_39_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_39_node_name`

        Args:
            value (str): value for IDD Field `inlet_39_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_39_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_39_node_name`')

        self._data["Inlet 39 Node Name"] = value

    @property
    def inlet_40_node_name(self):
        """Get inlet_40_node_name

        Returns:
            str: the value of `inlet_40_node_name` or None if not set
        """
        return self._data["Inlet 40 Node Name"]

    @inlet_40_node_name.setter
    def inlet_40_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_40_node_name`

        Args:
            value (str): value for IDD Field `inlet_40_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_40_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_40_node_name`')

        self._data["Inlet 40 Node Name"] = value

    @property
    def inlet_41_node_name(self):
        """Get inlet_41_node_name

        Returns:
            str: the value of `inlet_41_node_name` or None if not set
        """
        return self._data["Inlet 41 Node Name"]

    @inlet_41_node_name.setter
    def inlet_41_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_41_node_name`

        Args:
            value (str): value for IDD Field `inlet_41_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_41_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_41_node_name`')

        self._data["Inlet 41 Node Name"] = value

    @property
    def inlet_42_node_name(self):
        """Get inlet_42_node_name

        Returns:
            str: the value of `inlet_42_node_name` or None if not set
        """
        return self._data["Inlet 42 Node Name"]

    @inlet_42_node_name.setter
    def inlet_42_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_42_node_name`

        Args:
            value (str): value for IDD Field `inlet_42_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_42_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_42_node_name`')

        self._data["Inlet 42 Node Name"] = value

    @property
    def inlet_43_node_name(self):
        """Get inlet_43_node_name

        Returns:
            str: the value of `inlet_43_node_name` or None if not set
        """
        return self._data["Inlet 43 Node Name"]

    @inlet_43_node_name.setter
    def inlet_43_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_43_node_name`

        Args:
            value (str): value for IDD Field `inlet_43_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_43_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_43_node_name`')

        self._data["Inlet 43 Node Name"] = value

    @property
    def inlet_44_node_name(self):
        """Get inlet_44_node_name

        Returns:
            str: the value of `inlet_44_node_name` or None if not set
        """
        return self._data["Inlet 44 Node Name"]

    @inlet_44_node_name.setter
    def inlet_44_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_44_node_name`

        Args:
            value (str): value for IDD Field `inlet_44_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_44_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_44_node_name`')

        self._data["Inlet 44 Node Name"] = value

    @property
    def inlet_45_node_name(self):
        """Get inlet_45_node_name

        Returns:
            str: the value of `inlet_45_node_name` or None if not set
        """
        return self._data["Inlet 45 Node Name"]

    @inlet_45_node_name.setter
    def inlet_45_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_45_node_name`

        Args:
            value (str): value for IDD Field `inlet_45_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_45_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_45_node_name`')

        self._data["Inlet 45 Node Name"] = value

    @property
    def inlet_46_node_name(self):
        """Get inlet_46_node_name

        Returns:
            str: the value of `inlet_46_node_name` or None if not set
        """
        return self._data["Inlet 46 Node Name"]

    @inlet_46_node_name.setter
    def inlet_46_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_46_node_name`

        Args:
            value (str): value for IDD Field `inlet_46_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_46_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_46_node_name`')

        self._data["Inlet 46 Node Name"] = value

    @property
    def inlet_47_node_name(self):
        """Get inlet_47_node_name

        Returns:
            str: the value of `inlet_47_node_name` or None if not set
        """
        return self._data["Inlet 47 Node Name"]

    @inlet_47_node_name.setter
    def inlet_47_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_47_node_name`

        Args:
            value (str): value for IDD Field `inlet_47_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_47_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_47_node_name`')

        self._data["Inlet 47 Node Name"] = value

    @property
    def inlet_48_node_name(self):
        """Get inlet_48_node_name

        Returns:
            str: the value of `inlet_48_node_name` or None if not set
        """
        return self._data["Inlet 48 Node Name"]

    @inlet_48_node_name.setter
    def inlet_48_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_48_node_name`

        Args:
            value (str): value for IDD Field `inlet_48_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_48_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_48_node_name`')

        self._data["Inlet 48 Node Name"] = value

    @property
    def inlet_49_node_name(self):
        """Get inlet_49_node_name

        Returns:
            str: the value of `inlet_49_node_name` or None if not set
        """
        return self._data["Inlet 49 Node Name"]

    @inlet_49_node_name.setter
    def inlet_49_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_49_node_name`

        Args:
            value (str): value for IDD Field `inlet_49_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_49_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_49_node_name`')

        self._data["Inlet 49 Node Name"] = value

    @property
    def inlet_50_node_name(self):
        """Get inlet_50_node_name

        Returns:
            str: the value of `inlet_50_node_name` or None if not set
        """
        return self._data["Inlet 50 Node Name"]

    @inlet_50_node_name.setter
    def inlet_50_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_50_node_name`

        Args:
            value (str): value for IDD Field `inlet_50_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_50_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_50_node_name`')

        self._data["Inlet 50 Node Name"] = value

    @property
    def inlet_51_node_name(self):
        """Get inlet_51_node_name

        Returns:
            str: the value of `inlet_51_node_name` or None if not set
        """
        return self._data["Inlet 51 Node Name"]

    @inlet_51_node_name.setter
    def inlet_51_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_51_node_name`

        Args:
            value (str): value for IDD Field `inlet_51_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_51_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_51_node_name`')

        self._data["Inlet 51 Node Name"] = value

    @property
    def inlet_52_node_name(self):
        """Get inlet_52_node_name

        Returns:
            str: the value of `inlet_52_node_name` or None if not set
        """
        return self._data["Inlet 52 Node Name"]

    @inlet_52_node_name.setter
    def inlet_52_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_52_node_name`

        Args:
            value (str): value for IDD Field `inlet_52_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_52_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_52_node_name`')

        self._data["Inlet 52 Node Name"] = value

    @property
    def inlet_53_node_name(self):
        """Get inlet_53_node_name

        Returns:
            str: the value of `inlet_53_node_name` or None if not set
        """
        return self._data["Inlet 53 Node Name"]

    @inlet_53_node_name.setter
    def inlet_53_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_53_node_name`

        Args:
            value (str): value for IDD Field `inlet_53_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_53_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_53_node_name`')

        self._data["Inlet 53 Node Name"] = value

    @property
    def inlet_54_node_name(self):
        """Get inlet_54_node_name

        Returns:
            str: the value of `inlet_54_node_name` or None if not set
        """
        return self._data["Inlet 54 Node Name"]

    @inlet_54_node_name.setter
    def inlet_54_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_54_node_name`

        Args:
            value (str): value for IDD Field `inlet_54_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_54_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_54_node_name`')

        self._data["Inlet 54 Node Name"] = value

    @property
    def inlet_55_node_name(self):
        """Get inlet_55_node_name

        Returns:
            str: the value of `inlet_55_node_name` or None if not set
        """
        return self._data["Inlet 55 Node Name"]

    @inlet_55_node_name.setter
    def inlet_55_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_55_node_name`

        Args:
            value (str): value for IDD Field `inlet_55_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_55_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_55_node_name`')

        self._data["Inlet 55 Node Name"] = value

    @property
    def inlet_56_node_name(self):
        """Get inlet_56_node_name

        Returns:
            str: the value of `inlet_56_node_name` or None if not set
        """
        return self._data["Inlet 56 Node Name"]

    @inlet_56_node_name.setter
    def inlet_56_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_56_node_name`

        Args:
            value (str): value for IDD Field `inlet_56_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_56_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_56_node_name`')

        self._data["Inlet 56 Node Name"] = value

    @property
    def inlet_57_node_name(self):
        """Get inlet_57_node_name

        Returns:
            str: the value of `inlet_57_node_name` or None if not set
        """
        return self._data["Inlet 57 Node Name"]

    @inlet_57_node_name.setter
    def inlet_57_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_57_node_name`

        Args:
            value (str): value for IDD Field `inlet_57_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_57_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_57_node_name`')

        self._data["Inlet 57 Node Name"] = value

    @property
    def inlet_58_node_name(self):
        """Get inlet_58_node_name

        Returns:
            str: the value of `inlet_58_node_name` or None if not set
        """
        return self._data["Inlet 58 Node Name"]

    @inlet_58_node_name.setter
    def inlet_58_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_58_node_name`

        Args:
            value (str): value for IDD Field `inlet_58_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_58_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_58_node_name`')

        self._data["Inlet 58 Node Name"] = value

    @property
    def inlet_59_node_name(self):
        """Get inlet_59_node_name

        Returns:
            str: the value of `inlet_59_node_name` or None if not set
        """
        return self._data["Inlet 59 Node Name"]

    @inlet_59_node_name.setter
    def inlet_59_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_59_node_name`

        Args:
            value (str): value for IDD Field `inlet_59_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_59_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_59_node_name`')

        self._data["Inlet 59 Node Name"] = value

    @property
    def inlet_60_node_name(self):
        """Get inlet_60_node_name

        Returns:
            str: the value of `inlet_60_node_name` or None if not set
        """
        return self._data["Inlet 60 Node Name"]

    @inlet_60_node_name.setter
    def inlet_60_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_60_node_name`

        Args:
            value (str): value for IDD Field `inlet_60_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_60_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_60_node_name`')

        self._data["Inlet 60 Node Name"] = value

    @property
    def inlet_61_node_name(self):
        """Get inlet_61_node_name

        Returns:
            str: the value of `inlet_61_node_name` or None if not set
        """
        return self._data["Inlet 61 Node Name"]

    @inlet_61_node_name.setter
    def inlet_61_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_61_node_name`

        Args:
            value (str): value for IDD Field `inlet_61_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_61_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_61_node_name`')

        self._data["Inlet 61 Node Name"] = value

    @property
    def inlet_62_node_name(self):
        """Get inlet_62_node_name

        Returns:
            str: the value of `inlet_62_node_name` or None if not set
        """
        return self._data["Inlet 62 Node Name"]

    @inlet_62_node_name.setter
    def inlet_62_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_62_node_name`

        Args:
            value (str): value for IDD Field `inlet_62_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_62_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_62_node_name`')

        self._data["Inlet 62 Node Name"] = value

    @property
    def inlet_63_node_name(self):
        """Get inlet_63_node_name

        Returns:
            str: the value of `inlet_63_node_name` or None if not set
        """
        return self._data["Inlet 63 Node Name"]

    @inlet_63_node_name.setter
    def inlet_63_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_63_node_name`

        Args:
            value (str): value for IDD Field `inlet_63_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_63_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_63_node_name`')

        self._data["Inlet 63 Node Name"] = value

    @property
    def inlet_64_node_name(self):
        """Get inlet_64_node_name

        Returns:
            str: the value of `inlet_64_node_name` or None if not set
        """
        return self._data["Inlet 64 Node Name"]

    @inlet_64_node_name.setter
    def inlet_64_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_64_node_name`

        Args:
            value (str): value for IDD Field `inlet_64_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_64_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_64_node_name`')

        self._data["Inlet 64 Node Name"] = value

    @property
    def inlet_65_node_name(self):
        """Get inlet_65_node_name

        Returns:
            str: the value of `inlet_65_node_name` or None if not set
        """
        return self._data["Inlet 65 Node Name"]

    @inlet_65_node_name.setter
    def inlet_65_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_65_node_name`

        Args:
            value (str): value for IDD Field `inlet_65_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_65_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_65_node_name`')

        self._data["Inlet 65 Node Name"] = value

    @property
    def inlet_66_node_name(self):
        """Get inlet_66_node_name

        Returns:
            str: the value of `inlet_66_node_name` or None if not set
        """
        return self._data["Inlet 66 Node Name"]

    @inlet_66_node_name.setter
    def inlet_66_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_66_node_name`

        Args:
            value (str): value for IDD Field `inlet_66_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_66_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_66_node_name`')

        self._data["Inlet 66 Node Name"] = value

    @property
    def inlet_67_node_name(self):
        """Get inlet_67_node_name

        Returns:
            str: the value of `inlet_67_node_name` or None if not set
        """
        return self._data["Inlet 67 Node Name"]

    @inlet_67_node_name.setter
    def inlet_67_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_67_node_name`

        Args:
            value (str): value for IDD Field `inlet_67_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_67_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_67_node_name`')

        self._data["Inlet 67 Node Name"] = value

    @property
    def inlet_68_node_name(self):
        """Get inlet_68_node_name

        Returns:
            str: the value of `inlet_68_node_name` or None if not set
        """
        return self._data["Inlet 68 Node Name"]

    @inlet_68_node_name.setter
    def inlet_68_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_68_node_name`

        Args:
            value (str): value for IDD Field `inlet_68_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_68_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_68_node_name`')

        self._data["Inlet 68 Node Name"] = value

    @property
    def inlet_69_node_name(self):
        """Get inlet_69_node_name

        Returns:
            str: the value of `inlet_69_node_name` or None if not set
        """
        return self._data["Inlet 69 Node Name"]

    @inlet_69_node_name.setter
    def inlet_69_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_69_node_name`

        Args:
            value (str): value for IDD Field `inlet_69_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_69_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_69_node_name`')

        self._data["Inlet 69 Node Name"] = value

    @property
    def inlet_70_node_name(self):
        """Get inlet_70_node_name

        Returns:
            str: the value of `inlet_70_node_name` or None if not set
        """
        return self._data["Inlet 70 Node Name"]

    @inlet_70_node_name.setter
    def inlet_70_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_70_node_name`

        Args:
            value (str): value for IDD Field `inlet_70_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_70_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_70_node_name`')

        self._data["Inlet 70 Node Name"] = value

    @property
    def inlet_71_node_name(self):
        """Get inlet_71_node_name

        Returns:
            str: the value of `inlet_71_node_name` or None if not set
        """
        return self._data["Inlet 71 Node Name"]

    @inlet_71_node_name.setter
    def inlet_71_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_71_node_name`

        Args:
            value (str): value for IDD Field `inlet_71_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_71_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_71_node_name`')

        self._data["Inlet 71 Node Name"] = value

    @property
    def inlet_72_node_name(self):
        """Get inlet_72_node_name

        Returns:
            str: the value of `inlet_72_node_name` or None if not set
        """
        return self._data["Inlet 72 Node Name"]

    @inlet_72_node_name.setter
    def inlet_72_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_72_node_name`

        Args:
            value (str): value for IDD Field `inlet_72_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_72_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_72_node_name`')

        self._data["Inlet 72 Node Name"] = value

    @property
    def inlet_73_node_name(self):
        """Get inlet_73_node_name

        Returns:
            str: the value of `inlet_73_node_name` or None if not set
        """
        return self._data["Inlet 73 Node Name"]

    @inlet_73_node_name.setter
    def inlet_73_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_73_node_name`

        Args:
            value (str): value for IDD Field `inlet_73_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_73_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_73_node_name`')

        self._data["Inlet 73 Node Name"] = value

    @property
    def inlet_74_node_name(self):
        """Get inlet_74_node_name

        Returns:
            str: the value of `inlet_74_node_name` or None if not set
        """
        return self._data["Inlet 74 Node Name"]

    @inlet_74_node_name.setter
    def inlet_74_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_74_node_name`

        Args:
            value (str): value for IDD Field `inlet_74_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_74_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_74_node_name`')

        self._data["Inlet 74 Node Name"] = value

    @property
    def inlet_75_node_name(self):
        """Get inlet_75_node_name

        Returns:
            str: the value of `inlet_75_node_name` or None if not set
        """
        return self._data["Inlet 75 Node Name"]

    @inlet_75_node_name.setter
    def inlet_75_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_75_node_name`

        Args:
            value (str): value for IDD Field `inlet_75_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_75_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_75_node_name`')

        self._data["Inlet 75 Node Name"] = value

    @property
    def inlet_76_node_name(self):
        """Get inlet_76_node_name

        Returns:
            str: the value of `inlet_76_node_name` or None if not set
        """
        return self._data["Inlet 76 Node Name"]

    @inlet_76_node_name.setter
    def inlet_76_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_76_node_name`

        Args:
            value (str): value for IDD Field `inlet_76_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_76_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_76_node_name`')

        self._data["Inlet 76 Node Name"] = value

    @property
    def inlet_77_node_name(self):
        """Get inlet_77_node_name

        Returns:
            str: the value of `inlet_77_node_name` or None if not set
        """
        return self._data["Inlet 77 Node Name"]

    @inlet_77_node_name.setter
    def inlet_77_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_77_node_name`

        Args:
            value (str): value for IDD Field `inlet_77_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_77_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_77_node_name`')

        self._data["Inlet 77 Node Name"] = value

    @property
    def inlet_78_node_name(self):
        """Get inlet_78_node_name

        Returns:
            str: the value of `inlet_78_node_name` or None if not set
        """
        return self._data["Inlet 78 Node Name"]

    @inlet_78_node_name.setter
    def inlet_78_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_78_node_name`

        Args:
            value (str): value for IDD Field `inlet_78_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_78_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_78_node_name`')

        self._data["Inlet 78 Node Name"] = value

    @property
    def inlet_79_node_name(self):
        """Get inlet_79_node_name

        Returns:
            str: the value of `inlet_79_node_name` or None if not set
        """
        return self._data["Inlet 79 Node Name"]

    @inlet_79_node_name.setter
    def inlet_79_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_79_node_name`

        Args:
            value (str): value for IDD Field `inlet_79_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_79_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_79_node_name`')

        self._data["Inlet 79 Node Name"] = value

    @property
    def inlet_80_node_name(self):
        """Get inlet_80_node_name

        Returns:
            str: the value of `inlet_80_node_name` or None if not set
        """
        return self._data["Inlet 80 Node Name"]

    @inlet_80_node_name.setter
    def inlet_80_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_80_node_name`

        Args:
            value (str): value for IDD Field `inlet_80_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_80_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_80_node_name`')

        self._data["Inlet 80 Node Name"] = value

    @property
    def inlet_81_node_name(self):
        """Get inlet_81_node_name

        Returns:
            str: the value of `inlet_81_node_name` or None if not set
        """
        return self._data["Inlet 81 Node Name"]

    @inlet_81_node_name.setter
    def inlet_81_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_81_node_name`

        Args:
            value (str): value for IDD Field `inlet_81_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_81_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_81_node_name`')

        self._data["Inlet 81 Node Name"] = value

    @property
    def inlet_82_node_name(self):
        """Get inlet_82_node_name

        Returns:
            str: the value of `inlet_82_node_name` or None if not set
        """
        return self._data["Inlet 82 Node Name"]

    @inlet_82_node_name.setter
    def inlet_82_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_82_node_name`

        Args:
            value (str): value for IDD Field `inlet_82_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_82_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_82_node_name`')

        self._data["Inlet 82 Node Name"] = value

    @property
    def inlet_83_node_name(self):
        """Get inlet_83_node_name

        Returns:
            str: the value of `inlet_83_node_name` or None if not set
        """
        return self._data["Inlet 83 Node Name"]

    @inlet_83_node_name.setter
    def inlet_83_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_83_node_name`

        Args:
            value (str): value for IDD Field `inlet_83_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_83_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_83_node_name`')

        self._data["Inlet 83 Node Name"] = value

    @property
    def inlet_84_node_name(self):
        """Get inlet_84_node_name

        Returns:
            str: the value of `inlet_84_node_name` or None if not set
        """
        return self._data["Inlet 84 Node Name"]

    @inlet_84_node_name.setter
    def inlet_84_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_84_node_name`

        Args:
            value (str): value for IDD Field `inlet_84_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_84_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_84_node_name`')

        self._data["Inlet 84 Node Name"] = value

    @property
    def inlet_85_node_name(self):
        """Get inlet_85_node_name

        Returns:
            str: the value of `inlet_85_node_name` or None if not set
        """
        return self._data["Inlet 85 Node Name"]

    @inlet_85_node_name.setter
    def inlet_85_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_85_node_name`

        Args:
            value (str): value for IDD Field `inlet_85_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_85_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_85_node_name`')

        self._data["Inlet 85 Node Name"] = value

    @property
    def inlet_86_node_name(self):
        """Get inlet_86_node_name

        Returns:
            str: the value of `inlet_86_node_name` or None if not set
        """
        return self._data["Inlet 86 Node Name"]

    @inlet_86_node_name.setter
    def inlet_86_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_86_node_name`

        Args:
            value (str): value for IDD Field `inlet_86_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_86_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_86_node_name`')

        self._data["Inlet 86 Node Name"] = value

    @property
    def inlet_87_node_name(self):
        """Get inlet_87_node_name

        Returns:
            str: the value of `inlet_87_node_name` or None if not set
        """
        return self._data["Inlet 87 Node Name"]

    @inlet_87_node_name.setter
    def inlet_87_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_87_node_name`

        Args:
            value (str): value for IDD Field `inlet_87_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_87_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_87_node_name`')

        self._data["Inlet 87 Node Name"] = value

    @property
    def inlet_88_node_name(self):
        """Get inlet_88_node_name

        Returns:
            str: the value of `inlet_88_node_name` or None if not set
        """
        return self._data["Inlet 88 Node Name"]

    @inlet_88_node_name.setter
    def inlet_88_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_88_node_name`

        Args:
            value (str): value for IDD Field `inlet_88_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_88_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_88_node_name`')

        self._data["Inlet 88 Node Name"] = value

    @property
    def inlet_89_node_name(self):
        """Get inlet_89_node_name

        Returns:
            str: the value of `inlet_89_node_name` or None if not set
        """
        return self._data["Inlet 89 Node Name"]

    @inlet_89_node_name.setter
    def inlet_89_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_89_node_name`

        Args:
            value (str): value for IDD Field `inlet_89_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_89_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_89_node_name`')

        self._data["Inlet 89 Node Name"] = value

    @property
    def inlet_90_node_name(self):
        """Get inlet_90_node_name

        Returns:
            str: the value of `inlet_90_node_name` or None if not set
        """
        return self._data["Inlet 90 Node Name"]

    @inlet_90_node_name.setter
    def inlet_90_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_90_node_name`

        Args:
            value (str): value for IDD Field `inlet_90_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_90_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_90_node_name`')

        self._data["Inlet 90 Node Name"] = value

    @property
    def inlet_91_node_name(self):
        """Get inlet_91_node_name

        Returns:
            str: the value of `inlet_91_node_name` or None if not set
        """
        return self._data["Inlet 91 Node Name"]

    @inlet_91_node_name.setter
    def inlet_91_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_91_node_name`

        Args:
            value (str): value for IDD Field `inlet_91_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_91_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_91_node_name`')

        self._data["Inlet 91 Node Name"] = value

    @property
    def inlet_92_node_name(self):
        """Get inlet_92_node_name

        Returns:
            str: the value of `inlet_92_node_name` or None if not set
        """
        return self._data["Inlet 92 Node Name"]

    @inlet_92_node_name.setter
    def inlet_92_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_92_node_name`

        Args:
            value (str): value for IDD Field `inlet_92_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_92_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_92_node_name`')

        self._data["Inlet 92 Node Name"] = value

    @property
    def inlet_93_node_name(self):
        """Get inlet_93_node_name

        Returns:
            str: the value of `inlet_93_node_name` or None if not set
        """
        return self._data["Inlet 93 Node Name"]

    @inlet_93_node_name.setter
    def inlet_93_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_93_node_name`

        Args:
            value (str): value for IDD Field `inlet_93_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_93_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_93_node_name`')

        self._data["Inlet 93 Node Name"] = value

    @property
    def inlet_94_node_name(self):
        """Get inlet_94_node_name

        Returns:
            str: the value of `inlet_94_node_name` or None if not set
        """
        return self._data["Inlet 94 Node Name"]

    @inlet_94_node_name.setter
    def inlet_94_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_94_node_name`

        Args:
            value (str): value for IDD Field `inlet_94_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_94_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_94_node_name`')

        self._data["Inlet 94 Node Name"] = value

    @property
    def inlet_95_node_name(self):
        """Get inlet_95_node_name

        Returns:
            str: the value of `inlet_95_node_name` or None if not set
        """
        return self._data["Inlet 95 Node Name"]

    @inlet_95_node_name.setter
    def inlet_95_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_95_node_name`

        Args:
            value (str): value for IDD Field `inlet_95_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_95_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_95_node_name`')

        self._data["Inlet 95 Node Name"] = value

    @property
    def inlet_96_node_name(self):
        """Get inlet_96_node_name

        Returns:
            str: the value of `inlet_96_node_name` or None if not set
        """
        return self._data["Inlet 96 Node Name"]

    @inlet_96_node_name.setter
    def inlet_96_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_96_node_name`

        Args:
            value (str): value for IDD Field `inlet_96_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_96_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_96_node_name`')

        self._data["Inlet 96 Node Name"] = value

    @property
    def inlet_97_node_name(self):
        """Get inlet_97_node_name

        Returns:
            str: the value of `inlet_97_node_name` or None if not set
        """
        return self._data["Inlet 97 Node Name"]

    @inlet_97_node_name.setter
    def inlet_97_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_97_node_name`

        Args:
            value (str): value for IDD Field `inlet_97_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_97_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_97_node_name`')

        self._data["Inlet 97 Node Name"] = value

    @property
    def inlet_98_node_name(self):
        """Get inlet_98_node_name

        Returns:
            str: the value of `inlet_98_node_name` or None if not set
        """
        return self._data["Inlet 98 Node Name"]

    @inlet_98_node_name.setter
    def inlet_98_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_98_node_name`

        Args:
            value (str): value for IDD Field `inlet_98_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_98_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_98_node_name`')

        self._data["Inlet 98 Node Name"] = value

    @property
    def inlet_99_node_name(self):
        """Get inlet_99_node_name

        Returns:
            str: the value of `inlet_99_node_name` or None if not set
        """
        return self._data["Inlet 99 Node Name"]

    @inlet_99_node_name.setter
    def inlet_99_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_99_node_name`

        Args:
            value (str): value for IDD Field `inlet_99_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_99_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_99_node_name`')

        self._data["Inlet 99 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @property
    def inlet_100_node_name(self):
        """Get inlet_100_node_name

        Returns:
            str: the value of `inlet_100_node_name` or None if not set
        """
        return self._data["Inlet 100 Node Name"]

    @inlet_100_node_name.setter
    def inlet_100_node_name(self, value=None):
        """  Corresponds to IDD Field `inlet_100_node_name`

        Args:
            value (str): value for IDD Field `inlet_100_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inlet_100_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_100_node_name`')

        self._data["Inlet 100 Node Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.zone_name))
        out.append(self._to_str(self.zone_node_name))
        out.append(self._to_str(self.outlet_node_name))
        out.append(self._to_str(self.induced_air_outlet_node_or_nodelist_name))
        out.append(self._to_str(self.inlet_1_node_name))
        out.append(self._to_str(self.inlet_2_node_name))
        out.append(self._to_str(self.inlet_3_node_name))
        out.append(self._to_str(self.inlet_4_node_name))
        out.append(self._to_str(self.inlet_5_node_name))
        out.append(self._to_str(self.inlet_6_node_name))
        out.append(self._to_str(self.inlet_7_node_name))
        out.append(self._to_str(self.inlet_8_node_name))
        out.append(self._to_str(self.inlet_9_node_name))
        out.append(self._to_str(self.inlet_10_node_name))
        out.append(self._to_str(self.inlet_11_node_name))
        out.append(self._to_str(self.inlet_12_node_name))
        out.append(self._to_str(self.inlet_13_node_name))
        out.append(self._to_str(self.inlet_14_node_name))
        out.append(self._to_str(self.inlet_15_node_name))
        out.append(self._to_str(self.inlet_16_node_name))
        out.append(self._to_str(self.inlet_17_node_name))
        out.append(self._to_str(self.inlet_18_node_name))
        out.append(self._to_str(self.inlet_19_node_name))
        out.append(self._to_str(self.inlet_20_node_name))
        out.append(self._to_str(self.inlet_21_node_name))
        out.append(self._to_str(self.inlet_22_node_name))
        out.append(self._to_str(self.inlet_23_node_name))
        out.append(self._to_str(self.inlet_24_node_name))
        out.append(self._to_str(self.inlet_25_node_name))
        out.append(self._to_str(self.inlet_26_node_name))
        out.append(self._to_str(self.inlet_27_node_name))
        out.append(self._to_str(self.inlet_28_node_name))
        out.append(self._to_str(self.inlet_29_node_name))
        out.append(self._to_str(self.inlet_30_node_name))
        out.append(self._to_str(self.inlet_31_node_name))
        out.append(self._to_str(self.inlet_32_node_name))
        out.append(self._to_str(self.inlet_33_node_name))
        out.append(self._to_str(self.inlet_34_node_name))
        out.append(self._to_str(self.inlet_35_node_name))
        out.append(self._to_str(self.inlet_36_node_name))
        out.append(self._to_str(self.inlet_37_node_name))
        out.append(self._to_str(self.inlet_38_node_name))
        out.append(self._to_str(self.inlet_39_node_name))
        out.append(self._to_str(self.inlet_40_node_name))
        out.append(self._to_str(self.inlet_41_node_name))
        out.append(self._to_str(self.inlet_42_node_name))
        out.append(self._to_str(self.inlet_43_node_name))
        out.append(self._to_str(self.inlet_44_node_name))
        out.append(self._to_str(self.inlet_45_node_name))
        out.append(self._to_str(self.inlet_46_node_name))
        out.append(self._to_str(self.inlet_47_node_name))
        out.append(self._to_str(self.inlet_48_node_name))
        out.append(self._to_str(self.inlet_49_node_name))
        out.append(self._to_str(self.inlet_50_node_name))
        out.append(self._to_str(self.inlet_51_node_name))
        out.append(self._to_str(self.inlet_52_node_name))
        out.append(self._to_str(self.inlet_53_node_name))
        out.append(self._to_str(self.inlet_54_node_name))
        out.append(self._to_str(self.inlet_55_node_name))
        out.append(self._to_str(self.inlet_56_node_name))
        out.append(self._to_str(self.inlet_57_node_name))
        out.append(self._to_str(self.inlet_58_node_name))
        out.append(self._to_str(self.inlet_59_node_name))
        out.append(self._to_str(self.inlet_60_node_name))
        out.append(self._to_str(self.inlet_61_node_name))
        out.append(self._to_str(self.inlet_62_node_name))
        out.append(self._to_str(self.inlet_63_node_name))
        out.append(self._to_str(self.inlet_64_node_name))
        out.append(self._to_str(self.inlet_65_node_name))
        out.append(self._to_str(self.inlet_66_node_name))
        out.append(self._to_str(self.inlet_67_node_name))
        out.append(self._to_str(self.inlet_68_node_name))
        out.append(self._to_str(self.inlet_69_node_name))
        out.append(self._to_str(self.inlet_70_node_name))
        out.append(self._to_str(self.inlet_71_node_name))
        out.append(self._to_str(self.inlet_72_node_name))
        out.append(self._to_str(self.inlet_73_node_name))
        out.append(self._to_str(self.inlet_74_node_name))
        out.append(self._to_str(self.inlet_75_node_name))
        out.append(self._to_str(self.inlet_76_node_name))
        out.append(self._to_str(self.inlet_77_node_name))
        out.append(self._to_str(self.inlet_78_node_name))
        out.append(self._to_str(self.inlet_79_node_name))
        out.append(self._to_str(self.inlet_80_node_name))
        out.append(self._to_str(self.inlet_81_node_name))
        out.append(self._to_str(self.inlet_82_node_name))
        out.append(self._to_str(self.inlet_83_node_name))
        out.append(self._to_str(self.inlet_84_node_name))
        out.append(self._to_str(self.inlet_85_node_name))
        out.append(self._to_str(self.inlet_86_node_name))
        out.append(self._to_str(self.inlet_87_node_name))
        out.append(self._to_str(self.inlet_88_node_name))
        out.append(self._to_str(self.inlet_89_node_name))
        out.append(self._to_str(self.inlet_90_node_name))
        out.append(self._to_str(self.inlet_91_node_name))
        out.append(self._to_str(self.inlet_92_node_name))
        out.append(self._to_str(self.inlet_93_node_name))
        out.append(self._to_str(self.inlet_94_node_name))
        out.append(self._to_str(self.inlet_95_node_name))
        out.append(self._to_str(self.inlet_96_node_name))
        out.append(self._to_str(self.inlet_97_node_name))
        out.append(self._to_str(self.inlet_98_node_name))
        out.append(self._to_str(self.inlet_99_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        out.append(self._to_str(self.inlet_100_node_name))
        return ",".join(out)

class AirLoopHvacReturnPath(object):
    """ Corresponds to IDD object `AirLoopHVAC:ReturnPath`
        A return air path can only contain one AirLoopHVAC:ZoneMixer
        and one or more AirLoopHVAC:ReturnPlenum objects.
    """
    internal_name = "AirLoopHVAC:ReturnPath"
    field_count = 52

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `AirLoopHVAC:ReturnPath`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Return Air Path Outlet Node Name"] = None
        self._data["Component 1 Object Type"] = None
        self._data["Component 1 Name"] = None
        self._data["Component 2 Object Type"] = None
        self._data["Component 2 Name"] = None
        self._data["Component 3 Object Type"] = None
        self._data["Component 3 Name"] = None
        self._data["Component 4 Object Type"] = None
        self._data["Component 4 Name"] = None
        self._data["Component 5 Object Type"] = None
        self._data["Component 5 Name"] = None
        self._data["Component 6 Object Type"] = None
        self._data["Component 6 Name"] = None
        self._data["Component 7 Object Type"] = None
        self._data["Component 7 Name"] = None
        self._data["Component 8 Object Type"] = None
        self._data["Component 8 Name"] = None
        self._data["Component 9 Object Type"] = None
        self._data["Component 9 Name"] = None
        self._data["Component 10 Object Type"] = None
        self._data["Component 10 Name"] = None
        self._data["Component 11 Object Type"] = None
        self._data["Component 11 Name"] = None
        self._data["Component 12 Object Type"] = None
        self._data["Component 12 Name"] = None
        self._data["Component 13 Object Type"] = None
        self._data["Component 13 Name"] = None
        self._data["Component 14 Object Type"] = None
        self._data["Component 14 Name"] = None
        self._data["Component 15 Object Type"] = None
        self._data["Component 15 Name"] = None
        self._data["Component 16 Object Type"] = None
        self._data["Component 16 Name"] = None
        self._data["Component 17 Object Type"] = None
        self._data["Component 17 Name"] = None
        self._data["Component 18 Object Type"] = None
        self._data["Component 18 Name"] = None
        self._data["Component 19 Object Type"] = None
        self._data["Component 19 Name"] = None
        self._data["Component 20 Object Type"] = None
        self._data["Component 20 Name"] = None
        self._data["Component 21 Object Type"] = None
        self._data["Component 21 Name"] = None
        self._data["Component 22 Object Type"] = None
        self._data["Component 22 Name"] = None
        self._data["Component 23 Object Type"] = None
        self._data["Component 23 Name"] = None
        self._data["Component 24 Object Type"] = None
        self._data["Component 24 Name"] = None
        self._data["Component 25 Object Type"] = None
        self._data["Component 25 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.return_air_path_outlet_node_name = None
        else:
            self.return_air_path_outlet_node_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_object_type = None
        else:
            self.component_1_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_1_name = None
        else:
            self.component_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_object_type = None
        else:
            self.component_2_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_2_name = None
        else:
            self.component_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_object_type = None
        else:
            self.component_3_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_3_name = None
        else:
            self.component_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_object_type = None
        else:
            self.component_4_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_4_name = None
        else:
            self.component_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_object_type = None
        else:
            self.component_5_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_5_name = None
        else:
            self.component_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_object_type = None
        else:
            self.component_6_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_6_name = None
        else:
            self.component_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_object_type = None
        else:
            self.component_7_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_7_name = None
        else:
            self.component_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_object_type = None
        else:
            self.component_8_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_8_name = None
        else:
            self.component_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_9_object_type = None
        else:
            self.component_9_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_9_name = None
        else:
            self.component_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_10_object_type = None
        else:
            self.component_10_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_10_name = None
        else:
            self.component_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_11_object_type = None
        else:
            self.component_11_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_11_name = None
        else:
            self.component_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_12_object_type = None
        else:
            self.component_12_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_12_name = None
        else:
            self.component_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_13_object_type = None
        else:
            self.component_13_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_13_name = None
        else:
            self.component_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_14_object_type = None
        else:
            self.component_14_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_14_name = None
        else:
            self.component_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_15_object_type = None
        else:
            self.component_15_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_15_name = None
        else:
            self.component_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_16_object_type = None
        else:
            self.component_16_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_16_name = None
        else:
            self.component_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_17_object_type = None
        else:
            self.component_17_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_17_name = None
        else:
            self.component_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_18_object_type = None
        else:
            self.component_18_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_18_name = None
        else:
            self.component_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_19_object_type = None
        else:
            self.component_19_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_19_name = None
        else:
            self.component_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_20_object_type = None
        else:
            self.component_20_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_20_name = None
        else:
            self.component_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_21_object_type = None
        else:
            self.component_21_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_21_name = None
        else:
            self.component_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_22_object_type = None
        else:
            self.component_22_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_22_name = None
        else:
            self.component_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_23_object_type = None
        else:
            self.component_23_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_23_name = None
        else:
            self.component_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_24_object_type = None
        else:
            self.component_24_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_24_name = None
        else:
            self.component_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_25_object_type = None
        else:
            self.component_25_object_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.component_25_name = None
        else:
            self.component_25_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def return_air_path_outlet_node_name(self):
        """Get return_air_path_outlet_node_name

        Returns:
            str: the value of `return_air_path_outlet_node_name` or None if not set
        """
        return self._data["Return Air Path Outlet Node Name"]

    @return_air_path_outlet_node_name.setter
    def return_air_path_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `return_air_path_outlet_node_name`

        Args:
            value (str): value for IDD Field `return_air_path_outlet_node_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `return_air_path_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `return_air_path_outlet_node_name`')

        self._data["Return Air Path Outlet Node Name"] = value

    @property
    def component_1_object_type(self):
        """Get component_1_object_type

        Returns:
            str: the value of `component_1_object_type` or None if not set
        """
        return self._data["Component 1 Object Type"]

    @component_1_object_type.setter
    def component_1_object_type(self, value=None):
        """  Corresponds to IDD Field `component_1_object_type`

        Args:
            value (str): value for IDD Field `component_1_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_1_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_1_object_type`'.format(value))

        self._data["Component 1 Object Type"] = value

    @property
    def component_1_name(self):
        """Get component_1_name

        Returns:
            str: the value of `component_1_name` or None if not set
        """
        return self._data["Component 1 Name"]

    @component_1_name.setter
    def component_1_name(self, value=None):
        """  Corresponds to IDD Field `component_1_name`

        Args:
            value (str): value for IDD Field `component_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_1_name`')

        self._data["Component 1 Name"] = value

    @property
    def component_2_object_type(self):
        """Get component_2_object_type

        Returns:
            str: the value of `component_2_object_type` or None if not set
        """
        return self._data["Component 2 Object Type"]

    @component_2_object_type.setter
    def component_2_object_type(self, value=None):
        """  Corresponds to IDD Field `component_2_object_type`

        Args:
            value (str): value for IDD Field `component_2_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_2_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_2_object_type`'.format(value))

        self._data["Component 2 Object Type"] = value

    @property
    def component_2_name(self):
        """Get component_2_name

        Returns:
            str: the value of `component_2_name` or None if not set
        """
        return self._data["Component 2 Name"]

    @component_2_name.setter
    def component_2_name(self, value=None):
        """  Corresponds to IDD Field `component_2_name`

        Args:
            value (str): value for IDD Field `component_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_2_name`')

        self._data["Component 2 Name"] = value

    @property
    def component_3_object_type(self):
        """Get component_3_object_type

        Returns:
            str: the value of `component_3_object_type` or None if not set
        """
        return self._data["Component 3 Object Type"]

    @component_3_object_type.setter
    def component_3_object_type(self, value=None):
        """  Corresponds to IDD Field `component_3_object_type`

        Args:
            value (str): value for IDD Field `component_3_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_3_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_3_object_type`'.format(value))

        self._data["Component 3 Object Type"] = value

    @property
    def component_3_name(self):
        """Get component_3_name

        Returns:
            str: the value of `component_3_name` or None if not set
        """
        return self._data["Component 3 Name"]

    @component_3_name.setter
    def component_3_name(self, value=None):
        """  Corresponds to IDD Field `component_3_name`

        Args:
            value (str): value for IDD Field `component_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_3_name`')

        self._data["Component 3 Name"] = value

    @property
    def component_4_object_type(self):
        """Get component_4_object_type

        Returns:
            str: the value of `component_4_object_type` or None if not set
        """
        return self._data["Component 4 Object Type"]

    @component_4_object_type.setter
    def component_4_object_type(self, value=None):
        """  Corresponds to IDD Field `component_4_object_type`

        Args:
            value (str): value for IDD Field `component_4_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_4_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_4_object_type`'.format(value))

        self._data["Component 4 Object Type"] = value

    @property
    def component_4_name(self):
        """Get component_4_name

        Returns:
            str: the value of `component_4_name` or None if not set
        """
        return self._data["Component 4 Name"]

    @component_4_name.setter
    def component_4_name(self, value=None):
        """  Corresponds to IDD Field `component_4_name`

        Args:
            value (str): value for IDD Field `component_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_4_name`')

        self._data["Component 4 Name"] = value

    @property
    def component_5_object_type(self):
        """Get component_5_object_type

        Returns:
            str: the value of `component_5_object_type` or None if not set
        """
        return self._data["Component 5 Object Type"]

    @component_5_object_type.setter
    def component_5_object_type(self, value=None):
        """  Corresponds to IDD Field `component_5_object_type`

        Args:
            value (str): value for IDD Field `component_5_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_5_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_5_object_type`'.format(value))

        self._data["Component 5 Object Type"] = value

    @property
    def component_5_name(self):
        """Get component_5_name

        Returns:
            str: the value of `component_5_name` or None if not set
        """
        return self._data["Component 5 Name"]

    @component_5_name.setter
    def component_5_name(self, value=None):
        """  Corresponds to IDD Field `component_5_name`

        Args:
            value (str): value for IDD Field `component_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_5_name`')

        self._data["Component 5 Name"] = value

    @property
    def component_6_object_type(self):
        """Get component_6_object_type

        Returns:
            str: the value of `component_6_object_type` or None if not set
        """
        return self._data["Component 6 Object Type"]

    @component_6_object_type.setter
    def component_6_object_type(self, value=None):
        """  Corresponds to IDD Field `component_6_object_type`

        Args:
            value (str): value for IDD Field `component_6_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_6_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_6_object_type`'.format(value))

        self._data["Component 6 Object Type"] = value

    @property
    def component_6_name(self):
        """Get component_6_name

        Returns:
            str: the value of `component_6_name` or None if not set
        """
        return self._data["Component 6 Name"]

    @component_6_name.setter
    def component_6_name(self, value=None):
        """  Corresponds to IDD Field `component_6_name`

        Args:
            value (str): value for IDD Field `component_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_6_name`')

        self._data["Component 6 Name"] = value

    @property
    def component_7_object_type(self):
        """Get component_7_object_type

        Returns:
            str: the value of `component_7_object_type` or None if not set
        """
        return self._data["Component 7 Object Type"]

    @component_7_object_type.setter
    def component_7_object_type(self, value=None):
        """  Corresponds to IDD Field `component_7_object_type`

        Args:
            value (str): value for IDD Field `component_7_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_7_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_7_object_type`'.format(value))

        self._data["Component 7 Object Type"] = value

    @property
    def component_7_name(self):
        """Get component_7_name

        Returns:
            str: the value of `component_7_name` or None if not set
        """
        return self._data["Component 7 Name"]

    @component_7_name.setter
    def component_7_name(self, value=None):
        """  Corresponds to IDD Field `component_7_name`

        Args:
            value (str): value for IDD Field `component_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_7_name`')

        self._data["Component 7 Name"] = value

    @property
    def component_8_object_type(self):
        """Get component_8_object_type

        Returns:
            str: the value of `component_8_object_type` or None if not set
        """
        return self._data["Component 8 Object Type"]

    @component_8_object_type.setter
    def component_8_object_type(self, value=None):
        """  Corresponds to IDD Field `component_8_object_type`

        Args:
            value (str): value for IDD Field `component_8_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_8_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_8_object_type`'.format(value))

        self._data["Component 8 Object Type"] = value

    @property
    def component_8_name(self):
        """Get component_8_name

        Returns:
            str: the value of `component_8_name` or None if not set
        """
        return self._data["Component 8 Name"]

    @component_8_name.setter
    def component_8_name(self, value=None):
        """  Corresponds to IDD Field `component_8_name`

        Args:
            value (str): value for IDD Field `component_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_8_name`')

        self._data["Component 8 Name"] = value

    @property
    def component_9_object_type(self):
        """Get component_9_object_type

        Returns:
            str: the value of `component_9_object_type` or None if not set
        """
        return self._data["Component 9 Object Type"]

    @component_9_object_type.setter
    def component_9_object_type(self, value=None):
        """  Corresponds to IDD Field `component_9_object_type`

        Args:
            value (str): value for IDD Field `component_9_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_9_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_9_object_type`'.format(value))

        self._data["Component 9 Object Type"] = value

    @property
    def component_9_name(self):
        """Get component_9_name

        Returns:
            str: the value of `component_9_name` or None if not set
        """
        return self._data["Component 9 Name"]

    @component_9_name.setter
    def component_9_name(self, value=None):
        """  Corresponds to IDD Field `component_9_name`

        Args:
            value (str): value for IDD Field `component_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_9_name`')

        self._data["Component 9 Name"] = value

    @property
    def component_10_object_type(self):
        """Get component_10_object_type

        Returns:
            str: the value of `component_10_object_type` or None if not set
        """
        return self._data["Component 10 Object Type"]

    @component_10_object_type.setter
    def component_10_object_type(self, value=None):
        """  Corresponds to IDD Field `component_10_object_type`

        Args:
            value (str): value for IDD Field `component_10_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_10_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_10_object_type`'.format(value))

        self._data["Component 10 Object Type"] = value

    @property
    def component_10_name(self):
        """Get component_10_name

        Returns:
            str: the value of `component_10_name` or None if not set
        """
        return self._data["Component 10 Name"]

    @component_10_name.setter
    def component_10_name(self, value=None):
        """  Corresponds to IDD Field `component_10_name`

        Args:
            value (str): value for IDD Field `component_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_10_name`')

        self._data["Component 10 Name"] = value

    @property
    def component_11_object_type(self):
        """Get component_11_object_type

        Returns:
            str: the value of `component_11_object_type` or None if not set
        """
        return self._data["Component 11 Object Type"]

    @component_11_object_type.setter
    def component_11_object_type(self, value=None):
        """  Corresponds to IDD Field `component_11_object_type`

        Args:
            value (str): value for IDD Field `component_11_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_11_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_11_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_11_object_type`'.format(value))

        self._data["Component 11 Object Type"] = value

    @property
    def component_11_name(self):
        """Get component_11_name

        Returns:
            str: the value of `component_11_name` or None if not set
        """
        return self._data["Component 11 Name"]

    @component_11_name.setter
    def component_11_name(self, value=None):
        """  Corresponds to IDD Field `component_11_name`

        Args:
            value (str): value for IDD Field `component_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_11_name`')

        self._data["Component 11 Name"] = value

    @property
    def component_12_object_type(self):
        """Get component_12_object_type

        Returns:
            str: the value of `component_12_object_type` or None if not set
        """
        return self._data["Component 12 Object Type"]

    @component_12_object_type.setter
    def component_12_object_type(self, value=None):
        """  Corresponds to IDD Field `component_12_object_type`

        Args:
            value (str): value for IDD Field `component_12_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_12_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_12_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_12_object_type`'.format(value))

        self._data["Component 12 Object Type"] = value

    @property
    def component_12_name(self):
        """Get component_12_name

        Returns:
            str: the value of `component_12_name` or None if not set
        """
        return self._data["Component 12 Name"]

    @component_12_name.setter
    def component_12_name(self, value=None):
        """  Corresponds to IDD Field `component_12_name`

        Args:
            value (str): value for IDD Field `component_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_12_name`')

        self._data["Component 12 Name"] = value

    @property
    def component_13_object_type(self):
        """Get component_13_object_type

        Returns:
            str: the value of `component_13_object_type` or None if not set
        """
        return self._data["Component 13 Object Type"]

    @component_13_object_type.setter
    def component_13_object_type(self, value=None):
        """  Corresponds to IDD Field `component_13_object_type`

        Args:
            value (str): value for IDD Field `component_13_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_13_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_13_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_13_object_type`'.format(value))

        self._data["Component 13 Object Type"] = value

    @property
    def component_13_name(self):
        """Get component_13_name

        Returns:
            str: the value of `component_13_name` or None if not set
        """
        return self._data["Component 13 Name"]

    @component_13_name.setter
    def component_13_name(self, value=None):
        """  Corresponds to IDD Field `component_13_name`

        Args:
            value (str): value for IDD Field `component_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_13_name`')

        self._data["Component 13 Name"] = value

    @property
    def component_14_object_type(self):
        """Get component_14_object_type

        Returns:
            str: the value of `component_14_object_type` or None if not set
        """
        return self._data["Component 14 Object Type"]

    @component_14_object_type.setter
    def component_14_object_type(self, value=None):
        """  Corresponds to IDD Field `component_14_object_type`

        Args:
            value (str): value for IDD Field `component_14_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_14_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_14_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_14_object_type`'.format(value))

        self._data["Component 14 Object Type"] = value

    @property
    def component_14_name(self):
        """Get component_14_name

        Returns:
            str: the value of `component_14_name` or None if not set
        """
        return self._data["Component 14 Name"]

    @component_14_name.setter
    def component_14_name(self, value=None):
        """  Corresponds to IDD Field `component_14_name`

        Args:
            value (str): value for IDD Field `component_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_14_name`')

        self._data["Component 14 Name"] = value

    @property
    def component_15_object_type(self):
        """Get component_15_object_type

        Returns:
            str: the value of `component_15_object_type` or None if not set
        """
        return self._data["Component 15 Object Type"]

    @component_15_object_type.setter
    def component_15_object_type(self, value=None):
        """  Corresponds to IDD Field `component_15_object_type`

        Args:
            value (str): value for IDD Field `component_15_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_15_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_15_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_15_object_type`'.format(value))

        self._data["Component 15 Object Type"] = value

    @property
    def component_15_name(self):
        """Get component_15_name

        Returns:
            str: the value of `component_15_name` or None if not set
        """
        return self._data["Component 15 Name"]

    @component_15_name.setter
    def component_15_name(self, value=None):
        """  Corresponds to IDD Field `component_15_name`

        Args:
            value (str): value for IDD Field `component_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_15_name`')

        self._data["Component 15 Name"] = value

    @property
    def component_16_object_type(self):
        """Get component_16_object_type

        Returns:
            str: the value of `component_16_object_type` or None if not set
        """
        return self._data["Component 16 Object Type"]

    @component_16_object_type.setter
    def component_16_object_type(self, value=None):
        """  Corresponds to IDD Field `component_16_object_type`

        Args:
            value (str): value for IDD Field `component_16_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_16_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_16_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_16_object_type`'.format(value))

        self._data["Component 16 Object Type"] = value

    @property
    def component_16_name(self):
        """Get component_16_name

        Returns:
            str: the value of `component_16_name` or None if not set
        """
        return self._data["Component 16 Name"]

    @component_16_name.setter
    def component_16_name(self, value=None):
        """  Corresponds to IDD Field `component_16_name`

        Args:
            value (str): value for IDD Field `component_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_16_name`')

        self._data["Component 16 Name"] = value

    @property
    def component_17_object_type(self):
        """Get component_17_object_type

        Returns:
            str: the value of `component_17_object_type` or None if not set
        """
        return self._data["Component 17 Object Type"]

    @component_17_object_type.setter
    def component_17_object_type(self, value=None):
        """  Corresponds to IDD Field `component_17_object_type`

        Args:
            value (str): value for IDD Field `component_17_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_17_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_17_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_17_object_type`'.format(value))

        self._data["Component 17 Object Type"] = value

    @property
    def component_17_name(self):
        """Get component_17_name

        Returns:
            str: the value of `component_17_name` or None if not set
        """
        return self._data["Component 17 Name"]

    @component_17_name.setter
    def component_17_name(self, value=None):
        """  Corresponds to IDD Field `component_17_name`

        Args:
            value (str): value for IDD Field `component_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_17_name`')

        self._data["Component 17 Name"] = value

    @property
    def component_18_object_type(self):
        """Get component_18_object_type

        Returns:
            str: the value of `component_18_object_type` or None if not set
        """
        return self._data["Component 18 Object Type"]

    @component_18_object_type.setter
    def component_18_object_type(self, value=None):
        """  Corresponds to IDD Field `component_18_object_type`

        Args:
            value (str): value for IDD Field `component_18_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_18_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_18_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_18_object_type`'.format(value))

        self._data["Component 18 Object Type"] = value

    @property
    def component_18_name(self):
        """Get component_18_name

        Returns:
            str: the value of `component_18_name` or None if not set
        """
        return self._data["Component 18 Name"]

    @component_18_name.setter
    def component_18_name(self, value=None):
        """  Corresponds to IDD Field `component_18_name`

        Args:
            value (str): value for IDD Field `component_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_18_name`')

        self._data["Component 18 Name"] = value

    @property
    def component_19_object_type(self):
        """Get component_19_object_type

        Returns:
            str: the value of `component_19_object_type` or None if not set
        """
        return self._data["Component 19 Object Type"]

    @component_19_object_type.setter
    def component_19_object_type(self, value=None):
        """  Corresponds to IDD Field `component_19_object_type`

        Args:
            value (str): value for IDD Field `component_19_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_19_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_19_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_19_object_type`'.format(value))

        self._data["Component 19 Object Type"] = value

    @property
    def component_19_name(self):
        """Get component_19_name

        Returns:
            str: the value of `component_19_name` or None if not set
        """
        return self._data["Component 19 Name"]

    @component_19_name.setter
    def component_19_name(self, value=None):
        """  Corresponds to IDD Field `component_19_name`

        Args:
            value (str): value for IDD Field `component_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_19_name`')

        self._data["Component 19 Name"] = value

    @property
    def component_20_object_type(self):
        """Get component_20_object_type

        Returns:
            str: the value of `component_20_object_type` or None if not set
        """
        return self._data["Component 20 Object Type"]

    @component_20_object_type.setter
    def component_20_object_type(self, value=None):
        """  Corresponds to IDD Field `component_20_object_type`

        Args:
            value (str): value for IDD Field `component_20_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_20_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_20_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_20_object_type`'.format(value))

        self._data["Component 20 Object Type"] = value

    @property
    def component_20_name(self):
        """Get component_20_name

        Returns:
            str: the value of `component_20_name` or None if not set
        """
        return self._data["Component 20 Name"]

    @component_20_name.setter
    def component_20_name(self, value=None):
        """  Corresponds to IDD Field `component_20_name`

        Args:
            value (str): value for IDD Field `component_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_20_name`')

        self._data["Component 20 Name"] = value

    @property
    def component_21_object_type(self):
        """Get component_21_object_type

        Returns:
            str: the value of `component_21_object_type` or None if not set
        """
        return self._data["Component 21 Object Type"]

    @component_21_object_type.setter
    def component_21_object_type(self, value=None):
        """  Corresponds to IDD Field `component_21_object_type`

        Args:
            value (str): value for IDD Field `component_21_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_21_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_21_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_21_object_type`'.format(value))

        self._data["Component 21 Object Type"] = value

    @property
    def component_21_name(self):
        """Get component_21_name

        Returns:
            str: the value of `component_21_name` or None if not set
        """
        return self._data["Component 21 Name"]

    @component_21_name.setter
    def component_21_name(self, value=None):
        """  Corresponds to IDD Field `component_21_name`

        Args:
            value (str): value for IDD Field `component_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_21_name`')

        self._data["Component 21 Name"] = value

    @property
    def component_22_object_type(self):
        """Get component_22_object_type

        Returns:
            str: the value of `component_22_object_type` or None if not set
        """
        return self._data["Component 22 Object Type"]

    @component_22_object_type.setter
    def component_22_object_type(self, value=None):
        """  Corresponds to IDD Field `component_22_object_type`

        Args:
            value (str): value for IDD Field `component_22_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_22_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_22_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_22_object_type`'.format(value))

        self._data["Component 22 Object Type"] = value

    @property
    def component_22_name(self):
        """Get component_22_name

        Returns:
            str: the value of `component_22_name` or None if not set
        """
        return self._data["Component 22 Name"]

    @component_22_name.setter
    def component_22_name(self, value=None):
        """  Corresponds to IDD Field `component_22_name`

        Args:
            value (str): value for IDD Field `component_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_22_name`')

        self._data["Component 22 Name"] = value

    @property
    def component_23_object_type(self):
        """Get component_23_object_type

        Returns:
            str: the value of `component_23_object_type` or None if not set
        """
        return self._data["Component 23 Object Type"]

    @component_23_object_type.setter
    def component_23_object_type(self, value=None):
        """  Corresponds to IDD Field `component_23_object_type`

        Args:
            value (str): value for IDD Field `component_23_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_23_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_23_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_23_object_type`'.format(value))

        self._data["Component 23 Object Type"] = value

    @property
    def component_23_name(self):
        """Get component_23_name

        Returns:
            str: the value of `component_23_name` or None if not set
        """
        return self._data["Component 23 Name"]

    @component_23_name.setter
    def component_23_name(self, value=None):
        """  Corresponds to IDD Field `component_23_name`

        Args:
            value (str): value for IDD Field `component_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_23_name`')

        self._data["Component 23 Name"] = value

    @property
    def component_24_object_type(self):
        """Get component_24_object_type

        Returns:
            str: the value of `component_24_object_type` or None if not set
        """
        return self._data["Component 24 Object Type"]

    @component_24_object_type.setter
    def component_24_object_type(self, value=None):
        """  Corresponds to IDD Field `component_24_object_type`

        Args:
            value (str): value for IDD Field `component_24_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_24_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_24_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_24_object_type`'.format(value))

        self._data["Component 24 Object Type"] = value

    @property
    def component_24_name(self):
        """Get component_24_name

        Returns:
            str: the value of `component_24_name` or None if not set
        """
        return self._data["Component 24 Name"]

    @component_24_name.setter
    def component_24_name(self, value=None):
        """  Corresponds to IDD Field `component_24_name`

        Args:
            value (str): value for IDD Field `component_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_24_name`')

        self._data["Component 24 Name"] = value

    @property
    def component_25_object_type(self):
        """Get component_25_object_type

        Returns:
            str: the value of `component_25_object_type` or None if not set
        """
        return self._data["Component 25 Object Type"]

    @component_25_object_type.setter
    def component_25_object_type(self, value=None):
        """  Corresponds to IDD Field `component_25_object_type`

        Args:
            value (str): value for IDD Field `component_25_object_type`
                Accepted values are:
                      - AirLoopHVAC:ZoneMixer
                      - AirLoopHVAC:ReturnPlenum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_25_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_25_object_type`')
            vals = set()
            vals.add("AirLoopHVAC:ZoneMixer")
            vals.add("AirLoopHVAC:ReturnPlenum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `component_25_object_type`'.format(value))

        self._data["Component 25 Object Type"] = value

    @property
    def component_25_name(self):
        """Get component_25_name

        Returns:
            str: the value of `component_25_name` or None if not set
        """
        return self._data["Component 25 Name"]

    @component_25_name.setter
    def component_25_name(self, value=None):
        """  Corresponds to IDD Field `component_25_name`

        Args:
            value (str): value for IDD Field `component_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `component_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `component_25_name`')

        self._data["Component 25 Name"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.return_air_path_outlet_node_name))
        out.append(self._to_str(self.component_1_object_type))
        out.append(self._to_str(self.component_1_name))
        out.append(self._to_str(self.component_2_object_type))
        out.append(self._to_str(self.component_2_name))
        out.append(self._to_str(self.component_3_object_type))
        out.append(self._to_str(self.component_3_name))
        out.append(self._to_str(self.component_4_object_type))
        out.append(self._to_str(self.component_4_name))
        out.append(self._to_str(self.component_5_object_type))
        out.append(self._to_str(self.component_5_name))
        out.append(self._to_str(self.component_6_object_type))
        out.append(self._to_str(self.component_6_name))
        out.append(self._to_str(self.component_7_object_type))
        out.append(self._to_str(self.component_7_name))
        out.append(self._to_str(self.component_8_object_type))
        out.append(self._to_str(self.component_8_name))
        out.append(self._to_str(self.component_9_object_type))
        out.append(self._to_str(self.component_9_name))
        out.append(self._to_str(self.component_10_object_type))
        out.append(self._to_str(self.component_10_name))
        out.append(self._to_str(self.component_11_object_type))
        out.append(self._to_str(self.component_11_name))
        out.append(self._to_str(self.component_12_object_type))
        out.append(self._to_str(self.component_12_name))
        out.append(self._to_str(self.component_13_object_type))
        out.append(self._to_str(self.component_13_name))
        out.append(self._to_str(self.component_14_object_type))
        out.append(self._to_str(self.component_14_name))
        out.append(self._to_str(self.component_15_object_type))
        out.append(self._to_str(self.component_15_name))
        out.append(self._to_str(self.component_16_object_type))
        out.append(self._to_str(self.component_16_name))
        out.append(self._to_str(self.component_17_object_type))
        out.append(self._to_str(self.component_17_name))
        out.append(self._to_str(self.component_18_object_type))
        out.append(self._to_str(self.component_18_name))
        out.append(self._to_str(self.component_19_object_type))
        out.append(self._to_str(self.component_19_name))
        out.append(self._to_str(self.component_20_object_type))
        out.append(self._to_str(self.component_20_name))
        out.append(self._to_str(self.component_21_object_type))
        out.append(self._to_str(self.component_21_name))
        out.append(self._to_str(self.component_22_object_type))
        out.append(self._to_str(self.component_22_name))
        out.append(self._to_str(self.component_23_object_type))
        out.append(self._to_str(self.component_23_name))
        out.append(self._to_str(self.component_24_object_type))
        out.append(self._to_str(self.component_24_name))
        out.append(self._to_str(self.component_25_object_type))
        out.append(self._to_str(self.component_25_name))
        return ",".join(out)